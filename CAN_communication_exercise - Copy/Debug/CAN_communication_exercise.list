
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008034  08008034  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008034  08008034  00018034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800803c  0800803c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c60  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001d5c  20001d5c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fa5a  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f96  00000000  00000000  0002fbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc8  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000972  00000000  00000000  00033828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002312b  00000000  00000000  0003419a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011058  00000000  00000000  000572c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c62a8  00000000  00000000  0006831d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003314  00000000  00000000  0012e5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001318dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f24 	.word	0x08007f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007f24 	.word	0x08007f24

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_HandleTypeDef hcan1;

uint8_t data[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead;
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80004dc:	f107 020c 	add.w	r2, r7, #12
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004e6:	f000 fd2e 	bl	8000f46 <HAL_CAN_GetRxMessage>

 80004ea:	2108      	movs	r1, #8
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004ee:	f007 f87f 	bl	80075f0 <CDC_Transmit_FS>
	  CDC_Transmit_FS((uint8_t*)rxPHead.DLC, 4);
	  CDC_Transmit_FS((uint8_t*)rxPHead.ExtId, 4);
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000118 	.word	0x20000118
 8000500:	20000124 	.word	0x20000124

08000504 <getState>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t* getState(){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	  switch(HAL_CAN_GetState(&hcan1)){
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <getState+0x48>)
 800050a:	f001 f85d 	bl	80015c8 <HAL_CAN_GetState>
 800050e:	4603      	mov	r3, r0
 8000510:	2b04      	cmp	r3, #4
 8000512:	d817      	bhi.n	8000544 <getState+0x40>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <getState+0x18>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000531 	.word	0x08000531
 8000520:	08000535 	.word	0x08000535
 8000524:	08000539 	.word	0x08000539
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000541 	.word	0x08000541
	  	  case 0x00U:
	  		  return (uint8_t*)"HAL_CAN_STATE_RESET\n";
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <getState+0x4c>)
 8000532:	e008      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x01U:
	  		  return (uint8_t*)"HAL_CAN_STATE_READY\n";
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <getState+0x50>)
 8000536:	e006      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x02U:
	  		  return (uint8_t*)"HAL_CAN_STATE_LISTENING\n";
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <getState+0x54>)
 800053a:	e004      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x03U:
	  		  return (uint8_t*)"HAL_CAN_STATE_SLEEP_PENDING\n";
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <getState+0x58>)
 800053e:	e002      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x04U:
	  		  return (uint8_t*)"HAL_CAN_STATE_SLEEP_ACTIVE\n";
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <getState+0x5c>)
 8000542:	e000      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  default:
	  		  return (uint8_t*)"HAL_CAN_STATE_ERROR\n";
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <getState+0x60>)
	  		  break;
	  }
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000124 	.word	0x20000124
 8000550:	08007f3c 	.word	0x08007f3c
 8000554:	08007f54 	.word	0x08007f54
 8000558:	08007f6c 	.word	0x08007f6c
 800055c:	08007f88 	.word	0x08007f88
 8000560:	08007fa8 	.word	0x08007fa8
 8000564:	08007fc4 	.word	0x08007fc4

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 faa9 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f859 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8fb 	bl	8000770 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800057a:	f006 ff5d 	bl	8007438 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800057e:	e005      	b.n	800058c <main+0x24>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000586:	4822      	ldr	r0, [pc, #136]	; (8000610 <main+0xa8>)
 8000588:	f001 fc3a 	bl	8001e00 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800058c:	2101      	movs	r1, #1
 800058e:	4821      	ldr	r0, [pc, #132]	; (8000614 <main+0xac>)
 8000590:	f001 fc1e 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f2      	beq.n	8000580 <main+0x18>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <main+0xa8>)
 80005a2:	f001 fc2d 	bl	8001e00 <HAL_GPIO_WritePin>

  uint8_t PRE[4] = {21, 42, 84, 210};
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <main+0xb0>)
 80005a8:	607b      	str	r3, [r7, #4]

  for(uint8_t i = 0; i < 5; i++){
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e01e      	b.n	80005ee <main+0x86>

	  if(IRQRX0 == 0 && IRQRX1 == 0){
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <main+0xb4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d116      	bne.n	80005e8 <main+0x80>
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <main+0xb8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d111      	bne.n	80005e8 <main+0x80>
		  HAL_CAN_DeInit(&hcan1);
 80005c4:	4817      	ldr	r0, [pc, #92]	; (8000624 <main+0xbc>)
 80005c6:	f000 fc0e 	bl	8000de6 <HAL_CAN_DeInit>
		  MX_CAN1_Init(PRE[i]);
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	3310      	adds	r3, #16
 80005ce:	443b      	add	r3, r7
 80005d0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f891 	bl	80006fc <MX_CAN1_Init>
		  HAL_CAN_Start(&hcan1);
 80005da:	4812      	ldr	r0, [pc, #72]	; (8000624 <main+0xbc>)
 80005dc:	f000 fc26 	bl	8000e2c <HAL_CAN_Start>
		  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 fae0 	bl	8000ba8 <HAL_Delay>
  for(uint8_t i = 0; i < 5; i++){
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	3301      	adds	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d9dd      	bls.n	80005b0 <main+0x48>
  }

//  if(HAL_CAN_Start(&hcan1) != HAL_OK){
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
//  }
  uint8_t* smth = getState();
 80005f4:	f7ff ff86 	bl	8000504 <getState>
 80005f8:	60b8      	str	r0, [r7, #8]

  CDC_Transmit_FS(smth, strlen((char*)smth));
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f7ff fde4 	bl	80001c8 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29b      	uxth	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f006 fff2 	bl	80075f0 <CDC_Transmit_FS>
//  CDC_Transmit_FS(smth, strlen((char*)smth));

//  uint8_t smth[6] = "sniff ";
//  uint16_t smth_len = 6;

  while (1)
 800060c:	e7fe      	b.n	800060c <main+0xa4>
 800060e:	bf00      	nop
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40020000 	.word	0x40020000
 8000618:	d2542a15 	.word	0xd2542a15
 800061c:	20000120 	.word	0x20000120
 8000620:	20000121 	.word	0x20000121
 8000624:	20000124 	.word	0x20000124

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fc48 	bl	8007ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fe3c 	bl	800332c <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f8b9 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f89d 	bl	800381c <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 f8a2 	bl	8000830 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(uint32_t Prescaler)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <MX_CAN1_Init+0x70>)
 8000708:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_CAN1_Init+0x6c>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_CAN1_Init+0x6c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000724:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000728:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_CAN1_Init+0x6c>)
 800072c:	2200      	movs	r2, #0
 800072e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000732:	2200      	movs	r2, #0
 8000734:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000738:	2200      	movs	r2, #0
 800073a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CAN1_Init+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CAN1_Init+0x6c>)
 800074a:	2200      	movs	r2, #0
 800074c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_CAN1_Init+0x6c>)
 8000750:	f000 fa4e 	bl	8000bf0 <HAL_CAN_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800075a:	f000 f869 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000124 	.word	0x20000124
 800076c:	40006400 	.word	0x40006400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xb4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_GPIO_Init+0xb4>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xb4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_GPIO_Init+0xb8>)
 80007e2:	f001 fb0d 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0xbc>)
 80007fa:	f001 f851 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xb8>)
 8000818:	f001 f842 	bl	80018a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020c00 	.word	0x40020c00
 800082c:	40020000 	.word	0x40020000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <HAL_CAN_MspInit+0xb4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d143      	bne.n	8000936 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_CAN_MspInit+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e6:	2303      	movs	r3, #3
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008f6:	2309      	movs	r3, #9
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <HAL_CAN_MspInit+0xbc>)
 8000902:	f000 ffcd 	bl	80018a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2013      	movs	r0, #19
 800090c:	f000 ff83 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000910:	2013      	movs	r0, #19
 8000912:	f000 ff9c 	bl	800184e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2014      	movs	r0, #20
 800091c:	f000 ff7b 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000920:	2014      	movs	r0, #20
 8000922:	f000 ff94 	bl	800184e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2015      	movs	r0, #21
 800092c:	f000 ff73 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000930:	2015      	movs	r0, #21
 8000932:	f000 ff8c 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40006400 	.word	0x40006400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00

0800094c <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_CAN_MspDeInit+0x40>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d112      	bne.n	8000984 <HAL_CAN_MspDeInit+0x38>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_CAN_MspDeInit+0x44>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_CAN_MspDeInit+0x44>)
 8000964:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800096a:	2103      	movs	r1, #3
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_CAN_MspDeInit+0x48>)
 800096e:	f001 f933 	bl	8001bd8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000972:	2013      	movs	r0, #19
 8000974:	f000 ff79 	bl	800186a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000978:	2014      	movs	r0, #20
 800097a:	f000 ff76 	bl	800186a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 800097e:	2015      	movs	r0, #21
 8000980:	f000 ff73 	bl	800186a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40006400 	.word	0x40006400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020c00 	.word	0x40020c00

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f8c0 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <CAN1_TX_IRQHandler+0x10>)
 80009f2:	f000 fbba 	bl	800116a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000124 	.word	0x20000124

08000a00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <CAN1_RX0_IRQHandler+0x14>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <CAN1_RX0_IRQHandler+0x18>)
 8000a0c:	f000 fbad 	bl	800116a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000120 	.word	0x20000120
 8000a18:	20000124 	.word	0x20000124

08000a1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <CAN1_RX1_IRQHandler+0x14>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <CAN1_RX1_IRQHandler+0x18>)
 8000a28:	f000 fb9f 	bl	800116a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000121 	.word	0x20000121
 8000a34:	20000124 	.word	0x20000124

08000a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <OTG_FS_IRQHandler+0x10>)
 8000a3e:	f001 fb48 	bl	80020d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001630 	.word	0x20001630

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f007 fa1d 	bl	8007edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd61 	bl	8000568 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ab4:	08008044 	.word	0x08008044
  ldr r2, =_sbss
 8000ab8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000abc:	20001d5c 	.word	0x20001d5c

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 fe87 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fea0 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fead 	bl	8001886 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 fe67 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000014c 	.word	0x2000014c

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2000014c 	.word	0x2000014c

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0ed      	b.n	8000dde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fe3c 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c24:	f7ff ffb4 	bl	8000b90 <HAL_GetTick>
 8000c28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c2a:	e012      	b.n	8000c52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c2c:	f7ff ffb0 	bl	8000b90 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d90b      	bls.n	8000c52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2205      	movs	r2, #5
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e0c5      	b.n	8000dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0e5      	beq.n	8000c2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0202 	bic.w	r2, r2, #2
 8000c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c70:	f7ff ff8e 	bl	8000b90 <HAL_GetTick>
 8000c74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c76:	e012      	b.n	8000c9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c78:	f7ff ff8a 	bl	8000b90 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b0a      	cmp	r3, #10
 8000c84:	d90b      	bls.n	8000c9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2205      	movs	r2, #5
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e09f      	b.n	8000dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1e5      	bne.n	8000c78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e1b      	ldrb	r3, [r3, #24]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7e5b      	ldrb	r3, [r3, #25]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d108      	bne.n	8000cf0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e007      	b.n	8000d00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e9b      	ldrb	r3, [r3, #26]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d108      	bne.n	8000d1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0220 	orr.w	r2, r2, #32
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0220 	bic.w	r2, r2, #32
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7edb      	ldrb	r3, [r3, #27]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0210 	bic.w	r2, r2, #16
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0210 	orr.w	r2, r2, #16
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7f1b      	ldrb	r3, [r3, #28]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0208 	orr.w	r2, r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e007      	b.n	8000d7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0208 	bic.w	r2, r2, #8
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7f5b      	ldrb	r3, [r3, #29]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 0204 	orr.w	r2, r2, #4
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0204 	bic.w	r2, r2, #4
 8000da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	ea42 0103 	orr.w	r1, r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e015      	b.n	8000e24 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f85b 	bl	8000eb4 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fda4 	bl	800094c <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e12:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d12e      	bne.n	8000e9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e58:	f7ff fe9a 	bl	8000b90 <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5e:	e012      	b.n	8000e86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e60:	f7ff fe96 	bl	8000b90 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d90b      	bls.n	8000e86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e012      	b.n	8000eac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e5      	bne.n	8000e60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e006      	b.n	8000eac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
  }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d133      	bne.n	8000f30 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fe5a 	bl	8000b90 <HAL_GetTick>
 8000edc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ede:	e012      	b.n	8000f06 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee0:	f7ff fe56 	bl	8000b90 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2205      	movs	r2, #5
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e01b      	b.n	8000f3e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0e5      	beq.n	8000ee0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0202 	bic.w	r2, r2, #2
 8000f22:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e006      	b.n	8000f3e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
  }
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f46:	b480      	push	{r7}
 8000f48:	b087      	sub	sp, #28
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d003      	beq.n	8000f6a <HAL_CAN_GetRxMessage+0x24>
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	f040 80f3 	bne.w	8001150 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10e      	bne.n	8000f8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d116      	bne.n	8000fac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0e7      	b.n	800115e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d107      	bne.n	8000fac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e0d8      	b.n	800115e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	331b      	adds	r3, #27
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0204 	and.w	r2, r3, #4
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	331b      	adds	r3, #27
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4413      	add	r3, r2
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0d5b      	lsrs	r3, r3, #21
 8000fda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	331b      	adds	r3, #27
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	331b      	adds	r3, #27
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0202 	and.w	r2, r3, #2
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	331b      	adds	r3, #27
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	3304      	adds	r3, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 020f 	and.w	r2, r3, #15
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	331b      	adds	r3, #27
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	331b      	adds	r3, #27
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	3304      	adds	r3, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	0c1b      	lsrs	r3, r3, #16
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0a1a      	lsrs	r2, r3, #8
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0c1a      	lsrs	r2, r3, #16
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	3302      	adds	r3, #2
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0e1a      	lsrs	r2, r3, #24
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3303      	adds	r3, #3
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3304      	adds	r3, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0a1a      	lsrs	r2, r3, #8
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3305      	adds	r3, #5
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0c1a      	lsrs	r2, r3, #16
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	3306      	adds	r3, #6
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0e1a      	lsrs	r2, r3, #24
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3307      	adds	r3, #7
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d108      	bne.n	800113c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0220 	orr.w	r2, r2, #32
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e007      	b.n	800114c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0220 	orr.w	r2, r2, #32
 800114a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e006      	b.n	800115e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
  }
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b08a      	sub	sp, #40	; 0x28
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d07c      	beq.n	80012aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d023      	beq.n	8001202 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f983 	bl	80014d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80011d2:	e016      	b.n	8001202 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
 80011e6:	e00c      	b.n	8001202 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	e002      	b.n	8001202 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f989 	bl	8001514 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d024      	beq.n	8001256 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001214:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f963 	bl	80014ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001226:	e016      	b.n	8001256 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
 800123a:	e00c      	b.n	8001256 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	e002      	b.n	8001256 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f969 	bl	8001528 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d024      	beq.n	80012aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001268:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f943 	bl	8001500 <HAL_CAN_TxMailbox2CompleteCallback>
 800127a:	e016      	b.n	80012aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e00c      	b.n	80012aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	e002      	b.n	80012aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f949 	bl	800153c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2210      	movs	r2, #16
 80012cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2208      	movs	r2, #8
 80012e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f930 	bl	8001550 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff f8e3 	bl	80004d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00c      	beq.n	8001332 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001328:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2210      	movs	r2, #16
 8001330:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2208      	movs	r2, #8
 800134c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f912 	bl	8001578 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8f9 	bl	8001564 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2210      	movs	r2, #16
 800138c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f8fc 	bl	800158c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2208      	movs	r2, #8
 80013ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8f5 	bl	80015a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d07b      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d072      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001424:	2b00      	cmp	r3, #0
 8001426:	d043      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800142e:	2b00      	cmp	r3, #0
 8001430:	d03e      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d02b      	beq.n	8001494 <HAL_CAN_IRQHandler+0x32a>
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d82e      	bhi.n	800149e <HAL_CAN_IRQHandler+0x334>
 8001440:	2b50      	cmp	r3, #80	; 0x50
 8001442:	d022      	beq.n	800148a <HAL_CAN_IRQHandler+0x320>
 8001444:	2b50      	cmp	r3, #80	; 0x50
 8001446:	d82a      	bhi.n	800149e <HAL_CAN_IRQHandler+0x334>
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d019      	beq.n	8001480 <HAL_CAN_IRQHandler+0x316>
 800144c:	2b40      	cmp	r3, #64	; 0x40
 800144e:	d826      	bhi.n	800149e <HAL_CAN_IRQHandler+0x334>
 8001450:	2b30      	cmp	r3, #48	; 0x30
 8001452:	d010      	beq.n	8001476 <HAL_CAN_IRQHandler+0x30c>
 8001454:	2b30      	cmp	r3, #48	; 0x30
 8001456:	d822      	bhi.n	800149e <HAL_CAN_IRQHandler+0x334>
 8001458:	2b10      	cmp	r3, #16
 800145a:	d002      	beq.n	8001462 <HAL_CAN_IRQHandler+0x2f8>
 800145c:	2b20      	cmp	r3, #32
 800145e:	d005      	beq.n	800146c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001460:	e01d      	b.n	800149e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800146a:	e019      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001474:	e014      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147e:	e00f      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001488:	e00a      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001492:	e005      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800149c:	e000      	b.n	80014a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800149e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2204      	movs	r2, #4
 80014b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f872 	bl	80015b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d6:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <HAL_CAN_GetState+0x1c>
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d112      	bne.n	800160a <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 80015f2:	2304      	movs	r3, #4
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e008      	b.n	800160a <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8001606:	2303      	movs	r3, #3
 8001608:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db12      	blt.n	80016f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	490a      	ldr	r1, [pc, #40]	; (80016fc <__NVIC_DisableIRQ+0x44>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	3320      	adds	r3, #32
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016e4:	f3bf 8f4f 	dsb	sy
}
 80016e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ea:	f3bf 8f6f 	isb	sy
}
 80016ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff05 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff1a 	bl	8001660 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff8e 	bl	8001754 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5d 	bl	8001700 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff0d 	bl	800167c <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff1d 	bl	80016b8 <__NVIC_DisableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff94 	bl	80017bc <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e16b      	b.n	8001b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 815a 	bne.w	8001b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b03      	cmp	r3, #3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d123      	bne.n	80019e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80b4 	beq.w	8001b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_GPIO_Init+0x30c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a5f      	ldr	r2, [pc, #380]	; (8001bac <HAL_GPIO_Init+0x30c>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_GPIO_Init+0x30c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a42:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <HAL_GPIO_Init+0x310>)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x314>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02b      	beq.n	8001ac6 <HAL_GPIO_Init+0x226>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x318>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d025      	beq.n	8001ac2 <HAL_GPIO_Init+0x222>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x31c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <HAL_GPIO_Init+0x21e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x320>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x21a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_GPIO_Init+0x324>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x216>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4d      	ldr	r2, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x328>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x212>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <HAL_GPIO_Init+0x32c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x20e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_GPIO_Init+0x330>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x20a>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00e      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001aaa:	2308      	movs	r3, #8
 8001aac:	e00c      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001aae:	2306      	movs	r3, #6
 8001ab0:	e00a      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	e008      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001aba:	2303      	movs	r3, #3
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x228>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f002 0203 	and.w	r2, r2, #3
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x310>)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0a:	4a32      	ldr	r2, [pc, #200]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	f67f ae90 	bls.w	80018bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e0cd      	b.n	8001d90 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	f040 80bd 	bne.w	8001d8a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_GPIO_DeInit+0x1d0>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <HAL_GPIO_DeInit+0x1d4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_DeInit+0xba>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_GPIO_DeInit+0x1d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_DeInit+0xb6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <HAL_GPIO_DeInit+0x1dc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_DeInit+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <HAL_GPIO_DeInit+0x1e0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_DeInit+0xae>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_GPIO_DeInit+0x1e4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_DeInit+0xaa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_GPIO_DeInit+0x1e8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_DeInit+0xa6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <HAL_GPIO_DeInit+0x1ec>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_DeInit+0xa2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <HAL_GPIO_DeInit+0x1f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_DeInit+0x9e>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00e      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e00c      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00a      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_DeInit+0xbc>
 8001c92:	2300      	movs	r3, #0
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d132      	bne.n	8001d0a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ca4:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4947      	ldr	r1, [pc, #284]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4944      	ldr	r1, [pc, #272]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cc0:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4940      	ldr	r1, [pc, #256]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	493d      	ldr	r1, [pc, #244]	; (8001dcc <HAL_GPIO_DeInit+0x1f4>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001cec:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <HAL_GPIO_DeInit+0x1d0>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	482a      	ldr	r0, [pc, #168]	; (8001da8 <HAL_GPIO_DeInit+0x1d0>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	400a      	ands	r2, r1
 8001d04:	3302      	adds	r3, #2
 8001d06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2103      	movs	r1, #3
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	08d2      	lsrs	r2, r2, #3
 8001d40:	4019      	ands	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2103      	movs	r1, #3
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f af2e 	bls.w	8001bf4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e34:	b08f      	sub	sp, #60	; 0x3c
 8001e36:	af0a      	add	r7, sp, #40	; 0x28
 8001e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e10f      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f005 fd0e 	bl	8007880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 ffd7 	bl	8003e36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	687e      	ldr	r6, [r7, #4]
 8001e90:	466d      	mov	r5, sp
 8001e92:	f106 0410 	add.w	r4, r6, #16
 8001e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea6:	1d33      	adds	r3, r6, #4
 8001ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f001 feae 	bl	8003c0c <USB_CoreInit>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0d0      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 ffc5 	bl	8003e58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e04a      	b.n	8001f6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333d      	adds	r3, #61	; 0x3d
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	333c      	adds	r3, #60	; 0x3c
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	b298      	uxth	r0, r3
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3344      	adds	r3, #68	; 0x44
 8001f10:	4602      	mov	r2, r0
 8001f12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3340      	adds	r3, #64	; 0x40
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3348      	adds	r3, #72	; 0x48
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334c      	adds	r3, #76	; 0x4c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3354      	adds	r3, #84	; 0x54
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3af      	bcc.n	8001ed4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e044      	b.n	8002004 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3301      	adds	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d3b5      	bcc.n	8001f7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	687e      	ldr	r6, [r7, #4]
 8002016:	466d      	mov	r5, sp
 8002018:	f106 0410 	add.w	r4, r6, #16
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002028:	e885 0003 	stmia.w	r5, {r0, r1}
 800202c:	1d33      	adds	r3, r6, #4
 800202e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f001 ff5d 	bl	8003ef0 <USB_DevInit>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00d      	b.n	8002064 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 f8ac 	bl	80051ba <USB_DevDisconnect>

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800206c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_Start+0x1c>
 8002084:	2302      	movs	r3, #2
 8002086:	e020      	b.n	80020ca <HAL_PCD_Start+0x5e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	2b01      	cmp	r3, #1
 8002096:	d109      	bne.n	80020ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 feaf 	bl	8003e14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f85c 	bl	8005178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020d2:	b590      	push	{r4, r7, lr}
 80020d4:	b08d      	sub	sp, #52	; 0x34
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 f91a 	bl	8005322 <USB_GetMode>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 848a 	bne.w	8002a0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f87e 	bl	80051fc <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8480 	beq.w	8002a08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f003 f86b 	bl	80051fc <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d107      	bne.n	8002140 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f002 0202 	and.w	r2, r2, #2
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 f859 	bl	80051fc <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	d161      	bne.n	8002218 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0210 	bic.w	r2, r2, #16
 8002162:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	0c5b      	lsrs	r3, r3, #17
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b02      	cmp	r3, #2
 800218e:	d124      	bne.n	80021da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d035      	beq.n	8002208 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6a38      	ldr	r0, [r7, #32]
 80021b0:	f002 fe90 	bl	8004ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c0:	441a      	add	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d2:	441a      	add	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	e016      	b.n	8002208 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	0c5b      	lsrs	r3, r3, #17
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d110      	bne.n	8002208 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ec:	2208      	movs	r2, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	6a38      	ldr	r0, [r7, #32]
 80021f2:	f002 fe6f 	bl	8004ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002202:	441a      	add	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0210 	orr.w	r2, r2, #16
 8002216:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 ffed 	bl	80051fc <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800222c:	f040 80a7 	bne.w	800237e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fff2 	bl	8005222 <USB_ReadDevAllOutEpInterrupt>
 800223e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002240:	e099      	b.n	8002376 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 808e 	beq.w	800236a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f003 f816 	bl	800528a <USB_ReadDevOutEPInterrupt>
 800225e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800227c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fec2 	bl	8003008 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2308      	movs	r3, #8
 800229e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 ff98 	bl	80031d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d030      	beq.n	8002330 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d109      	bne.n	80022ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	3304      	adds	r3, #4
 8002302:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d108      	bne.n	800231e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 fbc9 	bl	8007ab0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2302      	movs	r3, #2
 800232e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	2320      	movs	r3, #32
 800234a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002368:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f af62 	bne.w	8002242 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f002 ff3a 	bl	80051fc <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002392:	f040 80db 	bne.w	800254c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f002 ff5b 	bl	8005256 <USB_ReadDevAllInEpInterrupt>
 80023a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023a6:	e0cd      	b.n	8002544 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80c2 	beq.w	8002538 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 ff81 	bl	80052c6 <USB_ReadDevInEPInterrupt>
 80023c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d057      	beq.n	8002480 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69f9      	ldr	r1, [r7, #28]
 80023ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023f0:	4013      	ands	r3, r2
 80023f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d132      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334c      	adds	r3, #76	; 0x4c
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4403      	add	r3, r0
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4419      	add	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	334c      	adds	r3, #76	; 0x4c
 8002444:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3354      	adds	r3, #84	; 0x54
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f002 ff88 	bl	8005384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f005 fa93 	bl	80079a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2308      	movs	r3, #8
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2310      	movs	r3, #16
 80024b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ce:	461a      	mov	r2, r3
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d023      	beq.n	8002526 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e0:	6a38      	ldr	r0, [r7, #32]
 80024e2:	f001 fe69 	bl	80041b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3338      	adds	r3, #56	; 0x38
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	78db      	ldrb	r3, [r3, #3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f005 fae0 	bl	8007ad4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	461a      	mov	r2, r3
 8002522:	2302      	movs	r3, #2
 8002524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fcdb 	bl	8002eee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f af2e 	bne.w	80023a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fe53 	bl	80051fc <USB_ReadInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800255c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002560:	d122      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002588:	2100      	movs	r1, #0
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fec2 	bl	8003314 <HAL_PCDEx_LPM_Callback>
 8002590:	e002      	b.n	8002598 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f005 fa7e 	bl	8007a94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fe25 	bl	80051fc <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025bc:	d112      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f005 fa3a 	bl	8007a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fe07 	bl	80051fc <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	f040 80b7 	bne.w	800276a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2110      	movs	r1, #16
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fdce 	bl	80041b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	e046      	b.n	80026b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262e:	461a      	mov	r2, r3
 8002630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002634:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	440a      	add	r2, r1
 800264c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002654:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	461a      	mov	r2, r3
 8002664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002668:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	440a      	add	r2, r1
 8002680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3301      	adds	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3b3      	bcc.n	8002622 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f043 030b 	orr.w	r3, r3, #11
 80026ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f043 030b 	orr.w	r3, r3, #11
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	e015      	b.n	8002730 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002716:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800271a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272a:	f043 030b 	orr.w	r3, r3, #11
 800272e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002742:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002754:	461a      	mov	r2, r3
 8002756:	f002 fe15 	bl	8005384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd44 	bl	80051fc <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d124      	bne.n	80027ca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fdda 	bl	800533e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fd8f 	bl	80042b2 <USB_GetDevSpeed>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	f001 fa28 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4620      	mov	r0, r4
 80027b0:	f001 fa8e 	bl	8003cd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f005 f91e 	bl	80079f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fd14 	bl	80051fc <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d10a      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f005 f8fb 	bl	80079da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f002 0208 	and.w	r2, r2, #8
 80027f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fcff 	bl	80051fc <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d122      	bne.n	800284e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e014      	b.n	8002844 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fb27 	bl	8002e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	d3e5      	bcc.n	800281a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fcd2 	bl	80051fc <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d13b      	bne.n	80028dc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	e02b      	b.n	80028c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3340      	adds	r3, #64	; 0x40
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d115      	bne.n	80028bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	da12      	bge.n	80028bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	333f      	adds	r3, #63	; 0x3f
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fae8 	bl	8002e8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3ce      	bcc.n	800286a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fc8b 	bl	80051fc <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f0:	d155      	bne.n	800299e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f2:	2301      	movs	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e045      	b.n	8002984 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d12e      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002920:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	da2b      	bge.n	800297e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002932:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002936:	429a      	cmp	r2, r3
 8002938:	d121      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6053      	str	r3, [r2, #4]
            break;
 800297c:	e007      	b.n	800298e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3301      	adds	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	429a      	cmp	r2, r3
 800298c:	d3b4      	bcc.n	80028f8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800299c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fc2a 	bl	80051fc <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f005 f89f 	bl	8007af8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fc14 	bl	80051fc <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d115      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f005 f88f 	bl	8007b14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e000      	b.n	8002a0a <HAL_PCD_IRQHandler+0x938>
      return;
 8002a08:	bf00      	nop
    }
  }
}
 8002a0a:	3734      	adds	r7, #52	; 0x34
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_SetAddress+0x1a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e013      	b.n	8002a52 <HAL_PCD_SetAddress+0x42>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fb72 	bl	800512c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	4608      	mov	r0, r1
 8002a64:	4611      	mov	r1, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	70fb      	strb	r3, [r7, #3]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	803b      	strh	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da0f      	bge.n	8002aa0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3338      	adds	r3, #56	; 0x38
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	705a      	strb	r2, [r3, #1]
 8002a9e:	e00f      	b.n	8002ac0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002acc:	883a      	ldrh	r2, [r7, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	78ba      	ldrb	r2, [r7, #2]
 8002ad6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aea:	78bb      	ldrb	r3, [r7, #2]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d102      	bne.n	8002af6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_PCD_EP_Open+0xaa>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e00e      	b.n	8002b22 <HAL_PCD_EP_Open+0xc8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 fbf2 	bl	80042fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b20:	7afb      	ldrb	r3, [r7, #11]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0f      	bge.n	8002b5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	705a      	strb	r2, [r3, #1]
 8002b5c:	e00f      	b.n	8002b7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_EP_Close+0x6e>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e00e      	b.n	8002bb6 <HAL_PCD_EP_Close+0x8c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fc30 	bl	800440c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6979      	ldr	r1, [r7, #20]
 8002c32:	f001 ff0f 	bl	8004a54 <USB_EP0StartXfer>
 8002c36:	e008      	b.n	8002c4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	f001 fcbd 	bl	80045c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3338      	adds	r3, #56	; 0x38
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6979      	ldr	r1, [r7, #20]
 8002cf6:	f001 fead 	bl	8004a54 <USB_EP0StartXfer>
 8002cfa:	e008      	b.n	8002d0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	f001 fc5b 	bl	80045c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d901      	bls.n	8002d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e050      	b.n	8002dd8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da0f      	bge.n	8002d5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	3338      	adds	r3, #56	; 0x38
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	705a      	strb	r2, [r3, #1]
 8002d5c:	e00d      	b.n	8002d7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_PCD_EP_SetStall+0x82>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e01e      	b.n	8002dd8 <HAL_PCD_EP_SetStall+0xc0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 f8eb 	bl	8004f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	b2d9      	uxtb	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f002 fadb 	bl	8005384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d901      	bls.n	8002dfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da0f      	bge.n	8002e26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3338      	adds	r3, #56	; 0x38
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	705a      	strb	r2, [r3, #1]
 8002e24:	e00f      	b.n	8002e46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	f003 020f 	and.w	r2, r3, #15
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_PCD_EP_ClrStall+0x86>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e00e      	b.n	8002e84 <HAL_PCD_EP_ClrStall+0xa4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 f8f3 	bl	8005060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da0c      	bge.n	8002eba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3338      	adds	r3, #56	; 0x38
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e00c      	b.n	8002ed4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 ff12 	bl	8004d04 <USB_EPStopXfer>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	3338      	adds	r3, #56	; 0x38
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d901      	bls.n	8002f26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06c      	b.n	8003000 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d902      	bls.n	8002f42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3303      	adds	r3, #3
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f4a:	e02b      	b.n	8002fa4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d902      	bls.n	8002f68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3303      	adds	r3, #3
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f001 ff66 	bl	8004e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	441a      	add	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d809      	bhi.n	8002fce <PCD_WriteEmptyTxFifo+0xe0>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d203      	bcs.n	8002fce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1be      	bne.n	8002f4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d811      	bhi.n	8002ffe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	333c      	adds	r3, #60	; 0x3c
 8003020:	3304      	adds	r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d17b      	bne.n	8003136 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4a61      	ldr	r2, [pc, #388]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f240 80b9 	bls.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80b3 	beq.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003070:	6093      	str	r3, [r2, #8]
 8003072:	e0a7      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	2320      	movs	r3, #32
 800308e:	6093      	str	r3, [r2, #8]
 8003090:	e098      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 8093 	bne.w	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d90f      	bls.n	80030c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	e07e      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d114      	bne.n	8003128 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003110:	461a      	mov	r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	f002 f936 	bl	8005384 <USB_EP0_OutStart>
 8003118:	e006      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	441a      	add	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f004 fc1e 	bl	8007970 <HAL_PCD_DataOutStageCallback>
 8003134:	e046      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d124      	bne.n	8003188 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315a:	6093      	str	r3, [r2, #8]
 800315c:	e032      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	2320      	movs	r3, #32
 8003178:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f004 fbf5 	bl	8007970 <HAL_PCD_DataOutStageCallback>
 8003186:	e01d      	b.n	80031c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031b0:	461a      	mov	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f002 f8e6 	bl	8005384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f004 fbd6 	bl	8007970 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	4f54300a 	.word	0x4f54300a
 80031d4:	4f54310a 	.word	0x4f54310a

080031d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	333c      	adds	r3, #60	; 0x3c
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90e      	bls.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f004 fb8d 	bl	800794c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90c      	bls.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800324c:	461a      	mov	r2, r3
 800324e:	2101      	movs	r1, #1
 8003250:	f002 f898 	bl	8005384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54300a 	.word	0x4f54300a

08003264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	4613      	mov	r3, r2
 8003272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003282:	883b      	ldrh	r3, [r7, #0]
 8003284:	0419      	lsls	r1, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	430a      	orrs	r2, r1
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	e028      	b.n	80032e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e00d      	b.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3ec      	bcc.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032cc:	883b      	ldrh	r3, [r7, #0]
 80032ce:	0418      	lsls	r0, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4302      	orrs	r2, r0
 80032dc:	3340      	adds	r3, #64	; 0x40
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e267      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e242      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6c      	ldr	r2, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fd fbd4 	bl	8000b90 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fd fbd0 	bl	8000b90 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e207      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fd fbc0 	bl	8000b90 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd fbbc 	bl	8000b90 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1f3      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c7      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fd fb75 	bl	8000b90 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fd fb71 	bl	8000b90 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a8      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4925      	ldr	r1, [pc, #148]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fb54 	bl	8000b90 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fd fb50 	bl	8000b90 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e187      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d036      	beq.n	8003584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fb34 	bl	8000b90 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352c:	f7fd fb30 	bl	8000b90 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e167      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
 800354a:	e01b      	b.n	8003584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fd fb1d 	bl	8000b90 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00e      	b.n	8003578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fd fb19 	bl	8000b90 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d907      	bls.n	8003578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e150      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	42470000 	.word	0x42470000
 8003574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ea      	bne.n	800355a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8097 	beq.w	80036c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fd fad9 	bl	8000b90 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fd fad5 	bl	8000b90 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e10c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x2ea>
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	e01c      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x30c>
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5e      	ldr	r2, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a57      	ldr	r2, [pc, #348]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	4b55      	ldr	r3, [pc, #340]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fd fa9a 	bl	8000b90 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fd fa96 	bl	8000b90 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0cb      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCC_OscConfig+0x334>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7fd fa84 	bl	8000b90 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fa80 	bl	8000b90 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0b5      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ee      	bne.n	800368c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4a38      	ldr	r2, [pc, #224]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a1 	beq.w	800380c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d05c      	beq.n	8003790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d141      	bne.n	8003762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fd fa54 	bl	8000b90 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd fa50 	bl	8000b90 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	491b      	ldr	r1, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fd fa29 	bl	8000b90 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd fa25 	bl	8000b90 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e05c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x416>
 8003760:	e054      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fa12 	bl	8000b90 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd fa0e 	bl	8000b90 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e045      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x444>
 800378e:	e03d      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e038      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11a      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cc      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90c      	bls.n	8003858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d044      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e067      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fd f940 	bl	8000b90 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fd f93c 	bl	8000b90 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d20c      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f8a0 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08008024 	.word	0x08008024
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b094      	sub	sp, #80	; 0x50
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	2300      	movs	r3, #0
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b79      	ldr	r3, [pc, #484]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80e1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e0db      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a20:	e0db      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a26:	e0d8      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4621      	mov	r1, r4
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	6139      	str	r1, [r7, #16]
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4651      	mov	r1, sl
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb18 0303 	adds.w	r3, r8, r3
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	eb49 0303 	adc.w	r3, r9, r3
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ada:	4629      	mov	r1, r5
 8003adc:	024b      	lsls	r3, r1, #9
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	024a      	lsls	r2, r1, #9
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af8:	f7fc fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	e058      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4611      	mov	r1, r2
 8003b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b32:	0150      	lsls	r0, r2, #5
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b58:	ebb2 040a 	subs.w	r4, r2, sl
 8003b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	00eb      	lsls	r3, r5, #3
 8003b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6e:	00e2      	lsls	r2, r4, #3
 8003b70:	4614      	mov	r4, r2
 8003b72:	461d      	mov	r5, r3
 8003b74:	4643      	mov	r3, r8
 8003b76:	18e3      	adds	r3, r4, r3
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	eb45 0303 	adc.w	r3, r5, r3
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	61fa      	str	r2, [r7, #28]
 8003ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bac:	f7fc fb14 	bl	80001d8 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3750      	adds	r7, #80	; 0x50
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	f107 001c 	add.w	r0, r7, #28
 8003c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d122      	bne.n	8003c6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 fbee 	bl	8005440 <USB_CoreReset>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	e01a      	b.n	8003ca0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f001 fbe2 	bl	8005440 <USB_CoreReset>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
 8003c92:	e005      	b.n	8003ca0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10b      	bne.n	8003cbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f043 0206 	orr.w	r2, r3, #6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cca:	b004      	add	sp, #16
 8003ccc:	4770      	bx	lr
	...

08003cd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d165      	bne.n	8003db0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a41      	ldr	r2, [pc, #260]	; (8003dec <USB_SetTurnaroundTime+0x11c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d906      	bls.n	8003cfa <USB_SetTurnaroundTime+0x2a>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <USB_SetTurnaroundTime+0x120>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d202      	bcs.n	8003cfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e062      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4a3c      	ldr	r2, [pc, #240]	; (8003df0 <USB_SetTurnaroundTime+0x120>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d306      	bcc.n	8003d10 <USB_SetTurnaroundTime+0x40>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <USB_SetTurnaroundTime+0x124>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d202      	bcs.n	8003d10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d0a:	230e      	movs	r3, #14
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e057      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <USB_SetTurnaroundTime+0x124>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d306      	bcc.n	8003d26 <USB_SetTurnaroundTime+0x56>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <USB_SetTurnaroundTime+0x128>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d202      	bcs.n	8003d26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d20:	230d      	movs	r3, #13
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e04c      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a33      	ldr	r2, [pc, #204]	; (8003df8 <USB_SetTurnaroundTime+0x128>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d306      	bcc.n	8003d3c <USB_SetTurnaroundTime+0x6c>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <USB_SetTurnaroundTime+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d802      	bhi.n	8003d3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d36:	230c      	movs	r3, #12
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e041      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <USB_SetTurnaroundTime+0x12c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d906      	bls.n	8003d52 <USB_SetTurnaroundTime+0x82>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <USB_SetTurnaroundTime+0x130>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d802      	bhi.n	8003d52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d4c:	230b      	movs	r3, #11
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e036      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <USB_SetTurnaroundTime+0x130>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d906      	bls.n	8003d68 <USB_SetTurnaroundTime+0x98>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <USB_SetTurnaroundTime+0x134>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d802      	bhi.n	8003d68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d62:	230a      	movs	r3, #10
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e02b      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <USB_SetTurnaroundTime+0x134>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d906      	bls.n	8003d7e <USB_SetTurnaroundTime+0xae>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <USB_SetTurnaroundTime+0x138>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d202      	bcs.n	8003d7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d78:	2309      	movs	r3, #9
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e020      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <USB_SetTurnaroundTime+0x138>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d306      	bcc.n	8003d94 <USB_SetTurnaroundTime+0xc4>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <USB_SetTurnaroundTime+0x13c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d802      	bhi.n	8003d94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e015      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <USB_SetTurnaroundTime+0x13c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d906      	bls.n	8003daa <USB_SetTurnaroundTime+0xda>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <USB_SetTurnaroundTime+0x140>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d202      	bcs.n	8003daa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003da4:	2307      	movs	r3, #7
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e00a      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003daa:	2306      	movs	r3, #6
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e007      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003db6:	2309      	movs	r3, #9
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e001      	b.n	8003dc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dbc:	2309      	movs	r3, #9
 8003dbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	00d8acbf 	.word	0x00d8acbf
 8003df0:	00e4e1c0 	.word	0x00e4e1c0
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	01067380 	.word	0x01067380
 8003dfc:	011a499f 	.word	0x011a499f
 8003e00:	01312cff 	.word	0x01312cff
 8003e04:	014ca43f 	.word	0x014ca43f
 8003e08:	016e3600 	.word	0x016e3600
 8003e0c:	01a6ab1f 	.word	0x01a6ab1f
 8003e10:	01e84800 	.word	0x01e84800

08003e14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d115      	bne.n	8003ea6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7fc fe8e 	bl	8000ba8 <HAL_Delay>
      ms++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f001 fa45 	bl	8005322 <USB_GetMode>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d01e      	beq.n	8003edc <USB_SetCurrentMode+0x84>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b31      	cmp	r3, #49	; 0x31
 8003ea2:	d9f0      	bls.n	8003e86 <USB_SetCurrentMode+0x2e>
 8003ea4:	e01a      	b.n	8003edc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fc fe75 	bl	8000ba8 <HAL_Delay>
      ms++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f001 fa2c 	bl	8005322 <USB_GetMode>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <USB_SetCurrentMode+0x84>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b31      	cmp	r3, #49	; 0x31
 8003ed4:	d9f0      	bls.n	8003eb8 <USB_SetCurrentMode+0x60>
 8003ed6:	e001      	b.n	8003edc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e005      	b.n	8003ee8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b32      	cmp	r3, #50	; 0x32
 8003ee0:	d101      	bne.n	8003ee6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	e009      	b.n	8003f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3340      	adds	r3, #64	; 0x40
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3301      	adds	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b0e      	cmp	r3, #14
 8003f28:	d9f2      	bls.n	8003f10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d11c      	bne.n	8003f6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f3e:	f043 0302 	orr.w	r3, r3, #2
 8003f42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
 8003f68:	e00b      	b.n	8003f82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	4619      	mov	r1, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	680b      	ldr	r3, [r1, #0]
 8003fa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10c      	bne.n	8003fc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f965 	bl	8004280 <USB_SetDevSpeed>
 8003fb6:	e008      	b.n	8003fca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f960 	bl	8004280 <USB_SetDevSpeed>
 8003fc0:	e003      	b.n	8003fca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fc2:	2103      	movs	r1, #3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f95b 	bl	8004280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fca:	2110      	movs	r1, #16
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8f3 	bl	80041b8 <USB_FlushTxFifo>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f91f 	bl	8004220 <USB_FlushRxFifo>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	461a      	mov	r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	461a      	mov	r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e043      	b.n	800409e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800402c:	d118      	bne.n	8004060 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	461a      	mov	r2, r3
 8004042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e013      	b.n	8004072 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	461a      	mov	r2, r3
 8004058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e008      	b.n	8004072 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	461a      	mov	r2, r3
 8004092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3301      	adds	r3, #1
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3b7      	bcc.n	8004016 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e043      	b.n	8004134 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c2:	d118      	bne.n	80040f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e013      	b.n	8004108 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e008      	b.n	8004108 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	2300      	movs	r3, #0
 8004118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800412c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d3b7      	bcc.n	80040ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800415c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 0210 	orr.w	r2, r3, #16
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <USB_DevInit+0x2c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f043 0208 	orr.w	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b0:	b004      	add	sp, #16
 80041b2:	4770      	bx	lr
 80041b4:	803c3800 	.word	0x803c3800

080041b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <USB_FlushTxFifo+0x64>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e01b      	b.n	8004210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	daf2      	bge.n	80041c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	019b      	lsls	r3, r3, #6
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a08      	ldr	r2, [pc, #32]	; (800421c <USB_FlushTxFifo+0x64>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e006      	b.n	8004210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d0f0      	beq.n	80041f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	00030d40 	.word	0x00030d40

08004220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <USB_FlushRxFifo+0x5c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e018      	b.n	8004270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	daf2      	bge.n	800422c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2210      	movs	r2, #16
 800424e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <USB_FlushRxFifo+0x5c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d0f0      	beq.n	8004250 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	00030d40 	.word	0x00030d40

08004280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
 80042d6:	e00a      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d002      	beq.n	80042e4 <USB_GetDevSpeed+0x32>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d102      	bne.n	80042ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042e4:	2302      	movs	r3, #2
 80042e6:	75fb      	strb	r3, [r7, #23]
 80042e8:	e001      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ea:	230f      	movs	r3, #15
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13a      	bne.n	800438e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	b29b      	uxth	r3, r3
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004336:	4313      	orrs	r3, r2
 8004338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d155      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800436c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	059b      	lsls	r3, r3, #22
 8004372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004374:	4313      	orrs	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e036      	b.n	80043fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11a      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d161      	bne.n	80044ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800443a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800443e:	d11f      	bne.n	8004480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800445e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800447e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a0:	4013      	ands	r3, r2
 80044a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c4:	4013      	ands	r3, r2
 80044c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0159      	lsls	r1, r3, #5
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	440b      	add	r3, r1
 80044de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e2:	4619      	mov	r1, r3
 80044e4:	4b35      	ldr	r3, [pc, #212]	; (80045bc <USB_DeactivateEndpoint+0x1b0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
 80044ea:	e060      	b.n	80045ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004502:	d11f      	bne.n	8004544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	43db      	mvns	r3, r3
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004564:	4013      	ands	r3, r2
 8004566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004588:	4013      	ands	r3, r2
 800458a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0159      	lsls	r1, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	4619      	mov	r1, r3
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <USB_DeactivateEndpoint+0x1b4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	ec337800 	.word	0xec337800
 80045c0:	eff37800 	.word	0xeff37800

080045c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 815c 	bne.w	800489e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d132      	bne.n	8004654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800460c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	0cdb      	lsrs	r3, r3, #19
 800464e:	04db      	lsls	r3, r3, #19
 8004650:	6113      	str	r3, [r2, #16]
 8004652:	e074      	b.n	800473e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	0cdb      	lsrs	r3, r3, #19
 8004670:	04db      	lsls	r3, r3, #19
 8004672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	440b      	add	r3, r1
 80046b0:	1e59      	subs	r1, r3, #1
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046bc:	4b9d      	ldr	r3, [pc, #628]	; (8004934 <USB_EPStartXfer+0x370>)
 80046be:	400b      	ands	r3, r1
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	0148      	lsls	r0, r1, #5
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	4401      	add	r1, r0
 80046c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046cc:	4313      	orrs	r3, r2
 80046ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	0148      	lsls	r0, r1, #5
 80046ea:	69f9      	ldr	r1, [r7, #28]
 80046ec:	4401      	add	r1, r0
 80046ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046f2:	4313      	orrs	r3, r2
 80046f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	791b      	ldrb	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d11f      	bne.n	800473e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800471c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800473c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d14b      	bne.n	80047dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d128      	bne.n	80047ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e00f      	b.n	80047ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e133      	b.n	8004a44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d015      	beq.n	8004830 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 811b 	beq.w	8004a44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482a:	4313      	orrs	r3, r2
 800482c:	634b      	str	r3, [r1, #52]	; 0x34
 800482e:	e109      	b.n	8004a44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d110      	bne.n	8004862 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e00f      	b.n	8004882 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6919      	ldr	r1, [r3, #16]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	b298      	uxth	r0, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4603      	mov	r3, r0
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fade 	bl	8004e58 <USB_WritePacket>
 800489c:	e0d2      	b.n	8004a44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	0cdb      	lsrs	r3, r3, #19
 80048ba:	04db      	lsls	r3, r3, #19
 80048bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d126      	bne.n	8004938 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	0148      	lsls	r0, r1, #5
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	4401      	add	r1, r0
 8004908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800492e:	6113      	str	r3, [r2, #16]
 8004930:	e03a      	b.n	80049a8 <USB_EPStartXfer+0x3e4>
 8004932:	bf00      	nop
 8004934:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4413      	add	r3, r2
 8004942:	1e5a      	subs	r2, r3, #1
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	8afa      	ldrh	r2, [r7, #22]
 8004954:	fb03 f202 	mul.w	r2, r3, r2
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	8afb      	ldrh	r3, [r7, #22]
 800496c:	04d9      	lsls	r1, r3, #19
 800496e:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <USB_EPStartXfer+0x48c>)
 8004970:	400b      	ands	r3, r1
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	0148      	lsls	r0, r1, #5
 8004976:	69f9      	ldr	r1, [r7, #28]
 8004978:	4401      	add	r1, r0
 800497a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800497e:	4313      	orrs	r3, r2
 8004980:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	0148      	lsls	r0, r1, #5
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	4401      	add	r1, r0
 80049a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049a4:	4313      	orrs	r3, r2
 80049a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10d      	bne.n	80049ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6919      	ldr	r1, [r3, #16]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	460a      	mov	r2, r1
 80049c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	791b      	ldrb	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d128      	bne.n	8004a24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d110      	bne.n	8004a04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00f      	b.n	8004a24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	1ff80000 	.word	0x1ff80000

08004a54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 80ce 	bne.w	8004c12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d132      	bne.n	8004ae4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004adc:	0cdb      	lsrs	r3, r3, #19
 8004ade:	04db      	lsls	r3, r3, #19
 8004ae0:	6113      	str	r3, [r2, #16]
 8004ae2:	e04e      	b.n	8004b82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	0cdb      	lsrs	r3, r3, #19
 8004b00:	04db      	lsls	r3, r3, #19
 8004b02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d903      	bls.n	8004b3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b72:	6939      	ldr	r1, [r7, #16]
 8004b74:	0148      	lsls	r0, r1, #5
 8004b76:	6979      	ldr	r1, [r7, #20]
 8004b78:	4401      	add	r1, r0
 8004b7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d11e      	bne.n	8004bc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e097      	b.n	8004cf6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004be4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8083 	beq.w	8004cf6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	634b      	str	r3, [r1, #52]	; 0x34
 8004c10:	e071      	b.n	8004cf6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	0cdb      	lsrs	r3, r3, #19
 8004c2e:	04db      	lsls	r3, r3, #19
 8004c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	0148      	lsls	r0, r1, #5
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	4401      	add	r1, r0
 8004cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10d      	bne.n	8004cd6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d14a      	bne.n	8004db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3a:	f040 8086 	bne.w	8004e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d902      	bls.n	8004d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
          break;
 8004d9a:	e056      	b.n	8004e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db4:	d0e7      	beq.n	8004d86 <USB_EPStopXfer+0x82>
 8004db6:	e048      	b.n	8004e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d13b      	bne.n	8004e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d902      	bls.n	8004e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e2e:	e00c      	b.n	8004e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e48:	d0e7      	beq.n	8004e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	460b      	mov	r3, r1
 8004e68:	71fb      	strb	r3, [r7, #7]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d123      	bne.n	8004ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	3303      	adds	r3, #3
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e018      	b.n	8004ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	031a      	lsls	r2, r3, #12
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e98:	461a      	mov	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d3e2      	bcc.n	8004e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3724      	adds	r7, #36	; 0x24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b08b      	sub	sp, #44	; 0x2c
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	e014      	b.n	8004f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	3301      	adds	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	3301      	adds	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	3301      	adds	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	3301      	adds	r3, #1
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d3e6      	bcc.n	8004f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f32:	8bfb      	ldrh	r3, [r7, #30]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01e      	beq.n	8004f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f42:	461a      	mov	r2, r3
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	3301      	adds	r3, #1
 8004f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	3301      	adds	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f6a:	8bfb      	ldrh	r3, [r7, #30]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f70:	8bfb      	ldrh	r3, [r7, #30]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ea      	bne.n	8004f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	372c      	adds	r7, #44	; 0x2c
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d12c      	bne.n	8004ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	db12      	blt.n	8004fd8 <USB_EPSetStall+0x54>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	e02b      	b.n	8005052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	db12      	blt.n	8005032 <USB_EPSetStall+0xae>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d128      	bne.n	80050ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800509a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	791b      	ldrb	r3, [r3, #4]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d003      	beq.n	80050ac <USB_EPClearStall+0x4c>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	791b      	ldrb	r3, [r3, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d138      	bne.n	800511e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e027      	b.n	800511e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	791b      	ldrb	r3, [r3, #4]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d003      	beq.n	80050fe <USB_EPClearStall+0x9e>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	791b      	ldrb	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d10f      	bne.n	800511e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800514e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a6:	f023 0302 	bic.w	r3, r3, #2
 80051aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051d4:	f023 0303 	bic.w	r3, r3, #3
 80051d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	0c1b      	lsrs	r3, r3, #16
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	b29b      	uxth	r3, r3
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052b8:	68bb      	ldr	r3, [r7, #8]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	01db      	lsls	r3, r3, #7
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005314:	68bb      	ldr	r3, [r7, #8]
}
 8005316:	4618      	mov	r0, r3
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005358:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	460b      	mov	r3, r1
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	333c      	adds	r3, #60	; 0x3c
 800539a:	3304      	adds	r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4a26      	ldr	r2, [pc, #152]	; (800543c <USB_EP0_OutStart+0xb8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d90a      	bls.n	80053be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b8:	d101      	bne.n	80053be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e037      	b.n	800542e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ec:	f043 0318 	orr.w	r3, r3, #24
 80053f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10f      	bne.n	800542c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800542a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	4f54300a 	.word	0x4f54300a

08005440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <USB_CoreReset+0x64>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e01b      	b.n	8005496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	daf2      	bge.n	800544c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <USB_CoreReset+0x64>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e006      	b.n	8005496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d0f0      	beq.n	8005476 <USB_CoreReset+0x36>

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	00030d40 	.word	0x00030d40

080054a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054b8:	f002 fcc4 	bl	8007e44 <USBD_static_malloc>
 80054bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	; 0xb0
 80054ce:	2100      	movs	r1, #0
 80054d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e0d4      	b.n	8005682 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80054dc:	2100      	movs	r1, #0
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f002 fcf4 	bl	8007ecc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	32b0      	adds	r2, #176	; 0xb0
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	32b0      	adds	r2, #176	; 0xb0
 80054fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7c1b      	ldrb	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d138      	bne.n	8005582 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005510:	4b5e      	ldr	r3, [pc, #376]	; (800568c <USBD_CDC_Init+0x1e4>)
 8005512:	7819      	ldrb	r1, [r3, #0]
 8005514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005518:	2202      	movs	r2, #2
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f002 fb6f 	bl	8007bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005520:	4b5a      	ldr	r3, [pc, #360]	; (800568c <USBD_CDC_Init+0x1e4>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 020f 	and.w	r2, r3, #15
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	3324      	adds	r3, #36	; 0x24
 8005536:	2201      	movs	r2, #1
 8005538:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800553a:	4b55      	ldr	r3, [pc, #340]	; (8005690 <USBD_CDC_Init+0x1e8>)
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005542:	2202      	movs	r2, #2
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f002 fb5a 	bl	8007bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800554a:	4b51      	ldr	r3, [pc, #324]	; (8005690 <USBD_CDC_Init+0x1e8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 020f 	and.w	r2, r3, #15
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005562:	2201      	movs	r2, #1
 8005564:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005566:	4b4b      	ldr	r3, [pc, #300]	; (8005694 <USBD_CDC_Init+0x1ec>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3326      	adds	r3, #38	; 0x26
 800557c:	2210      	movs	r2, #16
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e035      	b.n	80055ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005582:	4b42      	ldr	r3, [pc, #264]	; (800568c <USBD_CDC_Init+0x1e4>)
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	2340      	movs	r3, #64	; 0x40
 8005588:	2202      	movs	r2, #2
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f002 fb37 	bl	8007bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <USBD_CDC_Init+0x1e4>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 020f 	and.w	r2, r3, #15
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3324      	adds	r3, #36	; 0x24
 80055a6:	2201      	movs	r2, #1
 80055a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <USBD_CDC_Init+0x1e8>)
 80055ac:	7819      	ldrb	r1, [r3, #0]
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	2202      	movs	r2, #2
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f002 fb23 	bl	8007bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <USBD_CDC_Init+0x1e8>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055d0:	2201      	movs	r2, #1
 80055d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055d4:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <USBD_CDC_Init+0x1ec>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3326      	adds	r3, #38	; 0x26
 80055ea:	2210      	movs	r2, #16
 80055ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055ee:	4b29      	ldr	r3, [pc, #164]	; (8005694 <USBD_CDC_Init+0x1ec>)
 80055f0:	7819      	ldrb	r1, [r3, #0]
 80055f2:	2308      	movs	r3, #8
 80055f4:	2203      	movs	r2, #3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f002 fb01 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055fc:	4b25      	ldr	r3, [pc, #148]	; (8005694 <USBD_CDC_Init+0x1ec>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	2201      	movs	r2, #1
 8005614:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	33b0      	adds	r3, #176	; 0xb0
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800564c:	2302      	movs	r3, #2
 800564e:	e018      	b.n	8005682 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7c1b      	ldrb	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <USBD_CDC_Init+0x1e8>)
 800565a:	7819      	ldrb	r1, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f002 fbb8 	bl	8007ddc <USBD_LL_PrepareReceive>
 800566c:	e008      	b.n	8005680 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800566e:	4b08      	ldr	r3, [pc, #32]	; (8005690 <USBD_CDC_Init+0x1e8>)
 8005670:	7819      	ldrb	r1, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f002 fbae 	bl	8007ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000093 	.word	0x20000093
 8005690:	20000094 	.word	0x20000094
 8005694:	20000095 	.word	0x20000095

08005698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056a4:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <USBD_CDC_DeInit+0xf8>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f002 facd 	bl	8007c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <USBD_CDC_DeInit+0xf8>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3324      	adds	r3, #36	; 0x24
 80056c6:	2200      	movs	r2, #0
 80056c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056ca:	4b32      	ldr	r3, [pc, #200]	; (8005794 <USBD_CDC_DeInit+0xfc>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f002 faba 	bl	8007c4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <USBD_CDC_DeInit+0xfc>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 020f 	and.w	r2, r3, #15
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056ee:	2200      	movs	r2, #0
 80056f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <USBD_CDC_DeInit+0x100>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f002 faa6 	bl	8007c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <USBD_CDC_DeInit+0x100>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	2200      	movs	r2, #0
 8005716:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005718:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <USBD_CDC_DeInit+0x100>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3326      	adds	r3, #38	; 0x26
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	32b0      	adds	r2, #176	; 0xb0
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01f      	beq.n	8005784 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	33b0      	adds	r3, #176	; 0xb0
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32b0      	adds	r2, #176	; 0xb0
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	4618      	mov	r0, r3
 8005768:	f002 fb7a 	bl	8007e60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	32b0      	adds	r2, #176	; 0xb0
 8005776:	2100      	movs	r1, #0
 8005778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000093 	.word	0x20000093
 8005794:	20000094 	.word	0x20000094
 8005798:	20000095 	.word	0x20000095

0800579c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	32b0      	adds	r2, #176	; 0xb0
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0bf      	b.n	800594c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d050      	beq.n	800587a <USBD_CDC_Setup+0xde>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	f040 80af 	bne.w	800593c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d03a      	beq.n	800585c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da1b      	bge.n	8005828 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	33b0      	adds	r3, #176	; 0xb0
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005806:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	88d2      	ldrh	r2, [r2, #6]
 800580c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	88db      	ldrh	r3, [r3, #6]
 8005812:	2b07      	cmp	r3, #7
 8005814:	bf28      	it	cs
 8005816:	2307      	movcs	r3, #7
 8005818:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	89fa      	ldrh	r2, [r7, #14]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 fd89 	bl	8007338 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005826:	e090      	b.n	800594a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	785a      	ldrb	r2, [r3, #1]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	88db      	ldrh	r3, [r3, #6]
 8005836:	2b3f      	cmp	r3, #63	; 0x3f
 8005838:	d803      	bhi.n	8005842 <USBD_CDC_Setup+0xa6>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	88db      	ldrh	r3, [r3, #6]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	e000      	b.n	8005844 <USBD_CDC_Setup+0xa8>
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005852:	461a      	mov	r2, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fd9b 	bl	8007390 <USBD_CtlPrepareRx>
      break;
 800585a:	e076      	b.n	800594a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	33b0      	adds	r3, #176	; 0xb0
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	7850      	ldrb	r0, [r2, #1]
 8005872:	2200      	movs	r2, #0
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	4798      	blx	r3
      break;
 8005878:	e067      	b.n	800594a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b0b      	cmp	r3, #11
 8005880:	d851      	bhi.n	8005926 <USBD_CDC_Setup+0x18a>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <USBD_CDC_Setup+0xec>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058b9 	.word	0x080058b9
 800588c:	08005935 	.word	0x08005935
 8005890:	08005927 	.word	0x08005927
 8005894:	08005927 	.word	0x08005927
 8005898:	08005927 	.word	0x08005927
 800589c:	08005927 	.word	0x08005927
 80058a0:	08005927 	.word	0x08005927
 80058a4:	08005927 	.word	0x08005927
 80058a8:	08005927 	.word	0x08005927
 80058ac:	08005927 	.word	0x08005927
 80058b0:	080058e3 	.word	0x080058e3
 80058b4:	0800590d 	.word	0x0800590d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d107      	bne.n	80058d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058c4:	f107 030a 	add.w	r3, r7, #10
 80058c8:	2202      	movs	r2, #2
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fd33 	bl	8007338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058d2:	e032      	b.n	800593a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fcbd 	bl	8007256 <USBD_CtlError>
            ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	75fb      	strb	r3, [r7, #23]
          break;
 80058e0:	e02b      	b.n	800593a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d107      	bne.n	80058fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058ee:	f107 030d 	add.w	r3, r7, #13
 80058f2:	2201      	movs	r2, #1
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 fd1e 	bl	8007338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058fc:	e01d      	b.n	800593a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fca8 	bl	8007256 <USBD_CtlError>
            ret = USBD_FAIL;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e016      	b.n	800593a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b03      	cmp	r3, #3
 8005916:	d00f      	beq.n	8005938 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fc9b 	bl	8007256 <USBD_CtlError>
            ret = USBD_FAIL;
 8005920:	2303      	movs	r3, #3
 8005922:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005924:	e008      	b.n	8005938 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fc94 	bl	8007256 <USBD_CtlError>
          ret = USBD_FAIL;
 800592e:	2303      	movs	r3, #3
 8005930:	75fb      	strb	r3, [r7, #23]
          break;
 8005932:	e002      	b.n	800593a <USBD_CDC_Setup+0x19e>
          break;
 8005934:	bf00      	nop
 8005936:	e008      	b.n	800594a <USBD_CDC_Setup+0x1ae>
          break;
 8005938:	bf00      	nop
      }
      break;
 800593a:	e006      	b.n	800594a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fc89 	bl	8007256 <USBD_CtlError>
      ret = USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	bf00      	nop
  }

  return (uint8_t)ret;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32b0      	adds	r2, #176	; 0xb0
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800597a:	2303      	movs	r3, #3
 800597c:	e065      	b.n	8005a4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	32b0      	adds	r2, #176	; 0xb0
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	f003 020f 	and.w	r2, r3, #15
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3318      	adds	r3, #24
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02f      	beq.n	8005a08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	3318      	adds	r3, #24
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 010f 	and.w	r1, r3, #15
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	460b      	mov	r3, r1
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4403      	add	r3, r0
 80059d0:	3348      	adds	r3, #72	; 0x48
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d112      	bne.n	8005a08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3318      	adds	r3, #24
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059fa:	78f9      	ldrb	r1, [r7, #3]
 80059fc:	2300      	movs	r3, #0
 80059fe:	2200      	movs	r2, #0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f002 f9ca 	bl	8007d9a <USBD_LL_Transmit>
 8005a06:	e01f      	b.n	8005a48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	33b0      	adds	r3, #176	; 0xb0
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d010      	beq.n	8005a48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	33b0      	adds	r3, #176	; 0xb0
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	32b0      	adds	r2, #176	; 0xb0
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	32b0      	adds	r2, #176	; 0xb0
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e01a      	b.n	8005aba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f002 f9c8 	bl	8007e1e <USBD_LL_GetRxDataSize>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	33b0      	adds	r3, #176	; 0xb0
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	32b0      	adds	r2, #176	; 0xb0
 8005ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e025      	b.n	8005b30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	33b0      	adds	r3, #176	; 0xb0
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <USBD_CDC_EP0_RxReady+0x6c>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005afe:	2bff      	cmp	r3, #255	; 0xff
 8005b00:	d015      	beq.n	8005b2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	33b0      	adds	r3, #176	; 0xb0
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b22:	b292      	uxth	r2, r2
 8005b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	22ff      	movs	r2, #255	; 0xff
 8005b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b40:	2182      	movs	r1, #130	; 0x82
 8005b42:	4818      	ldr	r0, [pc, #96]	; (8005ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b44:	f000 fd4f 	bl	80065e6 <USBD_GetEpDesc>
 8005b48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4815      	ldr	r0, [pc, #84]	; (8005ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b4e:	f000 fd4a 	bl	80065e6 <USBD_GetEpDesc>
 8005b52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b54:	2181      	movs	r1, #129	; 0x81
 8005b56:	4813      	ldr	r0, [pc, #76]	; (8005ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b58:	f000 fd45 	bl	80065e6 <USBD_GetEpDesc>
 8005b5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2210      	movs	r2, #16
 8005b68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	711a      	strb	r2, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b8c:	711a      	strb	r2, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2243      	movs	r2, #67	; 0x43
 8005b96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b98:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000050 	.word	0x20000050

08005ba8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bb0:	2182      	movs	r1, #130	; 0x82
 8005bb2:	4818      	ldr	r0, [pc, #96]	; (8005c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bb4:	f000 fd17 	bl	80065e6 <USBD_GetEpDesc>
 8005bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4815      	ldr	r0, [pc, #84]	; (8005c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bbe:	f000 fd12 	bl	80065e6 <USBD_GetEpDesc>
 8005bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bc4:	2181      	movs	r1, #129	; 0x81
 8005bc6:	4813      	ldr	r0, [pc, #76]	; (8005c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bc8:	f000 fd0d 	bl	80065e6 <USBD_GetEpDesc>
 8005bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2200      	movs	r2, #0
 8005be4:	711a      	strb	r2, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f042 0202 	orr.w	r2, r2, #2
 8005bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	711a      	strb	r2, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f042 0202 	orr.w	r2, r2, #2
 8005c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2243      	movs	r2, #67	; 0x43
 8005c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c08:	4b02      	ldr	r3, [pc, #8]	; (8005c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000050 	.word	0x20000050

08005c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c20:	2182      	movs	r1, #130	; 0x82
 8005c22:	4818      	ldr	r0, [pc, #96]	; (8005c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c24:	f000 fcdf 	bl	80065e6 <USBD_GetEpDesc>
 8005c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4815      	ldr	r0, [pc, #84]	; (8005c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c2e:	f000 fcda 	bl	80065e6 <USBD_GetEpDesc>
 8005c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c34:	2181      	movs	r1, #129	; 0x81
 8005c36:	4813      	ldr	r0, [pc, #76]	; (8005c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c38:	f000 fcd5 	bl	80065e6 <USBD_GetEpDesc>
 8005c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2210      	movs	r2, #16
 8005c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c58:	711a      	strb	r2, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6c:	711a      	strb	r2, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2243      	movs	r2, #67	; 0x43
 8005c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000050 	.word	0x20000050

08005c88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	220a      	movs	r2, #10
 8005c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c96:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	2000000c 	.word	0x2000000c

08005ca8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e009      	b.n	8005cd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	33b0      	adds	r3, #176	; 0xb0
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	32b0      	adds	r2, #176	; 0xb0
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e008      	b.n	8005d14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	32b0      	adds	r2, #176	; 0xb0
 8005d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e004      	b.n	8005d4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	32b0      	adds	r2, #176	; 0xb0
 8005d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	32b0      	adds	r2, #176	; 0xb0
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e025      	b.n	8005dda <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11f      	bne.n	8005dd8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005da0:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <USBD_CDC_TransmitPacket+0x88>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4403      	add	r3, r0
 8005dba:	3318      	adds	r3, #24
 8005dbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <USBD_CDC_TransmitPacket+0x88>)
 8005dc0:	7819      	ldrb	r1, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 ffe3 	bl	8007d9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000093 	.word	0x20000093

08005de8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	32b0      	adds	r2, #176	; 0xb0
 8005dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32b0      	adds	r2, #176	; 0xb0
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e018      	b.n	8005e48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7c1b      	ldrb	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <USBD_CDC_ReceivePacket+0x68>)
 8005e20:	7819      	ldrb	r1, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 ffd5 	bl	8007ddc <USBD_LL_PrepareReceive>
 8005e32:	e008      	b.n	8005e46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <USBD_CDC_ReceivePacket+0x68>)
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ffcb 	bl	8007ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000094 	.word	0x20000094

08005e54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e01f      	b.n	8005eac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	79fa      	ldrb	r2, [r7, #7]
 8005e9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f001 fe45 	bl	8007b30 <USBD_LL_Init>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e025      	b.n	8005f18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	32ae      	adds	r2, #174	; 0xae
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00f      	beq.n	8005f08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32ae      	adds	r2, #174	; 0xae
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	f107 020e 	add.w	r2, r7, #14
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fe4d 	bl	8007bc8 <USBD_LL_Start>
 8005f2e:	4603      	mov	r3, r0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	4611      	mov	r1, r2
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 f908 	bl	80071e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d01a      	beq.n	800602c <USBD_LL_SetupStage+0x72>
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d822      	bhi.n	8006040 <USBD_LL_SetupStage+0x86>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <USBD_LL_SetupStage+0x4a>
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d00a      	beq.n	8006018 <USBD_LL_SetupStage+0x5e>
 8006002:	e01d      	b.n	8006040 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fb5f 	bl	80066d0 <USBD_StdDevReq>
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
      break;
 8006016:	e020      	b.n	800605a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fbc7 	bl	80067b4 <USBD_StdItfReq>
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
      break;
 800602a:	e016      	b.n	800605a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fc29 	bl	800688c <USBD_StdEPReq>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
      break;
 800603e:	e00c      	b.n	800605a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800604a:	b2db      	uxtb	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fe1a 	bl	8007c88 <USBD_LL_StallEP>
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]
      break;
 8006058:	bf00      	nop
  }

  return ret;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	460b      	mov	r3, r1
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d16e      	bne.n	800615a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800608a:	2b03      	cmp	r3, #3
 800608c:	f040 8098 	bne.w	80061c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	429a      	cmp	r2, r3
 800609a:	d913      	bls.n	80060c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	1ad2      	subs	r2, r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bf28      	it	cs
 80060b6:	4613      	movcs	r3, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 f984 	bl	80073ca <USBD_CtlContinueRx>
 80060c2:	e07d      	b.n	80061c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d014      	beq.n	80060fc <USBD_LL_DataOutStage+0x98>
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d81d      	bhi.n	8006112 <USBD_LL_DataOutStage+0xae>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <USBD_LL_DataOutStage+0x7c>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d003      	beq.n	80060e6 <USBD_LL_DataOutStage+0x82>
 80060de:	e018      	b.n	8006112 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75bb      	strb	r3, [r7, #22]
            break;
 80060e4:	e018      	b.n	8006118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4619      	mov	r1, r3
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fa5e 	bl	80065b2 <USBD_CoreFindIF>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75bb      	strb	r3, [r7, #22]
            break;
 80060fa:	e00d      	b.n	8006118 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006102:	b2db      	uxtb	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fa60 	bl	80065cc <USBD_CoreFindEP>
 800610c:	4603      	mov	r3, r0
 800610e:	75bb      	strb	r3, [r7, #22]
            break;
 8006110:	e002      	b.n	8006118 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	75bb      	strb	r3, [r7, #22]
            break;
 8006116:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d119      	bne.n	8006152 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d113      	bne.n	8006152 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800612a:	7dba      	ldrb	r2, [r7, #22]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	32ae      	adds	r2, #174	; 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800613a:	7dba      	ldrb	r2, [r7, #22]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006142:	7dba      	ldrb	r2, [r7, #22]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	32ae      	adds	r2, #174	; 0xae
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f001 f94a 	bl	80073ec <USBD_CtlSendStatus>
 8006158:	e032      	b.n	80061c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006160:	b2db      	uxtb	r3, r3
 8006162:	4619      	mov	r1, r3
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fa31 	bl	80065cc <USBD_CoreFindEP>
 800616a:	4603      	mov	r3, r0
 800616c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800616e:	7dbb      	ldrb	r3, [r7, #22]
 8006170:	2bff      	cmp	r3, #255	; 0xff
 8006172:	d025      	beq.n	80061c0 <USBD_LL_DataOutStage+0x15c>
 8006174:	7dbb      	ldrb	r3, [r7, #22]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d122      	bne.n	80061c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d117      	bne.n	80061b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006186:	7dba      	ldrb	r2, [r7, #22]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	32ae      	adds	r2, #174	; 0xae
 800618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006196:	7dba      	ldrb	r2, [r7, #22]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800619e:	7dba      	ldrb	r2, [r7, #22]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	32ae      	adds	r2, #174	; 0xae
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	7afa      	ldrb	r2, [r7, #11]
 80061ac:	4611      	mov	r1, r2
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	4798      	blx	r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	e000      	b.n	80061c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	460b      	mov	r3, r1
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d16f      	bne.n	80062be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3314      	adds	r3, #20
 80061e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d15a      	bne.n	80062a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d914      	bls.n	8006224 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	461a      	mov	r2, r3
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 f8ac 	bl	800736e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	2100      	movs	r1, #0
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f001 fddd 	bl	8007ddc <USBD_LL_PrepareReceive>
 8006222:	e03f      	b.n	80062a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d11c      	bne.n	800626a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006238:	429a      	cmp	r2, r3
 800623a:	d316      	bcc.n	800626a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006246:	429a      	cmp	r2, r3
 8006248:	d20f      	bcs.n	800626a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800624a:	2200      	movs	r2, #0
 800624c:	2100      	movs	r1, #0
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f001 f88d 	bl	800736e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800625c:	2300      	movs	r3, #0
 800625e:	2200      	movs	r2, #0
 8006260:	2100      	movs	r1, #0
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f001 fdba 	bl	8007ddc <USBD_LL_PrepareReceive>
 8006268:	e01c      	b.n	80062a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d10f      	bne.n	8006296 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f001 fcf5 	bl	8007c88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f001 f8b7 	bl	8007412 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d03a      	beq.n	8006324 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff fe42 	bl	8005f38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062bc:	e032      	b.n	8006324 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80062be:	7afb      	ldrb	r3, [r7, #11]
 80062c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f97f 	bl	80065cc <USBD_CoreFindEP>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2bff      	cmp	r3, #255	; 0xff
 80062d6:	d025      	beq.n	8006324 <USBD_LL_DataInStage+0x15a>
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d122      	bne.n	8006324 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d11c      	bne.n	8006324 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062ea:	7dfa      	ldrb	r2, [r7, #23]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	32ae      	adds	r2, #174	; 0xae
 80062f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d014      	beq.n	8006324 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062fa:	7dfa      	ldrb	r2, [r7, #23]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006302:	7dfa      	ldrb	r2, [r7, #23]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	32ae      	adds	r2, #174	; 0xae
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	7afa      	ldrb	r2, [r7, #11]
 8006310:	4611      	mov	r1, r2
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800631a:	7dbb      	ldrb	r3, [r7, #22]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006320:	7dbb      	ldrb	r3, [r7, #22]
 8006322:	e000      	b.n	8006326 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d014      	beq.n	8006394 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6852      	ldr	r2, [r2, #4]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	4611      	mov	r1, r2
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fc2f 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	2200      	movs	r2, #0
 80063b4:	2180      	movs	r1, #128	; 0x80
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fc21 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2240      	movs	r2, #64	; 0x40
 80063c6:	621a      	str	r2, [r3, #32]

  return ret;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006400:	b2da      	uxtb	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2204      	movs	r2, #4
 800640c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b04      	cmp	r3, #4
 8006430:	d106      	bne.n	8006440 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006438:	b2da      	uxtb	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b03      	cmp	r3, #3
 8006460:	d110      	bne.n	8006484 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	32ae      	adds	r2, #174	; 0xae
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01c      	b.n	80064ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d115      	bne.n	80064e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	32ae      	adds	r2, #174	; 0xae
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32ae      	adds	r2, #174	; 0xae
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	4611      	mov	r1, r2
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	32ae      	adds	r2, #174	; 0xae
 8006508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006510:	2303      	movs	r3, #3
 8006512:	e01c      	b.n	800654e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b03      	cmp	r3, #3
 800651e:	d115      	bne.n	800654c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32ae      	adds	r2, #174	; 0xae
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	32ae      	adds	r2, #174	; 0xae
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	4611      	mov	r1, r2
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6852      	ldr	r2, [r2, #4]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	4611      	mov	r1, r2
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065a4:	2303      	movs	r3, #3
 80065a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b086      	sub	sp, #24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	885b      	ldrh	r3, [r3, #2]
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	429a      	cmp	r2, r3
 800660c:	d920      	bls.n	8006650 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006616:	e013      	b.n	8006640 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006618:	f107 030a 	add.w	r3, r7, #10
 800661c:	4619      	mov	r1, r3
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f000 f81b 	bl	800665a <USBD_GetNextDesc>
 8006624:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b05      	cmp	r3, #5
 800662c:	d108      	bne.n	8006640 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	789b      	ldrb	r3, [r3, #2]
 8006636:	78fa      	ldrb	r2, [r7, #3]
 8006638:	429a      	cmp	r2, r3
 800663a:	d008      	beq.n	800664e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	885b      	ldrh	r3, [r3, #2]
 8006644:	b29a      	uxth	r2, r3
 8006646:	897b      	ldrh	r3, [r7, #10]
 8006648:	429a      	cmp	r2, r3
 800664a:	d8e5      	bhi.n	8006618 <USBD_GetEpDesc+0x32>
 800664c:	e000      	b.n	8006650 <USBD_GetEpDesc+0x6a>
          break;
 800664e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006650:	693b      	ldr	r3, [r7, #16]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	4413      	add	r3, r2
 8006674:	b29a      	uxth	r2, r3
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006686:	68fb      	ldr	r3, [r7, #12]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	3301      	adds	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066b2:	8a3b      	ldrh	r3, [r7, #16]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	b21a      	sxth	r2, r3
 80066b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066bc:	4313      	orrs	r3, r2
 80066be:	b21b      	sxth	r3, r3
 80066c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066c2:	89fb      	ldrh	r3, [r7, #14]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e6:	2b40      	cmp	r3, #64	; 0x40
 80066e8:	d005      	beq.n	80066f6 <USBD_StdDevReq+0x26>
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d857      	bhi.n	800679e <USBD_StdDevReq+0xce>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00f      	beq.n	8006712 <USBD_StdDevReq+0x42>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d153      	bne.n	800679e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	32ae      	adds	r2, #174	; 0xae
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
      break;
 8006710:	e04a      	b.n	80067a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b09      	cmp	r3, #9
 8006718:	d83b      	bhi.n	8006792 <USBD_StdDevReq+0xc2>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <USBD_StdDevReq+0x50>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006775 	.word	0x08006775
 8006724:	08006789 	.word	0x08006789
 8006728:	08006793 	.word	0x08006793
 800672c:	0800677f 	.word	0x0800677f
 8006730:	08006793 	.word	0x08006793
 8006734:	08006753 	.word	0x08006753
 8006738:	08006749 	.word	0x08006749
 800673c:	08006793 	.word	0x08006793
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800675d 	.word	0x0800675d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa3c 	bl	8006bc8 <USBD_GetDescriptor>
          break;
 8006750:	e024      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fba1 	bl	8006e9c <USBD_SetAddress>
          break;
 800675a:	e01f      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbe0 	bl	8006f24 <USBD_SetConfig>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
          break;
 8006768:	e018      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc83 	bl	8007078 <USBD_GetConfig>
          break;
 8006772:	e013      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fcb4 	bl	80070e4 <USBD_GetStatus>
          break;
 800677c:	e00e      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fce3 	bl	800714c <USBD_SetFeature>
          break;
 8006786:	e009      	b.n	800679c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fd07 	bl	800719e <USBD_ClrFeature>
          break;
 8006790:	e004      	b.n	800679c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fd5e 	bl	8007256 <USBD_CtlError>
          break;
 800679a:	bf00      	nop
      }
      break;
 800679c:	e004      	b.n	80067a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd58 	bl	8007256 <USBD_CtlError>
      break;
 80067a6:	bf00      	nop
  }

  return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop

080067b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d005      	beq.n	80067da <USBD_StdItfReq+0x26>
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d852      	bhi.n	8006878 <USBD_StdItfReq+0xc4>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <USBD_StdItfReq+0x26>
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d14e      	bne.n	8006878 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d840      	bhi.n	800686a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	889b      	ldrh	r3, [r3, #4]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d836      	bhi.n	8006860 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	889b      	ldrh	r3, [r3, #4]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fed9 	bl	80065b2 <USBD_CoreFindIF>
 8006800:	4603      	mov	r3, r0
 8006802:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d01d      	beq.n	8006846 <USBD_StdItfReq+0x92>
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11a      	bne.n	8006846 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006810:	7bba      	ldrb	r2, [r7, #14]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32ae      	adds	r2, #174	; 0xae
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006820:	7bba      	ldrb	r2, [r7, #14]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006828:	7bba      	ldrb	r2, [r7, #14]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32ae      	adds	r2, #174	; 0xae
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800683e:	e004      	b.n	800684a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006844:	e001      	b.n	800684a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	88db      	ldrh	r3, [r3, #6]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d110      	bne.n	8006874 <USBD_StdItfReq+0xc0>
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fdc7 	bl	80073ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800685e:	e009      	b.n	8006874 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fcf7 	bl	8007256 <USBD_CtlError>
          break;
 8006868:	e004      	b.n	8006874 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fcf2 	bl	8007256 <USBD_CtlError>
          break;
 8006872:	e000      	b.n	8006876 <USBD_StdItfReq+0xc2>
          break;
 8006874:	bf00      	nop
      }
      break;
 8006876:	e004      	b.n	8006882 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fceb 	bl	8007256 <USBD_CtlError>
      break;
 8006880:	bf00      	nop
  }

  return ret;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	889b      	ldrh	r3, [r3, #4]
 800689e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d007      	beq.n	80068bc <USBD_StdEPReq+0x30>
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	f200 817f 	bhi.w	8006bb0 <USBD_StdEPReq+0x324>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d02a      	beq.n	800690c <USBD_StdEPReq+0x80>
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f040 817a 	bne.w	8006bb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fe83 	bl	80065cc <USBD_CoreFindEP>
 80068c6:	4603      	mov	r3, r0
 80068c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068ca:	7b7b      	ldrb	r3, [r7, #13]
 80068cc:	2bff      	cmp	r3, #255	; 0xff
 80068ce:	f000 8174 	beq.w	8006bba <USBD_StdEPReq+0x32e>
 80068d2:	7b7b      	ldrb	r3, [r7, #13]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8170 	bne.w	8006bba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068da:	7b7a      	ldrb	r2, [r7, #13]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068e2:	7b7a      	ldrb	r2, [r7, #13]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32ae      	adds	r2, #174	; 0xae
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8163 	beq.w	8006bba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068f4:	7b7a      	ldrb	r2, [r7, #13]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32ae      	adds	r2, #174	; 0xae
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800690a:	e156      	b.n	8006bba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d008      	beq.n	8006926 <USBD_StdEPReq+0x9a>
 8006914:	2b03      	cmp	r3, #3
 8006916:	f300 8145 	bgt.w	8006ba4 <USBD_StdEPReq+0x318>
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 809b 	beq.w	8006a56 <USBD_StdEPReq+0x1ca>
 8006920:	2b01      	cmp	r3, #1
 8006922:	d03c      	beq.n	800699e <USBD_StdEPReq+0x112>
 8006924:	e13e      	b.n	8006ba4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d002      	beq.n	8006938 <USBD_StdEPReq+0xac>
 8006932:	2b03      	cmp	r3, #3
 8006934:	d016      	beq.n	8006964 <USBD_StdEPReq+0xd8>
 8006936:	e02c      	b.n	8006992 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <USBD_StdEPReq+0xce>
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d00a      	beq.n	800695a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f99d 	bl	8007c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800694e:	2180      	movs	r1, #128	; 0x80
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f999 	bl	8007c88 <USBD_LL_StallEP>
 8006956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006958:	e020      	b.n	800699c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc7a 	bl	8007256 <USBD_CtlError>
              break;
 8006962:	e01b      	b.n	800699c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	885b      	ldrh	r3, [r3, #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10e      	bne.n	800698a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <USBD_StdEPReq+0xfe>
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d008      	beq.n	800698a <USBD_StdEPReq+0xfe>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	88db      	ldrh	r3, [r3, #6]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f97f 	bl	8007c88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fd2e 	bl	80073ec <USBD_CtlSendStatus>

              break;
 8006990:	e004      	b.n	800699c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc5e 	bl	8007256 <USBD_CtlError>
              break;
 800699a:	bf00      	nop
          }
          break;
 800699c:	e107      	b.n	8006bae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d002      	beq.n	80069b0 <USBD_StdEPReq+0x124>
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d016      	beq.n	80069dc <USBD_StdEPReq+0x150>
 80069ae:	e04b      	b.n	8006a48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <USBD_StdEPReq+0x146>
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	2b80      	cmp	r3, #128	; 0x80
 80069ba:	d00a      	beq.n	80069d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 f961 	bl	8007c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 f95d 	bl	8007c88 <USBD_LL_StallEP>
 80069ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069d0:	e040      	b.n	8006a54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc3e 	bl	8007256 <USBD_CtlError>
              break;
 80069da:	e03b      	b.n	8006a54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	885b      	ldrh	r3, [r3, #2]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d136      	bne.n	8006a52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f967 	bl	8007cc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fcf7 	bl	80073ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fde2 	bl	80065cc <USBD_CoreFindEP>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a0c:	7b7b      	ldrb	r3, [r7, #13]
 8006a0e:	2bff      	cmp	r3, #255	; 0xff
 8006a10:	d01f      	beq.n	8006a52 <USBD_StdEPReq+0x1c6>
 8006a12:	7b7b      	ldrb	r3, [r7, #13]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11c      	bne.n	8006a52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a18:	7b7a      	ldrb	r2, [r7, #13]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a20:	7b7a      	ldrb	r2, [r7, #13]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	32ae      	adds	r2, #174	; 0xae
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a30:	7b7a      	ldrb	r2, [r7, #13]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32ae      	adds	r2, #174	; 0xae
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a46:	e004      	b.n	8006a52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fc03 	bl	8007256 <USBD_CtlError>
              break;
 8006a50:	e000      	b.n	8006a54 <USBD_StdEPReq+0x1c8>
              break;
 8006a52:	bf00      	nop
          }
          break;
 8006a54:	e0ab      	b.n	8006bae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d002      	beq.n	8006a68 <USBD_StdEPReq+0x1dc>
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d032      	beq.n	8006acc <USBD_StdEPReq+0x240>
 8006a66:	e097      	b.n	8006b98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <USBD_StdEPReq+0x1f2>
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d004      	beq.n	8006a7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fbed 	bl	8007256 <USBD_CtlError>
                break;
 8006a7c:	e091      	b.n	8006ba2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da0b      	bge.n	8006a9e <USBD_StdEPReq+0x212>
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	3310      	adds	r3, #16
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	e00b      	b.n	8006ab6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc37 	bl	8007338 <USBD_CtlSendData>
              break;
 8006aca:	e06a      	b.n	8006ba2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da11      	bge.n	8006af8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d117      	bne.n	8006b1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fbb0 	bl	8007256 <USBD_CtlError>
                  break;
 8006af6:	e054      	b.n	8006ba2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	f003 020f 	and.w	r2, r3, #15
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fb9d 	bl	8007256 <USBD_CtlError>
                  break;
 8006b1c:	e041      	b.n	8006ba2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da0b      	bge.n	8006b3e <USBD_StdEPReq+0x2b2>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	3310      	adds	r3, #16
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	e00b      	b.n	8006b56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <USBD_StdEPReq+0x2d8>
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b80      	cmp	r3, #128	; 0x80
 8006b62:	d103      	bne.n	8006b6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e00e      	b.n	8006b8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f8c7 	bl	8007d04 <USBD_LL_IsStallEP>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbd1 	bl	8007338 <USBD_CtlSendData>
              break;
 8006b96:	e004      	b.n	8006ba2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb5b 	bl	8007256 <USBD_CtlError>
              break;
 8006ba0:	bf00      	nop
          }
          break;
 8006ba2:	e004      	b.n	8006bae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fb55 	bl	8007256 <USBD_CtlError>
          break;
 8006bac:	bf00      	nop
      }
      break;
 8006bae:	e005      	b.n	8006bbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb4f 	bl	8007256 <USBD_CtlError>
      break;
 8006bb8:	e000      	b.n	8006bbc <USBD_StdEPReq+0x330>
      break;
 8006bba:	bf00      	nop
  }

  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	f200 8128 	bhi.w	8006e3e <USBD_GetDescriptor+0x276>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <USBD_GetDescriptor+0x2c>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c11 	.word	0x08006c11
 8006bf8:	08006c29 	.word	0x08006c29
 8006bfc:	08006c69 	.word	0x08006c69
 8006c00:	08006e3f 	.word	0x08006e3f
 8006c04:	08006e3f 	.word	0x08006e3f
 8006c08:	08006ddf 	.word	0x08006ddf
 8006c0c:	08006e0b 	.word	0x08006e0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
      break;
 8006c26:	e112      	b.n	8006e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7c1b      	ldrb	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10d      	bne.n	8006c4c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f107 0208 	add.w	r2, r7, #8
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
 8006c40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	2202      	movs	r2, #2
 8006c48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c4a:	e100      	b.n	8006e4e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	f107 0208 	add.w	r2, r7, #8
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3301      	adds	r3, #1
 8006c62:	2202      	movs	r2, #2
 8006c64:	701a      	strb	r2, [r3, #0]
      break;
 8006c66:	e0f2      	b.n	8006e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	f200 80ac 	bhi.w	8006dcc <USBD_GetDescriptor+0x204>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <USBD_GetDescriptor+0xb4>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006cc9 	.word	0x08006cc9
 8006c84:	08006cfd 	.word	0x08006cfd
 8006c88:	08006d31 	.word	0x08006d31
 8006c8c:	08006d65 	.word	0x08006d65
 8006c90:	08006d99 	.word	0x08006d99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	7c12      	ldrb	r2, [r2, #16]
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb6:	e091      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 facb 	bl	8007256 <USBD_CtlError>
            err++;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cc6:	e089      	b.n	8006ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	f107 0108 	add.w	r1, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cea:	e077      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fab1 	bl	8007256 <USBD_CtlError>
            err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cfa:	e06f      	b.n	8006ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	7c12      	ldrb	r2, [r2, #16]
 8006d14:	f107 0108 	add.w	r1, r7, #8
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1e:	e05d      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa97 	bl	8007256 <USBD_CtlError>
            err++;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2e:	e055      	b.n	8006ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e043      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa7d 	bl	8007256 <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e03b      	b.n	8006ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e029      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa63 	bl	8007256 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e021      	b.n	8006ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e00f      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa49 	bl	8007256 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e007      	b.n	8006ddc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa41 	bl	8007256 <USBD_CtlError>
          err++;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006dda:	bf00      	nop
      }
      break;
 8006ddc:	e037      	b.n	8006e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7c1b      	ldrb	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f107 0208 	add.w	r2, r7, #8
 8006df2:	4610      	mov	r0, r2
 8006df4:	4798      	blx	r3
 8006df6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006df8:	e029      	b.n	8006e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa2a 	bl	8007256 <USBD_CtlError>
        err++;
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	3301      	adds	r3, #1
 8006e06:	72fb      	strb	r3, [r7, #11]
      break;
 8006e08:	e021      	b.n	8006e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7c1b      	ldrb	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	f107 0208 	add.w	r2, r7, #8
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4798      	blx	r3
 8006e22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	2207      	movs	r2, #7
 8006e2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e2c:	e00f      	b.n	8006e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa10 	bl	8007256 <USBD_CtlError>
        err++;
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e3c:	e007      	b.n	8006e4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa08 	bl	8007256 <USBD_CtlError>
      err++;
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e4c:	bf00      	nop
  }

  if (err != 0U)
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11e      	bne.n	8006e92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d016      	beq.n	8006e8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e5c:	893b      	ldrh	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	88da      	ldrh	r2, [r3, #6]
 8006e66:	893b      	ldrh	r3, [r7, #8]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	bf28      	it	cs
 8006e6c:	4613      	movcs	r3, r2
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e72:	893b      	ldrh	r3, [r7, #8]
 8006e74:	461a      	mov	r2, r3
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa5d 	bl	8007338 <USBD_CtlSendData>
 8006e7e:	e009      	b.n	8006e94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9e7 	bl	8007256 <USBD_CtlError>
 8006e88:	e004      	b.n	8006e94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 faae 	bl	80073ec <USBD_CtlSendStatus>
 8006e90:	e000      	b.n	8006e94 <USBD_GetDescriptor+0x2cc>
    return;
 8006e92:	bf00      	nop
  }
}
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop

08006e9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	889b      	ldrh	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d131      	bne.n	8006f12 <USBD_SetAddress+0x76>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88db      	ldrh	r3, [r3, #6]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d12d      	bne.n	8006f12 <USBD_SetAddress+0x76>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebc:	d829      	bhi.n	8006f12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	885b      	ldrh	r3, [r3, #2]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d104      	bne.n	8006ee0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f9bc 	bl	8007256 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ede:	e01d      	b.n	8006f1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7bfa      	ldrb	r2, [r7, #15]
 8006ee4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff35 	bl	8007d5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa7a 	bl	80073ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f06:	e009      	b.n	8006f1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f10:	e004      	b.n	8006f1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f99e 	bl	8007256 <USBD_CtlError>
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	4b4e      	ldr	r3, [pc, #312]	; (8007074 <USBD_SetConfig+0x150>)
 8006f3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <USBD_SetConfig+0x150>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d905      	bls.n	8006f50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f985 	bl	8007256 <USBD_CtlError>
    return USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e08c      	b.n	800706a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d002      	beq.n	8006f62 <USBD_SetConfig+0x3e>
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d029      	beq.n	8006fb4 <USBD_SetConfig+0x90>
 8006f60:	e075      	b.n	800704e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f62:	4b44      	ldr	r3, [pc, #272]	; (8007074 <USBD_SetConfig+0x150>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d020      	beq.n	8006fac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f6a:	4b42      	ldr	r3, [pc, #264]	; (8007074 <USBD_SetConfig+0x150>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f74:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <USBD_SetConfig+0x150>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fe ffe7 	bl	8005f4e <USBD_SetClassConfig>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f962 	bl	8007256 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f9a:	e065      	b.n	8007068 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa25 	bl	80073ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2203      	movs	r2, #3
 8006fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006faa:	e05d      	b.n	8007068 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa1d 	bl	80073ec <USBD_CtlSendStatus>
      break;
 8006fb2:	e059      	b.n	8007068 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fb4:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <USBD_SetConfig+0x150>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d112      	bne.n	8006fe2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <USBD_SetConfig+0x150>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fce:	4b29      	ldr	r3, [pc, #164]	; (8007074 <USBD_SetConfig+0x150>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fe ffd6 	bl	8005f86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa06 	bl	80073ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fe0:	e042      	b.n	8007068 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <USBD_SetConfig+0x150>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d02a      	beq.n	8007046 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe ffc4 	bl	8005f86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <USBD_SetConfig+0x150>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <USBD_SetConfig+0x150>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fe ff9d 	bl	8005f4e <USBD_SetClassConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f918 	bl	8007256 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fe ffa9 	bl	8005f86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800703c:	e014      	b.n	8007068 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9d4 	bl	80073ec <USBD_CtlSendStatus>
      break;
 8007044:	e010      	b.n	8007068 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9d0 	bl	80073ec <USBD_CtlSendStatus>
      break;
 800704c:	e00c      	b.n	8007068 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f900 	bl	8007256 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <USBD_SetConfig+0x150>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fe ff92 	bl	8005f86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	73fb      	strb	r3, [r7, #15]
      break;
 8007066:	bf00      	nop
  }

  return ret;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000150 	.word	0x20000150

08007078 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	88db      	ldrh	r3, [r3, #6]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d004      	beq.n	8007094 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8e2 	bl	8007256 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007092:	e023      	b.n	80070dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	dc02      	bgt.n	80070a6 <USBD_GetConfig+0x2e>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dc03      	bgt.n	80070ac <USBD_GetConfig+0x34>
 80070a4:	e015      	b.n	80070d2 <USBD_GetConfig+0x5a>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d00b      	beq.n	80070c2 <USBD_GetConfig+0x4a>
 80070aa:	e012      	b.n	80070d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3308      	adds	r3, #8
 80070b6:	2201      	movs	r2, #1
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f93c 	bl	8007338 <USBD_CtlSendData>
        break;
 80070c0:	e00c      	b.n	80070dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2201      	movs	r2, #1
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f934 	bl	8007338 <USBD_CtlSendData>
        break;
 80070d0:	e004      	b.n	80070dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f8be 	bl	8007256 <USBD_CtlError>
        break;
 80070da:	bf00      	nop
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d81e      	bhi.n	800713a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	88db      	ldrh	r3, [r3, #6]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d004      	beq.n	800710e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f8a5 	bl	8007256 <USBD_CtlError>
        break;
 800710c:	e01a      	b.n	8007144 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f043 0202 	orr.w	r2, r3, #2
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	330c      	adds	r3, #12
 800712e:	2202      	movs	r2, #2
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f900 	bl	8007338 <USBD_CtlSendData>
      break;
 8007138:	e004      	b.n	8007144 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f88a 	bl	8007256 <USBD_CtlError>
      break;
 8007142:	bf00      	nop
  }
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f940 	bl	80073ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800716c:	e013      	b.n	8007196 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	885b      	ldrh	r3, [r3, #2]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d10b      	bne.n	800718e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f930 	bl	80073ec <USBD_CtlSendStatus>
}
 800718c:	e003      	b.n	8007196 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f860 	bl	8007256 <USBD_CtlError>
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d80b      	bhi.n	80071ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d10c      	bne.n	80071d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f910 	bl	80073ec <USBD_CtlSendStatus>
      }
      break;
 80071cc:	e004      	b.n	80071d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f840 	bl	8007256 <USBD_CtlError>
      break;
 80071d6:	e000      	b.n	80071da <USBD_ClrFeature+0x3c>
      break;
 80071d8:	bf00      	nop
  }
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff fa41 	bl	8006694 <SWAPBYTE>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fa34 	bl	8006694 <SWAPBYTE>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fa27 	bl	8006694 <SWAPBYTE>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	80da      	strh	r2, [r3, #6]
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007260:	2180      	movs	r1, #128	; 0x80
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fd10 	bl	8007c88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd0c 	bl	8007c88 <USBD_LL_StallEP>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d036      	beq.n	80072fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007292:	6938      	ldr	r0, [r7, #16]
 8007294:	f000 f836 	bl	8007304 <USBD_GetLen>
 8007298:	4603      	mov	r3, r0
 800729a:	3301      	adds	r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	4413      	add	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	7812      	ldrb	r2, [r2, #0]
 80072b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	3301      	adds	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	2203      	movs	r2, #3
 80072c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	3301      	adds	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072c8:	e013      	b.n	80072f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3301      	adds	r3, #1
 80072da:	613b      	str	r3, [r7, #16]
    idx++;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	3301      	adds	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	4413      	add	r3, r2
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	3301      	adds	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e7      	bne.n	80072ca <USBD_GetString+0x52>
 80072fa:	e000      	b.n	80072fe <USBD_GetString+0x86>
    return;
 80072fc:	bf00      	nop
  }
}
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007314:	e005      	b.n	8007322 <USBD_GetLen+0x1e>
  {
    len++;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	3301      	adds	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	3301      	adds	r3, #1
 8007320:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f5      	bne.n	8007316 <USBD_GetLen+0x12>
  }

  return len;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2202      	movs	r2, #2
 8007348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fd1b 	bl	8007d9a <USBD_LL_Transmit>

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fd0a 	bl	8007d9a <USBD_LL_Transmit>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2203      	movs	r2, #3
 80073a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	2100      	movs	r1, #0
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fd0e 	bl	8007ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	2100      	movs	r1, #0
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fcfd 	bl	8007ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2204      	movs	r2, #4
 80073f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073fc:	2300      	movs	r3, #0
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fcc9 	bl	8007d9a <USBD_LL_Transmit>

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007422:	2300      	movs	r3, #0
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fcd7 	bl	8007ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800743c:	2200      	movs	r2, #0
 800743e:	4912      	ldr	r1, [pc, #72]	; (8007488 <MX_USB_DEVICE_Init+0x50>)
 8007440:	4812      	ldr	r0, [pc, #72]	; (800748c <MX_USB_DEVICE_Init+0x54>)
 8007442:	f7fe fd07 	bl	8005e54 <USBD_Init>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800744c:	f7f9 f9f0 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007450:	490f      	ldr	r1, [pc, #60]	; (8007490 <MX_USB_DEVICE_Init+0x58>)
 8007452:	480e      	ldr	r0, [pc, #56]	; (800748c <MX_USB_DEVICE_Init+0x54>)
 8007454:	f7fe fd2e 	bl	8005eb4 <USBD_RegisterClass>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800745e:	f7f9 f9e7 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007462:	490c      	ldr	r1, [pc, #48]	; (8007494 <MX_USB_DEVICE_Init+0x5c>)
 8007464:	4809      	ldr	r0, [pc, #36]	; (800748c <MX_USB_DEVICE_Init+0x54>)
 8007466:	f7fe fc1f 	bl	8005ca8 <USBD_CDC_RegisterInterface>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007470:	f7f9 f9de 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007474:	4805      	ldr	r0, [pc, #20]	; (800748c <MX_USB_DEVICE_Init+0x54>)
 8007476:	f7fe fd53 	bl	8005f20 <USBD_Start>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007480:	f7f9 f9d6 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200000ac 	.word	0x200000ac
 800748c:	20000154 	.word	0x20000154
 8007490:	20000018 	.word	0x20000018
 8007494:	20000098 	.word	0x20000098

08007498 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800749c:	2200      	movs	r2, #0
 800749e:	4905      	ldr	r1, [pc, #20]	; (80074b4 <CDC_Init_FS+0x1c>)
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <CDC_Init_FS+0x20>)
 80074a2:	f7fe fc1b 	bl	8005cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074a6:	4905      	ldr	r1, [pc, #20]	; (80074bc <CDC_Init_FS+0x24>)
 80074a8:	4803      	ldr	r0, [pc, #12]	; (80074b8 <CDC_Init_FS+0x20>)
 80074aa:	f7fe fc39 	bl	8005d20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000c30 	.word	0x20000c30
 80074b8:	20000154 	.word	0x20000154
 80074bc:	20000430 	.word	0x20000430

080074c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
 80074dc:	4613      	mov	r3, r2
 80074de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b23      	cmp	r3, #35	; 0x23
 80074e4:	d84a      	bhi.n	800757c <CDC_Control_FS+0xac>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <CDC_Control_FS+0x1c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	0800757d 	.word	0x0800757d
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	0800757d 	.word	0x0800757d
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800757d 	.word	0x0800757d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	0800757d 	.word	0x0800757d
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	0800757d 	.word	0x0800757d
 8007558:	0800757d 	.word	0x0800757d
 800755c:	0800757d 	.word	0x0800757d
 8007560:	0800757d 	.word	0x0800757d
 8007564:	0800757d 	.word	0x0800757d
 8007568:	0800757d 	.word	0x0800757d
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800757d 	.word	0x0800757d
 8007574:	0800757d 	.word	0x0800757d
 8007578:	0800757d 	.word	0x0800757d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800757c:	bf00      	nop
  }

  return (USBD_OK);
 800757e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4813      	ldr	r0, [pc, #76]	; (80075e8 <CDC_Receive_FS+0x5c>)
 800759a:	f7fe fbc1 	bl	8005d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800759e:	4812      	ldr	r0, [pc, #72]	; (80075e8 <CDC_Receive_FS+0x5c>)
 80075a0:	f7fe fc22 	bl	8005de8 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f81f 	bl	80075f0 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b31      	cmp	r3, #49	; 0x31
 80075b8:	d106      	bne.n	80075c8 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80075ba:	2201      	movs	r2, #1
 80075bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075c0:	480a      	ldr	r0, [pc, #40]	; (80075ec <CDC_Receive_FS+0x60>)
 80075c2:	f7fa fc1d 	bl	8001e00 <HAL_GPIO_WritePin>
 80075c6:	e009      	b.n	80075dc <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b30      	cmp	r3, #48	; 0x30
 80075ce:	d105      	bne.n	80075dc <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80075d0:	2200      	movs	r2, #0
 80075d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075d6:	4805      	ldr	r0, [pc, #20]	; (80075ec <CDC_Receive_FS+0x60>)
 80075d8:	f7fa fc12 	bl	8001e00 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 80075dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000154 	.word	0x20000154
 80075ec:	40020c00 	.word	0x40020c00

080075f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <CDC_Transmit_FS+0x48>)
 8007602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007606:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007612:	2301      	movs	r3, #1
 8007614:	e00b      	b.n	800762e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007616:	887b      	ldrh	r3, [r7, #2]
 8007618:	461a      	mov	r2, r3
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4806      	ldr	r0, [pc, #24]	; (8007638 <CDC_Transmit_FS+0x48>)
 800761e:	f7fe fb5d 	bl	8005cdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007622:	4805      	ldr	r0, [pc, #20]	; (8007638 <CDC_Transmit_FS+0x48>)
 8007624:	f7fe fb9a 	bl	8005d5c <USBD_CDC_TransmitPacket>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000154 	.word	0x20000154

0800763c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800764e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2212      	movs	r2, #18
 8007670:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007672:	4b03      	ldr	r3, [pc, #12]	; (8007680 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	200000c8 	.word	0x200000c8

08007684 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2204      	movs	r2, #4
 8007694:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	200000dc 	.word	0x200000dc

080076a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4907      	ldr	r1, [pc, #28]	; (80076dc <USBD_FS_ProductStrDescriptor+0x34>)
 80076be:	4808      	ldr	r0, [pc, #32]	; (80076e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076c0:	f7ff fdda 	bl	8007278 <USBD_GetString>
 80076c4:	e004      	b.n	80076d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	4904      	ldr	r1, [pc, #16]	; (80076dc <USBD_FS_ProductStrDescriptor+0x34>)
 80076ca:	4805      	ldr	r0, [pc, #20]	; (80076e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076cc:	f7ff fdd4 	bl	8007278 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20001430 	.word	0x20001430
 80076e0:	08007fdc 	.word	0x08007fdc

080076e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	4904      	ldr	r1, [pc, #16]	; (8007704 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076f4:	4804      	ldr	r0, [pc, #16]	; (8007708 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076f6:	f7ff fdbf 	bl	8007278 <USBD_GetString>
  return USBD_StrDesc;
 80076fa:	4b02      	ldr	r3, [pc, #8]	; (8007704 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20001430 	.word	0x20001430
 8007708:	08007ff4 	.word	0x08007ff4

0800770c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	221a      	movs	r2, #26
 800771c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800771e:	f000 f843 	bl	80077a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007722:	4b02      	ldr	r3, [pc, #8]	; (800772c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	200000e0 	.word	0x200000e0

08007730 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4907      	ldr	r1, [pc, #28]	; (8007764 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007746:	4808      	ldr	r0, [pc, #32]	; (8007768 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007748:	f7ff fd96 	bl	8007278 <USBD_GetString>
 800774c:	e004      	b.n	8007758 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4904      	ldr	r1, [pc, #16]	; (8007764 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007752:	4805      	ldr	r0, [pc, #20]	; (8007768 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007754:	f7ff fd90 	bl	8007278 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007758:	4b02      	ldr	r3, [pc, #8]	; (8007764 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20001430 	.word	0x20001430
 8007768:	08008008 	.word	0x08008008

0800776c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4907      	ldr	r1, [pc, #28]	; (80077a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007782:	4808      	ldr	r0, [pc, #32]	; (80077a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007784:	f7ff fd78 	bl	8007278 <USBD_GetString>
 8007788:	e004      	b.n	8007794 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4904      	ldr	r1, [pc, #16]	; (80077a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800778e:	4805      	ldr	r0, [pc, #20]	; (80077a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007790:	f7ff fd72 	bl	8007278 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20001430 	.word	0x20001430
 80077a4:	08008014 	.word	0x08008014

080077a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <Get_SerialNum+0x44>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077b4:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <Get_SerialNum+0x48>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <Get_SerialNum+0x4c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077ce:	2208      	movs	r2, #8
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <Get_SerialNum+0x50>)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f814 	bl	8007800 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077d8:	2204      	movs	r2, #4
 80077da:	4908      	ldr	r1, [pc, #32]	; (80077fc <Get_SerialNum+0x54>)
 80077dc:	68b8      	ldr	r0, [r7, #8]
 80077de:	f000 f80f 	bl	8007800 <IntToUnicode>
  }
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	1fff7a10 	.word	0x1fff7a10
 80077f0:	1fff7a14 	.word	0x1fff7a14
 80077f4:	1fff7a18 	.word	0x1fff7a18
 80077f8:	200000e2 	.word	0x200000e2
 80077fc:	200000f2 	.word	0x200000f2

08007800 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]
 8007816:	e027      	b.n	8007868 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	0f1b      	lsrs	r3, r3, #28
 800781c:	2b09      	cmp	r3, #9
 800781e:	d80b      	bhi.n	8007838 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0f1b      	lsrs	r3, r3, #28
 8007824:	b2da      	uxtb	r2, r3
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4619      	mov	r1, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	440b      	add	r3, r1
 8007830:	3230      	adds	r2, #48	; 0x30
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	e00a      	b.n	800784e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	0f1b      	lsrs	r3, r3, #28
 800783c:	b2da      	uxtb	r2, r3
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4619      	mov	r1, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	440b      	add	r3, r1
 8007848:	3237      	adds	r2, #55	; 0x37
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	3301      	adds	r3, #1
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4413      	add	r3, r2
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	3301      	adds	r3, #1
 8007866:	75fb      	strb	r3, [r7, #23]
 8007868:	7dfa      	ldrb	r2, [r7, #23]
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	429a      	cmp	r2, r3
 800786e:	d3d3      	bcc.n	8007818 <IntToUnicode+0x18>
  }
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007888:	f107 0314 	add.w	r3, r7, #20
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	609a      	str	r2, [r3, #8]
 8007894:	60da      	str	r2, [r3, #12]
 8007896:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078a0:	d14b      	bne.n	800793a <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	4b27      	ldr	r3, [pc, #156]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	4a26      	ldr	r2, [pc, #152]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	6313      	str	r3, [r2, #48]	; 0x30
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80078be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078cc:	2300      	movs	r3, #0
 80078ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078d0:	230a      	movs	r3, #10
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4619      	mov	r1, r3
 80078da:	481b      	ldr	r0, [pc, #108]	; (8007948 <HAL_PCD_MspInit+0xc8>)
 80078dc:	f7f9 ffe0 	bl	80018a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80078e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078e6:	2302      	movs	r3, #2
 80078e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ee:	2300      	movs	r3, #0
 80078f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078f2:	230a      	movs	r3, #10
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4619      	mov	r1, r3
 80078fc:	4812      	ldr	r0, [pc, #72]	; (8007948 <HAL_PCD_MspInit+0xc8>)
 80078fe:	f7f9 ffcf 	bl	80018a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	4a0f      	ldr	r2, [pc, #60]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	6353      	str	r3, [r2, #52]	; 0x34
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007916:	4a0b      	ldr	r2, [pc, #44]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 8007918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800791c:	6453      	str	r3, [r2, #68]	; 0x44
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_PCD_MspInit+0xc4>)
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800792a:	2200      	movs	r2, #0
 800792c:	2100      	movs	r1, #0
 800792e:	2043      	movs	r0, #67	; 0x43
 8007930:	f7f9 ff71 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007934:	2043      	movs	r0, #67	; 0x43
 8007936:	f7f9 ff8a 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800793a:	bf00      	nop
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800
 8007948:	40020000 	.word	0x40020000

0800794c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe fb29 	bl	8005fba <USBD_LL_SetupStage>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	4619      	mov	r1, r3
 800799a:	f7fe fb63 	bl	8006064 <USBD_LL_DataOutStage>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	334c      	adds	r3, #76	; 0x4c
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	4619      	mov	r1, r3
 80079ce:	f7fe fbfc 	bl	80061ca <USBD_LL_DataInStage>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fd30 	bl	800644e <USBD_LL_SOF>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
 8007a0e:	e008      	b.n	8007a22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d102      	bne.n	8007a1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e001      	b.n	8007a22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a1e:	f7f8 ff07 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a28:	7bfa      	ldrb	r2, [r7, #15]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fcd0 	bl	80063d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fc78 	bl	800632e <USBD_LL_Reset>
}
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fccb 	bl	80063f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <HAL_PCD_SuspendCallback+0x48>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4a03      	ldr	r2, [pc, #12]	; (8007a90 <HAL_PCD_SuspendCallback+0x48>)
 8007a82:	f043 0306 	orr.w	r3, r3, #6
 8007a86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	e000ed00 	.word	0xe000ed00

08007a94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fcbb 	bl	800641e <USBD_LL_Resume>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ac2:	78fa      	ldrb	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fd13 	bl	80064f2 <USBD_LL_IsoOUTIncomplete>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fccf 	bl	800648e <USBD_LL_IsoINIncomplete>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fd25 	bl	8006556 <USBD_LL_DevConnected>
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fd22 	bl	800656c <USBD_LL_DevDisconnected>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d13c      	bne.n	8007bba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b40:	4a20      	ldr	r2, [pc, #128]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a1e      	ldr	r2, [pc, #120]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b4c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b50:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b58:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b5e:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b60:	2202      	movs	r2, #2
 8007b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b6a:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b70:	4b14      	ldr	r3, [pc, #80]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b76:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b8e:	480d      	ldr	r0, [pc, #52]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007b90:	f7fa f94f 	bl	8001e32 <HAL_PCD_Init>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b9a:	f7f8 fe49 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b9e:	2180      	movs	r1, #128	; 0x80
 8007ba0:	4808      	ldr	r0, [pc, #32]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007ba2:	f7fb fba6 	bl	80032f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ba6:	2240      	movs	r2, #64	; 0x40
 8007ba8:	2100      	movs	r1, #0
 8007baa:	4806      	ldr	r0, [pc, #24]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007bac:	f7fb fb5a 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4803      	ldr	r0, [pc, #12]	; (8007bc4 <USBD_LL_Init+0x94>)
 8007bb6:	f7fb fb55 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20001630 	.word	0x20001630

08007bc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fa fa44 	bl	800206c <HAL_PCD_Start>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f942 	bl	8007e74 <USBD_Get_USB_Status>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	70fb      	strb	r3, [r7, #3]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70bb      	strb	r3, [r7, #2]
 8007c14:	4613      	mov	r3, r2
 8007c16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c26:	78bb      	ldrb	r3, [r7, #2]
 8007c28:	883a      	ldrh	r2, [r7, #0]
 8007c2a:	78f9      	ldrb	r1, [r7, #3]
 8007c2c:	f7fa ff15 	bl	8002a5a <HAL_PCD_EP_Open>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f91c 	bl	8007e74 <USBD_Get_USB_Status>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fa ff5e 	bl	8002b2a <HAL_PCD_EP_Close>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f8fd 	bl	8007e74 <USBD_Get_USB_Status>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fb f836 	bl	8002d18 <HAL_PCD_EP_SetStall>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f8de 	bl	8007e74 <USBD_Get_USB_Status>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fb f87b 	bl	8002de0 <HAL_PCD_EP_ClrStall>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 f8bf 	bl	8007e74 <USBD_Get_USB_Status>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da0b      	bge.n	8007d38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	333e      	adds	r3, #62	; 0x3e
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	e00b      	b.n	8007d50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fa fe48 	bl	8002a10 <HAL_PCD_SetAddress>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f874 	bl	8007e74 <USBD_Get_USB_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	460b      	mov	r3, r1
 8007da8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007db8:	7af9      	ldrb	r1, [r7, #11]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	f7fa ff61 	bl	8002c84 <HAL_PCD_EP_Transmit>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 f853 	bl	8007e74 <USBD_Get_USB_Status>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	607a      	str	r2, [r7, #4]
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	460b      	mov	r3, r1
 8007dea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dfa:	7af9      	ldrb	r1, [r7, #11]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	f7fa fedd 	bl	8002bbe <HAL_PCD_EP_Receive>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f832 	bl	8007e74 <USBD_Get_USB_Status>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e14:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e30:	78fa      	ldrb	r2, [r7, #3]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fa ff0d 	bl	8002c54 <HAL_PCD_EP_GetRxCount>
 8007e3a:	4603      	mov	r3, r0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <USBD_static_malloc+0x18>)
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20001b3c 	.word	0x20001b3c

08007e60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d817      	bhi.n	8007eb8 <USBD_Get_USB_Status+0x44>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_Get_USB_Status+0x1c>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007ea7 	.word	0x08007ea7
 8007e98:	08007ead 	.word	0x08007ead
 8007e9c:	08007eb3 	.word	0x08007eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	e00b      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eaa:	e008      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	e005      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb6:	e002      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebc:	bf00      	nop
  }
  return usb_status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <memset>:
 8007ecc:	4402      	add	r2, r0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d100      	bne.n	8007ed6 <memset+0xa>
 8007ed4:	4770      	bx	lr
 8007ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eda:	e7f9      	b.n	8007ed0 <memset+0x4>

08007edc <__libc_init_array>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4d0d      	ldr	r5, [pc, #52]	; (8007f14 <__libc_init_array+0x38>)
 8007ee0:	4c0d      	ldr	r4, [pc, #52]	; (8007f18 <__libc_init_array+0x3c>)
 8007ee2:	1b64      	subs	r4, r4, r5
 8007ee4:	10a4      	asrs	r4, r4, #2
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	42a6      	cmp	r6, r4
 8007eea:	d109      	bne.n	8007f00 <__libc_init_array+0x24>
 8007eec:	4d0b      	ldr	r5, [pc, #44]	; (8007f1c <__libc_init_array+0x40>)
 8007eee:	4c0c      	ldr	r4, [pc, #48]	; (8007f20 <__libc_init_array+0x44>)
 8007ef0:	f000 f818 	bl	8007f24 <_init>
 8007ef4:	1b64      	subs	r4, r4, r5
 8007ef6:	10a4      	asrs	r4, r4, #2
 8007ef8:	2600      	movs	r6, #0
 8007efa:	42a6      	cmp	r6, r4
 8007efc:	d105      	bne.n	8007f0a <__libc_init_array+0x2e>
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f04:	4798      	blx	r3
 8007f06:	3601      	adds	r6, #1
 8007f08:	e7ee      	b.n	8007ee8 <__libc_init_array+0xc>
 8007f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0e:	4798      	blx	r3
 8007f10:	3601      	adds	r6, #1
 8007f12:	e7f2      	b.n	8007efa <__libc_init_array+0x1e>
 8007f14:	0800803c 	.word	0x0800803c
 8007f18:	0800803c 	.word	0x0800803c
 8007f1c:	0800803c 	.word	0x0800803c
 8007f20:	08008040 	.word	0x08008040

08007f24 <_init>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr

08007f30 <_fini>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr
