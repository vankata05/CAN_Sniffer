
CAN_Sniffer_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08009b60  08009b60  00019b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a8  0800a1a8  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b0  0800a1b0  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800a1b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f8  2**0
                  CONTENTS
 10 .bss          00000428  200002f8  200002f8  000202f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  000202f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f720  00000000  00000000  0002036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002caa  00000000  00000000  0002fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c70  00000000  00000000  00032738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000965  00000000  00000000  000333a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023603  00000000  00000000  00033d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011064  00000000  00000000  00057310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9d22  00000000  00000000  00068374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004698  00000000  00000000  00132098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00136730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b48 	.word	0x08009b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08009b48 	.word	0x08009b48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9a6 	b.w	8000efc <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff83 	bl	8000adc <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fcf9 	bl	80005f8 <__aeabi_dmul>
 8000c06:	f7ff ffa7 	bl	8000b58 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc7a 	bl	8000504 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fcf0 	bl	80005f8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb32 	bl	8000288 <__aeabi_dsub>
 8000c24:	f7ff ff98 	bl	8000b58 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9e08      	ldr	r6, [sp, #32]
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14a      	bne.n	8000cda <__udivmoddi4+0xa6>
 8000c44:	428a      	cmp	r2, r1
 8000c46:	4694      	mov	ip, r2
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0xe2>
 8000c4a:	fab2 f382 	clz	r3, r2
 8000c4e:	b143      	cbz	r3, 8000c62 <__udivmoddi4+0x2e>
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	409c      	lsls	r4, r3
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c6e:	0c22      	lsrs	r2, r4, #16
 8000c70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c78:	fb01 f005 	mul.w	r0, r1, r5
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c80:	eb1c 0202 	adds.w	r2, ip, r2
 8000c84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c88:	f080 811c 	bcs.w	8000ec4 <__udivmoddi4+0x290>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f240 8119 	bls.w	8000ec4 <__udivmoddi4+0x290>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4462      	add	r2, ip
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca6:	fb00 f505 	mul.w	r5, r0, r5
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x90>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x294>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x294>
 8000cc0:	4464      	add	r4, ip
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc8:	1b64      	subs	r4, r4, r5
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b11e      	cbz	r6, 8000cd6 <__udivmoddi4+0xa2>
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0xbc>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f000 80ed 	beq.w	8000ebe <__udivmoddi4+0x28a>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cea:	4608      	mov	r0, r1
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	fab3 f183 	clz	r1, r3
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d149      	bne.n	8000d8c <__udivmoddi4+0x158>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	d302      	bcc.n	8000d02 <__udivmoddi4+0xce>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	f200 80f8 	bhi.w	8000ef2 <__udivmoddi4+0x2be>
 8000d02:	1a84      	subs	r4, r0, r2
 8000d04:	eb65 0203 	sbc.w	r2, r5, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d0e2      	beq.n	8000cd6 <__udivmoddi4+0xa2>
 8000d10:	e9c6 4700 	strd	r4, r7, [r6]
 8000d14:	e7df      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000d16:	b902      	cbnz	r2, 8000d1a <__udivmoddi4+0xe6>
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	fab2 f382 	clz	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x210>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d34:	fb07 2015 	mls	r0, r7, r5, r2
 8000d38:	0c22      	lsrs	r2, r4, #16
 8000d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3e:	fb0e f005 	mul.w	r0, lr, r5
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d46:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x122>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2b8>
 8000d56:	4645      	mov	r5, r8
 8000d58:	1a12      	subs	r2, r2, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x14e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x14c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2c2>
 8000d80:	4610      	mov	r0, r2
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8a:	e79f      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d8c:	f1c1 0720 	rsb	r7, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	40fd      	lsrs	r5, r7
 8000da4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da8:	4323      	orrs	r3, r4
 8000daa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	fb09 5518 	mls	r5, r9, r8, r5
 8000db6:	0c1c      	lsrs	r4, r3, #16
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b0>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	b29d      	uxth	r5, r3
 8000de8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dec:	fb09 4413 	mls	r4, r9, r3, r4
 8000df0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1da>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	4464      	add	r4, ip
 8000e0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e12:	fba3 9502 	umull	r9, r5, r3, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46ae      	mov	lr, r5
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x29c>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x298>
 8000e24:	b156      	cbz	r6, 8000e3c <__udivmoddi4+0x208>
 8000e26:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e32:	40ca      	lsrs	r2, r1
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	4317      	orrs	r7, r2
 8000e38:	e9c6 7400 	strd	r7, r4, [r6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	f1c3 0120 	rsb	r1, r3, #32
 8000e48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e50:	fa25 f101 	lsr.w	r1, r5, r1
 8000e54:	409d      	lsls	r5, r3
 8000e56:	432a      	orrs	r2, r5
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e64:	fb07 1510 	mls	r5, r7, r0, r1
 8000e68:	0c11      	lsrs	r1, r2, #16
 8000e6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e72:	428d      	cmp	r5, r1
 8000e74:	fa04 f403 	lsl.w	r4, r4, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x258>
 8000e7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e84:	428d      	cmp	r5, r1
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1b49      	subs	r1, r1, r5
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e94:	fb07 1115 	mls	r1, r7, r5, r1
 8000e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x282>
 8000ea4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2a8>
 8000eae:	4291      	cmp	r1, r2
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2a8>
 8000eb2:	3d02      	subs	r5, #2
 8000eb4:	4462      	add	r2, ip
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0xfc>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	e6e6      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x90>
 8000ecc:	4548      	cmp	r0, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f0>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f0>
 8000edc:	4645      	mov	r5, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x282>
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1da>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x258>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b0>
 8000eec:	3d02      	subs	r5, #2
 8000eee:	4462      	add	r2, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x124>
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e70a      	b.n	8000d0c <__udivmoddi4+0xd8>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x14e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <GNSS_Init>:

GPS L96Data = {0, 0};

uint8_t received = 0;

void GNSS_Init(UART_HandleTypeDef *huart){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	GNSS_Transmit(huart, (uint8_t*)"PMTK104");
 8000f08:	490e      	ldr	r1, [pc, #56]	; (8000f44 <GNSS_Init+0x44>)
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f984 	bl	8001218 <GNSS_Transmit>
	HAL_Delay(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f14:	f001 fa92 	bl	800243c <HAL_Delay>
	GNSS_Transmit(huart, (uint8_t*)MSG);
 8000f18:	490b      	ldr	r1, [pc, #44]	; (8000f48 <GNSS_Init+0x48>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f97c 	bl	8001218 <GNSS_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA( huart, L96MainBuff, L96MainBuffSize);
 8000f20:	2240      	movs	r2, #64	; 0x40
 8000f22:	490a      	ldr	r1, [pc, #40]	; (8000f4c <GNSS_Init+0x4c>)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f003 fde3 	bl	8004af0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <GNSS_Init+0x50>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <GNSS_Init+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0208 	bic.w	r2, r2, #8
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08009b60 	.word	0x08009b60
 8000f48:	08009b68 	.word	0x08009b68
 8000f4c:	20000354 	.word	0x20000354
 8000f50:	20000558 	.word	0x20000558

08000f54 <CRC_>:

uint8_t CRC_(const uint8_t* str) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < strlen((char*)str); i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e009      	b.n	8000f7a <CRC_+0x26>
        checksum ^= (uint8_t)str[i];
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4053      	eors	r3, r2
 8000f72:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < strlen((char*)str); i++) {
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f928 	bl	80001d0 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8ee      	bhi.n	8000f66 <CRC_+0x12>
    }

    return checksum;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	0000      	movs	r0, r0
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <xyz_to_wgs84>:

void xyz_to_wgs84(double x, double y, double z, double *latitude, double *longitude) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0b06 	vstr	d0, [r7, #24]
 8000fa2:	ed87 1b04 	vstr	d1, [r7, #16]
 8000fa6:	ed87 2b02 	vstr	d2, [r7, #8]
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    double r = sqrt(x*x + y*y + z*z);
 8000fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fb6:	f7ff fb1f 	bl	80005f8 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fca:	f7ff fb15 	bl	80005f8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff f959 	bl	800028c <__adddf3>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4614      	mov	r4, r2
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff f949 	bl	800028c <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	ec43 2b17 	vmov	d7, r2, r3
 8001002:	eeb0 0a47 	vmov.f32	s0, s14
 8001006:	eef0 0a67 	vmov.f32	s1, s15
 800100a:	f008 f811 	bl	8009030 <sqrt>
 800100e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    double lon = atan2(y, x);
 8001012:	ed97 1b06 	vldr	d1, [r7, #24]
 8001016:	ed97 0b04 	vldr	d0, [r7, #16]
 800101a:	f008 f807 	bl	800902c <atan2>
 800101e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    double lat = asin(z / r);
 8001022:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	ec43 2b17 	vmov	d7, r2, r3
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	eef0 0a67 	vmov.f32	s1, s15
 800103e:	f007 ffc1 	bl	8008fc4 <asin>
 8001042:	ed87 0b08 	vstr	d0, [r7, #32]

    *latitude = lat * 180.0 / M_PI;  // Convert to degrees
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <xyz_to_wgs84+0x118>)
 800104c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001050:	f7ff fad2 	bl	80005f8 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	a312      	add	r3, pc, #72	; (adr r3, 80010a8 <xyz_to_wgs84+0x110>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fbf3 	bl	800084c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	e9c1 2300 	strd	r2, r3, [r1]
    *longitude = lon * 180.0 / M_PI; // Convert to degrees
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <xyz_to_wgs84+0x118>)
 8001076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800107a:	f7ff fabd 	bl	80005f8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a308      	add	r3, pc, #32	; (adr r3, 80010a8 <xyz_to_wgs84+0x110>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fbde 	bl	800084c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
}
 800109a:	bf00      	nop
 800109c:	3738      	adds	r7, #56	; 0x38
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	54442d18 	.word	0x54442d18
 80010ac:	400921fb 	.word	0x400921fb
 80010b0:	40668000 	.word	0x40668000
 80010b4:	00000000 	.word	0x00000000

080010b8 <GNSS_Get_Coords>:


uint8_t GNSS_Get_Coords(UART_HandleTypeDef *huart){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	ed2d 8b04 	vpush	{d8-d9}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	  GNSS_Transmit(huart, (uint8_t*)MSG2);
 80010c4:	494e      	ldr	r1, [pc, #312]	; (8001200 <GNSS_Get_Coords+0x148>)
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f8a6 	bl	8001218 <GNSS_Transmit>
	  uint32_t time = HAL_GetTick();
 80010cc:	f001 f9aa 	bl	8002424 <HAL_GetTick>
 80010d0:	61f8      	str	r0, [r7, #28]
	  while(received == 0){
 80010d2:	e00e      	b.n	80010f2 <GNSS_Get_Coords+0x3a>
		  if(HAL_GetTick() > time + 1000){
 80010d4:	f001 f9a6 	bl	8002424 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d906      	bls.n	80010f2 <GNSS_Get_Coords+0x3a>
			  GNSS_Transmit(huart, (uint8_t*)MSG2);
 80010e4:	4946      	ldr	r1, [pc, #280]	; (8001200 <GNSS_Get_Coords+0x148>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f896 	bl	8001218 <GNSS_Transmit>
			  time = HAL_GetTick();
 80010ec:	f001 f99a 	bl	8002424 <HAL_GetTick>
 80010f0:	61f8      	str	r0, [r7, #28]
	  while(received == 0){
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <GNSS_Get_Coords+0x14c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0ec      	beq.n	80010d4 <GNSS_Get_Coords+0x1c>

//	  HAL_UART_Transmit(huart, L96MainBuff, strlen((char*)L96MainBuff), 1000);
//
//	  HAL_Delay(1000);

	  if(strstr((char*) L96MainBuff, "0.0,0.0,") != NULL){
 80010fa:	4943      	ldr	r1, [pc, #268]	; (8001208 <GNSS_Get_Coords+0x150>)
 80010fc:	4843      	ldr	r0, [pc, #268]	; (800120c <GNSS_Get_Coords+0x154>)
 80010fe:	f005 feb9 	bl	8006e74 <strstr>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <GNSS_Get_Coords+0x6a>
//		  **Test purposes**
//		  strcpy((char*)L96MainBuff, (char*)"$PMTK558,4311951.2,1863684.4,4300899.3,59.5*05\r\n");

		  L96Data.lat = 0;
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <GNSS_Get_Coords+0x158>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
		  L96Data.lon = 0;
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <GNSS_Get_Coords+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
		  memset(L96MainBuff, 0, 64);
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	2100      	movs	r1, #0
 8001118:	483c      	ldr	r0, [pc, #240]	; (800120c <GNSS_Get_Coords+0x154>)
 800111a:	f005 fe34 	bl	8006d86 <memset>
		  return 0;
 800111e:	2300      	movs	r3, #0
 8001120:	e061      	b.n	80011e6 <GNSS_Get_Coords+0x12e>
	  }

	  strtok((char*)L96MainBuff, ",");
 8001122:	493c      	ldr	r1, [pc, #240]	; (8001214 <GNSS_Get_Coords+0x15c>)
 8001124:	4839      	ldr	r0, [pc, #228]	; (800120c <GNSS_Get_Coords+0x154>)
 8001126:	f005 fe49 	bl	8006dbc <strtok>

	  double lat_, lon_;

	  xyz_to_wgs84(atof(strtok(NULL, ",")) , atof(strtok(NULL, ",")), atof(strtok(NULL, ",")), &lat_, &lon_);
 800112a:	493a      	ldr	r1, [pc, #232]	; (8001214 <GNSS_Get_Coords+0x15c>)
 800112c:	2000      	movs	r0, #0
 800112e:	f005 fe45 	bl	8006dbc <strtok>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fef6 	bl	8005f26 <atof>
 800113a:	eeb0 8a40 	vmov.f32	s16, s0
 800113e:	eef0 8a60 	vmov.f32	s17, s1
 8001142:	4934      	ldr	r1, [pc, #208]	; (8001214 <GNSS_Get_Coords+0x15c>)
 8001144:	2000      	movs	r0, #0
 8001146:	f005 fe39 	bl	8006dbc <strtok>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f004 feea 	bl	8005f26 <atof>
 8001152:	eeb0 9a40 	vmov.f32	s18, s0
 8001156:	eef0 9a60 	vmov.f32	s19, s1
 800115a:	492e      	ldr	r1, [pc, #184]	; (8001214 <GNSS_Get_Coords+0x15c>)
 800115c:	2000      	movs	r0, #0
 800115e:	f005 fe2d 	bl	8006dbc <strtok>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fede 	bl	8005f26 <atof>
 800116a:	eeb0 7a40 	vmov.f32	s14, s0
 800116e:	eef0 7a60 	vmov.f32	s15, s1
 8001172:	f107 0208 	add.w	r2, r7, #8
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	eeb0 2a47 	vmov.f32	s4, s14
 8001182:	eef0 2a67 	vmov.f32	s5, s15
 8001186:	eeb0 1a49 	vmov.f32	s2, s18
 800118a:	eef0 1a69 	vmov.f32	s3, s19
 800118e:	eeb0 0a48 	vmov.f32	s0, s16
 8001192:	eef0 0a68 	vmov.f32	s1, s17
 8001196:	f7ff feff 	bl	8000f98 <xyz_to_wgs84>

	  L96Data.lat = (uint32_t)(lat_*1000000);
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	a316      	add	r3, pc, #88	; (adr r3, 80011f8 <GNSS_Get_Coords+0x140>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa28 	bl	80005f8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fcd2 	bl	8000b58 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <GNSS_Get_Coords+0x158>)
 80011b8:	6013      	str	r3, [r2, #0]
	  L96Data.lon = (uint32_t)(lon_*1000000);
 80011ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011be:	a30e      	add	r3, pc, #56	; (adr r3, 80011f8 <GNSS_Get_Coords+0x140>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fa18 	bl	80005f8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fcc2 	bl	8000b58 <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <GNSS_Get_Coords+0x158>)
 80011d8:	6053      	str	r3, [r2, #4]

	  memset(L96MainBuff, 0, 64);
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	2100      	movs	r1, #0
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <GNSS_Get_Coords+0x154>)
 80011e0:	f005 fdd1 	bl	8006d86 <memset>

	  return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	ecbd 8b04 	vpop	{d8-d9}
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	00000000 	.word	0x00000000
 80011fc:	412e8480 	.word	0x412e8480
 8001200:	08009b98 	.word	0x08009b98
 8001204:	2000039c 	.word	0x2000039c
 8001208:	08009ba0 	.word	0x08009ba0
 800120c:	20000354 	.word	0x20000354
 8001210:	20000394 	.word	0x20000394
 8001214:	08009bac 	.word	0x08009bac

08001218 <GNSS_Transmit>:

void GNSS_Transmit(UART_HandleTypeDef *huart, uint8_t* msg){
 8001218:	b580      	push	{r7, lr}
 800121a:	b092      	sub	sp, #72	; 0x48
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	  uint8_t req[64] = {0};
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	223c      	movs	r2, #60	; 0x3c
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fda9 	bl	8006d86 <memset>
	  sprintf((char*)req, "$%s*%X\r\n", msg, CRC_((uint8_t*)msg));
 8001234:	6838      	ldr	r0, [r7, #0]
 8001236:	f7ff fe8d 	bl	8000f54 <CRC_>
 800123a:	4603      	mov	r3, r0
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	490a      	ldr	r1, [pc, #40]	; (800126c <GNSS_Transmit+0x54>)
 8001244:	f005 fd3c 	bl	8006cc0 <siprintf>
	  HAL_UART_Transmit(huart, req, strlen((char*)req), 1000);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ffbf 	bl	80001d0 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	f107 0108 	add.w	r1, r7, #8
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f003 fbb4 	bl	80049cc <HAL_UART_Transmit>
}
 8001264:	bf00      	nop
 8001266:	3748      	adds	r7, #72	; 0x48
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08009bb0 	.word	0x08009bb0

08001270 <Bypass_DCR>:
uint8_t joined = 0;

uint8_t E5RxBuff[E5RxBuffSize];

//  **Bypass bandwith limitations**
static void Bypass_DCR(UART_HandleTypeDef *huart){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8001278:	2032      	movs	r0, #50	; 0x32
 800127a:	f001 f8df 	bl	800243c <HAL_Delay>
	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	2200      	movs	r2, #0
 8001284:	490f      	ldr	r1, [pc, #60]	; (80012c4 <Bypass_DCR+0x54>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f003 fba0 	bl	80049cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)"AT+DCS=0\r\n", strlen("AT+DCS=0\n"), 1000);
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	2209      	movs	r2, #9
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <Bypass_DCR+0x58>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f003 fb99 	bl	80049cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	2200      	movs	r2, #0
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <Bypass_DCR+0x54>)
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 fb92 	bl	80049cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)"AT+DR=2\r\n", strlen("AT+DR=2\n"), 1000);
 80012a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ac:	2208      	movs	r2, #8
 80012ae:	4907      	ldr	r1, [pc, #28]	; (80012cc <Bypass_DCR+0x5c>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f003 fb8b 	bl	80049cc <HAL_UART_Transmit>
	HAL_Delay(50);
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f001 f8c0 	bl	800243c <HAL_Delay>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08009bbc 	.word	0x08009bbc
 80012c8:	08009bc0 	.word	0x08009bc0
 80012cc:	08009bcc 	.word	0x08009bcc

080012d0 <AT_Send>:

void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	4613      	mov	r3, r2
 80012dc:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[64] = {0};
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	223c      	movs	r2, #60	; 0x3c
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fd4b 	bl	8006d86 <memset>

	sprintf((char*)msg, "AT+SEND=%d:0:%s\r\n", GPS_PORT,  (char*)data);
 80012f0:	f107 0010 	add.w	r0, r7, #16
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2201      	movs	r2, #1
 80012f8:	490d      	ldr	r1, [pc, #52]	; (8001330 <AT_Send+0x60>)
 80012fa:	f005 fce1 	bl	8006cc0 <siprintf>
//	sprintf((char*)msg, "AT+SEND=%d:1:FFFFFFFF\r\n", GPS_PORT);
	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	2200      	movs	r2, #0
 8001304:	490b      	ldr	r1, [pc, #44]	; (8001334 <AT_Send+0x64>)
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f003 fb60 	bl	80049cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff5d 	bl	80001d0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f107 0110 	add.w	r1, r7, #16
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f003 fb52 	bl	80049cc <HAL_UART_Transmit>

}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	; 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	08009bd8 	.word	0x08009bd8
 8001334:	08009bbc 	.word	0x08009bbc

08001338 <AT_Join>:

void AT_Join(UART_HandleTypeDef *huart){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

	Bypass_DCR(huart);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff95 	bl	8001270 <Bypass_DCR>

	HAL_UARTEx_ReceiveToIdle_DMA(huart, E5RxBuff, E5RxBuffSize);
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	4927      	ldr	r1, [pc, #156]	; (80013e8 <AT_Join+0xb0>)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f003 fbd0 	bl	8004af0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <AT_Join+0xb4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <AT_Join+0xb4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0208 	bic.w	r2, r2, #8
 800135e:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	2200      	movs	r2, #0
 8001366:	4922      	ldr	r1, [pc, #136]	; (80013f0 <AT_Join+0xb8>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 fb2f 	bl	80049cc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\r\n", 11, 1000);
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	220b      	movs	r2, #11
 8001374:	491f      	ldr	r1, [pc, #124]	; (80013f4 <AT_Join+0xbc>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f003 fb28 	bl	80049cc <HAL_UART_Transmit>

	uint32_t time = HAL_GetTick();
 800137c:	f001 f852 	bl	8002424 <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

	while(joined == 0 || joined == 2){
 8001382:	e023      	b.n	80013cc <AT_Join+0x94>
	  if(HAL_GetTick() > time + 10000){
 8001384:	f001 f84e 	bl	8002424 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001390:	3310      	adds	r3, #16
 8001392:	429a      	cmp	r2, r3
 8001394:	d909      	bls.n	80013aa <AT_Join+0x72>
		  HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\r\n", 11, 1000);
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	220b      	movs	r2, #11
 800139c:	4915      	ldr	r1, [pc, #84]	; (80013f4 <AT_Join+0xbc>)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f003 fb14 	bl	80049cc <HAL_UART_Transmit>
		  time = HAL_GetTick();
 80013a4:	f001 f83e 	bl	8002424 <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]
	  }

	  if(joined == 2){
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <AT_Join+0xc0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d10c      	bne.n	80013cc <AT_Join+0x94>
		  HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\r\n", 11, 1000);
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	220b      	movs	r2, #11
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <AT_Join+0xbc>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f003 fb06 	bl	80049cc <HAL_UART_Transmit>
		  time = HAL_GetTick();
 80013c0:	f001 f830 	bl	8002424 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]
		  joined = 0;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <AT_Join+0xc0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	while(joined == 0 || joined == 2){
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <AT_Join+0xc0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0d7      	beq.n	8001384 <AT_Join+0x4c>
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <AT_Join+0xc0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d0d3      	beq.n	8001384 <AT_Join+0x4c>
	  }
//		  waiting for data
	}

}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003a0 	.word	0x200003a0
 80013ec:	200004f8 	.word	0x200004f8
 80013f0:	08009bbc 	.word	0x08009bbc
 80013f4:	08009bec 	.word	0x08009bec
 80013f8:	2000039d 	.word	0x2000039d

080013fc <Auto_Baudrate_Setup>:
	  		  return (uint8_t*)"HAL_CAN_STATE_ERROR\n";
	  		  break;
	  }
}

void Auto_Baudrate_Setup(CAN_HandleTypeDef *hcan, uint32_t PRE[]){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for(i = 0; i < 4; i++){
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e02a      	b.n	8001462 <Auto_Baudrate_Setup+0x66>
	  if(IRQRX == 0){
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <Auto_Baudrate_Setup+0xb8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d12a      	bne.n	800146a <Auto_Baudrate_Setup+0x6e>
		  if(i == 0){
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <Auto_Baudrate_Setup+0x3a>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f938 	bl	8001698 <MX_CAN1_Init>
			  HAL_CAN_Start(hcan);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f001 fa07 	bl	800283c <HAL_CAN_Start>
			  HAL_Delay(100);
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f001 f804 	bl	800243c <HAL_Delay>
 8001434:	e012      	b.n	800145c <Auto_Baudrate_Setup+0x60>
		  }else{
			  HAL_CAN_Stop(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 fa44 	bl	80028c4 <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f924 	bl	8001698 <MX_CAN1_Init>
			  HAL_CAN_Start(hcan);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 f9f3 	bl	800283c <HAL_CAN_Start>
			  HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f000 fff0 	bl	800243c <HAL_Delay>
  for(i = 0; i < 4; i++){
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d9d1      	bls.n	800140c <Auto_Baudrate_Setup+0x10>
 8001468:	e000      	b.n	800146c <Auto_Baudrate_Setup+0x70>
		  }
	  }else{
		  break;
 800146a:	bf00      	nop
	  }
  }

  if(IRQRX != 0){
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <Auto_Baudrate_Setup+0xb8>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d011      	beq.n	8001498 <Auto_Baudrate_Setup+0x9c>
//	  char str[42];
//	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
	  HAL_CAN_Stop(hcan);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f001 fa25 	bl	80028c4 <HAL_CAN_Stop>
	  hcan->Init.Mode = CAN_MODE_NORMAL;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(hcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 ffff 	bl	8002484 <HAL_CAN_Init>
	  CAN1_Filter_Config(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8d8 	bl	800163c <CAN1_Filter_Config>
	  HAL_CAN_Start(hcan);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f001 f9d5 	bl	800283c <HAL_CAN_Start>
	  BDTKTD = 1;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <Auto_Baudrate_Setup+0xbc>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
  }

  if(IRQRX == 0){
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <Auto_Baudrate_Setup+0xb8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <Auto_Baudrate_Setup+0xaa>
//	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
	  Error_Handler();
 80014a0:	f000 fc0e 	bl	8001cc0 <Error_Handler>
  }else{
	  IRQRX = 0;
  }
}
 80014a4:	e002      	b.n	80014ac <Auto_Baudrate_Setup+0xb0>
	  IRQRX = 0;
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <Auto_Baudrate_Setup+0xb8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200003e0 	.word	0x200003e0
 80014b8:	200003e1 	.word	0x200003e1

080014bc <Capture_PID>:

uint32_t Capture_PID(CAN_HandleTypeDef *hcan, Parameters* PID){
 80014bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c0:	b08a      	sub	sp, #40	; 0x28
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	61f8      	str	r0, [r7, #28]
 80014c6:	61b9      	str	r1, [r7, #24]
	  PID->LastVal = 0;
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  uint32_t TSLR = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

	  if(IRQRX == 1){
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <Capture_PID+0x120>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d11e      	bne.n	8001520 <Capture_PID+0x64>
		  Capture_PID_(hcan, PID->PID);
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	69f8      	ldr	r0, [r7, #28]
 80014ea:	f000 f87b 	bl	80015e4 <Capture_PID_>
		  IRQRX = 0;
 80014ee:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <Capture_PID+0x120>)
 80014f0:	2300      	movs	r3, #0
 80014f2:	7013      	strb	r3, [r2, #0]
		  TSLR = HAL_GetTick();
 80014f4:	f000 ff96 	bl	8002424 <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	; 0x24
	  }

	  while(IRQRX != 1){
 80014fa:	e011      	b.n	8001520 <Capture_PID+0x64>
		  if(HAL_GetTick() - TSLR > 5000){
 80014fc:	f000 ff92 	bl	8002424 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d908      	bls.n	8001520 <Capture_PID+0x64>
		  		  //**Retransmit request in case there was no response**
		  		  Capture_PID_(hcan, PID->PID);
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	69f8      	ldr	r0, [r7, #28]
 8001516:	f000 f865 	bl	80015e4 <Capture_PID_>
		  		  TSLR = HAL_GetTick();
 800151a:	f000 ff83 	bl	8002424 <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24
	  while(IRQRX != 1){
 8001520:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <Capture_PID+0x120>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d1e9      	bne.n	80014fc <Capture_PID+0x40>
		  }
	  }

	  for(uint8_t i = 3; i < payload[0]; i++){
 8001528:	2303      	movs	r3, #3
 800152a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800152e:	e023      	b.n	8001578 <Capture_PID+0xbc>
		  PID->LastVal = (PID->LastVal<<8) + payload[i];
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001536:	f04f 0000 	mov.w	r0, #0
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	0219      	lsls	r1, r3, #8
 8001540:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001544:	0210      	lsls	r0, r2, #8
 8001546:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <Capture_PID+0x124>)
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2200      	movs	r2, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	617a      	str	r2, [r7, #20]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	18c3      	adds	r3, r0, r3
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	eb41 0303 	adc.w	r3, r1, r3
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800156a:	e9c3 1204 	strd	r1, r2, [r3, #16]
	  for(uint8_t i = 3; i < payload[0]; i++){
 800156e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001572:	3301      	adds	r3, #1
 8001574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <Capture_PID+0x124>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001580:	429a      	cmp	r2, r3
 8001582:	d3d5      	bcc.n	8001530 <Capture_PID+0x74>
	  }

	  PID->LastVal = (PID->LastVal * PID->Scale) + PID->Offset;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	6849      	ldr	r1, [r1, #4]
 800158e:	2000      	movs	r0, #0
 8001590:	4688      	mov	r8, r1
 8001592:	4681      	mov	r9, r0
 8001594:	fb08 f003 	mul.w	r0, r8, r3
 8001598:	fb02 f109 	mul.w	r1, r2, r9
 800159c:	4401      	add	r1, r0
 800159e:	fba2 4508 	umull	r4, r5, r2, r8
 80015a2:	194b      	adds	r3, r1, r5
 80015a4:	461d      	mov	r5, r3
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	7a1b      	ldrb	r3, [r3, #8]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	469a      	mov	sl, r3
 80015b0:	4693      	mov	fp, r2
 80015b2:	eb14 030a 	adds.w	r3, r4, sl
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	eb45 030b 	adc.w	r3, r5, fp
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80015c4:	e9c3 1204 	strd	r1, r2, [r3, #16]

	  return PID->LastVal;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015ce:	4613      	mov	r3, r2
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015da:	bf00      	nop
 80015dc:	200003e0 	.word	0x200003e0
 80015e0:	200003e4 	.word	0x200003e4

080015e4 <Capture_PID_>:

//	**Helper**
void Capture_PID_(CAN_HandleTypeDef *hcan, uint8_t PID){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
	  uint32_t mailbox;
	  CAN_TxHeaderTypeDef pHead;
	  pHead.StdId = 0x7DF;
 80015f0:	f240 73df 	movw	r3, #2015	; 0x7df
 80015f4:	617b      	str	r3, [r7, #20]
	  pHead.IDE = CAN_ID_STD;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
	  pHead.RTR = CAN_RTR_DATA;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
	  pHead.DLC = 8;
 80015fe:	2308      	movs	r3, #8
 8001600:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t data[] = {0x02, 0x01, PID, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 8001602:	2302      	movs	r3, #2
 8001604:	733b      	strb	r3, [r7, #12]
 8001606:	2301      	movs	r3, #1
 8001608:	737b      	strb	r3, [r7, #13]
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	73bb      	strb	r3, [r7, #14]
 800160e:	23aa      	movs	r3, #170	; 0xaa
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	23aa      	movs	r3, #170	; 0xaa
 8001614:	743b      	strb	r3, [r7, #16]
 8001616:	23aa      	movs	r3, #170	; 0xaa
 8001618:	747b      	strb	r3, [r7, #17]
 800161a:	23aa      	movs	r3, #170	; 0xaa
 800161c:	74bb      	strb	r3, [r7, #18]
 800161e:	23aa      	movs	r3, #170	; 0xaa
 8001620:	74fb      	strb	r3, [r7, #19]

	  HAL_CAN_AddTxMessage(hcan, &pHead, data, &mailbox);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	f107 0114 	add.w	r1, r7, #20
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 f991 	bl	8002956 <HAL_CAN_AddTxMessage>

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <CAN1_Filter_Config>:

void CAN1_Filter_Config(CAN_HandleTypeDef *hcan){
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2228      	movs	r2, #40	; 0x28
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fb9a 	bl	8006d86 <memset>

  filters.FilterActivation = ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  filters.FilterBank = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  filters.FilterIdHigh = 0x7E8 << 5;
 8001666:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 800166a:	60bb      	str	r3, [r7, #8]
  filters.FilterIdLow = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8001670:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8001674:	613b      	str	r3, [r7, #16]
  filters.FilterMaskIdLow = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(hcan, &filters) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fffb 	bl	800267c <HAL_CAN_ConfigFilter>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <CAN1_Filter_Config+0x54>
  {
    Error_Handler();
 800168c:	f000 fb18 	bl	8001cc0 <Error_Handler>
  }

}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <MX_CAN1_Init>:

void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode){
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <MX_CAN1_Init+0x94>)
 80016a4:	4a22      	ldr	r2, [pc, #136]	; (8001730 <MX_CAN1_Init+0x98>)
 80016a6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 80016a8:	4a20      	ldr	r2, [pc, #128]	; (800172c <MX_CAN1_Init+0x94>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <MX_CAN1_Init+0x94>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_CAN1_Init+0x94>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_CAN1_Init+0x94>)
 80016bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_CAN1_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_CAN1_Init+0x94>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_CAN1_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_CAN1_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_CAN1_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_CAN1_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_CAN1_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016ec:	480f      	ldr	r0, [pc, #60]	; (800172c <MX_CAN1_Init+0x94>)
 80016ee:	f000 fec9 	bl	8002484 <HAL_CAN_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80016f8:	f000 fae2 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <MX_CAN1_Init+0x94>)
 8001702:	f001 fb15 	bl	8002d30 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fb39 	bl	8006d86 <memset>
  filters.FilterActivation = 1;
 8001714:	2301      	movs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4619      	mov	r1, r3
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_CAN1_Init+0x94>)
 8001720:	f000 ffac 	bl	800267c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200003f0 	.word	0x200003f0
 8001730:	40006400 	.word	0x40006400

08001734 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t oldPos = 0;
uint8_t newPos = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	IRQRX = 1;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	if(BDTKTD == 1){
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d110      	bne.n	800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]
//	  HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
	  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxPHead, payload);
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001764:	2100      	movs	r1, #0
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f001 f9d0 	bl	8002b0c <HAL_CAN_GetRxMessage>
	}
}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200003e0 	.word	0x200003e0
 8001778:	200003e1 	.word	0x200003e1
 800177c:	200003e4 	.word	0x200003e4

08001780 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
//	L96 RX
	if (huart->Instance == USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a43      	ldr	r2, [pc, #268]	; (80018a0 <HAL_UARTEx_RxEventCallback+0x120>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d159      	bne.n	800184a <HAL_UARTEx_RxEventCallback+0xca>
	{
		oldPos = newPos;
 8001796:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_UARTEx_RxEventCallback+0x124>)
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 800179c:	701a      	strb	r2, [r3, #0]

		if (oldPos+Size > L96MainBuffSize)
 800179e:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4413      	add	r3, r2
 80017a8:	2b40      	cmp	r3, #64	; 0x40
 80017aa:	dd25      	ble.n	80017f8 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = L96MainBuffSize-oldPos;
 80017ac:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80017b6:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)L96MainBuff+oldPos, L96RxBuff, datatocopy);
 80017b8:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_UARTEx_RxEventCallback+0x12c>)
 80017c0:	4413      	add	r3, r2
 80017c2:	89fa      	ldrh	r2, [r7, #14]
 80017c4:	493a      	ldr	r1, [pc, #232]	; (80018b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fbdc 	bl	8006f84 <memcpy>

			oldPos = 0;
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
			memcpy ((uint8_t *)L96MainBuff, (uint8_t *)L96RxBuff+datatocopy, (Size-datatocopy));
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80017d6:	1899      	adds	r1, r3, r2
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4832      	ldr	r0, [pc, #200]	; (80018ac <HAL_UARTEx_RxEventCallback+0x12c>)
 80017e2:	f005 fbcf 	bl	8006f84 <memcpy>
			newPos = (Size-datatocopy);
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_UARTEx_RxEventCallback+0x124>)
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e011      	b.n	800181c <HAL_UARTEx_RxEventCallback+0x9c>
		}

		else
		{
			memcpy ((uint8_t *)L96MainBuff+oldPos, L96RxBuff, Size);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_UARTEx_RxEventCallback+0x12c>)
 8001800:	4413      	add	r3, r2
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	492a      	ldr	r1, [pc, #168]	; (80018b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8001806:	4618      	mov	r0, r3
 8001808:	f005 fbbc 	bl	8006f84 <memcpy>
			newPos = Size+oldPos;
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x128>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4413      	add	r3, r2
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_UARTEx_RxEventCallback+0x124>)
 800181a:	701a      	strb	r2, [r3, #0]
		}

		if(strstr((char*)L96MainBuff, "$PMTK558,") != NULL){
 800181c:	4925      	ldr	r1, [pc, #148]	; (80018b4 <HAL_UARTEx_RxEventCallback+0x134>)
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <HAL_UARTEx_RxEventCallback+0x12c>)
 8001820:	f005 fb28 	bl	8006e74 <strstr>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UARTEx_RxEventCallback+0xb0>
			received = 1;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_UARTEx_RxEventCallback+0x138>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *) L96RxBuff, L96RxBuffSize);
 8001830:	2240      	movs	r2, #64	; 0x40
 8001832:	491f      	ldr	r1, [pc, #124]	; (80018b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f003 f95b 	bl	8004af0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_UARTEx_RxEventCallback+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_UARTEx_RxEventCallback+0x13c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0208 	bic.w	r2, r2, #8
 8001848:	601a      	str	r2, [r3, #0]

	}

//	Wio-E5
	if (huart->Instance == USART2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <HAL_UARTEx_RxEventCallback+0x140>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d121      	bne.n	8001898 <HAL_UARTEx_RxEventCallback+0x118>
	{
		if(strstr((char*)E5RxBuff, "JOINED") != NULL){
 8001854:	491b      	ldr	r1, [pc, #108]	; (80018c4 <HAL_UARTEx_RxEventCallback+0x144>)
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <HAL_UARTEx_RxEventCallback+0x148>)
 8001858:	f005 fb0c 	bl	8006e74 <strstr>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_UARTEx_RxEventCallback+0xea>
			joined = 1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_UARTEx_RxEventCallback+0x14c>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e00c      	b.n	8001884 <HAL_UARTEx_RxEventCallback+0x104>
		}else{
			HAL_UARTEx_ReceiveToIdle_DMA(huart, E5RxBuff, E5RxBuffSize);
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <HAL_UARTEx_RxEventCallback+0x148>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f003 f93e 	bl	8004af0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_UARTEx_RxEventCallback+0x150>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_UARTEx_RxEventCallback+0x150>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0208 	bic.w	r2, r2, #8
 8001882:	601a      	str	r2, [r3, #0]
		}

		if(strstr((char*)E5RxBuff, "FAILED") != NULL)
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <HAL_UARTEx_RxEventCallback+0x154>)
 8001886:	4810      	ldr	r0, [pc, #64]	; (80018c8 <HAL_UARTEx_RxEventCallback+0x148>)
 8001888:	f005 faf4 	bl	8006e74 <strstr>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_UARTEx_RxEventCallback+0x118>
			joined = 2;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UARTEx_RxEventCallback+0x14c>)
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]

	}
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004800 	.word	0x40004800
 80018a4:	200003ed 	.word	0x200003ed
 80018a8:	200003ec 	.word	0x200003ec
 80018ac:	20000354 	.word	0x20000354
 80018b0:	20000314 	.word	0x20000314
 80018b4:	08009cd0 	.word	0x08009cd0
 80018b8:	2000039c 	.word	0x2000039c
 80018bc:	20000558 	.word	0x20000558
 80018c0:	40004400 	.word	0x40004400
 80018c4:	08009cdc 	.word	0x08009cdc
 80018c8:	200003a0 	.word	0x200003a0
 80018cc:	2000039d 	.word	0x2000039d
 80018d0:	200004f8 	.word	0x200004f8
 80018d4:	08009ce4 	.word	0x08009ce4

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 fd3b 	bl	8002358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f863 	bl	80019ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(1000);
 80018e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ea:	f000 fda7 	bl	800243c <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f000 f96d 	bl	8001bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80018f2:	f000 f943 	bl	8001b7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018f6:	f000 f8ed 	bl	8001ad4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018fa:	f000 f915 	bl	8001b28 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80018fe:	f000 f8b3 	bl	8001a68 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001902:	f004 fa4b 	bl	8005d9c <MX_FATFS_Init>
//  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */

//  LoRa_Init(&huart2);
  AT_Join(&huart2);
 8001906:	4820      	ldr	r0, [pc, #128]	; (8001988 <main+0xb0>)
 8001908:	f7ff fd16 	bl	8001338 <AT_Join>

  Auto_Baudrate_Setup(&hcan1, PRE);
 800190c:	491f      	ldr	r1, [pc, #124]	; (800198c <main+0xb4>)
 800190e:	4820      	ldr	r0, [pc, #128]	; (8001990 <main+0xb8>)
 8001910:	f7ff fd74 	bl	80013fc <Auto_Baudrate_Setup>

  GNSS_Init(&huart3);
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <main+0xbc>)
 8001916:	f7ff faf3 	bl	8000f00 <GNSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GNSS_Get_Coords(&huart3);
 800191a:	481e      	ldr	r0, [pc, #120]	; (8001994 <main+0xbc>)
 800191c:	f7ff fbcc 	bl	80010b8 <GNSS_Get_Coords>

	  if(L96Data.lat != 0 && L96Data.lon != 0){
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <main+0xc0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01d      	beq.n	8001964 <main+0x8c>
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <main+0xc0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <main+0x8c>
		  uint8_t msg[32] = {0};
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
		  sprintf((char*)msg, "%lu%lu", L96Data.lat, L96Data.lon);
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <main+0xc0>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <main+0xc0>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4638      	mov	r0, r7
 8001950:	4912      	ldr	r1, [pc, #72]	; (800199c <main+0xc4>)
 8001952:	f005 f9b5 	bl	8006cc0 <siprintf>
		  AT_Send(&huart2, msg, GPS_PORT);
 8001956:	463b      	mov	r3, r7
 8001958:	2201      	movs	r2, #1
 800195a:	4619      	mov	r1, r3
 800195c:	480a      	ldr	r0, [pc, #40]	; (8001988 <main+0xb0>)
 800195e:	f7ff fcb7 	bl	80012d0 <AT_Send>
	  if(L96Data.lat != 0 && L96Data.lon != 0){
 8001962:	e004      	b.n	800196e <main+0x96>
	  }else{
		  AT_Send(&huart2, (uint8_t*)"4247651623374662", GPS_PORT);
 8001964:	2201      	movs	r2, #1
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <main+0xc8>)
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <main+0xb0>)
 800196a:	f7ff fcb1 	bl	80012d0 <AT_Send>
//		  HAL_UART_Transmit(&huart2, (uint8_t*)"GPS Fix not available yet!\r\n", strlen("GPS Fix not available yet!\r\n"), 1000);
	  }

	  if(BDTKTD != 0)
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <main+0xcc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <main+0xa6>
		  Capture_PID(&hcan1, PIDs);
 8001976:	490c      	ldr	r1, [pc, #48]	; (80019a8 <main+0xd0>)
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <main+0xb8>)
 800197a:	f7ff fd9f 	bl	80014bc <Capture_PID>

	  HAL_Delay(10000);
 800197e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001982:	f000 fd5b 	bl	800243c <HAL_Delay>
	  GNSS_Get_Coords(&huart3);
 8001986:	e7c8      	b.n	800191a <main+0x42>
 8001988:	20000470 	.word	0x20000470
 800198c:	20000000 	.word	0x20000000
 8001990:	200003f0 	.word	0x200003f0
 8001994:	200004b4 	.word	0x200004b4
 8001998:	20000394 	.word	0x20000394
 800199c:	08009cec 	.word	0x08009cec
 80019a0:	08009cf4 	.word	0x08009cf4
 80019a4:	200003e1 	.word	0x200003e1
 80019a8:	20000010 	.word	0x20000010

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	; 0x50
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2230      	movs	r2, #48	; 0x30
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 f9e3 	bl	8006d86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <SystemClock_Config+0xb4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <SystemClock_Config+0xb4>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <SystemClock_Config+0xb4>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <SystemClock_Config+0xb8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <SystemClock_Config+0xb8>)
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <SystemClock_Config+0xb8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a10:	2310      	movs	r3, #16
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 faa7 	bl	8003f70 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a28:	f000 f94a 	bl	8001cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fd0a 	bl	8004460 <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a52:	f000 f935 	bl	8001cc0 <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <MX_SPI1_Init+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI1_Init+0x64>)
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aba:	f002 feb1 	bl	8004820 <HAL_SPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ac4:	f000 f8fc 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000418 	.word	0x20000418
 8001ad0:	40013000 	.word	0x40013000

08001ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_USART2_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f002 ff11 	bl	8004932 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f000 f8d3 	bl	8001cc0 <Error_Handler>
//
//  HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &HAL_UART_RxCpltCallback);

  /* USER CODE END USART2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000470 	.word	0x20000470
 8001b24:	40004400 	.word	0x40004400

08001b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_USART3_UART_Init+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_USART3_UART_Init+0x4c>)
 8001b60:	f002 fee7 	bl	8004932 <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b6a:	f000 f8a9 	bl	8001cc0 <Error_Handler>

//  HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, HAL_UART_RxCpltCallback);

  /* USER CODE END USART3_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200004b4 	.word	0x200004b4
 8001b78:	40004800 	.word	0x40004800

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_DMA_Init+0x4c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <MX_DMA_Init+0x4c>)
 8001b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_DMA_Init+0x4c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	200c      	movs	r0, #12
 8001ba4:	f001 fbf5 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ba8:	200c      	movs	r0, #12
 8001baa:	f001 fc0e 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2010      	movs	r0, #16
 8001bb4:	f001 fbed 	bl	8003392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bb8:	2010      	movs	r0, #16
 8001bba:	f001 fc06 	bl	80033ca <HAL_NVIC_EnableIRQ>

}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c78:	f043 0310 	orr.w	r3, r3, #16
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_GPIO_Init+0xec>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NeoPixel_GPIO_Port, NeoPixel_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	480b      	ldr	r0, [pc, #44]	; (8001cbc <MX_GPIO_Init+0xf0>)
 8001c90:	f002 f954 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NeoPixel_Pin */
  GPIO_InitStruct.Pin = NeoPixel_Pin;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NeoPixel_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_GPIO_Init+0xf0>)
 8001cac:	f001 ffaa 	bl	8003c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_CAN_MspInit+0xc4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d14b      	bne.n	8001dd6 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_CAN_MspInit+0xc8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d76:	2303      	movs	r3, #3
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d86:	2309      	movs	r3, #9
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4815      	ldr	r0, [pc, #84]	; (8001de8 <HAL_CAN_MspInit+0xcc>)
 8001d92:	f001 ff37 	bl	8003c04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2013      	movs	r0, #19
 8001d9c:	f001 faf9 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001da0:	2013      	movs	r0, #19
 8001da2:	f001 fb12 	bl	80033ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2014      	movs	r0, #20
 8001dac:	f001 faf1 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001db0:	2014      	movs	r0, #20
 8001db2:	f001 fb0a 	bl	80033ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2015      	movs	r0, #21
 8001dbc:	f001 fae9 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dc0:	2015      	movs	r0, #21
 8001dc2:	f001 fb02 	bl	80033ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2016      	movs	r0, #22
 8001dcc:	f001 fae1 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001dd0:	2016      	movs	r0, #22
 8001dd2:	f001 fafa 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40006400 	.word	0x40006400
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020c00 	.word	0x40020c00

08001dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_SPI_MspInit+0x84>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12b      	bne.n	8001e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e46:	23e0      	movs	r3, #224	; 0xe0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_SPI_MspInit+0x8c>)
 8001e62:	f001 fecf 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013000 	.word	0x40013000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a68      	ldr	r2, [pc, #416]	; (800203c <HAL_UART_MspInit+0x1c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d162      	bne.n	8001f64 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a66      	ldr	r2, [pc, #408]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	4b60      	ldr	r3, [pc, #384]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4854      	ldr	r0, [pc, #336]	; (8002044 <HAL_UART_MspInit+0x1c8>)
 8001ef2:	f001 fe87 	bl	8003c04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ef6:	4b54      	ldr	r3, [pc, #336]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_UART_MspInit+0x1d0>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f10:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f36:	4844      	ldr	r0, [pc, #272]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f38:	f001 fa62 	bl	8003400 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001f42:	f7ff febd 	bl	8001cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f4c:	4a3e      	ldr	r2, [pc, #248]	; (8002048 <HAL_UART_MspInit+0x1cc>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2026      	movs	r0, #38	; 0x26
 8001f58:	f001 fa1b 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f5c:	2026      	movs	r0, #38	; 0x26
 8001f5e:	f001 fa34 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f62:	e067      	b.n	8002034 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a39      	ldr	r2, [pc, #228]	; (8002050 <HAL_UART_MspInit+0x1d4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d162      	bne.n	8002034 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_UART_MspInit+0x1c4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fa6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4824      	ldr	r0, [pc, #144]	; (8002054 <HAL_UART_MspInit+0x1d8>)
 8001fc4:	f001 fe1e 	bl	8003c04 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fca:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_UART_MspInit+0x1e0>)
 8001fcc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002008:	4813      	ldr	r0, [pc, #76]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 800200a:	f001 f9f9 	bl	8003400 <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002014:	f7ff fe54 	bl	8001cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_UART_MspInit+0x1dc>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2027      	movs	r0, #39	; 0x27
 800202a:	f001 f9b2 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800202e:	2027      	movs	r0, #39	; 0x27
 8002030:	f001 f9cb 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40004400 	.word	0x40004400
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	200004f8 	.word	0x200004f8
 800204c:	40026088 	.word	0x40026088
 8002050:	40004800 	.word	0x40004800
 8002054:	40020400 	.word	0x40020400
 8002058:	20000558 	.word	0x20000558
 800205c:	40026028 	.word	0x40026028

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f000 f9a6 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Stream1_IRQHandler+0x10>)
 80020ba:	f001 fb39 	bl	8003730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000558 	.word	0x20000558

080020c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Stream5_IRQHandler+0x10>)
 80020ce:	f001 fb2f 	bl	8003730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200004f8 	.word	0x200004f8

080020dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <CAN1_TX_IRQHandler+0x10>)
 80020e2:	f000 fe4b 	bl	8002d7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003f0 	.word	0x200003f0

080020f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <CAN1_RX0_IRQHandler+0x10>)
 80020f6:	f000 fe41 	bl	8002d7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200003f0 	.word	0x200003f0

08002104 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <CAN1_RX1_IRQHandler+0x10>)
 800210a:	f000 fe37 	bl	8002d7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200003f0 	.word	0x200003f0

08002118 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <CAN1_SCE_IRQHandler+0x10>)
 800211e:	f000 fe2d 	bl	8002d7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200003f0 	.word	0x200003f0

0800212c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART2_IRQHandler+0x10>)
 8002132:	f002 fd43 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000470 	.word	0x20000470

08002140 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <USART3_IRQHandler+0x10>)
 8002146:	f002 fd39 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200004b4 	.word	0x200004b4

08002154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_kill>:

int _kill(int pid, int sig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216e:	f004 fedd 	bl	8006f2c <__errno>
 8002172:	4603      	mov	r3, r0
 8002174:	2216      	movs	r2, #22
 8002176:	601a      	str	r2, [r3, #0]
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_exit>:

void _exit (int status)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe7 	bl	8002164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002196:	e7fe      	b.n	8002196 <_exit+0x12>

08002198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e009      	b.n	80021f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf1      	blt.n	80021e4 <_write+0x12>
  }
  return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_close>:

int _close(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002232:	605a      	str	r2, [r3, #4]
  return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a4:	f004 fe42 	bl	8006f2c <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	220c      	movs	r2, #12
 80022ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e009      	b.n	80022c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <_sbrk+0x64>)
 80022c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20020000 	.word	0x20020000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	200005b8 	.word	0x200005b8
 80022dc:	20000720 	.word	0x20000720

080022e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230a:	490e      	ldr	r1, [pc, #56]	; (8002344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002320:	4c0b      	ldr	r4, [pc, #44]	; (8002350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232e:	f7ff ffd7 	bl	80022e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002332:	f004 fe01 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7ff facf 	bl	80018d8 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002348:	0800a1b8 	.word	0x0800a1b8
  ldr r2, =_sbss
 800234c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002350:	20000720 	.word	0x20000720

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>
	...

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_Init+0x40>)
 8002362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_Init+0x40>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_Init+0x40>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 fffb 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fc9e 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f813 	bl	80033e6 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 ffdb 	bl	8003392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000100 	.word	0x20000100
 80023f4:	20000108 	.word	0x20000108
 80023f8:	20000104 	.word	0x20000104

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000108 	.word	0x20000108
 8002420:	200005bc 	.word	0x200005bc

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200005bc 	.word	0x200005bc

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000108 	.word	0x20000108

08002484 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0ed      	b.n	8002672 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fc3a 	bl	8001d1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b8:	f7ff ffb4 	bl	8002424 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024be:	e012      	b.n	80024e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c0:	f7ff ffb0 	bl	8002424 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d90b      	bls.n	80024e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2205      	movs	r2, #5
 80024de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0c5      	b.n	8002672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0e5      	beq.n	80024c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0202 	bic.w	r2, r2, #2
 8002502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff ff8e 	bl	8002424 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250a:	e012      	b.n	8002532 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800250c:	f7ff ff8a 	bl	8002424 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d90b      	bls.n	8002532 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2205      	movs	r2, #5
 800252a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09f      	b.n	8002672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e5      	bne.n	800250c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7e5b      	ldrb	r3, [r3, #25]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e9b      	ldrb	r3, [r3, #26]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0220 	orr.w	r2, r2, #32
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0220 	bic.w	r2, r2, #32
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7edb      	ldrb	r3, [r3, #27]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0210 	bic.w	r2, r2, #16
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0210 	orr.w	r2, r2, #16
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7f1b      	ldrb	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7f5b      	ldrb	r3, [r3, #29]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0204 	orr.w	r2, r2, #4
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002692:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <HAL_CAN_ConfigFilter+0x26>
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 80be 	bne.w	800281e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026a2:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_CAN_ConfigFilter+0x1bc>)
 80026a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	431a      	orrs	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2201      	movs	r2, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d123      	bne.n	800274c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002726:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3248      	adds	r2, #72	; 0x48
 800272c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002740:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	3348      	adds	r3, #72	; 0x48
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d122      	bne.n	800279a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	431a      	orrs	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002774:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3248      	adds	r2, #72	; 0x48
 800277a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	3348      	adds	r3, #72	; 0x48
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027b4:	e007      	b.n	80027c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027e0:	e007      	b.n	80027f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	431a      	orrs	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002810:	f023 0201 	bic.w	r2, r3, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e006      	b.n	800282c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40006400 	.word	0x40006400

0800283c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d12e      	bne.n	80028ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002868:	f7ff fddc 	bl	8002424 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800286e:	e012      	b.n	8002896 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002870:	f7ff fdd8 	bl	8002424 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b0a      	cmp	r3, #10
 800287c:	d90b      	bls.n	8002896 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2205      	movs	r2, #5
 800288e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e012      	b.n	80028bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e5      	bne.n	8002870 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e006      	b.n	80028bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d133      	bne.n	8002940 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028e8:	f7ff fd9c 	bl	8002424 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ee:	e012      	b.n	8002916 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f0:	f7ff fd98 	bl	8002424 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d90b      	bls.n	8002916 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e01b      	b.n	800294e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0e5      	beq.n	80028f0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0202 	bic.w	r2, r2, #2
 8002932:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e006      	b.n	800294e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002956:	b480      	push	{r7}
 8002958:	b089      	sub	sp, #36	; 0x24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002974:	7ffb      	ldrb	r3, [r7, #31]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d003      	beq.n	8002982 <HAL_CAN_AddTxMessage+0x2c>
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 80b8 	bne.w	8002af2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a0 	beq.w	8002ae2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	0e1b      	lsrs	r3, r3, #24
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d907      	bls.n	80029c2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e09e      	b.n	8002b00 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029c2:	2201      	movs	r2, #1
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10d      	bne.n	80029f0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6809      	ldr	r1, [r1, #0]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3318      	adds	r3, #24
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	440b      	add	r3, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e00f      	b.n	8002a10 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3318      	adds	r3, #24
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	440b      	add	r3, r1
 8002a20:	3304      	adds	r3, #4
 8002a22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	7d1b      	ldrb	r3, [r3, #20]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d111      	bne.n	8002a50 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3318      	adds	r3, #24
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4413      	add	r3, r2
 8002a38:	3304      	adds	r3, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	6811      	ldr	r1, [r2, #0]
 8002a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3318      	adds	r3, #24
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3307      	adds	r3, #7
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	061a      	lsls	r2, r3, #24
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3306      	adds	r3, #6
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3305      	adds	r3, #5
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	3204      	adds	r2, #4
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	4610      	mov	r0, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6811      	ldr	r1, [r2, #0]
 8002a78:	ea43 0200 	orr.w	r2, r3, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	061a      	lsls	r2, r3, #24
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3302      	adds	r3, #2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	ea43 0200 	orr.w	r2, r3, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002abc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	6811      	ldr	r1, [r2, #0]
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	440b      	add	r3, r1
 8002adc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e00e      	b.n	8002b00 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e006      	b.n	8002b00 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3724      	adds	r7, #36	; 0x24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d003      	beq.n	8002b30 <HAL_CAN_GetRxMessage+0x24>
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f040 80f3 	bne.w	8002d16 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0e7      	b.n	8002d24 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0d8      	b.n	8002d24 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	331b      	adds	r3, #27
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0204 	and.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	331b      	adds	r3, #27
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0d5b      	lsrs	r3, r3, #21
 8002ba0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e00b      	b.n	8002bc2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	331b      	adds	r3, #27
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	331b      	adds	r3, #27
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0202 	and.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	331b      	adds	r3, #27
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	331b      	adds	r3, #27
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	331b      	adds	r3, #27
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0a1a      	lsrs	r2, r3, #8
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0c1a      	lsrs	r2, r3, #16
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3302      	adds	r3, #2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e1a      	lsrs	r2, r3, #24
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	3303      	adds	r3, #3
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3304      	adds	r3, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0a1a      	lsrs	r2, r3, #8
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3305      	adds	r3, #5
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0c1a      	lsrs	r2, r3, #16
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3306      	adds	r3, #6
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e1a      	lsrs	r2, r3, #24
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e007      	b.n	8002d12 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e006      	b.n	8002d24 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <HAL_CAN_ActivateNotification+0x1e>
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d109      	bne.n	8002d62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e006      	b.n	8002d70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07c      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f983 	bl	80030ea <HAL_CAN_TxMailbox0CompleteCallback>
 8002de4:	e016      	b.n	8002e14 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e00c      	b.n	8002e14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e002      	b.n	8002e14 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f989 	bl	8003126 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f963 	bl	80030fe <HAL_CAN_TxMailbox1CompleteCallback>
 8002e38:	e016      	b.n	8002e68 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e00c      	b.n	8002e68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	e002      	b.n	8002e68 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f969 	bl	800313a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d024      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f943 	bl	8003112 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e8c:	e016      	b.n	8002ebc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	e00c      	b.n	8002ebc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	e002      	b.n	8002ebc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f949 	bl	800314e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f930 	bl	8003162 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fc0a 	bl	8001734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f912 	bl	800318a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8f9 	bl	8003176 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8fc 	bl	800319e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8f5 	bl	80031b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07b      	beq.n	80030ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d072      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003036:	2b00      	cmp	r3, #0
 8003038:	d043      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03e      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304a:	2b60      	cmp	r3, #96	; 0x60
 800304c:	d02b      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x32a>
 800304e:	2b60      	cmp	r3, #96	; 0x60
 8003050:	d82e      	bhi.n	80030b0 <HAL_CAN_IRQHandler+0x334>
 8003052:	2b50      	cmp	r3, #80	; 0x50
 8003054:	d022      	beq.n	800309c <HAL_CAN_IRQHandler+0x320>
 8003056:	2b50      	cmp	r3, #80	; 0x50
 8003058:	d82a      	bhi.n	80030b0 <HAL_CAN_IRQHandler+0x334>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d019      	beq.n	8003092 <HAL_CAN_IRQHandler+0x316>
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d826      	bhi.n	80030b0 <HAL_CAN_IRQHandler+0x334>
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d010      	beq.n	8003088 <HAL_CAN_IRQHandler+0x30c>
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d822      	bhi.n	80030b0 <HAL_CAN_IRQHandler+0x334>
 800306a:	2b10      	cmp	r3, #16
 800306c:	d002      	beq.n	8003074 <HAL_CAN_IRQHandler+0x2f8>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d005      	beq.n	800307e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003072:	e01d      	b.n	80030b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800307c:	e019      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003086:	e014      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f043 0320 	orr.w	r3, r3, #32
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003090:	e00f      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800309a:	e00a      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a4:	e005      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ae:	e000      	b.n	80030b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80030b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2204      	movs	r2, #4
 80030c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f872 	bl	80031c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030e2:	bf00      	nop
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff3e 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff8e 	bl	80032d0 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff31 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ffa2 	bl	8003338 <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff f80a 	bl	8002424 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e099      	b.n	8003550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343c:	e00f      	b.n	800345e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800343e:	f7fe fff1 	bl	8002424 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b05      	cmp	r3, #5
 800344a:	d908      	bls.n	800345e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e078      	b.n	8003550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e8      	bne.n	800343e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_DMA_Init+0x158>)
 8003478:	4013      	ands	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	4313      	orrs	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d117      	bne.n	8003522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb01 	bl	8003b0c <DMA_CheckFifoParam>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800351e:	2301      	movs	r3, #1
 8003520:	e016      	b.n	8003550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fab8 	bl	8003aa0 <DMA_CalcBaseAndBitshift>
 8003530:	4603      	mov	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	223f      	movs	r2, #63	; 0x3f
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	f010803f 	.word	0xf010803f

0800355c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Start_IT+0x26>
 800357e:	2302      	movs	r3, #2
 8003580:	e040      	b.n	8003604 <HAL_DMA_Start_IT+0xa8>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d12f      	bne.n	80035f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fa4a 	bl	8003a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	223f      	movs	r2, #63	; 0x3f
 80035b6:	409a      	lsls	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0216 	orr.w	r2, r2, #22
 80035ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e005      	b.n	8003602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800361a:	f7fe ff03 	bl	8002424 <HAL_GetTick>
 800361e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d008      	beq.n	800363e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e052      	b.n	80036e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0216 	bic.w	r2, r2, #22
 800364c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_DMA_Abort+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0208 	bic.w	r2, r2, #8
 800367c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368e:	e013      	b.n	80036b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003690:	f7fe fec8 	bl	8002424 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b05      	cmp	r3, #5
 800369c:	d90c      	bls.n	80036b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2203      	movs	r2, #3
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e015      	b.n	80036e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	223f      	movs	r2, #63	; 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00c      	b.n	8003724 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2205      	movs	r2, #5
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800373c:	4b8e      	ldr	r3, [pc, #568]	; (8003978 <HAL_DMA_IRQHandler+0x248>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a8e      	ldr	r2, [pc, #568]	; (800397c <HAL_DMA_IRQHandler+0x24c>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a9b      	lsrs	r3, r3, #10
 8003748:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2208      	movs	r2, #8
 800375c:	409a      	lsls	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01a      	beq.n	800379c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	2208      	movs	r2, #8
 800378a:	409a      	lsls	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2201      	movs	r2, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d012      	beq.n	80037d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2201      	movs	r2, #1
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f043 0202 	orr.w	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2204      	movs	r2, #4
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	2204      	movs	r2, #4
 80037f6:	409a      	lsls	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	2210      	movs	r2, #16
 800380e:	409a      	lsls	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d043      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d03c      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	2210      	movs	r2, #16
 800382c:	409a      	lsls	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d024      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e01f      	b.n	80038a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e016      	b.n	80038a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0208 	bic.w	r2, r2, #8
 800388e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2220      	movs	r2, #32
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 808f 	beq.w	80039d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8087 	beq.w	80039d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	2220      	movs	r2, #32
 80038c8:	409a      	lsls	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d136      	bne.n	8003948 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0216 	bic.w	r2, r2, #22
 80038e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <HAL_DMA_IRQHandler+0x1da>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0208 	bic.w	r2, r2, #8
 8003918:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	223f      	movs	r2, #63	; 0x3f
 8003920:	409a      	lsls	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07e      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
        }
        return;
 8003946:	e079      	b.n	8003a3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01d      	beq.n	8003992 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2b00      	cmp	r3, #0
 800396a:	d031      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
 8003974:	e02c      	b.n	80039d0 <HAL_DMA_IRQHandler+0x2a0>
 8003976:	bf00      	nop
 8003978:	20000100 	.word	0x20000100
 800397c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d023      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e01e      	b.n	80039d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0210 	bic.w	r2, r2, #16
 80039ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d032      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2205      	movs	r2, #5
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3301      	adds	r3, #1
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d307      	bcc.n	8003a18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f2      	bne.n	80039fc <HAL_DMA_IRQHandler+0x2cc>
 8003a16:	e000      	b.n	8003a1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a3c:	bf00      	nop
    }
  }
}
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d108      	bne.n	8003a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a82:	e007      	b.n	8003a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3b10      	subs	r3, #16
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <DMA_CalcBaseAndBitshift+0x64>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <DMA_CalcBaseAndBitshift+0x68>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d909      	bls.n	8003ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae0:	e007      	b.n	8003af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	aaaaaaab 	.word	0xaaaaaaab
 8003b08:	08009d20 	.word	0x08009d20

08003b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11f      	bne.n	8003b66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d856      	bhi.n	8003bda <DMA_CheckFifoParam+0xce>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <DMA_CheckFifoParam+0x28>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b57 	.word	0x08003b57
 8003b3c:	08003b45 	.word	0x08003b45
 8003b40:	08003bdb 	.word	0x08003bdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d046      	beq.n	8003bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e043      	b.n	8003bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b5e:	d140      	bne.n	8003be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e03d      	b.n	8003be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	d121      	bne.n	8003bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d837      	bhi.n	8003be6 <DMA_CheckFifoParam+0xda>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <DMA_CheckFifoParam+0x70>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b93 	.word	0x08003b93
 8003b84:	08003b8d 	.word	0x08003b8d
 8003b88:	08003ba5 	.word	0x08003ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b90:	e030      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d025      	beq.n	8003bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba2:	e022      	b.n	8003bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bac:	d11f      	bne.n	8003bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bb2:	e01c      	b.n	8003bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d903      	bls.n	8003bc2 <DMA_CheckFifoParam+0xb6>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d003      	beq.n	8003bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc0:	e018      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc6:	e015      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e00b      	b.n	8003bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e00a      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
 8003be0:	e008      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be2:	bf00      	nop
 8003be4:	e006      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e16b      	b.n	8003ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f040 815a 	bne.w	8003ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d130      	bne.n	8003cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 0201 	and.w	r2, r3, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d017      	beq.n	8003cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d123      	bne.n	8003d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	220f      	movs	r2, #15
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3208      	adds	r2, #8
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b4 	beq.w	8003ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b60      	ldr	r3, [pc, #384]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	4a5f      	ldr	r2, [pc, #380]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9a:	4b5d      	ldr	r3, [pc, #372]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003da6:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_GPIO_Init+0x310>)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a52      	ldr	r2, [pc, #328]	; (8003f18 <HAL_GPIO_Init+0x314>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02b      	beq.n	8003e2a <HAL_GPIO_Init+0x226>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a51      	ldr	r2, [pc, #324]	; (8003f1c <HAL_GPIO_Init+0x318>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_Init+0x222>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_GPIO_Init+0x31c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_Init+0x21e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_Init+0x320>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x21a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_GPIO_Init+0x324>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x216>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4d      	ldr	r2, [pc, #308]	; (8003f2c <HAL_GPIO_Init+0x328>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x212>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_GPIO_Init+0x32c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x20e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_GPIO_Init+0x330>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x20a>
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e00e      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	e00c      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e12:	2306      	movs	r3, #6
 8003e14:	e00a      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e16:	2305      	movs	r3, #5
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3c:	4935      	ldr	r1, [pc, #212]	; (8003f14 <HAL_GPIO_Init+0x310>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6e:	4a32      	ldr	r2, [pc, #200]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e98:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eec:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	f67f ae90 	bls.w	8003c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40021400 	.word	0x40021400
 8003f30:	40021800 	.word	0x40021800
 8003f34:	40021c00 	.word	0x40021c00
 8003f38:	40013c00 	.word	0x40013c00

08003f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f58:	e003      	b.n	8003f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	041a      	lsls	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	619a      	str	r2, [r3, #24]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e267      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d075      	beq.n	800407a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8e:	4b88      	ldr	r3, [pc, #544]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d00c      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b85      	ldr	r3, [pc, #532]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d112      	bne.n	8003fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa6:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb2:	d10b      	bne.n	8003fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	4b7e      	ldr	r3, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05b      	beq.n	8004078 <HAL_RCC_OscConfig+0x108>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d157      	bne.n	8004078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e242      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x74>
 8003fd6:	4b76      	ldr	r3, [pc, #472]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a75      	ldr	r2, [pc, #468]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e01d      	b.n	8004020 <HAL_RCC_OscConfig+0xb0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x98>
 8003fee:	4b70      	ldr	r3, [pc, #448]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6f      	ldr	r2, [pc, #444]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6c      	ldr	r2, [pc, #432]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0xb0>
 8004008:	4b69      	ldr	r3, [pc, #420]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe f9fc 	bl	8002424 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe f9f8 	bl	8002424 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e207      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b5b      	ldr	r3, [pc, #364]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0xc0>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fe f9e8 	bl	8002424 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe f9e4 	bl	8002424 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e1f3      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	4b51      	ldr	r3, [pc, #324]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0xe8>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d063      	beq.n	800414e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004086:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409a:	2b08      	cmp	r3, #8
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409e:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x152>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1c7      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4937      	ldr	r1, [pc, #220]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e03a      	b.n	800414e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d020      	beq.n	8004122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x244>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fe f99d 	bl	8002424 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fe f999 	bl	8002424 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1a8      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4925      	ldr	r1, [pc, #148]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	e015      	b.n	800414e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x244>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe f97c 	bl	8002424 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004130:	f7fe f978 	bl	8002424 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e187      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d036      	beq.n	80041c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x248>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fe f95c 	bl	8002424 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004170:	f7fe f958 	bl	8002424 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e167      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_OscConfig+0x240>)
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x200>
 800418e:	e01b      	b.n	80041c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_OscConfig+0x248>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004196:	f7fe f945 	bl	8002424 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	e00e      	b.n	80041bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419e:	f7fe f941 	bl	8002424 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d907      	bls.n	80041bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e150      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
 80041b0:	40023800 	.word	0x40023800
 80041b4:	42470000 	.word	0x42470000
 80041b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ea      	bne.n	800419e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8097 	beq.w	8004304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	4b7d      	ldr	r3, [pc, #500]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a7c      	ldr	r2, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b77      	ldr	r3, [pc, #476]	; (80043e4 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b74      	ldr	r3, [pc, #464]	; (80043e4 <HAL_RCC_OscConfig+0x474>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a73      	ldr	r2, [pc, #460]	; (80043e4 <HAL_RCC_OscConfig+0x474>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fe f901 	bl	8002424 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fe f8fd 	bl	8002424 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e10c      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b6a      	ldr	r3, [pc, #424]	; (80043e4 <HAL_RCC_OscConfig+0x474>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x2ea>
 800424c:	4b64      	ldr	r3, [pc, #400]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a63      	ldr	r2, [pc, #396]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	e01c      	b.n	8004294 <HAL_RCC_OscConfig+0x324>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x30c>
 8004262:	4b5f      	ldr	r3, [pc, #380]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a5e      	ldr	r2, [pc, #376]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	4b5c      	ldr	r3, [pc, #368]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a5b      	ldr	r2, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x324>
 800427c:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	4b55      	ldr	r3, [pc, #340]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a54      	ldr	r2, [pc, #336]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 800428e:	f023 0304 	bic.w	r3, r3, #4
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f8c2 	bl	8002424 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe f8be 	bl	8002424 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0cb      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ee      	beq.n	80042a4 <HAL_RCC_OscConfig+0x334>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe f8ac 	bl	8002424 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fe f8a8 	bl	8002424 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e0b5      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ee      	bne.n	80042d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a1 	beq.w	8004450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430e:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b08      	cmp	r3, #8
 8004318:	d05c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d141      	bne.n	80043a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_OscConfig+0x478>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe f87c 	bl	8002424 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe f878 	bl	8002424 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e087      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	3b01      	subs	r3, #1
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x478>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe f851 	bl	8002424 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fe f84d 	bl	8002424 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e05c      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x416>
 80043a4:	e054      	b.n	8004450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_OscConfig+0x478>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe f83a 	bl	8002424 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe f836 	bl	8002424 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e045      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_OscConfig+0x470>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x444>
 80043d2:	e03d      	b.n	8004450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e038      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x4ec>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d028      	beq.n	800444c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d121      	bne.n	800444c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d11a      	bne.n	800444c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	3b01      	subs	r3, #1
 8004436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0cc      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d90c      	bls.n	800449c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d044      	beq.n	8004580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d119      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d003      	beq.n	800451e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e067      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0203 	bic.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4934      	ldr	r1, [pc, #208]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004550:	f7fd ff68 	bl	8002424 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	e00a      	b.n	800456e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004558:	f7fd ff64 	bl	8002424 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e04f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 020c 	and.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	429a      	cmp	r2, r3
 800457e:	d1eb      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20c      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f821 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	490a      	ldr	r1, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	5ccb      	ldrb	r3, [r1, r3]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd fec8 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023c00 	.word	0x40023c00
 800461c:	40023800 	.word	0x40023800
 8004620:	08009d08 	.word	0x08009d08
 8004624:	20000100 	.word	0x20000100
 8004628:	20000104 	.word	0x20000104

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004630:	b090      	sub	sp, #64	; 0x40
 8004632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
 8004638:	2300      	movs	r3, #0
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	2300      	movs	r3, #0
 800463e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b08      	cmp	r3, #8
 800464e:	d00d      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x40>
 8004650:	2b08      	cmp	r3, #8
 8004652:	f200 80a1 	bhi.w	8004798 <HAL_RCC_GetSysClockFreq+0x16c>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x34>
 800465a:	2b04      	cmp	r3, #4
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0x3a>
 800465e:	e09b      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004664:	e09b      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004666:	4b53      	ldr	r3, [pc, #332]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800466a:	e098      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004676:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004682:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	2200      	movs	r2, #0
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	627a      	str	r2, [r7, #36]	; 0x24
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004694:	2100      	movs	r1, #0
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004698:	fb03 f201 	mul.w	r2, r3, r1
 800469c:	2300      	movs	r3, #0
 800469e:	fb00 f303 	mul.w	r3, r0, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	4a43      	ldr	r2, [pc, #268]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046a6:	fba0 1202 	umull	r1, r2, r0, r2
 80046aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ac:	460a      	mov	r2, r1
 80046ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80046b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b2:	4413      	add	r3, r2
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	2200      	movs	r2, #0
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046c6:	f7fc fa67 	bl	8000b98 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4613      	mov	r3, r2
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d2:	e053      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d4:	4b35      	ldr	r3, [pc, #212]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	2200      	movs	r2, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	617a      	str	r2, [r7, #20]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046e6:	f04f 0b00 	mov.w	fp, #0
 80046ea:	4652      	mov	r2, sl
 80046ec:	465b      	mov	r3, fp
 80046ee:	f04f 0000 	mov.w	r0, #0
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	0159      	lsls	r1, r3, #5
 80046f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fc:	0150      	lsls	r0, r2, #5
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	ebb2 080a 	subs.w	r8, r2, sl
 8004706:	eb63 090b 	sbc.w	r9, r3, fp
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004716:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800471a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800471e:	ebb2 0408 	subs.w	r4, r2, r8
 8004722:	eb63 0509 	sbc.w	r5, r3, r9
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	00eb      	lsls	r3, r5, #3
 8004730:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004734:	00e2      	lsls	r2, r4, #3
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	eb14 030a 	adds.w	r3, r4, sl
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	eb45 030b 	adc.w	r3, r5, fp
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004752:	4629      	mov	r1, r5
 8004754:	028b      	lsls	r3, r1, #10
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475c:	4621      	mov	r1, r4
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	2200      	movs	r2, #0
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	60fa      	str	r2, [r7, #12]
 800476c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004770:	f7fc fa12 	bl	8000b98 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_GetSysClockFreq+0x180>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	3301      	adds	r3, #1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800478c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004796:	e002      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800479c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3740      	adds	r7, #64	; 0x40
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	017d7840 	.word	0x017d7840

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000100 	.word	0x20000100

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	08009d18 	.word	0x08009d18

080047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047fc:	f7ff ffdc 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0b5b      	lsrs	r3, r3, #13
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK2Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08009d18 	.word	0x08009d18

08004820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07b      	b.n	800492a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004842:	d009      	beq.n	8004858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
 800484a:	e005      	b.n	8004858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd faba 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	ea42 0103 	orr.w	r1, r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	f003 0104 	and.w	r1, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0210 	and.w	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e03f      	b.n	80049c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fd fa8f 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2224      	movs	r2, #36	; 0x24
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004974:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 ff9c 	bl	80058b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d17c      	bne.n	8004ae6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Transmit+0x2c>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e075      	b.n	8004ae8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Transmit+0x3e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e06e      	b.n	8004ae8 <HAL_UART_Transmit+0x11c>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2221      	movs	r2, #33	; 0x21
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a20:	f7fd fd00 	bl	8002424 <HAL_GetTick>
 8004a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d108      	bne.n	8004a4e <HAL_UART_Transmit+0x82>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e003      	b.n	8004a56 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a5e:	e02a      	b.n	8004ab6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fc54 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e036      	b.n	8004ae8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	3302      	adds	r3, #2
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	e007      	b.n	8004aa8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1cf      	bne.n	8004a60 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fc24 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d152      	bne.n	8004bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e04b      	b.n	8004bb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e044      	b.n	8004bb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fc59 	bl	80053f4 <UART_Start_Receive_DMA>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d12c      	bne.n	8004baa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d125      	bne.n	8004ba4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b90:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6a39      	ldr	r1, [r7, #32]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004ba2:	e002      	b.n	8004baa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bae:	e000      	b.n	8004bb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3730      	adds	r7, #48	; 0x30
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b0ba      	sub	sp, #232	; 0xe8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10f      	bne.n	8004c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_UART_IRQHandler+0x66>
 8004c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fd8f 	bl	800573e <UART_Receive_IT>
      return;
 8004c20:	e256      	b.n	80050d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80de 	beq.w	8004de8 <HAL_UART_IRQHandler+0x22c>
 8004c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80d1 	beq.w	8004de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_UART_IRQHandler+0xae>
 8004c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_UART_IRQHandler+0xd2>
 8004c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0202 	orr.w	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xf6>
 8004c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d011      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x126>
 8004cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0208 	orr.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 81ed 	beq.w	80050c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_UART_IRQHandler+0x14e>
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fd1a 	bl	800573e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <HAL_UART_IRQHandler+0x17a>
 8004d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04f      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fc22 	bl	8005580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d141      	bne.n	8004dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1d9      	bne.n	8004d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d013      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	4a7d      	ldr	r2, [pc, #500]	; (8004f98 <HAL_UART_IRQHandler+0x3dc>)
 8004da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fc9e 	bl	80036ec <HAL_DMA_Abort_IT>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e00e      	b.n	8004de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9a4 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	e00a      	b.n	8004de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9a0 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	e006      	b.n	8004de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f99c 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004de2:	e170      	b.n	80050c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	bf00      	nop
    return;
 8004de6:	e16e      	b.n	80050c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	f040 814a 	bne.w	8005086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8143 	beq.w	8005086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 813c 	beq.w	8005086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	f040 80b4 	bne.w	8004f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8140 	beq.w	80050ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f080 8139 	bcs.w	80050ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	f000 8088 	beq.w	8004f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1d9      	bne.n	8004e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3314      	adds	r3, #20
 8004eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e1      	bne.n	8004eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e3      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4e:	f023 0310 	bic.w	r3, r3, #16
 8004f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e3      	bne.n	8004f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe fb47 	bl	800360c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fbf6 	bl	8001780 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f94:	e099      	b.n	80050ca <HAL_UART_IRQHandler+0x50e>
 8004f96:	bf00      	nop
 8004f98:	08005647 	.word	0x08005647
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 808b 	beq.w	80050ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8086 	beq.w	80050ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e3      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	623b      	str	r3, [r7, #32]
   return(result);
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800501e:	633a      	str	r2, [r7, #48]	; 0x30
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e3      	bne.n	8004ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0310 	bic.w	r3, r3, #16
 8005056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	617b      	str	r3, [r7, #20]
   return(result);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e3      	bne.n	8005040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fb7e 	bl	8001780 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005084:	e023      	b.n	80050ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_UART_IRQHandler+0x4ea>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fae5 	bl	800566e <UART_Transmit_IT>
    return;
 80050a4:	e014      	b.n	80050d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00e      	beq.n	80050d0 <HAL_UART_IRQHandler+0x514>
 80050b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb25 	bl	800570e <UART_EndTransmit_IT>
    return;
 80050c4:	e004      	b.n	80050d0 <HAL_UART_IRQHandler+0x514>
    return;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ce:	bf00      	nop
  }
}
 80050d0:	37e8      	adds	r7, #232	; 0xe8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b09c      	sub	sp, #112	; 0x70
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d172      	bne.n	800522a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	2200      	movs	r2, #0
 8005148:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800515a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005160:	66bb      	str	r3, [r7, #104]	; 0x68
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800516a:	65ba      	str	r2, [r7, #88]	; 0x58
 800516c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	667b      	str	r3, [r7, #100]	; 0x64
 8005196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800519e:	647a      	str	r2, [r7, #68]	; 0x44
 80051a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	623b      	str	r3, [r7, #32]
   return(result);
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c8:	663b      	str	r3, [r7, #96]	; 0x60
 80051ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051d2:	633a      	str	r2, [r7, #48]	; 0x30
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d119      	bne.n	800522a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	60fb      	str	r3, [r7, #12]
   return(result);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005216:	61fa      	str	r2, [r7, #28]
 8005218:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	69b9      	ldr	r1, [r7, #24]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	617b      	str	r3, [r7, #20]
   return(result);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	2b01      	cmp	r3, #1
 8005230:	d106      	bne.n	8005240 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005236:	4619      	mov	r1, r3
 8005238:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800523a:	f7fc faa1 	bl	8001780 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800523e:	e002      	b.n	8005246 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005242:	f7ff ff53 	bl	80050ec <HAL_UART_RxCpltCallback>
}
 8005246:	bf00      	nop
 8005248:	3770      	adds	r7, #112	; 0x70
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	2b01      	cmp	r3, #1
 8005262:	d108      	bne.n	8005276 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	4619      	mov	r1, r3
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7fc fa86 	bl	8001780 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005274:	e002      	b.n	800527c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ff42 	bl	8005100 <HAL_UART_RxHalfCpltCallback>
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b21      	cmp	r3, #33	; 0x21
 80052b6:	d108      	bne.n	80052ca <UART_DMAError+0x46>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80052c4:	68b8      	ldr	r0, [r7, #8]
 80052c6:	f000 f933 	bl	8005530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	d108      	bne.n	80052fe <UART_DMAError+0x7a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80052f8:	68b8      	ldr	r0, [r7, #8]
 80052fa:	f000 f941 	bl	8005580 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f043 0210 	orr.w	r2, r3, #16
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f7ff ff02 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b090      	sub	sp, #64	; 0x40
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	e050      	b.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d04c      	beq.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x30>
 8005338:	f7fd f874 	bl	8002424 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005344:	429a      	cmp	r2, r3
 8005346:	d241      	bcs.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005368:	637a      	str	r2, [r7, #52]	; 0x34
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800536e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	613b      	str	r3, [r7, #16]
   return(result);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800539c:	623a      	str	r2, [r7, #32]
 800539e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e00f      	b.n	80053ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d09f      	beq.n	800532a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3740      	adds	r7, #64	; 0x40
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b098      	sub	sp, #96	; 0x60
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2222      	movs	r2, #34	; 0x22
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	4a40      	ldr	r2, [pc, #256]	; (8005524 <UART_Start_Receive_DMA+0x130>)
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <UART_Start_Receive_DMA+0x134>)
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	4a3e      	ldr	r2, [pc, #248]	; (800552c <UART_Start_Receive_DMA+0x138>)
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	2200      	movs	r2, #0
 800543a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	f7fe f882 	bl	800355c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d019      	beq.n	80054b2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800548e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	65bb      	str	r3, [r7, #88]	; 0x58
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800549e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	617b      	str	r3, [r7, #20]
   return(result);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054fc:	653b      	str	r3, [r7, #80]	; 0x50
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005506:	627a      	str	r2, [r7, #36]	; 0x24
 8005508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6a39      	ldr	r1, [r7, #32]
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61fb      	str	r3, [r7, #28]
   return(result);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3760      	adds	r7, #96	; 0x60
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	08005129 	.word	0x08005129
 8005528:	0800524f 	.word	0x0800524f
 800552c:	08005285 	.word	0x08005285

08005530 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b089      	sub	sp, #36	; 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	60bb      	str	r3, [r7, #8]
   return(result);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	61ba      	str	r2, [r7, #24]
 800555a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6979      	ldr	r1, [r7, #20]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005574:	bf00      	nop
 8005576:	3724      	adds	r7, #36	; 0x24
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b095      	sub	sp, #84	; 0x54
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055a8:	643a      	str	r2, [r7, #64]	; 0x40
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d119      	bne.n	800562c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	60bb      	str	r3, [r7, #8]
   return(result);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 0310 	bic.w	r3, r3, #16
 800560e:	647b      	str	r3, [r7, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005618:	61ba      	str	r2, [r7, #24]
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800563a:	bf00      	nop
 800563c:	3754      	adds	r7, #84	; 0x54
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fd57 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b21      	cmp	r3, #33	; 0x21
 8005680:	d13e      	bne.n	8005700 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	d114      	bne.n	80056b6 <UART_Transmit_IT+0x48>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d110      	bne.n	80056b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]
 80056b4:	e008      	b.n	80056c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6211      	str	r1, [r2, #32]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4619      	mov	r1, r3
 80056d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005724:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fcd2 	bl	80050d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08c      	sub	sp, #48	; 0x30
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b22      	cmp	r3, #34	; 0x22
 8005750:	f040 80ab 	bne.w	80058aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575c:	d117      	bne.n	800578e <UART_Receive_IT+0x50>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d113      	bne.n	800578e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577c:	b29a      	uxth	r2, r3
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
 800578c:	e026      	b.n	80057dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d007      	beq.n	80057b2 <UART_Receive_IT+0x74>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <UART_Receive_IT+0x82>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e008      	b.n	80057d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4619      	mov	r1, r3
 80057ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d15a      	bne.n	80058a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0220 	bic.w	r2, r2, #32
 80057fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d135      	bne.n	800589c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	613b      	str	r3, [r7, #16]
   return(result);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	623a      	str	r2, [r7, #32]
 8005858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	69f9      	ldr	r1, [r7, #28]
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	61bb      	str	r3, [r7, #24]
   return(result);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d10a      	bne.n	800588e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fb ff73 	bl	8001780 <HAL_UARTEx_RxEventCallback>
 800589a:	e002      	b.n	80058a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fc25 	bl	80050ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e002      	b.n	80058ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	; 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b8:	b0c0      	sub	sp, #256	; 0x100
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	ea40 0301 	orr.w	r3, r0, r1
 80058dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800590c:	f021 010c 	bic.w	r1, r1, #12
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800591a:	430b      	orrs	r3, r1
 800591c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	6999      	ldr	r1, [r3, #24]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	ea40 0301 	orr.w	r3, r0, r1
 800593a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8f      	ldr	r3, [pc, #572]	; (8005b80 <UART_SetConfig+0x2cc>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d005      	beq.n	8005954 <UART_SetConfig+0xa0>
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8d      	ldr	r3, [pc, #564]	; (8005b84 <UART_SetConfig+0x2d0>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d104      	bne.n	800595e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fe ff50 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8005958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800595c:	e003      	b.n	8005966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fe ff37 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 8005962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	f040 810c 	bne.w	8005b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005978:	2200      	movs	r2, #0
 800597a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800597e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005986:	4622      	mov	r2, r4
 8005988:	462b      	mov	r3, r5
 800598a:	1891      	adds	r1, r2, r2
 800598c:	65b9      	str	r1, [r7, #88]	; 0x58
 800598e:	415b      	adcs	r3, r3
 8005990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005996:	4621      	mov	r1, r4
 8005998:	eb12 0801 	adds.w	r8, r2, r1
 800599c:	4629      	mov	r1, r5
 800599e:	eb43 0901 	adc.w	r9, r3, r1
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059b6:	4690      	mov	r8, r2
 80059b8:	4699      	mov	r9, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	eb18 0303 	adds.w	r3, r8, r3
 80059c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059c4:	462b      	mov	r3, r5
 80059c6:	eb49 0303 	adc.w	r3, r9, r3
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059e2:	460b      	mov	r3, r1
 80059e4:	18db      	adds	r3, r3, r3
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
 80059e8:	4613      	mov	r3, r2
 80059ea:	eb42 0303 	adc.w	r3, r2, r3
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
 80059f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059f8:	f7fb f8ce 	bl	8000b98 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b61      	ldr	r3, [pc, #388]	; (8005b88 <UART_SetConfig+0x2d4>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011c      	lsls	r4, r3, #4
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	1891      	adds	r1, r2, r2
 8005a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a24:	415b      	adcs	r3, r3
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a32:	4649      	mov	r1, r9
 8005a34:	eb43 0b01 	adc.w	fp, r3, r1
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a4c:	4692      	mov	sl, r2
 8005a4e:	469b      	mov	fp, r3
 8005a50:	4643      	mov	r3, r8
 8005a52:	eb1a 0303 	adds.w	r3, sl, r3
 8005a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	18db      	adds	r3, r3, r3
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a7e:	4613      	mov	r3, r2
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a8e:	f7fb f883 	bl	8000b98 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	4b3b      	ldr	r3, [pc, #236]	; (8005b88 <UART_SetConfig+0x2d4>)
 8005a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2264      	movs	r2, #100	; 0x64
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	1acb      	subs	r3, r1, r3
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005abc:	441c      	add	r4, r3
 8005abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	1891      	adds	r1, r2, r2
 8005ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ad8:	415b      	adcs	r3, r3
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	1851      	adds	r1, r2, r1
 8005ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005af8:	4659      	mov	r1, fp
 8005afa:	00cb      	lsls	r3, r1, #3
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b02:	4651      	mov	r1, sl
 8005b04:	00ca      	lsls	r2, r1, #3
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b14:	464b      	mov	r3, r9
 8005b16:	460a      	mov	r2, r1
 8005b18:	eb42 0303 	adc.w	r3, r2, r3
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b34:	460b      	mov	r3, r1
 8005b36:	18db      	adds	r3, r3, r3
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	eb42 0303 	adc.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b4a:	f7fb f825 	bl	8000b98 <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <UART_SetConfig+0x2d4>)
 8005b54:	fba3 1302 	umull	r1, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	2164      	movs	r1, #100	; 0x64
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	3332      	adds	r3, #50	; 0x32
 8005b66:	4a08      	ldr	r2, [pc, #32]	; (8005b88 <UART_SetConfig+0x2d4>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 0207 	and.w	r2, r3, #7
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4422      	add	r2, r4
 8005b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b7c:	e106      	b.n	8005d8c <UART_SetConfig+0x4d8>
 8005b7e:	bf00      	nop
 8005b80:	40011000 	.word	0x40011000
 8005b84:	40011400 	.word	0x40011400
 8005b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	1891      	adds	r1, r2, r2
 8005ba4:	6239      	str	r1, [r7, #32]
 8005ba6:	415b      	adcs	r3, r3
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8005baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bae:	4641      	mov	r1, r8
 8005bb0:	1854      	adds	r4, r2, r1
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	eb43 0501 	adc.w	r5, r3, r1
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	00eb      	lsls	r3, r5, #3
 8005bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc6:	00e2      	lsls	r2, r4, #3
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	4643      	mov	r3, r8
 8005bce:	18e3      	adds	r3, r4, r3
 8005bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	eb45 0303 	adc.w	r3, r5, r3
 8005bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	008b      	lsls	r3, r1, #2
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c04:	4621      	mov	r1, r4
 8005c06:	008a      	lsls	r2, r1, #2
 8005c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c0c:	f7fa ffc4 	bl	8000b98 <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4b60      	ldr	r3, [pc, #384]	; (8005d98 <UART_SetConfig+0x4e4>)
 8005c16:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	011c      	lsls	r4, r3, #4
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	1891      	adds	r1, r2, r2
 8005c36:	61b9      	str	r1, [r7, #24]
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	4641      	mov	r1, r8
 8005c42:	1851      	adds	r1, r2, r1
 8005c44:	6139      	str	r1, [r7, #16]
 8005c46:	4649      	mov	r1, r9
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c58:	4659      	mov	r1, fp
 8005c5a:	00cb      	lsls	r3, r1, #3
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c62:	4651      	mov	r1, sl
 8005c64:	00ca      	lsls	r2, r1, #3
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c74:	464b      	mov	r3, r9
 8005c76:	460a      	mov	r2, r1
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c98:	4649      	mov	r1, r9
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	008a      	lsls	r2, r1, #2
 8005ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005caa:	f7fa ff75 	bl	8000b98 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <UART_SetConfig+0x4e4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	; 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	3332      	adds	r3, #50	; 0x32
 8005cc8:	4a33      	ldr	r2, [pc, #204]	; (8005d98 <UART_SetConfig+0x4e4>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8005cde:	677a      	str	r2, [r7, #116]	; 0x74
 8005ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	415b      	adcs	r3, r3
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	1851      	adds	r1, r2, r1
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	414b      	adcs	r3, r1
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	00cb      	lsls	r3, r1, #3
 8005d10:	4651      	mov	r1, sl
 8005d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d16:	4651      	mov	r1, sl
 8005d18:	00ca      	lsls	r2, r1, #3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4642      	mov	r2, r8
 8005d22:	189b      	adds	r3, r3, r2
 8005d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d26:	464b      	mov	r3, r9
 8005d28:	460a      	mov	r2, r1
 8005d2a:	eb42 0303 	adc.w	r3, r2, r3
 8005d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	663b      	str	r3, [r7, #96]	; 0x60
 8005d3a:	667a      	str	r2, [r7, #100]	; 0x64
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d48:	4649      	mov	r1, r9
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d52:	4641      	mov	r1, r8
 8005d54:	008a      	lsls	r2, r1, #2
 8005d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d5a:	f7fa ff1d 	bl	8000b98 <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <UART_SetConfig+0x4e4>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <UART_SetConfig+0x4e4>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4422      	add	r2, r4
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d92:	46bd      	mov	sp, r7
 8005d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005da0:	4904      	ldr	r1, [pc, #16]	; (8005db4 <MX_FATFS_Init+0x18>)
 8005da2:	4805      	ldr	r0, [pc, #20]	; (8005db8 <MX_FATFS_Init+0x1c>)
 8005da4:	f000 f8b0 	bl	8005f08 <FATFS_LinkDriver>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <MX_FATFS_Init+0x20>)
 8005dae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005db0:	bf00      	nop
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200005c4 	.word	0x200005c4
 8005db8:	2000010c 	.word	0x2000010c
 8005dbc:	200005c0 	.word	0x200005c0

08005dc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <USER_initialize+0x24>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <USER_initialize+0x24>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000109 	.word	0x20000109

08005de8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <USER_status+0x24>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005df8:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <USER_status+0x24>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000109 	.word	0x20000109

08005e10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005e20:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005e3e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	603a      	str	r2, [r7, #0]
 8005e56:	71fb      	strb	r3, [r7, #7]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005e88:	7a5b      	ldrb	r3, [r3, #9]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d131      	bne.n	8005ef4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e90:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005e92:	7a5b      	ldrb	r3, [r3, #9]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e9e:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005ea0:	7a5b      	ldrb	r3, [r3, #9]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005eb0:	7a5b      	ldrb	r3, [r3, #9]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	79fa      	ldrb	r2, [r7, #7]
 8005ebc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005ebe:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005ec0:	7a5b      	ldrb	r3, [r3, #9]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	b2d1      	uxtb	r1, r2
 8005ec8:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <FATFS_LinkDriverEx+0x94>)
 8005eca:	7251      	strb	r1, [r2, #9]
 8005ecc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
 8005ed0:	3330      	adds	r3, #48	; 0x30
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3301      	adds	r3, #1
 8005edc:	223a      	movs	r2, #58	; 0x3a
 8005ede:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	222f      	movs	r2, #47	; 0x2f
 8005ee6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3303      	adds	r3, #3
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	200005c8 	.word	0x200005c8

08005f08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f12:	2200      	movs	r2, #0
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff ffaa 	bl	8005e70 <FATFS_LinkDriverEx>
 8005f1c:	4603      	mov	r3, r0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <atof>:
 8005f26:	2100      	movs	r1, #0
 8005f28:	f000 be0e 	b.w	8006b48 <strtod>

08005f2c <sulp>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	ec45 4b10 	vmov	d0, r4, r5
 8005f36:	4616      	mov	r6, r2
 8005f38:	f002 f82e 	bl	8007f98 <__ulp>
 8005f3c:	ec51 0b10 	vmov	r0, r1, d0
 8005f40:	b17e      	cbz	r6, 8005f62 <sulp+0x36>
 8005f42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dd09      	ble.n	8005f62 <sulp+0x36>
 8005f4e:	051b      	lsls	r3, r3, #20
 8005f50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f54:	2400      	movs	r4, #0
 8005f56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	f7fa fb4b 	bl	80005f8 <__aeabi_dmul>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	0000      	movs	r0, r0
	...

08005f68 <_strtod_l>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	ed2d 8b02 	vpush	{d8}
 8005f70:	b09b      	sub	sp, #108	; 0x6c
 8005f72:	4604      	mov	r4, r0
 8005f74:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f76:	2200      	movs	r2, #0
 8005f78:	9216      	str	r2, [sp, #88]	; 0x58
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	f04f 0800 	mov.w	r8, #0
 8005f80:	f04f 0900 	mov.w	r9, #0
 8005f84:	460a      	mov	r2, r1
 8005f86:	9215      	str	r2, [sp, #84]	; 0x54
 8005f88:	7811      	ldrb	r1, [r2, #0]
 8005f8a:	292b      	cmp	r1, #43	; 0x2b
 8005f8c:	d04c      	beq.n	8006028 <_strtod_l+0xc0>
 8005f8e:	d83a      	bhi.n	8006006 <_strtod_l+0x9e>
 8005f90:	290d      	cmp	r1, #13
 8005f92:	d834      	bhi.n	8005ffe <_strtod_l+0x96>
 8005f94:	2908      	cmp	r1, #8
 8005f96:	d834      	bhi.n	8006002 <_strtod_l+0x9a>
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d03d      	beq.n	8006018 <_strtod_l+0xb0>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8005fa0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005fa2:	7832      	ldrb	r2, [r6, #0]
 8005fa4:	2a30      	cmp	r2, #48	; 0x30
 8005fa6:	f040 80b4 	bne.w	8006112 <_strtod_l+0x1aa>
 8005faa:	7872      	ldrb	r2, [r6, #1]
 8005fac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005fb0:	2a58      	cmp	r2, #88	; 0x58
 8005fb2:	d170      	bne.n	8006096 <_strtod_l+0x12e>
 8005fb4:	9302      	str	r3, [sp, #8]
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	ab16      	add	r3, sp, #88	; 0x58
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4a8e      	ldr	r2, [pc, #568]	; (80061f8 <_strtod_l+0x290>)
 8005fc0:	ab17      	add	r3, sp, #92	; 0x5c
 8005fc2:	a915      	add	r1, sp, #84	; 0x54
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f001 f8c5 	bl	8007154 <__gethex>
 8005fca:	f010 070f 	ands.w	r7, r0, #15
 8005fce:	4605      	mov	r5, r0
 8005fd0:	d005      	beq.n	8005fde <_strtod_l+0x76>
 8005fd2:	2f06      	cmp	r7, #6
 8005fd4:	d12a      	bne.n	800602c <_strtod_l+0xc4>
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9615      	str	r6, [sp, #84]	; 0x54
 8005fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 857f 	bne.w	8006ae4 <_strtod_l+0xb7c>
 8005fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe8:	b1db      	cbz	r3, 8006022 <_strtod_l+0xba>
 8005fea:	4642      	mov	r2, r8
 8005fec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ff0:	ec43 2b10 	vmov	d0, r2, r3
 8005ff4:	b01b      	add	sp, #108	; 0x6c
 8005ff6:	ecbd 8b02 	vpop	{d8}
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	2920      	cmp	r1, #32
 8006000:	d1cc      	bne.n	8005f9c <_strtod_l+0x34>
 8006002:	3201      	adds	r2, #1
 8006004:	e7bf      	b.n	8005f86 <_strtod_l+0x1e>
 8006006:	292d      	cmp	r1, #45	; 0x2d
 8006008:	d1c8      	bne.n	8005f9c <_strtod_l+0x34>
 800600a:	2101      	movs	r1, #1
 800600c:	910a      	str	r1, [sp, #40]	; 0x28
 800600e:	1c51      	adds	r1, r2, #1
 8006010:	9115      	str	r1, [sp, #84]	; 0x54
 8006012:	7852      	ldrb	r2, [r2, #1]
 8006014:	2a00      	cmp	r2, #0
 8006016:	d1c3      	bne.n	8005fa0 <_strtod_l+0x38>
 8006018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800601a:	9515      	str	r5, [sp, #84]	; 0x54
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 855f 	bne.w	8006ae0 <_strtod_l+0xb78>
 8006022:	4642      	mov	r2, r8
 8006024:	464b      	mov	r3, r9
 8006026:	e7e3      	b.n	8005ff0 <_strtod_l+0x88>
 8006028:	2100      	movs	r1, #0
 800602a:	e7ef      	b.n	800600c <_strtod_l+0xa4>
 800602c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800602e:	b13a      	cbz	r2, 8006040 <_strtod_l+0xd8>
 8006030:	2135      	movs	r1, #53	; 0x35
 8006032:	a818      	add	r0, sp, #96	; 0x60
 8006034:	f002 f8ad 	bl	8008192 <__copybits>
 8006038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800603a:	4620      	mov	r0, r4
 800603c:	f001 fc80 	bl	8007940 <_Bfree>
 8006040:	3f01      	subs	r7, #1
 8006042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006044:	2f04      	cmp	r7, #4
 8006046:	d806      	bhi.n	8006056 <_strtod_l+0xee>
 8006048:	e8df f007 	tbb	[pc, r7]
 800604c:	201d0314 	.word	0x201d0314
 8006050:	14          	.byte	0x14
 8006051:	00          	.byte	0x00
 8006052:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006056:	05e9      	lsls	r1, r5, #23
 8006058:	bf48      	it	mi
 800605a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800605e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006062:	0d1b      	lsrs	r3, r3, #20
 8006064:	051b      	lsls	r3, r3, #20
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1b9      	bne.n	8005fde <_strtod_l+0x76>
 800606a:	f000 ff5f 	bl	8006f2c <__errno>
 800606e:	2322      	movs	r3, #34	; 0x22
 8006070:	6003      	str	r3, [r0, #0]
 8006072:	e7b4      	b.n	8005fde <_strtod_l+0x76>
 8006074:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006078:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800607c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006080:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006084:	e7e7      	b.n	8006056 <_strtod_l+0xee>
 8006086:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006200 <_strtod_l+0x298>
 800608a:	e7e4      	b.n	8006056 <_strtod_l+0xee>
 800608c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006090:	f04f 38ff 	mov.w	r8, #4294967295
 8006094:	e7df      	b.n	8006056 <_strtod_l+0xee>
 8006096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	9215      	str	r2, [sp, #84]	; 0x54
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b30      	cmp	r3, #48	; 0x30
 80060a0:	d0f9      	beq.n	8006096 <_strtod_l+0x12e>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d09b      	beq.n	8005fde <_strtod_l+0x76>
 80060a6:	2301      	movs	r3, #1
 80060a8:	f04f 0a00 	mov.w	sl, #0
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80060b6:	46d3      	mov	fp, sl
 80060b8:	220a      	movs	r2, #10
 80060ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80060bc:	7806      	ldrb	r6, [r0, #0]
 80060be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060c2:	b2d9      	uxtb	r1, r3
 80060c4:	2909      	cmp	r1, #9
 80060c6:	d926      	bls.n	8006116 <_strtod_l+0x1ae>
 80060c8:	494c      	ldr	r1, [pc, #304]	; (80061fc <_strtod_l+0x294>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	f000 fe63 	bl	8006d96 <strncmp>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d030      	beq.n	8006136 <_strtod_l+0x1ce>
 80060d4:	2000      	movs	r0, #0
 80060d6:	4632      	mov	r2, r6
 80060d8:	9005      	str	r0, [sp, #20]
 80060da:	465e      	mov	r6, fp
 80060dc:	4603      	mov	r3, r0
 80060de:	2a65      	cmp	r2, #101	; 0x65
 80060e0:	d001      	beq.n	80060e6 <_strtod_l+0x17e>
 80060e2:	2a45      	cmp	r2, #69	; 0x45
 80060e4:	d113      	bne.n	800610e <_strtod_l+0x1a6>
 80060e6:	b91e      	cbnz	r6, 80060f0 <_strtod_l+0x188>
 80060e8:	9a04      	ldr	r2, [sp, #16]
 80060ea:	4302      	orrs	r2, r0
 80060ec:	d094      	beq.n	8006018 <_strtod_l+0xb0>
 80060ee:	2600      	movs	r6, #0
 80060f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80060f2:	1c6a      	adds	r2, r5, #1
 80060f4:	9215      	str	r2, [sp, #84]	; 0x54
 80060f6:	786a      	ldrb	r2, [r5, #1]
 80060f8:	2a2b      	cmp	r2, #43	; 0x2b
 80060fa:	d074      	beq.n	80061e6 <_strtod_l+0x27e>
 80060fc:	2a2d      	cmp	r2, #45	; 0x2d
 80060fe:	d078      	beq.n	80061f2 <_strtod_l+0x28a>
 8006100:	f04f 0c00 	mov.w	ip, #0
 8006104:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006108:	2909      	cmp	r1, #9
 800610a:	d97f      	bls.n	800620c <_strtod_l+0x2a4>
 800610c:	9515      	str	r5, [sp, #84]	; 0x54
 800610e:	2700      	movs	r7, #0
 8006110:	e09e      	b.n	8006250 <_strtod_l+0x2e8>
 8006112:	2300      	movs	r3, #0
 8006114:	e7c8      	b.n	80060a8 <_strtod_l+0x140>
 8006116:	f1bb 0f08 	cmp.w	fp, #8
 800611a:	bfd8      	it	le
 800611c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800611e:	f100 0001 	add.w	r0, r0, #1
 8006122:	bfda      	itte	le
 8006124:	fb02 3301 	mlale	r3, r2, r1, r3
 8006128:	9309      	strle	r3, [sp, #36]	; 0x24
 800612a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800612e:	f10b 0b01 	add.w	fp, fp, #1
 8006132:	9015      	str	r0, [sp, #84]	; 0x54
 8006134:	e7c1      	b.n	80060ba <_strtod_l+0x152>
 8006136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	9215      	str	r2, [sp, #84]	; 0x54
 800613c:	785a      	ldrb	r2, [r3, #1]
 800613e:	f1bb 0f00 	cmp.w	fp, #0
 8006142:	d037      	beq.n	80061b4 <_strtod_l+0x24c>
 8006144:	9005      	str	r0, [sp, #20]
 8006146:	465e      	mov	r6, fp
 8006148:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800614c:	2b09      	cmp	r3, #9
 800614e:	d912      	bls.n	8006176 <_strtod_l+0x20e>
 8006150:	2301      	movs	r3, #1
 8006152:	e7c4      	b.n	80060de <_strtod_l+0x176>
 8006154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	9215      	str	r2, [sp, #84]	; 0x54
 800615a:	785a      	ldrb	r2, [r3, #1]
 800615c:	3001      	adds	r0, #1
 800615e:	2a30      	cmp	r2, #48	; 0x30
 8006160:	d0f8      	beq.n	8006154 <_strtod_l+0x1ec>
 8006162:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006166:	2b08      	cmp	r3, #8
 8006168:	f200 84c1 	bhi.w	8006aee <_strtod_l+0xb86>
 800616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800616e:	9005      	str	r0, [sp, #20]
 8006170:	2000      	movs	r0, #0
 8006172:	930b      	str	r3, [sp, #44]	; 0x2c
 8006174:	4606      	mov	r6, r0
 8006176:	3a30      	subs	r2, #48	; 0x30
 8006178:	f100 0301 	add.w	r3, r0, #1
 800617c:	d014      	beq.n	80061a8 <_strtod_l+0x240>
 800617e:	9905      	ldr	r1, [sp, #20]
 8006180:	4419      	add	r1, r3
 8006182:	9105      	str	r1, [sp, #20]
 8006184:	4633      	mov	r3, r6
 8006186:	eb00 0c06 	add.w	ip, r0, r6
 800618a:	210a      	movs	r1, #10
 800618c:	4563      	cmp	r3, ip
 800618e:	d113      	bne.n	80061b8 <_strtod_l+0x250>
 8006190:	1833      	adds	r3, r6, r0
 8006192:	2b08      	cmp	r3, #8
 8006194:	f106 0601 	add.w	r6, r6, #1
 8006198:	4406      	add	r6, r0
 800619a:	dc1a      	bgt.n	80061d2 <_strtod_l+0x26a>
 800619c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619e:	230a      	movs	r3, #10
 80061a0:	fb03 2301 	mla	r3, r3, r1, r2
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	2300      	movs	r3, #0
 80061a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061aa:	1c51      	adds	r1, r2, #1
 80061ac:	9115      	str	r1, [sp, #84]	; 0x54
 80061ae:	7852      	ldrb	r2, [r2, #1]
 80061b0:	4618      	mov	r0, r3
 80061b2:	e7c9      	b.n	8006148 <_strtod_l+0x1e0>
 80061b4:	4658      	mov	r0, fp
 80061b6:	e7d2      	b.n	800615e <_strtod_l+0x1f6>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	f103 0301 	add.w	r3, r3, #1
 80061be:	dc03      	bgt.n	80061c8 <_strtod_l+0x260>
 80061c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061c2:	434f      	muls	r7, r1
 80061c4:	9709      	str	r7, [sp, #36]	; 0x24
 80061c6:	e7e1      	b.n	800618c <_strtod_l+0x224>
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	bfd8      	it	le
 80061cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80061d0:	e7dc      	b.n	800618c <_strtod_l+0x224>
 80061d2:	2e10      	cmp	r6, #16
 80061d4:	bfdc      	itt	le
 80061d6:	230a      	movle	r3, #10
 80061d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80061dc:	e7e3      	b.n	80061a6 <_strtod_l+0x23e>
 80061de:	2300      	movs	r3, #0
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	2301      	movs	r3, #1
 80061e4:	e780      	b.n	80060e8 <_strtod_l+0x180>
 80061e6:	f04f 0c00 	mov.w	ip, #0
 80061ea:	1caa      	adds	r2, r5, #2
 80061ec:	9215      	str	r2, [sp, #84]	; 0x54
 80061ee:	78aa      	ldrb	r2, [r5, #2]
 80061f0:	e788      	b.n	8006104 <_strtod_l+0x19c>
 80061f2:	f04f 0c01 	mov.w	ip, #1
 80061f6:	e7f8      	b.n	80061ea <_strtod_l+0x282>
 80061f8:	08009d38 	.word	0x08009d38
 80061fc:	08009d28 	.word	0x08009d28
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006206:	1c51      	adds	r1, r2, #1
 8006208:	9115      	str	r1, [sp, #84]	; 0x54
 800620a:	7852      	ldrb	r2, [r2, #1]
 800620c:	2a30      	cmp	r2, #48	; 0x30
 800620e:	d0f9      	beq.n	8006204 <_strtod_l+0x29c>
 8006210:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006214:	2908      	cmp	r1, #8
 8006216:	f63f af7a 	bhi.w	800610e <_strtod_l+0x1a6>
 800621a:	3a30      	subs	r2, #48	; 0x30
 800621c:	9208      	str	r2, [sp, #32]
 800621e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006220:	920c      	str	r2, [sp, #48]	; 0x30
 8006222:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006224:	1c57      	adds	r7, r2, #1
 8006226:	9715      	str	r7, [sp, #84]	; 0x54
 8006228:	7852      	ldrb	r2, [r2, #1]
 800622a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800622e:	f1be 0f09 	cmp.w	lr, #9
 8006232:	d938      	bls.n	80062a6 <_strtod_l+0x33e>
 8006234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006236:	1a7f      	subs	r7, r7, r1
 8006238:	2f08      	cmp	r7, #8
 800623a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800623e:	dc03      	bgt.n	8006248 <_strtod_l+0x2e0>
 8006240:	9908      	ldr	r1, [sp, #32]
 8006242:	428f      	cmp	r7, r1
 8006244:	bfa8      	it	ge
 8006246:	460f      	movge	r7, r1
 8006248:	f1bc 0f00 	cmp.w	ip, #0
 800624c:	d000      	beq.n	8006250 <_strtod_l+0x2e8>
 800624e:	427f      	negs	r7, r7
 8006250:	2e00      	cmp	r6, #0
 8006252:	d14f      	bne.n	80062f4 <_strtod_l+0x38c>
 8006254:	9904      	ldr	r1, [sp, #16]
 8006256:	4301      	orrs	r1, r0
 8006258:	f47f aec1 	bne.w	8005fde <_strtod_l+0x76>
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f aedb 	bne.w	8006018 <_strtod_l+0xb0>
 8006262:	2a69      	cmp	r2, #105	; 0x69
 8006264:	d029      	beq.n	80062ba <_strtod_l+0x352>
 8006266:	dc26      	bgt.n	80062b6 <_strtod_l+0x34e>
 8006268:	2a49      	cmp	r2, #73	; 0x49
 800626a:	d026      	beq.n	80062ba <_strtod_l+0x352>
 800626c:	2a4e      	cmp	r2, #78	; 0x4e
 800626e:	f47f aed3 	bne.w	8006018 <_strtod_l+0xb0>
 8006272:	499b      	ldr	r1, [pc, #620]	; (80064e0 <_strtod_l+0x578>)
 8006274:	a815      	add	r0, sp, #84	; 0x54
 8006276:	f001 f9ad 	bl	80075d4 <__match>
 800627a:	2800      	cmp	r0, #0
 800627c:	f43f aecc 	beq.w	8006018 <_strtod_l+0xb0>
 8006280:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b28      	cmp	r3, #40	; 0x28
 8006286:	d12f      	bne.n	80062e8 <_strtod_l+0x380>
 8006288:	4996      	ldr	r1, [pc, #600]	; (80064e4 <_strtod_l+0x57c>)
 800628a:	aa18      	add	r2, sp, #96	; 0x60
 800628c:	a815      	add	r0, sp, #84	; 0x54
 800628e:	f001 f9b5 	bl	80075fc <__hexnan>
 8006292:	2805      	cmp	r0, #5
 8006294:	d128      	bne.n	80062e8 <_strtod_l+0x380>
 8006296:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006298:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800629c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80062a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80062a4:	e69b      	b.n	8005fde <_strtod_l+0x76>
 80062a6:	9f08      	ldr	r7, [sp, #32]
 80062a8:	210a      	movs	r1, #10
 80062aa:	fb01 2107 	mla	r1, r1, r7, r2
 80062ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80062b2:	9208      	str	r2, [sp, #32]
 80062b4:	e7b5      	b.n	8006222 <_strtod_l+0x2ba>
 80062b6:	2a6e      	cmp	r2, #110	; 0x6e
 80062b8:	e7d9      	b.n	800626e <_strtod_l+0x306>
 80062ba:	498b      	ldr	r1, [pc, #556]	; (80064e8 <_strtod_l+0x580>)
 80062bc:	a815      	add	r0, sp, #84	; 0x54
 80062be:	f001 f989 	bl	80075d4 <__match>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f43f aea8 	beq.w	8006018 <_strtod_l+0xb0>
 80062c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ca:	4988      	ldr	r1, [pc, #544]	; (80064ec <_strtod_l+0x584>)
 80062cc:	3b01      	subs	r3, #1
 80062ce:	a815      	add	r0, sp, #84	; 0x54
 80062d0:	9315      	str	r3, [sp, #84]	; 0x54
 80062d2:	f001 f97f 	bl	80075d4 <__match>
 80062d6:	b910      	cbnz	r0, 80062de <_strtod_l+0x376>
 80062d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062da:	3301      	adds	r3, #1
 80062dc:	9315      	str	r3, [sp, #84]	; 0x54
 80062de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80064fc <_strtod_l+0x594>
 80062e2:	f04f 0800 	mov.w	r8, #0
 80062e6:	e67a      	b.n	8005fde <_strtod_l+0x76>
 80062e8:	4881      	ldr	r0, [pc, #516]	; (80064f0 <_strtod_l+0x588>)
 80062ea:	f000 fe59 	bl	8006fa0 <nan>
 80062ee:	ec59 8b10 	vmov	r8, r9, d0
 80062f2:	e674      	b.n	8005fde <_strtod_l+0x76>
 80062f4:	9b05      	ldr	r3, [sp, #20]
 80062f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f8:	1afb      	subs	r3, r7, r3
 80062fa:	f1bb 0f00 	cmp.w	fp, #0
 80062fe:	bf08      	it	eq
 8006300:	46b3      	moveq	fp, r6
 8006302:	2e10      	cmp	r6, #16
 8006304:	9308      	str	r3, [sp, #32]
 8006306:	4635      	mov	r5, r6
 8006308:	bfa8      	it	ge
 800630a:	2510      	movge	r5, #16
 800630c:	f7fa f8fa 	bl	8000504 <__aeabi_ui2d>
 8006310:	2e09      	cmp	r6, #9
 8006312:	4680      	mov	r8, r0
 8006314:	4689      	mov	r9, r1
 8006316:	dd13      	ble.n	8006340 <_strtod_l+0x3d8>
 8006318:	4b76      	ldr	r3, [pc, #472]	; (80064f4 <_strtod_l+0x58c>)
 800631a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800631e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006322:	f7fa f969 	bl	80005f8 <__aeabi_dmul>
 8006326:	4680      	mov	r8, r0
 8006328:	4650      	mov	r0, sl
 800632a:	4689      	mov	r9, r1
 800632c:	f7fa f8ea 	bl	8000504 <__aeabi_ui2d>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7f9 ffa8 	bl	800028c <__adddf3>
 800633c:	4680      	mov	r8, r0
 800633e:	4689      	mov	r9, r1
 8006340:	2e0f      	cmp	r6, #15
 8006342:	dc38      	bgt.n	80063b6 <_strtod_l+0x44e>
 8006344:	9b08      	ldr	r3, [sp, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f43f ae49 	beq.w	8005fde <_strtod_l+0x76>
 800634c:	dd24      	ble.n	8006398 <_strtod_l+0x430>
 800634e:	2b16      	cmp	r3, #22
 8006350:	dc0b      	bgt.n	800636a <_strtod_l+0x402>
 8006352:	4968      	ldr	r1, [pc, #416]	; (80064f4 <_strtod_l+0x58c>)
 8006354:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	f7fa f94a 	bl	80005f8 <__aeabi_dmul>
 8006364:	4680      	mov	r8, r0
 8006366:	4689      	mov	r9, r1
 8006368:	e639      	b.n	8005fde <_strtod_l+0x76>
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006370:	4293      	cmp	r3, r2
 8006372:	db20      	blt.n	80063b6 <_strtod_l+0x44e>
 8006374:	4c5f      	ldr	r4, [pc, #380]	; (80064f4 <_strtod_l+0x58c>)
 8006376:	f1c6 060f 	rsb	r6, r6, #15
 800637a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	1b9e      	subs	r6, r3, r6
 800638e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006392:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006396:	e7e3      	b.n	8006360 <_strtod_l+0x3f8>
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	3316      	adds	r3, #22
 800639c:	db0b      	blt.n	80063b6 <_strtod_l+0x44e>
 800639e:	9b05      	ldr	r3, [sp, #20]
 80063a0:	1bdf      	subs	r7, r3, r7
 80063a2:	4b54      	ldr	r3, [pc, #336]	; (80064f4 <_strtod_l+0x58c>)
 80063a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80063a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa fa4c 	bl	800084c <__aeabi_ddiv>
 80063b4:	e7d6      	b.n	8006364 <_strtod_l+0x3fc>
 80063b6:	9b08      	ldr	r3, [sp, #32]
 80063b8:	1b75      	subs	r5, r6, r5
 80063ba:	441d      	add	r5, r3
 80063bc:	2d00      	cmp	r5, #0
 80063be:	dd70      	ble.n	80064a2 <_strtod_l+0x53a>
 80063c0:	f015 030f 	ands.w	r3, r5, #15
 80063c4:	d00a      	beq.n	80063dc <_strtod_l+0x474>
 80063c6:	494b      	ldr	r1, [pc, #300]	; (80064f4 <_strtod_l+0x58c>)
 80063c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d4:	f7fa f910 	bl	80005f8 <__aeabi_dmul>
 80063d8:	4680      	mov	r8, r0
 80063da:	4689      	mov	r9, r1
 80063dc:	f035 050f 	bics.w	r5, r5, #15
 80063e0:	d04d      	beq.n	800647e <_strtod_l+0x516>
 80063e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80063e6:	dd22      	ble.n	800642e <_strtod_l+0x4c6>
 80063e8:	2500      	movs	r5, #0
 80063ea:	46ab      	mov	fp, r5
 80063ec:	9509      	str	r5, [sp, #36]	; 0x24
 80063ee:	9505      	str	r5, [sp, #20]
 80063f0:	2322      	movs	r3, #34	; 0x22
 80063f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80064fc <_strtod_l+0x594>
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f04f 0800 	mov.w	r8, #0
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f43f aded 	beq.w	8005fde <_strtod_l+0x76>
 8006404:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006406:	4620      	mov	r0, r4
 8006408:	f001 fa9a 	bl	8007940 <_Bfree>
 800640c:	9905      	ldr	r1, [sp, #20]
 800640e:	4620      	mov	r0, r4
 8006410:	f001 fa96 	bl	8007940 <_Bfree>
 8006414:	4659      	mov	r1, fp
 8006416:	4620      	mov	r0, r4
 8006418:	f001 fa92 	bl	8007940 <_Bfree>
 800641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641e:	4620      	mov	r0, r4
 8006420:	f001 fa8e 	bl	8007940 <_Bfree>
 8006424:	4629      	mov	r1, r5
 8006426:	4620      	mov	r0, r4
 8006428:	f001 fa8a 	bl	8007940 <_Bfree>
 800642c:	e5d7      	b.n	8005fde <_strtod_l+0x76>
 800642e:	4b32      	ldr	r3, [pc, #200]	; (80064f8 <_strtod_l+0x590>)
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	2300      	movs	r3, #0
 8006434:	112d      	asrs	r5, r5, #4
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	469a      	mov	sl, r3
 800643c:	2d01      	cmp	r5, #1
 800643e:	dc21      	bgt.n	8006484 <_strtod_l+0x51c>
 8006440:	b10b      	cbz	r3, 8006446 <_strtod_l+0x4de>
 8006442:	4680      	mov	r8, r0
 8006444:	4689      	mov	r9, r1
 8006446:	492c      	ldr	r1, [pc, #176]	; (80064f8 <_strtod_l+0x590>)
 8006448:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800644c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	4b27      	ldr	r3, [pc, #156]	; (80064fc <_strtod_l+0x594>)
 800645e:	460a      	mov	r2, r1
 8006460:	400b      	ands	r3, r1
 8006462:	4927      	ldr	r1, [pc, #156]	; (8006500 <_strtod_l+0x598>)
 8006464:	428b      	cmp	r3, r1
 8006466:	4680      	mov	r8, r0
 8006468:	d8be      	bhi.n	80063e8 <_strtod_l+0x480>
 800646a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800646e:	428b      	cmp	r3, r1
 8006470:	bf86      	itte	hi
 8006472:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006504 <_strtod_l+0x59c>
 8006476:	f04f 38ff 	movhi.w	r8, #4294967295
 800647a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800647e:	2300      	movs	r3, #0
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	e07b      	b.n	800657c <_strtod_l+0x614>
 8006484:	07ea      	lsls	r2, r5, #31
 8006486:	d505      	bpl.n	8006494 <_strtod_l+0x52c>
 8006488:	9b04      	ldr	r3, [sp, #16]
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fa f8b3 	bl	80005f8 <__aeabi_dmul>
 8006492:	2301      	movs	r3, #1
 8006494:	9a04      	ldr	r2, [sp, #16]
 8006496:	3208      	adds	r2, #8
 8006498:	f10a 0a01 	add.w	sl, sl, #1
 800649c:	106d      	asrs	r5, r5, #1
 800649e:	9204      	str	r2, [sp, #16]
 80064a0:	e7cc      	b.n	800643c <_strtod_l+0x4d4>
 80064a2:	d0ec      	beq.n	800647e <_strtod_l+0x516>
 80064a4:	426d      	negs	r5, r5
 80064a6:	f015 020f 	ands.w	r2, r5, #15
 80064aa:	d00a      	beq.n	80064c2 <_strtod_l+0x55a>
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <_strtod_l+0x58c>)
 80064ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7fa f9c7 	bl	800084c <__aeabi_ddiv>
 80064be:	4680      	mov	r8, r0
 80064c0:	4689      	mov	r9, r1
 80064c2:	112d      	asrs	r5, r5, #4
 80064c4:	d0db      	beq.n	800647e <_strtod_l+0x516>
 80064c6:	2d1f      	cmp	r5, #31
 80064c8:	dd1e      	ble.n	8006508 <_strtod_l+0x5a0>
 80064ca:	2500      	movs	r5, #0
 80064cc:	46ab      	mov	fp, r5
 80064ce:	9509      	str	r5, [sp, #36]	; 0x24
 80064d0:	9505      	str	r5, [sp, #20]
 80064d2:	2322      	movs	r3, #34	; 0x22
 80064d4:	f04f 0800 	mov.w	r8, #0
 80064d8:	f04f 0900 	mov.w	r9, #0
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	e78d      	b.n	80063fc <_strtod_l+0x494>
 80064e0:	08009d33 	.word	0x08009d33
 80064e4:	08009d4c 	.word	0x08009d4c
 80064e8:	08009d2a 	.word	0x08009d2a
 80064ec:	08009d2d 	.word	0x08009d2d
 80064f0:	08009e3c 	.word	0x08009e3c
 80064f4:	08009f30 	.word	0x08009f30
 80064f8:	08009f08 	.word	0x08009f08
 80064fc:	7ff00000 	.word	0x7ff00000
 8006500:	7ca00000 	.word	0x7ca00000
 8006504:	7fefffff 	.word	0x7fefffff
 8006508:	f015 0310 	ands.w	r3, r5, #16
 800650c:	bf18      	it	ne
 800650e:	236a      	movne	r3, #106	; 0x6a
 8006510:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80068b4 <_strtod_l+0x94c>
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	2300      	movs	r3, #0
 800651c:	07ea      	lsls	r2, r5, #31
 800651e:	d504      	bpl.n	800652a <_strtod_l+0x5c2>
 8006520:	e9da 2300 	ldrd	r2, r3, [sl]
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	2301      	movs	r3, #1
 800652a:	106d      	asrs	r5, r5, #1
 800652c:	f10a 0a08 	add.w	sl, sl, #8
 8006530:	d1f4      	bne.n	800651c <_strtod_l+0x5b4>
 8006532:	b10b      	cbz	r3, 8006538 <_strtod_l+0x5d0>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	9b04      	ldr	r3, [sp, #16]
 800653a:	b1bb      	cbz	r3, 800656c <_strtod_l+0x604>
 800653c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006540:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006544:	2b00      	cmp	r3, #0
 8006546:	4649      	mov	r1, r9
 8006548:	dd10      	ble.n	800656c <_strtod_l+0x604>
 800654a:	2b1f      	cmp	r3, #31
 800654c:	f340 811e 	ble.w	800678c <_strtod_l+0x824>
 8006550:	2b34      	cmp	r3, #52	; 0x34
 8006552:	bfde      	ittt	le
 8006554:	f04f 33ff 	movle.w	r3, #4294967295
 8006558:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800655c:	4093      	lslle	r3, r2
 800655e:	f04f 0800 	mov.w	r8, #0
 8006562:	bfcc      	ite	gt
 8006564:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006568:	ea03 0901 	andle.w	r9, r3, r1
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	f7fa faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006578:	2800      	cmp	r0, #0
 800657a:	d1a6      	bne.n	80064ca <_strtod_l+0x562>
 800657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006582:	4633      	mov	r3, r6
 8006584:	465a      	mov	r2, fp
 8006586:	4620      	mov	r0, r4
 8006588:	f001 fa42 	bl	8007a10 <__s2b>
 800658c:	9009      	str	r0, [sp, #36]	; 0x24
 800658e:	2800      	cmp	r0, #0
 8006590:	f43f af2a 	beq.w	80063e8 <_strtod_l+0x480>
 8006594:	9a08      	ldr	r2, [sp, #32]
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	2a00      	cmp	r2, #0
 800659a:	eba3 0307 	sub.w	r3, r3, r7
 800659e:	bfa8      	it	ge
 80065a0:	2300      	movge	r3, #0
 80065a2:	930c      	str	r3, [sp, #48]	; 0x30
 80065a4:	2500      	movs	r5, #0
 80065a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80065aa:	9312      	str	r3, [sp, #72]	; 0x48
 80065ac:	46ab      	mov	fp, r5
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	4620      	mov	r0, r4
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	f001 f984 	bl	80078c0 <_Balloc>
 80065b8:	9005      	str	r0, [sp, #20]
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f43f af18 	beq.w	80063f0 <_strtod_l+0x488>
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	3202      	adds	r2, #2
 80065c6:	f103 010c 	add.w	r1, r3, #12
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	300c      	adds	r0, #12
 80065ce:	f000 fcd9 	bl	8006f84 <memcpy>
 80065d2:	ec49 8b10 	vmov	d0, r8, r9
 80065d6:	aa18      	add	r2, sp, #96	; 0x60
 80065d8:	a917      	add	r1, sp, #92	; 0x5c
 80065da:	4620      	mov	r0, r4
 80065dc:	f001 fd4c 	bl	8008078 <__d2b>
 80065e0:	ec49 8b18 	vmov	d8, r8, r9
 80065e4:	9016      	str	r0, [sp, #88]	; 0x58
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f43f af02 	beq.w	80063f0 <_strtod_l+0x488>
 80065ec:	2101      	movs	r1, #1
 80065ee:	4620      	mov	r0, r4
 80065f0:	f001 faa6 	bl	8007b40 <__i2b>
 80065f4:	4683      	mov	fp, r0
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f43f aefa 	beq.w	80063f0 <_strtod_l+0x488>
 80065fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80065fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006600:	2e00      	cmp	r6, #0
 8006602:	bfab      	itete	ge
 8006604:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006606:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006608:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800660a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800660e:	bfac      	ite	ge
 8006610:	eb06 0a03 	addge.w	sl, r6, r3
 8006614:	1b9f      	sublt	r7, r3, r6
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	1af6      	subs	r6, r6, r3
 800661a:	4416      	add	r6, r2
 800661c:	4ba0      	ldr	r3, [pc, #640]	; (80068a0 <_strtod_l+0x938>)
 800661e:	3e01      	subs	r6, #1
 8006620:	429e      	cmp	r6, r3
 8006622:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006626:	f280 80c4 	bge.w	80067b2 <_strtod_l+0x84a>
 800662a:	1b9b      	subs	r3, r3, r6
 800662c:	2b1f      	cmp	r3, #31
 800662e:	eba2 0203 	sub.w	r2, r2, r3
 8006632:	f04f 0101 	mov.w	r1, #1
 8006636:	f300 80b0 	bgt.w	800679a <_strtod_l+0x832>
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	930e      	str	r3, [sp, #56]	; 0x38
 8006640:	2300      	movs	r3, #0
 8006642:	930d      	str	r3, [sp, #52]	; 0x34
 8006644:	eb0a 0602 	add.w	r6, sl, r2
 8006648:	9b04      	ldr	r3, [sp, #16]
 800664a:	45b2      	cmp	sl, r6
 800664c:	4417      	add	r7, r2
 800664e:	441f      	add	r7, r3
 8006650:	4653      	mov	r3, sl
 8006652:	bfa8      	it	ge
 8006654:	4633      	movge	r3, r6
 8006656:	42bb      	cmp	r3, r7
 8006658:	bfa8      	it	ge
 800665a:	463b      	movge	r3, r7
 800665c:	2b00      	cmp	r3, #0
 800665e:	bfc2      	ittt	gt
 8006660:	1af6      	subgt	r6, r6, r3
 8006662:	1aff      	subgt	r7, r7, r3
 8006664:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd17      	ble.n	800669e <_strtod_l+0x736>
 800666e:	4659      	mov	r1, fp
 8006670:	461a      	mov	r2, r3
 8006672:	4620      	mov	r0, r4
 8006674:	f001 fb24 	bl	8007cc0 <__pow5mult>
 8006678:	4683      	mov	fp, r0
 800667a:	2800      	cmp	r0, #0
 800667c:	f43f aeb8 	beq.w	80063f0 <_strtod_l+0x488>
 8006680:	4601      	mov	r1, r0
 8006682:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006684:	4620      	mov	r0, r4
 8006686:	f001 fa71 	bl	8007b6c <__multiply>
 800668a:	900b      	str	r0, [sp, #44]	; 0x2c
 800668c:	2800      	cmp	r0, #0
 800668e:	f43f aeaf 	beq.w	80063f0 <_strtod_l+0x488>
 8006692:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006694:	4620      	mov	r0, r4
 8006696:	f001 f953 	bl	8007940 <_Bfree>
 800669a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800669c:	9316      	str	r3, [sp, #88]	; 0x58
 800669e:	2e00      	cmp	r6, #0
 80066a0:	f300 808c 	bgt.w	80067bc <_strtod_l+0x854>
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd08      	ble.n	80066bc <_strtod_l+0x754>
 80066aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ac:	9905      	ldr	r1, [sp, #20]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f001 fb06 	bl	8007cc0 <__pow5mult>
 80066b4:	9005      	str	r0, [sp, #20]
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f ae9a 	beq.w	80063f0 <_strtod_l+0x488>
 80066bc:	2f00      	cmp	r7, #0
 80066be:	dd08      	ble.n	80066d2 <_strtod_l+0x76a>
 80066c0:	9905      	ldr	r1, [sp, #20]
 80066c2:	463a      	mov	r2, r7
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fb55 	bl	8007d74 <__lshift>
 80066ca:	9005      	str	r0, [sp, #20]
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f ae8f 	beq.w	80063f0 <_strtod_l+0x488>
 80066d2:	f1ba 0f00 	cmp.w	sl, #0
 80066d6:	dd08      	ble.n	80066ea <_strtod_l+0x782>
 80066d8:	4659      	mov	r1, fp
 80066da:	4652      	mov	r2, sl
 80066dc:	4620      	mov	r0, r4
 80066de:	f001 fb49 	bl	8007d74 <__lshift>
 80066e2:	4683      	mov	fp, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f43f ae83 	beq.w	80063f0 <_strtod_l+0x488>
 80066ea:	9a05      	ldr	r2, [sp, #20]
 80066ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066ee:	4620      	mov	r0, r4
 80066f0:	f001 fbc8 	bl	8007e84 <__mdiff>
 80066f4:	4605      	mov	r5, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f43f ae7a 	beq.w	80063f0 <_strtod_l+0x488>
 80066fc:	68c3      	ldr	r3, [r0, #12]
 80066fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006700:	2300      	movs	r3, #0
 8006702:	60c3      	str	r3, [r0, #12]
 8006704:	4659      	mov	r1, fp
 8006706:	f001 fba1 	bl	8007e4c <__mcmp>
 800670a:	2800      	cmp	r0, #0
 800670c:	da60      	bge.n	80067d0 <_strtod_l+0x868>
 800670e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006710:	ea53 0308 	orrs.w	r3, r3, r8
 8006714:	f040 8084 	bne.w	8006820 <_strtod_l+0x8b8>
 8006718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800671c:	2b00      	cmp	r3, #0
 800671e:	d17f      	bne.n	8006820 <_strtod_l+0x8b8>
 8006720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006724:	0d1b      	lsrs	r3, r3, #20
 8006726:	051b      	lsls	r3, r3, #20
 8006728:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800672c:	d978      	bls.n	8006820 <_strtod_l+0x8b8>
 800672e:	696b      	ldr	r3, [r5, #20]
 8006730:	b913      	cbnz	r3, 8006738 <_strtod_l+0x7d0>
 8006732:	692b      	ldr	r3, [r5, #16]
 8006734:	2b01      	cmp	r3, #1
 8006736:	dd73      	ble.n	8006820 <_strtod_l+0x8b8>
 8006738:	4629      	mov	r1, r5
 800673a:	2201      	movs	r2, #1
 800673c:	4620      	mov	r0, r4
 800673e:	f001 fb19 	bl	8007d74 <__lshift>
 8006742:	4659      	mov	r1, fp
 8006744:	4605      	mov	r5, r0
 8006746:	f001 fb81 	bl	8007e4c <__mcmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	dd68      	ble.n	8006820 <_strtod_l+0x8b8>
 800674e:	9904      	ldr	r1, [sp, #16]
 8006750:	4a54      	ldr	r2, [pc, #336]	; (80068a4 <_strtod_l+0x93c>)
 8006752:	464b      	mov	r3, r9
 8006754:	2900      	cmp	r1, #0
 8006756:	f000 8084 	beq.w	8006862 <_strtod_l+0x8fa>
 800675a:	ea02 0109 	and.w	r1, r2, r9
 800675e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006762:	dc7e      	bgt.n	8006862 <_strtod_l+0x8fa>
 8006764:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006768:	f77f aeb3 	ble.w	80064d2 <_strtod_l+0x56a>
 800676c:	4b4e      	ldr	r3, [pc, #312]	; (80068a8 <_strtod_l+0x940>)
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	2200      	movs	r2, #0
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <_strtod_l+0x93c>)
 800677a:	400b      	ands	r3, r1
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f ae3f 	bne.w	8006404 <_strtod_l+0x49c>
 8006786:	2322      	movs	r3, #34	; 0x22
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	e63b      	b.n	8006404 <_strtod_l+0x49c>
 800678c:	f04f 32ff 	mov.w	r2, #4294967295
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	ea03 0808 	and.w	r8, r3, r8
 8006798:	e6e8      	b.n	800656c <_strtod_l+0x604>
 800679a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800679e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80067a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80067a6:	36e2      	adds	r6, #226	; 0xe2
 80067a8:	fa01 f306 	lsl.w	r3, r1, r6
 80067ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80067b0:	e748      	b.n	8006644 <_strtod_l+0x6dc>
 80067b2:	2100      	movs	r1, #0
 80067b4:	2301      	movs	r3, #1
 80067b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80067ba:	e743      	b.n	8006644 <_strtod_l+0x6dc>
 80067bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80067be:	4632      	mov	r2, r6
 80067c0:	4620      	mov	r0, r4
 80067c2:	f001 fad7 	bl	8007d74 <__lshift>
 80067c6:	9016      	str	r0, [sp, #88]	; 0x58
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f47f af6b 	bne.w	80066a4 <_strtod_l+0x73c>
 80067ce:	e60f      	b.n	80063f0 <_strtod_l+0x488>
 80067d0:	46ca      	mov	sl, r9
 80067d2:	d171      	bne.n	80068b8 <_strtod_l+0x950>
 80067d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067da:	b352      	cbz	r2, 8006832 <_strtod_l+0x8ca>
 80067dc:	4a33      	ldr	r2, [pc, #204]	; (80068ac <_strtod_l+0x944>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d12a      	bne.n	8006838 <_strtod_l+0x8d0>
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	4641      	mov	r1, r8
 80067e6:	b1fb      	cbz	r3, 8006828 <_strtod_l+0x8c0>
 80067e8:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <_strtod_l+0x93c>)
 80067ea:	ea09 0303 	and.w	r3, r9, r3
 80067ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	d81a      	bhi.n	800682e <_strtod_l+0x8c6>
 80067f8:	0d1b      	lsrs	r3, r3, #20
 80067fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	4299      	cmp	r1, r3
 8006804:	d118      	bne.n	8006838 <_strtod_l+0x8d0>
 8006806:	4b2a      	ldr	r3, [pc, #168]	; (80068b0 <_strtod_l+0x948>)
 8006808:	459a      	cmp	sl, r3
 800680a:	d102      	bne.n	8006812 <_strtod_l+0x8aa>
 800680c:	3101      	adds	r1, #1
 800680e:	f43f adef 	beq.w	80063f0 <_strtod_l+0x488>
 8006812:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <_strtod_l+0x93c>)
 8006814:	ea0a 0303 	and.w	r3, sl, r3
 8006818:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	9b04      	ldr	r3, [sp, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1a2      	bne.n	800676c <_strtod_l+0x804>
 8006826:	e5ed      	b.n	8006404 <_strtod_l+0x49c>
 8006828:	f04f 33ff 	mov.w	r3, #4294967295
 800682c:	e7e9      	b.n	8006802 <_strtod_l+0x89a>
 800682e:	4613      	mov	r3, r2
 8006830:	e7e7      	b.n	8006802 <_strtod_l+0x89a>
 8006832:	ea53 0308 	orrs.w	r3, r3, r8
 8006836:	d08a      	beq.n	800674e <_strtod_l+0x7e6>
 8006838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800683a:	b1e3      	cbz	r3, 8006876 <_strtod_l+0x90e>
 800683c:	ea13 0f0a 	tst.w	r3, sl
 8006840:	d0ee      	beq.n	8006820 <_strtod_l+0x8b8>
 8006842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006844:	9a04      	ldr	r2, [sp, #16]
 8006846:	4640      	mov	r0, r8
 8006848:	4649      	mov	r1, r9
 800684a:	b1c3      	cbz	r3, 800687e <_strtod_l+0x916>
 800684c:	f7ff fb6e 	bl	8005f2c <sulp>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	ec51 0b18 	vmov	r0, r1, d8
 8006858:	f7f9 fd18 	bl	800028c <__adddf3>
 800685c:	4680      	mov	r8, r0
 800685e:	4689      	mov	r9, r1
 8006860:	e7de      	b.n	8006820 <_strtod_l+0x8b8>
 8006862:	4013      	ands	r3, r2
 8006864:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006868:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800686c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006870:	f04f 38ff 	mov.w	r8, #4294967295
 8006874:	e7d4      	b.n	8006820 <_strtod_l+0x8b8>
 8006876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006878:	ea13 0f08 	tst.w	r3, r8
 800687c:	e7e0      	b.n	8006840 <_strtod_l+0x8d8>
 800687e:	f7ff fb55 	bl	8005f2c <sulp>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	ec51 0b18 	vmov	r0, r1, d8
 800688a:	f7f9 fcfd 	bl	8000288 <__aeabi_dsub>
 800688e:	2200      	movs	r2, #0
 8006890:	2300      	movs	r3, #0
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	f7fa f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d0c0      	beq.n	8006820 <_strtod_l+0x8b8>
 800689e:	e618      	b.n	80064d2 <_strtod_l+0x56a>
 80068a0:	fffffc02 	.word	0xfffffc02
 80068a4:	7ff00000 	.word	0x7ff00000
 80068a8:	39500000 	.word	0x39500000
 80068ac:	000fffff 	.word	0x000fffff
 80068b0:	7fefffff 	.word	0x7fefffff
 80068b4:	08009d60 	.word	0x08009d60
 80068b8:	4659      	mov	r1, fp
 80068ba:	4628      	mov	r0, r5
 80068bc:	f001 fc36 	bl	800812c <__ratio>
 80068c0:	ec57 6b10 	vmov	r6, r7, d0
 80068c4:	ee10 0a10 	vmov	r0, s0
 80068c8:	2200      	movs	r2, #0
 80068ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7fa f90e 	bl	8000af0 <__aeabi_dcmple>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d071      	beq.n	80069bc <_strtod_l+0xa54>
 80068d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d17c      	bne.n	80069d8 <_strtod_l+0xa70>
 80068de:	f1b8 0f00 	cmp.w	r8, #0
 80068e2:	d15a      	bne.n	800699a <_strtod_l+0xa32>
 80068e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d15d      	bne.n	80069a8 <_strtod_l+0xa40>
 80068ec:	4b90      	ldr	r3, [pc, #576]	; (8006b30 <_strtod_l+0xbc8>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f8f2 	bl	8000adc <__aeabi_dcmplt>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d15c      	bne.n	80069b6 <_strtod_l+0xa4e>
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	4b8c      	ldr	r3, [pc, #560]	; (8006b34 <_strtod_l+0xbcc>)
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fe78 	bl	80005f8 <__aeabi_dmul>
 8006908:	4606      	mov	r6, r0
 800690a:	460f      	mov	r7, r1
 800690c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006910:	9606      	str	r6, [sp, #24]
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006918:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800691c:	4b86      	ldr	r3, [pc, #536]	; (8006b38 <_strtod_l+0xbd0>)
 800691e:	ea0a 0303 	and.w	r3, sl, r3
 8006922:	930d      	str	r3, [sp, #52]	; 0x34
 8006924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006926:	4b85      	ldr	r3, [pc, #532]	; (8006b3c <_strtod_l+0xbd4>)
 8006928:	429a      	cmp	r2, r3
 800692a:	f040 8090 	bne.w	8006a4e <_strtod_l+0xae6>
 800692e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006932:	ec49 8b10 	vmov	d0, r8, r9
 8006936:	f001 fb2f 	bl	8007f98 <__ulp>
 800693a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800693e:	ec51 0b10 	vmov	r0, r1, d0
 8006942:	f7f9 fe59 	bl	80005f8 <__aeabi_dmul>
 8006946:	4642      	mov	r2, r8
 8006948:	464b      	mov	r3, r9
 800694a:	f7f9 fc9f 	bl	800028c <__adddf3>
 800694e:	460b      	mov	r3, r1
 8006950:	4979      	ldr	r1, [pc, #484]	; (8006b38 <_strtod_l+0xbd0>)
 8006952:	4a7b      	ldr	r2, [pc, #492]	; (8006b40 <_strtod_l+0xbd8>)
 8006954:	4019      	ands	r1, r3
 8006956:	4291      	cmp	r1, r2
 8006958:	4680      	mov	r8, r0
 800695a:	d944      	bls.n	80069e6 <_strtod_l+0xa7e>
 800695c:	ee18 2a90 	vmov	r2, s17
 8006960:	4b78      	ldr	r3, [pc, #480]	; (8006b44 <_strtod_l+0xbdc>)
 8006962:	429a      	cmp	r2, r3
 8006964:	d104      	bne.n	8006970 <_strtod_l+0xa08>
 8006966:	ee18 3a10 	vmov	r3, s16
 800696a:	3301      	adds	r3, #1
 800696c:	f43f ad40 	beq.w	80063f0 <_strtod_l+0x488>
 8006970:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006b44 <_strtod_l+0xbdc>
 8006974:	f04f 38ff 	mov.w	r8, #4294967295
 8006978:	9916      	ldr	r1, [sp, #88]	; 0x58
 800697a:	4620      	mov	r0, r4
 800697c:	f000 ffe0 	bl	8007940 <_Bfree>
 8006980:	9905      	ldr	r1, [sp, #20]
 8006982:	4620      	mov	r0, r4
 8006984:	f000 ffdc 	bl	8007940 <_Bfree>
 8006988:	4659      	mov	r1, fp
 800698a:	4620      	mov	r0, r4
 800698c:	f000 ffd8 	bl	8007940 <_Bfree>
 8006990:	4629      	mov	r1, r5
 8006992:	4620      	mov	r0, r4
 8006994:	f000 ffd4 	bl	8007940 <_Bfree>
 8006998:	e609      	b.n	80065ae <_strtod_l+0x646>
 800699a:	f1b8 0f01 	cmp.w	r8, #1
 800699e:	d103      	bne.n	80069a8 <_strtod_l+0xa40>
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	f43f ad95 	beq.w	80064d2 <_strtod_l+0x56a>
 80069a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006b00 <_strtod_l+0xb98>
 80069ac:	4f60      	ldr	r7, [pc, #384]	; (8006b30 <_strtod_l+0xbc8>)
 80069ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069b2:	2600      	movs	r6, #0
 80069b4:	e7ae      	b.n	8006914 <_strtod_l+0x9ac>
 80069b6:	4f5f      	ldr	r7, [pc, #380]	; (8006b34 <_strtod_l+0xbcc>)
 80069b8:	2600      	movs	r6, #0
 80069ba:	e7a7      	b.n	800690c <_strtod_l+0x9a4>
 80069bc:	4b5d      	ldr	r3, [pc, #372]	; (8006b34 <_strtod_l+0xbcc>)
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ca:	4606      	mov	r6, r0
 80069cc:	460f      	mov	r7, r1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d09c      	beq.n	800690c <_strtod_l+0x9a4>
 80069d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80069d6:	e79d      	b.n	8006914 <_strtod_l+0x9ac>
 80069d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006b08 <_strtod_l+0xba0>
 80069dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069e0:	ec57 6b17 	vmov	r6, r7, d7
 80069e4:	e796      	b.n	8006914 <_strtod_l+0x9ac>
 80069e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80069ea:	9b04      	ldr	r3, [sp, #16]
 80069ec:	46ca      	mov	sl, r9
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1c2      	bne.n	8006978 <_strtod_l+0xa10>
 80069f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	051b      	lsls	r3, r3, #20
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1bb      	bne.n	8006978 <_strtod_l+0xa10>
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7fa f8e0 	bl	8000bc8 <__aeabi_d2lz>
 8006a08:	f7f9 fdc8 	bl	800059c <__aeabi_l2d>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7f9 fc38 	bl	8000288 <__aeabi_dsub>
 8006a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a1e:	ea43 0308 	orr.w	r3, r3, r8
 8006a22:	4313      	orrs	r3, r2
 8006a24:	4606      	mov	r6, r0
 8006a26:	460f      	mov	r7, r1
 8006a28:	d054      	beq.n	8006ad4 <_strtod_l+0xb6c>
 8006a2a:	a339      	add	r3, pc, #228	; (adr r3, 8006b10 <_strtod_l+0xba8>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f7fa f854 	bl	8000adc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f47f ace5 	bne.w	8006404 <_strtod_l+0x49c>
 8006a3a:	a337      	add	r3, pc, #220	; (adr r3, 8006b18 <_strtod_l+0xbb0>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f868 	bl	8000b18 <__aeabi_dcmpgt>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d095      	beq.n	8006978 <_strtod_l+0xa10>
 8006a4c:	e4da      	b.n	8006404 <_strtod_l+0x49c>
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	b333      	cbz	r3, 8006aa0 <_strtod_l+0xb38>
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a58:	d822      	bhi.n	8006aa0 <_strtod_l+0xb38>
 8006a5a:	a331      	add	r3, pc, #196	; (adr r3, 8006b20 <_strtod_l+0xbb8>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7fa f844 	bl	8000af0 <__aeabi_dcmple>
 8006a68:	b1a0      	cbz	r0, 8006a94 <_strtod_l+0xb2c>
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7fa f873 	bl	8000b58 <__aeabi_d2uiz>
 8006a72:	2801      	cmp	r0, #1
 8006a74:	bf38      	it	cc
 8006a76:	2001      	movcc	r0, #1
 8006a78:	f7f9 fd44 	bl	8000504 <__aeabi_ui2d>
 8006a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	bb23      	cbnz	r3, 8006ace <_strtod_l+0xb66>
 8006a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a88:	9010      	str	r0, [sp, #64]	; 0x40
 8006a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aa0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa8:	eef0 0a68 	vmov.f32	s1, s17
 8006aac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006ab0:	f001 fa72 	bl	8007f98 <__ulp>
 8006ab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ab8:	ec53 2b10 	vmov	r2, r3, d0
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	ec53 2b18 	vmov	r2, r3, d8
 8006ac4:	f7f9 fbe2 	bl	800028c <__adddf3>
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4689      	mov	r9, r1
 8006acc:	e78d      	b.n	80069ea <_strtod_l+0xa82>
 8006ace:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006ad2:	e7db      	b.n	8006a8c <_strtod_l+0xb24>
 8006ad4:	a314      	add	r3, pc, #80	; (adr r3, 8006b28 <_strtod_l+0xbc0>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 ffff 	bl	8000adc <__aeabi_dcmplt>
 8006ade:	e7b3      	b.n	8006a48 <_strtod_l+0xae0>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	f7ff ba7c 	b.w	8005fe6 <_strtod_l+0x7e>
 8006aee:	2a65      	cmp	r2, #101	; 0x65
 8006af0:	f43f ab75 	beq.w	80061de <_strtod_l+0x276>
 8006af4:	2a45      	cmp	r2, #69	; 0x45
 8006af6:	f43f ab72 	beq.w	80061de <_strtod_l+0x276>
 8006afa:	2301      	movs	r3, #1
 8006afc:	f7ff bbaa 	b.w	8006254 <_strtod_l+0x2ec>
 8006b00:	00000000 	.word	0x00000000
 8006b04:	bff00000 	.word	0xbff00000
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	94a03595 	.word	0x94a03595
 8006b14:	3fdfffff 	.word	0x3fdfffff
 8006b18:	35afe535 	.word	0x35afe535
 8006b1c:	3fe00000 	.word	0x3fe00000
 8006b20:	ffc00000 	.word	0xffc00000
 8006b24:	41dfffff 	.word	0x41dfffff
 8006b28:	94a03595 	.word	0x94a03595
 8006b2c:	3fcfffff 	.word	0x3fcfffff
 8006b30:	3ff00000 	.word	0x3ff00000
 8006b34:	3fe00000 	.word	0x3fe00000
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	7fe00000 	.word	0x7fe00000
 8006b40:	7c9fffff 	.word	0x7c9fffff
 8006b44:	7fefffff 	.word	0x7fefffff

08006b48 <strtod>:
 8006b48:	460a      	mov	r2, r1
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4802      	ldr	r0, [pc, #8]	; (8006b58 <strtod+0x10>)
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <strtod+0x14>)
 8006b50:	6800      	ldr	r0, [r0, #0]
 8006b52:	f7ff ba09 	b.w	8005f68 <_strtod_l>
 8006b56:	bf00      	nop
 8006b58:	200002e4 	.word	0x200002e4
 8006b5c:	2000012c 	.word	0x2000012c

08006b60 <std>:
 8006b60:	2300      	movs	r3, #0
 8006b62:	b510      	push	{r4, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	e9c0 3300 	strd	r3, r3, [r0]
 8006b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b6e:	6083      	str	r3, [r0, #8]
 8006b70:	8181      	strh	r1, [r0, #12]
 8006b72:	6643      	str	r3, [r0, #100]	; 0x64
 8006b74:	81c2      	strh	r2, [r0, #14]
 8006b76:	6183      	str	r3, [r0, #24]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	305c      	adds	r0, #92	; 0x5c
 8006b7e:	f000 f902 	bl	8006d86 <memset>
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <std+0x38>)
 8006b84:	6263      	str	r3, [r4, #36]	; 0x24
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <std+0x3c>)
 8006b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <std+0x40>)
 8006b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <std+0x44>)
 8006b90:	6224      	str	r4, [r4, #32]
 8006b92:	6323      	str	r3, [r4, #48]	; 0x30
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	bf00      	nop
 8006b98:	08006d01 	.word	0x08006d01
 8006b9c:	08006d23 	.word	0x08006d23
 8006ba0:	08006d5b 	.word	0x08006d5b
 8006ba4:	08006d7f 	.word	0x08006d7f

08006ba8 <stdio_exit_handler>:
 8006ba8:	4a02      	ldr	r2, [pc, #8]	; (8006bb4 <stdio_exit_handler+0xc>)
 8006baa:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <stdio_exit_handler+0x10>)
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <stdio_exit_handler+0x14>)
 8006bae:	f000 b869 	b.w	8006c84 <_fwalk_sglue>
 8006bb2:	bf00      	nop
 8006bb4:	20000120 	.word	0x20000120
 8006bb8:	08008911 	.word	0x08008911
 8006bbc:	20000298 	.word	0x20000298

08006bc0 <cleanup_stdio>:
 8006bc0:	6841      	ldr	r1, [r0, #4]
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <cleanup_stdio+0x34>)
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	d001      	beq.n	8006bd0 <cleanup_stdio+0x10>
 8006bcc:	f001 fea0 	bl	8008910 <_fflush_r>
 8006bd0:	68a1      	ldr	r1, [r4, #8]
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <cleanup_stdio+0x38>)
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d002      	beq.n	8006bde <cleanup_stdio+0x1e>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f001 fe99 	bl	8008910 <_fflush_r>
 8006bde:	68e1      	ldr	r1, [r4, #12]
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <cleanup_stdio+0x3c>)
 8006be2:	4299      	cmp	r1, r3
 8006be4:	d004      	beq.n	8006bf0 <cleanup_stdio+0x30>
 8006be6:	4620      	mov	r0, r4
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f001 be90 	b.w	8008910 <_fflush_r>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	200005d4 	.word	0x200005d4
 8006bf8:	2000063c 	.word	0x2000063c
 8006bfc:	200006a4 	.word	0x200006a4

08006c00 <global_stdio_init.part.0>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <global_stdio_init.part.0+0x30>)
 8006c04:	4c0b      	ldr	r4, [pc, #44]	; (8006c34 <global_stdio_init.part.0+0x34>)
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <global_stdio_init.part.0+0x38>)
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2104      	movs	r1, #4
 8006c10:	f7ff ffa6 	bl	8006b60 <std>
 8006c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2109      	movs	r1, #9
 8006c1c:	f7ff ffa0 	bl	8006b60 <std>
 8006c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c24:	2202      	movs	r2, #2
 8006c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2a:	2112      	movs	r1, #18
 8006c2c:	f7ff bf98 	b.w	8006b60 <std>
 8006c30:	2000070c 	.word	0x2000070c
 8006c34:	200005d4 	.word	0x200005d4
 8006c38:	08006ba9 	.word	0x08006ba9

08006c3c <__sfp_lock_acquire>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__sfp_lock_acquire+0x8>)
 8006c3e:	f000 b99f 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	20000715 	.word	0x20000715

08006c48 <__sfp_lock_release>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__sfp_lock_release+0x8>)
 8006c4a:	f000 b99a 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	20000715 	.word	0x20000715

08006c54 <__sinit>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	f7ff fff0 	bl	8006c3c <__sfp_lock_acquire>
 8006c5c:	6a23      	ldr	r3, [r4, #32]
 8006c5e:	b11b      	cbz	r3, 8006c68 <__sinit+0x14>
 8006c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c64:	f7ff bff0 	b.w	8006c48 <__sfp_lock_release>
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <__sinit+0x28>)
 8006c6a:	6223      	str	r3, [r4, #32]
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <__sinit+0x2c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f5      	bne.n	8006c60 <__sinit+0xc>
 8006c74:	f7ff ffc4 	bl	8006c00 <global_stdio_init.part.0>
 8006c78:	e7f2      	b.n	8006c60 <__sinit+0xc>
 8006c7a:	bf00      	nop
 8006c7c:	08006bc1 	.word	0x08006bc1
 8006c80:	2000070c 	.word	0x2000070c

08006c84 <_fwalk_sglue>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4607      	mov	r7, r0
 8006c8a:	4688      	mov	r8, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c94:	f1b9 0901 	subs.w	r9, r9, #1
 8006c98:	d505      	bpl.n	8006ca6 <_fwalk_sglue+0x22>
 8006c9a:	6824      	ldr	r4, [r4, #0]
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	d1f7      	bne.n	8006c90 <_fwalk_sglue+0xc>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d907      	bls.n	8006cbc <_fwalk_sglue+0x38>
 8006cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	d003      	beq.n	8006cbc <_fwalk_sglue+0x38>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	4306      	orrs	r6, r0
 8006cbc:	3568      	adds	r5, #104	; 0x68
 8006cbe:	e7e9      	b.n	8006c94 <_fwalk_sglue+0x10>

08006cc0 <siprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	b500      	push	{lr}
 8006cc4:	b09c      	sub	sp, #112	; 0x70
 8006cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cc8:	9002      	str	r0, [sp, #8]
 8006cca:	9006      	str	r0, [sp, #24]
 8006ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cd0:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <siprintf+0x38>)
 8006cd2:	9107      	str	r1, [sp, #28]
 8006cd4:	9104      	str	r1, [sp, #16]
 8006cd6:	4909      	ldr	r1, [pc, #36]	; (8006cfc <siprintf+0x3c>)
 8006cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cdc:	9105      	str	r1, [sp, #20]
 8006cde:	6800      	ldr	r0, [r0, #0]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	a902      	add	r1, sp, #8
 8006ce4:	f001 fb00 	bl	80082e8 <_svfiprintf_r>
 8006ce8:	9b02      	ldr	r3, [sp, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	b01c      	add	sp, #112	; 0x70
 8006cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf4:	b003      	add	sp, #12
 8006cf6:	4770      	bx	lr
 8006cf8:	200002e4 	.word	0x200002e4
 8006cfc:	ffff0208 	.word	0xffff0208

08006d00 <__sread>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	460c      	mov	r4, r1
 8006d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d08:	f000 f8ec 	bl	8006ee4 <_read_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	bfab      	itete	ge
 8006d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d12:	89a3      	ldrhlt	r3, [r4, #12]
 8006d14:	181b      	addge	r3, r3, r0
 8006d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d1a:	bfac      	ite	ge
 8006d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d1e:	81a3      	strhlt	r3, [r4, #12]
 8006d20:	bd10      	pop	{r4, pc}

08006d22 <__swrite>:
 8006d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d26:	461f      	mov	r7, r3
 8006d28:	898b      	ldrh	r3, [r1, #12]
 8006d2a:	05db      	lsls	r3, r3, #23
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	4616      	mov	r6, r2
 8006d32:	d505      	bpl.n	8006d40 <__swrite+0x1e>
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f000 f8c0 	bl	8006ec0 <_lseek_r>
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4628      	mov	r0, r5
 8006d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	f000 b8d7 	b.w	8006f08 <_write_r>

08006d5a <__sseek>:
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 f8ad 	bl	8006ec0 <_lseek_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	bf15      	itete	ne
 8006d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d76:	81a3      	strheq	r3, [r4, #12]
 8006d78:	bf18      	it	ne
 8006d7a:	81a3      	strhne	r3, [r4, #12]
 8006d7c:	bd10      	pop	{r4, pc}

08006d7e <__sclose>:
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 b88d 	b.w	8006ea0 <_close_r>

08006d86 <memset>:
 8006d86:	4402      	add	r2, r0
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d100      	bne.n	8006d90 <memset+0xa>
 8006d8e:	4770      	bx	lr
 8006d90:	f803 1b01 	strb.w	r1, [r3], #1
 8006d94:	e7f9      	b.n	8006d8a <memset+0x4>

08006d96 <strncmp>:
 8006d96:	b510      	push	{r4, lr}
 8006d98:	b16a      	cbz	r2, 8006db6 <strncmp+0x20>
 8006d9a:	3901      	subs	r1, #1
 8006d9c:	1884      	adds	r4, r0, r2
 8006d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d103      	bne.n	8006db2 <strncmp+0x1c>
 8006daa:	42a0      	cmp	r0, r4
 8006dac:	d001      	beq.n	8006db2 <strncmp+0x1c>
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d1f5      	bne.n	8006d9e <strncmp+0x8>
 8006db2:	1ad0      	subs	r0, r2, r3
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	4610      	mov	r0, r2
 8006db8:	e7fc      	b.n	8006db4 <strncmp+0x1e>
	...

08006dbc <strtok>:
 8006dbc:	4b16      	ldr	r3, [pc, #88]	; (8006e18 <strtok+0x5c>)
 8006dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dc0:	681e      	ldr	r6, [r3, #0]
 8006dc2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	b9fc      	cbnz	r4, 8006e08 <strtok+0x4c>
 8006dc8:	2050      	movs	r0, #80	; 0x50
 8006dca:	9101      	str	r1, [sp, #4]
 8006dcc:	f000 fcb2 	bl	8007734 <malloc>
 8006dd0:	9901      	ldr	r1, [sp, #4]
 8006dd2:	6470      	str	r0, [r6, #68]	; 0x44
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	b920      	cbnz	r0, 8006de2 <strtok+0x26>
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <strtok+0x60>)
 8006dda:	4811      	ldr	r0, [pc, #68]	; (8006e20 <strtok+0x64>)
 8006ddc:	215b      	movs	r1, #91	; 0x5b
 8006dde:	f000 f8e7 	bl	8006fb0 <__assert_func>
 8006de2:	e9c0 4400 	strd	r4, r4, [r0]
 8006de6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006dea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006dee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006df2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006df6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006dfa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006dfe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006e02:	6184      	str	r4, [r0, #24]
 8006e04:	7704      	strb	r4, [r0, #28]
 8006e06:	6244      	str	r4, [r0, #36]	; 0x24
 8006e08:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	b002      	add	sp, #8
 8006e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e14:	f000 b806 	b.w	8006e24 <__strtok_r>
 8006e18:	200002e4 	.word	0x200002e4
 8006e1c:	08009d88 	.word	0x08009d88
 8006e20:	08009d9f 	.word	0x08009d9f

08006e24 <__strtok_r>:
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	b908      	cbnz	r0, 8006e2c <__strtok_r+0x8>
 8006e28:	6810      	ldr	r0, [r2, #0]
 8006e2a:	b188      	cbz	r0, 8006e50 <__strtok_r+0x2c>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e34:	460f      	mov	r7, r1
 8006e36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e3a:	b91e      	cbnz	r6, 8006e44 <__strtok_r+0x20>
 8006e3c:	b965      	cbnz	r5, 8006e58 <__strtok_r+0x34>
 8006e3e:	6015      	str	r5, [r2, #0]
 8006e40:	4628      	mov	r0, r5
 8006e42:	e005      	b.n	8006e50 <__strtok_r+0x2c>
 8006e44:	42b5      	cmp	r5, r6
 8006e46:	d1f6      	bne.n	8006e36 <__strtok_r+0x12>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f0      	bne.n	8006e2e <__strtok_r+0xa>
 8006e4c:	6014      	str	r4, [r2, #0]
 8006e4e:	7003      	strb	r3, [r0, #0]
 8006e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e52:	461c      	mov	r4, r3
 8006e54:	e00c      	b.n	8006e70 <__strtok_r+0x4c>
 8006e56:	b915      	cbnz	r5, 8006e5e <__strtok_r+0x3a>
 8006e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e5c:	460e      	mov	r6, r1
 8006e5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e62:	42ab      	cmp	r3, r5
 8006e64:	d1f7      	bne.n	8006e56 <__strtok_r+0x32>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f3      	beq.n	8006e52 <__strtok_r+0x2e>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e70:	6014      	str	r4, [r2, #0]
 8006e72:	e7ed      	b.n	8006e50 <__strtok_r+0x2c>

08006e74 <strstr>:
 8006e74:	780a      	ldrb	r2, [r1, #0]
 8006e76:	b570      	push	{r4, r5, r6, lr}
 8006e78:	b96a      	cbnz	r2, 8006e96 <strstr+0x22>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d109      	bne.n	8006e94 <strstr+0x20>
 8006e80:	460c      	mov	r4, r1
 8006e82:	4605      	mov	r5, r0
 8006e84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f6      	beq.n	8006e7a <strstr+0x6>
 8006e8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006e90:	429e      	cmp	r6, r3
 8006e92:	d0f7      	beq.n	8006e84 <strstr+0x10>
 8006e94:	3001      	adds	r0, #1
 8006e96:	7803      	ldrb	r3, [r0, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ef      	bne.n	8006e7c <strstr+0x8>
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	e7ec      	b.n	8006e7a <strstr+0x6>

08006ea0 <_close_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	; (8006ebc <_close_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7fb f9ad 	bl	800220a <_close>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_close_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_close_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20000710 	.word	0x20000710

08006ec0 <_lseek_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	; (8006ee0 <_lseek_r+0x20>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7fb f9c2 	bl	8002258 <_lseek>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_lseek_r+0x1e>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_lseek_r+0x1e>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20000710 	.word	0x20000710

08006ee4 <_read_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	; (8006f04 <_read_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fb f950 	bl	8002198 <_read>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_read_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_read_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000710 	.word	0x20000710

08006f08 <_write_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_write_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fb f95b 	bl	80021d2 <_write>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_write_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_write_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000710 	.word	0x20000710

08006f2c <__errno>:
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <__errno+0x8>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	200002e4 	.word	0x200002e4

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f002 fdfc 	bl	8009b48 <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	0800a1b0 	.word	0x0800a1b0
 8006f74:	0800a1b0 	.word	0x0800a1b0
 8006f78:	0800a1b0 	.word	0x0800a1b0
 8006f7c:	0800a1b4 	.word	0x0800a1b4

08006f80 <__retarget_lock_acquire_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <__retarget_lock_release_recursive>:
 8006f82:	4770      	bx	lr

08006f84 <memcpy>:
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f8c:	d100      	bne.n	8006f90 <memcpy+0xc>
 8006f8e:	4770      	bx	lr
 8006f90:	b510      	push	{r4, lr}
 8006f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	d1f9      	bne.n	8006f92 <memcpy+0xe>
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <nan>:
 8006fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006fa8 <nan+0x8>
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	7ff80000 	.word	0x7ff80000

08006fb0 <__assert_func>:
 8006fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <__assert_func+0x2c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	68d8      	ldr	r0, [r3, #12]
 8006fbe:	b14c      	cbz	r4, 8006fd4 <__assert_func+0x24>
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <__assert_func+0x30>)
 8006fc2:	9100      	str	r1, [sp, #0]
 8006fc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fc8:	4906      	ldr	r1, [pc, #24]	; (8006fe4 <__assert_func+0x34>)
 8006fca:	462b      	mov	r3, r5
 8006fcc:	f001 fcc8 	bl	8008960 <fiprintf>
 8006fd0:	f001 fd02 	bl	80089d8 <abort>
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <__assert_func+0x38>)
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	e7f3      	b.n	8006fc2 <__assert_func+0x12>
 8006fda:	bf00      	nop
 8006fdc:	200002e4 	.word	0x200002e4
 8006fe0:	08009e01 	.word	0x08009e01
 8006fe4:	08009e0e 	.word	0x08009e0e
 8006fe8:	08009e3c 	.word	0x08009e3c

08006fec <_free_r>:
 8006fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fee:	2900      	cmp	r1, #0
 8006ff0:	d044      	beq.n	800707c <_free_r+0x90>
 8006ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff6:	9001      	str	r0, [sp, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8006ffe:	bfb8      	it	lt
 8007000:	18e4      	addlt	r4, r4, r3
 8007002:	f000 fc51 	bl	80078a8 <__malloc_lock>
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <_free_r+0x94>)
 8007008:	9801      	ldr	r0, [sp, #4]
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	b933      	cbnz	r3, 800701c <_free_r+0x30>
 800700e:	6063      	str	r3, [r4, #4]
 8007010:	6014      	str	r4, [r2, #0]
 8007012:	b003      	add	sp, #12
 8007014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007018:	f000 bc4c 	b.w	80078b4 <__malloc_unlock>
 800701c:	42a3      	cmp	r3, r4
 800701e:	d908      	bls.n	8007032 <_free_r+0x46>
 8007020:	6825      	ldr	r5, [r4, #0]
 8007022:	1961      	adds	r1, r4, r5
 8007024:	428b      	cmp	r3, r1
 8007026:	bf01      	itttt	eq
 8007028:	6819      	ldreq	r1, [r3, #0]
 800702a:	685b      	ldreq	r3, [r3, #4]
 800702c:	1949      	addeq	r1, r1, r5
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	e7ed      	b.n	800700e <_free_r+0x22>
 8007032:	461a      	mov	r2, r3
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b10b      	cbz	r3, 800703c <_free_r+0x50>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d9fa      	bls.n	8007032 <_free_r+0x46>
 800703c:	6811      	ldr	r1, [r2, #0]
 800703e:	1855      	adds	r5, r2, r1
 8007040:	42a5      	cmp	r5, r4
 8007042:	d10b      	bne.n	800705c <_free_r+0x70>
 8007044:	6824      	ldr	r4, [r4, #0]
 8007046:	4421      	add	r1, r4
 8007048:	1854      	adds	r4, r2, r1
 800704a:	42a3      	cmp	r3, r4
 800704c:	6011      	str	r1, [r2, #0]
 800704e:	d1e0      	bne.n	8007012 <_free_r+0x26>
 8007050:	681c      	ldr	r4, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	6053      	str	r3, [r2, #4]
 8007056:	440c      	add	r4, r1
 8007058:	6014      	str	r4, [r2, #0]
 800705a:	e7da      	b.n	8007012 <_free_r+0x26>
 800705c:	d902      	bls.n	8007064 <_free_r+0x78>
 800705e:	230c      	movs	r3, #12
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	e7d6      	b.n	8007012 <_free_r+0x26>
 8007064:	6825      	ldr	r5, [r4, #0]
 8007066:	1961      	adds	r1, r4, r5
 8007068:	428b      	cmp	r3, r1
 800706a:	bf04      	itt	eq
 800706c:	6819      	ldreq	r1, [r3, #0]
 800706e:	685b      	ldreq	r3, [r3, #4]
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	bf04      	itt	eq
 8007074:	1949      	addeq	r1, r1, r5
 8007076:	6021      	streq	r1, [r4, #0]
 8007078:	6054      	str	r4, [r2, #4]
 800707a:	e7ca      	b.n	8007012 <_free_r+0x26>
 800707c:	b003      	add	sp, #12
 800707e:	bd30      	pop	{r4, r5, pc}
 8007080:	20000718 	.word	0x20000718

08007084 <rshift>:
 8007084:	6903      	ldr	r3, [r0, #16]
 8007086:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800708a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800708e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007092:	f100 0414 	add.w	r4, r0, #20
 8007096:	dd45      	ble.n	8007124 <rshift+0xa0>
 8007098:	f011 011f 	ands.w	r1, r1, #31
 800709c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070a4:	d10c      	bne.n	80070c0 <rshift+0x3c>
 80070a6:	f100 0710 	add.w	r7, r0, #16
 80070aa:	4629      	mov	r1, r5
 80070ac:	42b1      	cmp	r1, r6
 80070ae:	d334      	bcc.n	800711a <rshift+0x96>
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	1eea      	subs	r2, r5, #3
 80070b6:	4296      	cmp	r6, r2
 80070b8:	bf38      	it	cc
 80070ba:	2300      	movcc	r3, #0
 80070bc:	4423      	add	r3, r4
 80070be:	e015      	b.n	80070ec <rshift+0x68>
 80070c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070c4:	f1c1 0820 	rsb	r8, r1, #32
 80070c8:	40cf      	lsrs	r7, r1
 80070ca:	f105 0e04 	add.w	lr, r5, #4
 80070ce:	46a1      	mov	r9, r4
 80070d0:	4576      	cmp	r6, lr
 80070d2:	46f4      	mov	ip, lr
 80070d4:	d815      	bhi.n	8007102 <rshift+0x7e>
 80070d6:	1a9a      	subs	r2, r3, r2
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	3a04      	subs	r2, #4
 80070dc:	3501      	adds	r5, #1
 80070de:	42ae      	cmp	r6, r5
 80070e0:	bf38      	it	cc
 80070e2:	2200      	movcc	r2, #0
 80070e4:	18a3      	adds	r3, r4, r2
 80070e6:	50a7      	str	r7, [r4, r2]
 80070e8:	b107      	cbz	r7, 80070ec <rshift+0x68>
 80070ea:	3304      	adds	r3, #4
 80070ec:	1b1a      	subs	r2, r3, r4
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070f4:	bf08      	it	eq
 80070f6:	2300      	moveq	r3, #0
 80070f8:	6102      	str	r2, [r0, #16]
 80070fa:	bf08      	it	eq
 80070fc:	6143      	streq	r3, [r0, #20]
 80070fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007102:	f8dc c000 	ldr.w	ip, [ip]
 8007106:	fa0c fc08 	lsl.w	ip, ip, r8
 800710a:	ea4c 0707 	orr.w	r7, ip, r7
 800710e:	f849 7b04 	str.w	r7, [r9], #4
 8007112:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007116:	40cf      	lsrs	r7, r1
 8007118:	e7da      	b.n	80070d0 <rshift+0x4c>
 800711a:	f851 cb04 	ldr.w	ip, [r1], #4
 800711e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007122:	e7c3      	b.n	80070ac <rshift+0x28>
 8007124:	4623      	mov	r3, r4
 8007126:	e7e1      	b.n	80070ec <rshift+0x68>

08007128 <__hexdig_fun>:
 8007128:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800712c:	2b09      	cmp	r3, #9
 800712e:	d802      	bhi.n	8007136 <__hexdig_fun+0xe>
 8007130:	3820      	subs	r0, #32
 8007132:	b2c0      	uxtb	r0, r0
 8007134:	4770      	bx	lr
 8007136:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800713a:	2b05      	cmp	r3, #5
 800713c:	d801      	bhi.n	8007142 <__hexdig_fun+0x1a>
 800713e:	3847      	subs	r0, #71	; 0x47
 8007140:	e7f7      	b.n	8007132 <__hexdig_fun+0xa>
 8007142:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007146:	2b05      	cmp	r3, #5
 8007148:	d801      	bhi.n	800714e <__hexdig_fun+0x26>
 800714a:	3827      	subs	r0, #39	; 0x27
 800714c:	e7f1      	b.n	8007132 <__hexdig_fun+0xa>
 800714e:	2000      	movs	r0, #0
 8007150:	4770      	bx	lr
	...

08007154 <__gethex>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	4617      	mov	r7, r2
 800715a:	680a      	ldr	r2, [r1, #0]
 800715c:	b085      	sub	sp, #20
 800715e:	f102 0b02 	add.w	fp, r2, #2
 8007162:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007166:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800716a:	4681      	mov	r9, r0
 800716c:	468a      	mov	sl, r1
 800716e:	9302      	str	r3, [sp, #8]
 8007170:	32fe      	adds	r2, #254	; 0xfe
 8007172:	eb02 030b 	add.w	r3, r2, fp
 8007176:	46d8      	mov	r8, fp
 8007178:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2830      	cmp	r0, #48	; 0x30
 8007180:	d0f7      	beq.n	8007172 <__gethex+0x1e>
 8007182:	f7ff ffd1 	bl	8007128 <__hexdig_fun>
 8007186:	4604      	mov	r4, r0
 8007188:	2800      	cmp	r0, #0
 800718a:	d138      	bne.n	80071fe <__gethex+0xaa>
 800718c:	49a7      	ldr	r1, [pc, #668]	; (800742c <__gethex+0x2d8>)
 800718e:	2201      	movs	r2, #1
 8007190:	4640      	mov	r0, r8
 8007192:	f7ff fe00 	bl	8006d96 <strncmp>
 8007196:	4606      	mov	r6, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d169      	bne.n	8007270 <__gethex+0x11c>
 800719c:	f898 0001 	ldrb.w	r0, [r8, #1]
 80071a0:	465d      	mov	r5, fp
 80071a2:	f7ff ffc1 	bl	8007128 <__hexdig_fun>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d064      	beq.n	8007274 <__gethex+0x120>
 80071aa:	465a      	mov	r2, fp
 80071ac:	7810      	ldrb	r0, [r2, #0]
 80071ae:	2830      	cmp	r0, #48	; 0x30
 80071b0:	4690      	mov	r8, r2
 80071b2:	f102 0201 	add.w	r2, r2, #1
 80071b6:	d0f9      	beq.n	80071ac <__gethex+0x58>
 80071b8:	f7ff ffb6 	bl	8007128 <__hexdig_fun>
 80071bc:	2301      	movs	r3, #1
 80071be:	fab0 f480 	clz	r4, r0
 80071c2:	0964      	lsrs	r4, r4, #5
 80071c4:	465e      	mov	r6, fp
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	4642      	mov	r2, r8
 80071ca:	4615      	mov	r5, r2
 80071cc:	3201      	adds	r2, #1
 80071ce:	7828      	ldrb	r0, [r5, #0]
 80071d0:	f7ff ffaa 	bl	8007128 <__hexdig_fun>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1f8      	bne.n	80071ca <__gethex+0x76>
 80071d8:	4994      	ldr	r1, [pc, #592]	; (800742c <__gethex+0x2d8>)
 80071da:	2201      	movs	r2, #1
 80071dc:	4628      	mov	r0, r5
 80071de:	f7ff fdda 	bl	8006d96 <strncmp>
 80071e2:	b978      	cbnz	r0, 8007204 <__gethex+0xb0>
 80071e4:	b946      	cbnz	r6, 80071f8 <__gethex+0xa4>
 80071e6:	1c6e      	adds	r6, r5, #1
 80071e8:	4632      	mov	r2, r6
 80071ea:	4615      	mov	r5, r2
 80071ec:	3201      	adds	r2, #1
 80071ee:	7828      	ldrb	r0, [r5, #0]
 80071f0:	f7ff ff9a 	bl	8007128 <__hexdig_fun>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d1f8      	bne.n	80071ea <__gethex+0x96>
 80071f8:	1b73      	subs	r3, r6, r5
 80071fa:	009e      	lsls	r6, r3, #2
 80071fc:	e004      	b.n	8007208 <__gethex+0xb4>
 80071fe:	2400      	movs	r4, #0
 8007200:	4626      	mov	r6, r4
 8007202:	e7e1      	b.n	80071c8 <__gethex+0x74>
 8007204:	2e00      	cmp	r6, #0
 8007206:	d1f7      	bne.n	80071f8 <__gethex+0xa4>
 8007208:	782b      	ldrb	r3, [r5, #0]
 800720a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800720e:	2b50      	cmp	r3, #80	; 0x50
 8007210:	d13d      	bne.n	800728e <__gethex+0x13a>
 8007212:	786b      	ldrb	r3, [r5, #1]
 8007214:	2b2b      	cmp	r3, #43	; 0x2b
 8007216:	d02f      	beq.n	8007278 <__gethex+0x124>
 8007218:	2b2d      	cmp	r3, #45	; 0x2d
 800721a:	d031      	beq.n	8007280 <__gethex+0x12c>
 800721c:	1c69      	adds	r1, r5, #1
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	7808      	ldrb	r0, [r1, #0]
 8007224:	f7ff ff80 	bl	8007128 <__hexdig_fun>
 8007228:	1e42      	subs	r2, r0, #1
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	2a18      	cmp	r2, #24
 800722e:	d82e      	bhi.n	800728e <__gethex+0x13a>
 8007230:	f1a0 0210 	sub.w	r2, r0, #16
 8007234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007238:	f7ff ff76 	bl	8007128 <__hexdig_fun>
 800723c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007240:	fa5f fc8c 	uxtb.w	ip, ip
 8007244:	f1bc 0f18 	cmp.w	ip, #24
 8007248:	d91d      	bls.n	8007286 <__gethex+0x132>
 800724a:	f1bb 0f00 	cmp.w	fp, #0
 800724e:	d000      	beq.n	8007252 <__gethex+0xfe>
 8007250:	4252      	negs	r2, r2
 8007252:	4416      	add	r6, r2
 8007254:	f8ca 1000 	str.w	r1, [sl]
 8007258:	b1dc      	cbz	r4, 8007292 <__gethex+0x13e>
 800725a:	9b01      	ldr	r3, [sp, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	bf14      	ite	ne
 8007260:	f04f 0800 	movne.w	r8, #0
 8007264:	f04f 0806 	moveq.w	r8, #6
 8007268:	4640      	mov	r0, r8
 800726a:	b005      	add	sp, #20
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	4645      	mov	r5, r8
 8007272:	4626      	mov	r6, r4
 8007274:	2401      	movs	r4, #1
 8007276:	e7c7      	b.n	8007208 <__gethex+0xb4>
 8007278:	f04f 0b00 	mov.w	fp, #0
 800727c:	1ca9      	adds	r1, r5, #2
 800727e:	e7d0      	b.n	8007222 <__gethex+0xce>
 8007280:	f04f 0b01 	mov.w	fp, #1
 8007284:	e7fa      	b.n	800727c <__gethex+0x128>
 8007286:	230a      	movs	r3, #10
 8007288:	fb03 0002 	mla	r0, r3, r2, r0
 800728c:	e7d0      	b.n	8007230 <__gethex+0xdc>
 800728e:	4629      	mov	r1, r5
 8007290:	e7e0      	b.n	8007254 <__gethex+0x100>
 8007292:	eba5 0308 	sub.w	r3, r5, r8
 8007296:	3b01      	subs	r3, #1
 8007298:	4621      	mov	r1, r4
 800729a:	2b07      	cmp	r3, #7
 800729c:	dc0a      	bgt.n	80072b4 <__gethex+0x160>
 800729e:	4648      	mov	r0, r9
 80072a0:	f000 fb0e 	bl	80078c0 <_Balloc>
 80072a4:	4604      	mov	r4, r0
 80072a6:	b940      	cbnz	r0, 80072ba <__gethex+0x166>
 80072a8:	4b61      	ldr	r3, [pc, #388]	; (8007430 <__gethex+0x2dc>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	21e4      	movs	r1, #228	; 0xe4
 80072ae:	4861      	ldr	r0, [pc, #388]	; (8007434 <__gethex+0x2e0>)
 80072b0:	f7ff fe7e 	bl	8006fb0 <__assert_func>
 80072b4:	3101      	adds	r1, #1
 80072b6:	105b      	asrs	r3, r3, #1
 80072b8:	e7ef      	b.n	800729a <__gethex+0x146>
 80072ba:	f100 0a14 	add.w	sl, r0, #20
 80072be:	2300      	movs	r3, #0
 80072c0:	495a      	ldr	r1, [pc, #360]	; (800742c <__gethex+0x2d8>)
 80072c2:	f8cd a004 	str.w	sl, [sp, #4]
 80072c6:	469b      	mov	fp, r3
 80072c8:	45a8      	cmp	r8, r5
 80072ca:	d342      	bcc.n	8007352 <__gethex+0x1fe>
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	f840 bb04 	str.w	fp, [r0], #4
 80072d2:	eba0 000a 	sub.w	r0, r0, sl
 80072d6:	1080      	asrs	r0, r0, #2
 80072d8:	6120      	str	r0, [r4, #16]
 80072da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80072de:	4658      	mov	r0, fp
 80072e0:	f000 fbe0 	bl	8007aa4 <__hi0bits>
 80072e4:	683d      	ldr	r5, [r7, #0]
 80072e6:	eba8 0000 	sub.w	r0, r8, r0
 80072ea:	42a8      	cmp	r0, r5
 80072ec:	dd59      	ble.n	80073a2 <__gethex+0x24e>
 80072ee:	eba0 0805 	sub.w	r8, r0, r5
 80072f2:	4641      	mov	r1, r8
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 ff6f 	bl	80081d8 <__any_on>
 80072fa:	4683      	mov	fp, r0
 80072fc:	b1b8      	cbz	r0, 800732e <__gethex+0x1da>
 80072fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8007302:	1159      	asrs	r1, r3, #5
 8007304:	f003 021f 	and.w	r2, r3, #31
 8007308:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800730c:	f04f 0b01 	mov.w	fp, #1
 8007310:	fa0b f202 	lsl.w	r2, fp, r2
 8007314:	420a      	tst	r2, r1
 8007316:	d00a      	beq.n	800732e <__gethex+0x1da>
 8007318:	455b      	cmp	r3, fp
 800731a:	dd06      	ble.n	800732a <__gethex+0x1d6>
 800731c:	f1a8 0102 	sub.w	r1, r8, #2
 8007320:	4620      	mov	r0, r4
 8007322:	f000 ff59 	bl	80081d8 <__any_on>
 8007326:	2800      	cmp	r0, #0
 8007328:	d138      	bne.n	800739c <__gethex+0x248>
 800732a:	f04f 0b02 	mov.w	fp, #2
 800732e:	4641      	mov	r1, r8
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff fea7 	bl	8007084 <rshift>
 8007336:	4446      	add	r6, r8
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	42b3      	cmp	r3, r6
 800733c:	da41      	bge.n	80073c2 <__gethex+0x26e>
 800733e:	4621      	mov	r1, r4
 8007340:	4648      	mov	r0, r9
 8007342:	f000 fafd 	bl	8007940 <_Bfree>
 8007346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007348:	2300      	movs	r3, #0
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007350:	e78a      	b.n	8007268 <__gethex+0x114>
 8007352:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007356:	2a2e      	cmp	r2, #46	; 0x2e
 8007358:	d014      	beq.n	8007384 <__gethex+0x230>
 800735a:	2b20      	cmp	r3, #32
 800735c:	d106      	bne.n	800736c <__gethex+0x218>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	f843 bb04 	str.w	fp, [r3], #4
 8007364:	f04f 0b00 	mov.w	fp, #0
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	465b      	mov	r3, fp
 800736c:	7828      	ldrb	r0, [r5, #0]
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	f7ff feda 	bl	8007128 <__hexdig_fun>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	f000 000f 	and.w	r0, r0, #15
 800737a:	4098      	lsls	r0, r3
 800737c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007380:	3304      	adds	r3, #4
 8007382:	e7a1      	b.n	80072c8 <__gethex+0x174>
 8007384:	45a8      	cmp	r8, r5
 8007386:	d8e8      	bhi.n	800735a <__gethex+0x206>
 8007388:	2201      	movs	r2, #1
 800738a:	4628      	mov	r0, r5
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	f7ff fd02 	bl	8006d96 <strncmp>
 8007392:	4926      	ldr	r1, [pc, #152]	; (800742c <__gethex+0x2d8>)
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	2800      	cmp	r0, #0
 8007398:	d1df      	bne.n	800735a <__gethex+0x206>
 800739a:	e795      	b.n	80072c8 <__gethex+0x174>
 800739c:	f04f 0b03 	mov.w	fp, #3
 80073a0:	e7c5      	b.n	800732e <__gethex+0x1da>
 80073a2:	da0b      	bge.n	80073bc <__gethex+0x268>
 80073a4:	eba5 0800 	sub.w	r8, r5, r0
 80073a8:	4621      	mov	r1, r4
 80073aa:	4642      	mov	r2, r8
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 fce1 	bl	8007d74 <__lshift>
 80073b2:	eba6 0608 	sub.w	r6, r6, r8
 80073b6:	4604      	mov	r4, r0
 80073b8:	f100 0a14 	add.w	sl, r0, #20
 80073bc:	f04f 0b00 	mov.w	fp, #0
 80073c0:	e7ba      	b.n	8007338 <__gethex+0x1e4>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	42b3      	cmp	r3, r6
 80073c6:	dd73      	ble.n	80074b0 <__gethex+0x35c>
 80073c8:	1b9e      	subs	r6, r3, r6
 80073ca:	42b5      	cmp	r5, r6
 80073cc:	dc34      	bgt.n	8007438 <__gethex+0x2e4>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d023      	beq.n	800741c <__gethex+0x2c8>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d025      	beq.n	8007424 <__gethex+0x2d0>
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d115      	bne.n	8007408 <__gethex+0x2b4>
 80073dc:	42b5      	cmp	r5, r6
 80073de:	d113      	bne.n	8007408 <__gethex+0x2b4>
 80073e0:	2d01      	cmp	r5, #1
 80073e2:	d10b      	bne.n	80073fc <__gethex+0x2a8>
 80073e4:	9a02      	ldr	r2, [sp, #8]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	2301      	movs	r3, #1
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	f8ca 3000 	str.w	r3, [sl]
 80073f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80073f8:	601c      	str	r4, [r3, #0]
 80073fa:	e735      	b.n	8007268 <__gethex+0x114>
 80073fc:	1e69      	subs	r1, r5, #1
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 feea 	bl	80081d8 <__any_on>
 8007404:	2800      	cmp	r0, #0
 8007406:	d1ed      	bne.n	80073e4 <__gethex+0x290>
 8007408:	4621      	mov	r1, r4
 800740a:	4648      	mov	r0, r9
 800740c:	f000 fa98 	bl	8007940 <_Bfree>
 8007410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007412:	2300      	movs	r3, #0
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f04f 0850 	mov.w	r8, #80	; 0x50
 800741a:	e725      	b.n	8007268 <__gethex+0x114>
 800741c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f2      	bne.n	8007408 <__gethex+0x2b4>
 8007422:	e7df      	b.n	80073e4 <__gethex+0x290>
 8007424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1dc      	bne.n	80073e4 <__gethex+0x290>
 800742a:	e7ed      	b.n	8007408 <__gethex+0x2b4>
 800742c:	08009d28 	.word	0x08009d28
 8007430:	08009e3d 	.word	0x08009e3d
 8007434:	08009e4e 	.word	0x08009e4e
 8007438:	f106 38ff 	add.w	r8, r6, #4294967295
 800743c:	f1bb 0f00 	cmp.w	fp, #0
 8007440:	d133      	bne.n	80074aa <__gethex+0x356>
 8007442:	f1b8 0f00 	cmp.w	r8, #0
 8007446:	d004      	beq.n	8007452 <__gethex+0x2fe>
 8007448:	4641      	mov	r1, r8
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fec4 	bl	80081d8 <__any_on>
 8007450:	4683      	mov	fp, r0
 8007452:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007456:	2301      	movs	r3, #1
 8007458:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800745c:	f008 081f 	and.w	r8, r8, #31
 8007460:	fa03 f308 	lsl.w	r3, r3, r8
 8007464:	4213      	tst	r3, r2
 8007466:	4631      	mov	r1, r6
 8007468:	4620      	mov	r0, r4
 800746a:	bf18      	it	ne
 800746c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007470:	1bad      	subs	r5, r5, r6
 8007472:	f7ff fe07 	bl	8007084 <rshift>
 8007476:	687e      	ldr	r6, [r7, #4]
 8007478:	f04f 0802 	mov.w	r8, #2
 800747c:	f1bb 0f00 	cmp.w	fp, #0
 8007480:	d04a      	beq.n	8007518 <__gethex+0x3c4>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d016      	beq.n	80074b6 <__gethex+0x362>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d018      	beq.n	80074be <__gethex+0x36a>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d109      	bne.n	80074a4 <__gethex+0x350>
 8007490:	f01b 0f02 	tst.w	fp, #2
 8007494:	d006      	beq.n	80074a4 <__gethex+0x350>
 8007496:	f8da 3000 	ldr.w	r3, [sl]
 800749a:	ea4b 0b03 	orr.w	fp, fp, r3
 800749e:	f01b 0f01 	tst.w	fp, #1
 80074a2:	d10f      	bne.n	80074c4 <__gethex+0x370>
 80074a4:	f048 0810 	orr.w	r8, r8, #16
 80074a8:	e036      	b.n	8007518 <__gethex+0x3c4>
 80074aa:	f04f 0b01 	mov.w	fp, #1
 80074ae:	e7d0      	b.n	8007452 <__gethex+0x2fe>
 80074b0:	f04f 0801 	mov.w	r8, #1
 80074b4:	e7e2      	b.n	800747c <__gethex+0x328>
 80074b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b8:	f1c3 0301 	rsb	r3, r3, #1
 80074bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80074be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0ef      	beq.n	80074a4 <__gethex+0x350>
 80074c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074c8:	f104 0214 	add.w	r2, r4, #20
 80074cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80074d6:	2300      	movs	r3, #0
 80074d8:	4694      	mov	ip, r2
 80074da:	f852 1b04 	ldr.w	r1, [r2], #4
 80074de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80074e2:	d01e      	beq.n	8007522 <__gethex+0x3ce>
 80074e4:	3101      	adds	r1, #1
 80074e6:	f8cc 1000 	str.w	r1, [ip]
 80074ea:	f1b8 0f02 	cmp.w	r8, #2
 80074ee:	f104 0214 	add.w	r2, r4, #20
 80074f2:	d13d      	bne.n	8007570 <__gethex+0x41c>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	d10b      	bne.n	8007514 <__gethex+0x3c0>
 80074fc:	1169      	asrs	r1, r5, #5
 80074fe:	2301      	movs	r3, #1
 8007500:	f005 051f 	and.w	r5, r5, #31
 8007504:	fa03 f505 	lsl.w	r5, r3, r5
 8007508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800750c:	421d      	tst	r5, r3
 800750e:	bf18      	it	ne
 8007510:	f04f 0801 	movne.w	r8, #1
 8007514:	f048 0820 	orr.w	r8, r8, #32
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	601c      	str	r4, [r3, #0]
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	601e      	str	r6, [r3, #0]
 8007520:	e6a2      	b.n	8007268 <__gethex+0x114>
 8007522:	4290      	cmp	r0, r2
 8007524:	f842 3c04 	str.w	r3, [r2, #-4]
 8007528:	d8d6      	bhi.n	80074d8 <__gethex+0x384>
 800752a:	68a2      	ldr	r2, [r4, #8]
 800752c:	4593      	cmp	fp, r2
 800752e:	db17      	blt.n	8007560 <__gethex+0x40c>
 8007530:	6861      	ldr	r1, [r4, #4]
 8007532:	4648      	mov	r0, r9
 8007534:	3101      	adds	r1, #1
 8007536:	f000 f9c3 	bl	80078c0 <_Balloc>
 800753a:	4682      	mov	sl, r0
 800753c:	b918      	cbnz	r0, 8007546 <__gethex+0x3f2>
 800753e:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <__gethex+0x458>)
 8007540:	4602      	mov	r2, r0
 8007542:	2184      	movs	r1, #132	; 0x84
 8007544:	e6b3      	b.n	80072ae <__gethex+0x15a>
 8007546:	6922      	ldr	r2, [r4, #16]
 8007548:	3202      	adds	r2, #2
 800754a:	f104 010c 	add.w	r1, r4, #12
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	300c      	adds	r0, #12
 8007552:	f7ff fd17 	bl	8006f84 <memcpy>
 8007556:	4621      	mov	r1, r4
 8007558:	4648      	mov	r0, r9
 800755a:	f000 f9f1 	bl	8007940 <_Bfree>
 800755e:	4654      	mov	r4, sl
 8007560:	6922      	ldr	r2, [r4, #16]
 8007562:	1c51      	adds	r1, r2, #1
 8007564:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007568:	6121      	str	r1, [r4, #16]
 800756a:	2101      	movs	r1, #1
 800756c:	6151      	str	r1, [r2, #20]
 800756e:	e7bc      	b.n	80074ea <__gethex+0x396>
 8007570:	6921      	ldr	r1, [r4, #16]
 8007572:	4559      	cmp	r1, fp
 8007574:	dd0b      	ble.n	800758e <__gethex+0x43a>
 8007576:	2101      	movs	r1, #1
 8007578:	4620      	mov	r0, r4
 800757a:	f7ff fd83 	bl	8007084 <rshift>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	3601      	adds	r6, #1
 8007582:	42b3      	cmp	r3, r6
 8007584:	f6ff aedb 	blt.w	800733e <__gethex+0x1ea>
 8007588:	f04f 0801 	mov.w	r8, #1
 800758c:	e7c2      	b.n	8007514 <__gethex+0x3c0>
 800758e:	f015 051f 	ands.w	r5, r5, #31
 8007592:	d0f9      	beq.n	8007588 <__gethex+0x434>
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	441a      	add	r2, r3
 8007598:	f1c5 0520 	rsb	r5, r5, #32
 800759c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80075a0:	f000 fa80 	bl	8007aa4 <__hi0bits>
 80075a4:	42a8      	cmp	r0, r5
 80075a6:	dbe6      	blt.n	8007576 <__gethex+0x422>
 80075a8:	e7ee      	b.n	8007588 <__gethex+0x434>
 80075aa:	bf00      	nop
 80075ac:	08009e3d 	.word	0x08009e3d

080075b0 <L_shift>:
 80075b0:	f1c2 0208 	rsb	r2, r2, #8
 80075b4:	0092      	lsls	r2, r2, #2
 80075b6:	b570      	push	{r4, r5, r6, lr}
 80075b8:	f1c2 0620 	rsb	r6, r2, #32
 80075bc:	6843      	ldr	r3, [r0, #4]
 80075be:	6804      	ldr	r4, [r0, #0]
 80075c0:	fa03 f506 	lsl.w	r5, r3, r6
 80075c4:	432c      	orrs	r4, r5
 80075c6:	40d3      	lsrs	r3, r2
 80075c8:	6004      	str	r4, [r0, #0]
 80075ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80075ce:	4288      	cmp	r0, r1
 80075d0:	d3f4      	bcc.n	80075bc <L_shift+0xc>
 80075d2:	bd70      	pop	{r4, r5, r6, pc}

080075d4 <__match>:
 80075d4:	b530      	push	{r4, r5, lr}
 80075d6:	6803      	ldr	r3, [r0, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075de:	b914      	cbnz	r4, 80075e6 <__match+0x12>
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	2001      	movs	r0, #1
 80075e4:	bd30      	pop	{r4, r5, pc}
 80075e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075ee:	2d19      	cmp	r5, #25
 80075f0:	bf98      	it	ls
 80075f2:	3220      	addls	r2, #32
 80075f4:	42a2      	cmp	r2, r4
 80075f6:	d0f0      	beq.n	80075da <__match+0x6>
 80075f8:	2000      	movs	r0, #0
 80075fa:	e7f3      	b.n	80075e4 <__match+0x10>

080075fc <__hexnan>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	6801      	ldr	r1, [r0, #0]
 8007604:	115e      	asrs	r6, r3, #5
 8007606:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800760a:	f013 031f 	ands.w	r3, r3, #31
 800760e:	b087      	sub	sp, #28
 8007610:	bf18      	it	ne
 8007612:	3604      	addne	r6, #4
 8007614:	2500      	movs	r5, #0
 8007616:	1f37      	subs	r7, r6, #4
 8007618:	4682      	mov	sl, r0
 800761a:	4690      	mov	r8, r2
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007622:	46b9      	mov	r9, r7
 8007624:	463c      	mov	r4, r7
 8007626:	9502      	str	r5, [sp, #8]
 8007628:	46ab      	mov	fp, r5
 800762a:	784a      	ldrb	r2, [r1, #1]
 800762c:	1c4b      	adds	r3, r1, #1
 800762e:	9303      	str	r3, [sp, #12]
 8007630:	b342      	cbz	r2, 8007684 <__hexnan+0x88>
 8007632:	4610      	mov	r0, r2
 8007634:	9105      	str	r1, [sp, #20]
 8007636:	9204      	str	r2, [sp, #16]
 8007638:	f7ff fd76 	bl	8007128 <__hexdig_fun>
 800763c:	2800      	cmp	r0, #0
 800763e:	d14f      	bne.n	80076e0 <__hexnan+0xe4>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	9905      	ldr	r1, [sp, #20]
 8007644:	2a20      	cmp	r2, #32
 8007646:	d818      	bhi.n	800767a <__hexnan+0x7e>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	459b      	cmp	fp, r3
 800764c:	dd13      	ble.n	8007676 <__hexnan+0x7a>
 800764e:	454c      	cmp	r4, r9
 8007650:	d206      	bcs.n	8007660 <__hexnan+0x64>
 8007652:	2d07      	cmp	r5, #7
 8007654:	dc04      	bgt.n	8007660 <__hexnan+0x64>
 8007656:	462a      	mov	r2, r5
 8007658:	4649      	mov	r1, r9
 800765a:	4620      	mov	r0, r4
 800765c:	f7ff ffa8 	bl	80075b0 <L_shift>
 8007660:	4544      	cmp	r4, r8
 8007662:	d950      	bls.n	8007706 <__hexnan+0x10a>
 8007664:	2300      	movs	r3, #0
 8007666:	f1a4 0904 	sub.w	r9, r4, #4
 800766a:	f844 3c04 	str.w	r3, [r4, #-4]
 800766e:	f8cd b008 	str.w	fp, [sp, #8]
 8007672:	464c      	mov	r4, r9
 8007674:	461d      	mov	r5, r3
 8007676:	9903      	ldr	r1, [sp, #12]
 8007678:	e7d7      	b.n	800762a <__hexnan+0x2e>
 800767a:	2a29      	cmp	r2, #41	; 0x29
 800767c:	d155      	bne.n	800772a <__hexnan+0x12e>
 800767e:	3102      	adds	r1, #2
 8007680:	f8ca 1000 	str.w	r1, [sl]
 8007684:	f1bb 0f00 	cmp.w	fp, #0
 8007688:	d04f      	beq.n	800772a <__hexnan+0x12e>
 800768a:	454c      	cmp	r4, r9
 800768c:	d206      	bcs.n	800769c <__hexnan+0xa0>
 800768e:	2d07      	cmp	r5, #7
 8007690:	dc04      	bgt.n	800769c <__hexnan+0xa0>
 8007692:	462a      	mov	r2, r5
 8007694:	4649      	mov	r1, r9
 8007696:	4620      	mov	r0, r4
 8007698:	f7ff ff8a 	bl	80075b0 <L_shift>
 800769c:	4544      	cmp	r4, r8
 800769e:	d934      	bls.n	800770a <__hexnan+0x10e>
 80076a0:	f1a8 0204 	sub.w	r2, r8, #4
 80076a4:	4623      	mov	r3, r4
 80076a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80076aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80076ae:	429f      	cmp	r7, r3
 80076b0:	d2f9      	bcs.n	80076a6 <__hexnan+0xaa>
 80076b2:	1b3b      	subs	r3, r7, r4
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	3304      	adds	r3, #4
 80076ba:	3e03      	subs	r6, #3
 80076bc:	3401      	adds	r4, #1
 80076be:	42a6      	cmp	r6, r4
 80076c0:	bf38      	it	cc
 80076c2:	2304      	movcc	r3, #4
 80076c4:	4443      	add	r3, r8
 80076c6:	2200      	movs	r2, #0
 80076c8:	f843 2b04 	str.w	r2, [r3], #4
 80076cc:	429f      	cmp	r7, r3
 80076ce:	d2fb      	bcs.n	80076c8 <__hexnan+0xcc>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	b91b      	cbnz	r3, 80076dc <__hexnan+0xe0>
 80076d4:	4547      	cmp	r7, r8
 80076d6:	d126      	bne.n	8007726 <__hexnan+0x12a>
 80076d8:	2301      	movs	r3, #1
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	2005      	movs	r0, #5
 80076de:	e025      	b.n	800772c <__hexnan+0x130>
 80076e0:	3501      	adds	r5, #1
 80076e2:	2d08      	cmp	r5, #8
 80076e4:	f10b 0b01 	add.w	fp, fp, #1
 80076e8:	dd06      	ble.n	80076f8 <__hexnan+0xfc>
 80076ea:	4544      	cmp	r4, r8
 80076ec:	d9c3      	bls.n	8007676 <__hexnan+0x7a>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80076f4:	2501      	movs	r5, #1
 80076f6:	3c04      	subs	r4, #4
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	f000 000f 	and.w	r0, r0, #15
 80076fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007702:	6020      	str	r0, [r4, #0]
 8007704:	e7b7      	b.n	8007676 <__hexnan+0x7a>
 8007706:	2508      	movs	r5, #8
 8007708:	e7b5      	b.n	8007676 <__hexnan+0x7a>
 800770a:	9b01      	ldr	r3, [sp, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0df      	beq.n	80076d0 <__hexnan+0xd4>
 8007710:	f1c3 0320 	rsb	r3, r3, #32
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	40da      	lsrs	r2, r3
 800771a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800771e:	4013      	ands	r3, r2
 8007720:	f846 3c04 	str.w	r3, [r6, #-4]
 8007724:	e7d4      	b.n	80076d0 <__hexnan+0xd4>
 8007726:	3f04      	subs	r7, #4
 8007728:	e7d2      	b.n	80076d0 <__hexnan+0xd4>
 800772a:	2004      	movs	r0, #4
 800772c:	b007      	add	sp, #28
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007734 <malloc>:
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <malloc+0xc>)
 8007736:	4601      	mov	r1, r0
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f000 b823 	b.w	8007784 <_malloc_r>
 800773e:	bf00      	nop
 8007740:	200002e4 	.word	0x200002e4

08007744 <sbrk_aligned>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4e0e      	ldr	r6, [pc, #56]	; (8007780 <sbrk_aligned+0x3c>)
 8007748:	460c      	mov	r4, r1
 800774a:	6831      	ldr	r1, [r6, #0]
 800774c:	4605      	mov	r5, r0
 800774e:	b911      	cbnz	r1, 8007756 <sbrk_aligned+0x12>
 8007750:	f001 f932 	bl	80089b8 <_sbrk_r>
 8007754:	6030      	str	r0, [r6, #0]
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f001 f92d 	bl	80089b8 <_sbrk_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d00a      	beq.n	8007778 <sbrk_aligned+0x34>
 8007762:	1cc4      	adds	r4, r0, #3
 8007764:	f024 0403 	bic.w	r4, r4, #3
 8007768:	42a0      	cmp	r0, r4
 800776a:	d007      	beq.n	800777c <sbrk_aligned+0x38>
 800776c:	1a21      	subs	r1, r4, r0
 800776e:	4628      	mov	r0, r5
 8007770:	f001 f922 	bl	80089b8 <_sbrk_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d101      	bne.n	800777c <sbrk_aligned+0x38>
 8007778:	f04f 34ff 	mov.w	r4, #4294967295
 800777c:	4620      	mov	r0, r4
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	2000071c 	.word	0x2000071c

08007784 <_malloc_r>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	1ccd      	adds	r5, r1, #3
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	2d00      	cmp	r5, #0
 8007798:	4607      	mov	r7, r0
 800779a:	db01      	blt.n	80077a0 <_malloc_r+0x1c>
 800779c:	42a9      	cmp	r1, r5
 800779e:	d905      	bls.n	80077ac <_malloc_r+0x28>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	2600      	movs	r6, #0
 80077a6:	4630      	mov	r0, r6
 80077a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007880 <_malloc_r+0xfc>
 80077b0:	f000 f87a 	bl	80078a8 <__malloc_lock>
 80077b4:	f8d8 3000 	ldr.w	r3, [r8]
 80077b8:	461c      	mov	r4, r3
 80077ba:	bb5c      	cbnz	r4, 8007814 <_malloc_r+0x90>
 80077bc:	4629      	mov	r1, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ffc0 	bl	8007744 <sbrk_aligned>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	4604      	mov	r4, r0
 80077c8:	d155      	bne.n	8007876 <_malloc_r+0xf2>
 80077ca:	f8d8 4000 	ldr.w	r4, [r8]
 80077ce:	4626      	mov	r6, r4
 80077d0:	2e00      	cmp	r6, #0
 80077d2:	d145      	bne.n	8007860 <_malloc_r+0xdc>
 80077d4:	2c00      	cmp	r4, #0
 80077d6:	d048      	beq.n	800786a <_malloc_r+0xe6>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	4631      	mov	r1, r6
 80077dc:	4638      	mov	r0, r7
 80077de:	eb04 0903 	add.w	r9, r4, r3
 80077e2:	f001 f8e9 	bl	80089b8 <_sbrk_r>
 80077e6:	4581      	cmp	r9, r0
 80077e8:	d13f      	bne.n	800786a <_malloc_r+0xe6>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	1a6d      	subs	r5, r5, r1
 80077ee:	4629      	mov	r1, r5
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa7 	bl	8007744 <sbrk_aligned>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d037      	beq.n	800786a <_malloc_r+0xe6>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	442b      	add	r3, r5
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	f8d8 3000 	ldr.w	r3, [r8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d038      	beq.n	800787a <_malloc_r+0xf6>
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	42a2      	cmp	r2, r4
 800780c:	d12b      	bne.n	8007866 <_malloc_r+0xe2>
 800780e:	2200      	movs	r2, #0
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e00f      	b.n	8007834 <_malloc_r+0xb0>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1b52      	subs	r2, r2, r5
 8007818:	d41f      	bmi.n	800785a <_malloc_r+0xd6>
 800781a:	2a0b      	cmp	r2, #11
 800781c:	d917      	bls.n	800784e <_malloc_r+0xca>
 800781e:	1961      	adds	r1, r4, r5
 8007820:	42a3      	cmp	r3, r4
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	bf18      	it	ne
 8007826:	6059      	strne	r1, [r3, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	bf08      	it	eq
 800782c:	f8c8 1000 	streq.w	r1, [r8]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4638      	mov	r0, r7
 8007836:	f104 060b 	add.w	r6, r4, #11
 800783a:	f000 f83b 	bl	80078b4 <__malloc_unlock>
 800783e:	f026 0607 	bic.w	r6, r6, #7
 8007842:	1d23      	adds	r3, r4, #4
 8007844:	1af2      	subs	r2, r6, r3
 8007846:	d0ae      	beq.n	80077a6 <_malloc_r+0x22>
 8007848:	1b9b      	subs	r3, r3, r6
 800784a:	50a3      	str	r3, [r4, r2]
 800784c:	e7ab      	b.n	80077a6 <_malloc_r+0x22>
 800784e:	42a3      	cmp	r3, r4
 8007850:	6862      	ldr	r2, [r4, #4]
 8007852:	d1dd      	bne.n	8007810 <_malloc_r+0x8c>
 8007854:	f8c8 2000 	str.w	r2, [r8]
 8007858:	e7ec      	b.n	8007834 <_malloc_r+0xb0>
 800785a:	4623      	mov	r3, r4
 800785c:	6864      	ldr	r4, [r4, #4]
 800785e:	e7ac      	b.n	80077ba <_malloc_r+0x36>
 8007860:	4634      	mov	r4, r6
 8007862:	6876      	ldr	r6, [r6, #4]
 8007864:	e7b4      	b.n	80077d0 <_malloc_r+0x4c>
 8007866:	4613      	mov	r3, r2
 8007868:	e7cc      	b.n	8007804 <_malloc_r+0x80>
 800786a:	230c      	movs	r3, #12
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4638      	mov	r0, r7
 8007870:	f000 f820 	bl	80078b4 <__malloc_unlock>
 8007874:	e797      	b.n	80077a6 <_malloc_r+0x22>
 8007876:	6025      	str	r5, [r4, #0]
 8007878:	e7dc      	b.n	8007834 <_malloc_r+0xb0>
 800787a:	605b      	str	r3, [r3, #4]
 800787c:	deff      	udf	#255	; 0xff
 800787e:	bf00      	nop
 8007880:	20000718 	.word	0x20000718

08007884 <__ascii_mbtowc>:
 8007884:	b082      	sub	sp, #8
 8007886:	b901      	cbnz	r1, 800788a <__ascii_mbtowc+0x6>
 8007888:	a901      	add	r1, sp, #4
 800788a:	b142      	cbz	r2, 800789e <__ascii_mbtowc+0x1a>
 800788c:	b14b      	cbz	r3, 80078a2 <__ascii_mbtowc+0x1e>
 800788e:	7813      	ldrb	r3, [r2, #0]
 8007890:	600b      	str	r3, [r1, #0]
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	1e10      	subs	r0, r2, #0
 8007896:	bf18      	it	ne
 8007898:	2001      	movne	r0, #1
 800789a:	b002      	add	sp, #8
 800789c:	4770      	bx	lr
 800789e:	4610      	mov	r0, r2
 80078a0:	e7fb      	b.n	800789a <__ascii_mbtowc+0x16>
 80078a2:	f06f 0001 	mvn.w	r0, #1
 80078a6:	e7f8      	b.n	800789a <__ascii_mbtowc+0x16>

080078a8 <__malloc_lock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_lock+0x8>)
 80078aa:	f7ff bb69 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000714 	.word	0x20000714

080078b4 <__malloc_unlock>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__malloc_unlock+0x8>)
 80078b6:	f7ff bb64 	b.w	8006f82 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000714 	.word	0x20000714

080078c0 <_Balloc>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	69c6      	ldr	r6, [r0, #28]
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	b976      	cbnz	r6, 80078e8 <_Balloc+0x28>
 80078ca:	2010      	movs	r0, #16
 80078cc:	f7ff ff32 	bl	8007734 <malloc>
 80078d0:	4602      	mov	r2, r0
 80078d2:	61e0      	str	r0, [r4, #28]
 80078d4:	b920      	cbnz	r0, 80078e0 <_Balloc+0x20>
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <_Balloc+0x78>)
 80078d8:	4818      	ldr	r0, [pc, #96]	; (800793c <_Balloc+0x7c>)
 80078da:	216b      	movs	r1, #107	; 0x6b
 80078dc:	f7ff fb68 	bl	8006fb0 <__assert_func>
 80078e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e4:	6006      	str	r6, [r0, #0]
 80078e6:	60c6      	str	r6, [r0, #12]
 80078e8:	69e6      	ldr	r6, [r4, #28]
 80078ea:	68f3      	ldr	r3, [r6, #12]
 80078ec:	b183      	cbz	r3, 8007910 <_Balloc+0x50>
 80078ee:	69e3      	ldr	r3, [r4, #28]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078f6:	b9b8      	cbnz	r0, 8007928 <_Balloc+0x68>
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f605 	lsl.w	r6, r1, r5
 80078fe:	1d72      	adds	r2, r6, #5
 8007900:	0092      	lsls	r2, r2, #2
 8007902:	4620      	mov	r0, r4
 8007904:	f001 f86f 	bl	80089e6 <_calloc_r>
 8007908:	b160      	cbz	r0, 8007924 <_Balloc+0x64>
 800790a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800790e:	e00e      	b.n	800792e <_Balloc+0x6e>
 8007910:	2221      	movs	r2, #33	; 0x21
 8007912:	2104      	movs	r1, #4
 8007914:	4620      	mov	r0, r4
 8007916:	f001 f866 	bl	80089e6 <_calloc_r>
 800791a:	69e3      	ldr	r3, [r4, #28]
 800791c:	60f0      	str	r0, [r6, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e4      	bne.n	80078ee <_Balloc+0x2e>
 8007924:	2000      	movs	r0, #0
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	6802      	ldr	r2, [r0, #0]
 800792a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800792e:	2300      	movs	r3, #0
 8007930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007934:	e7f7      	b.n	8007926 <_Balloc+0x66>
 8007936:	bf00      	nop
 8007938:	08009d88 	.word	0x08009d88
 800793c:	08009eae 	.word	0x08009eae

08007940 <_Bfree>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	69c6      	ldr	r6, [r0, #28]
 8007944:	4605      	mov	r5, r0
 8007946:	460c      	mov	r4, r1
 8007948:	b976      	cbnz	r6, 8007968 <_Bfree+0x28>
 800794a:	2010      	movs	r0, #16
 800794c:	f7ff fef2 	bl	8007734 <malloc>
 8007950:	4602      	mov	r2, r0
 8007952:	61e8      	str	r0, [r5, #28]
 8007954:	b920      	cbnz	r0, 8007960 <_Bfree+0x20>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <_Bfree+0x3c>)
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <_Bfree+0x40>)
 800795a:	218f      	movs	r1, #143	; 0x8f
 800795c:	f7ff fb28 	bl	8006fb0 <__assert_func>
 8007960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007964:	6006      	str	r6, [r0, #0]
 8007966:	60c6      	str	r6, [r0, #12]
 8007968:	b13c      	cbz	r4, 800797a <_Bfree+0x3a>
 800796a:	69eb      	ldr	r3, [r5, #28]
 800796c:	6862      	ldr	r2, [r4, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007974:	6021      	str	r1, [r4, #0]
 8007976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	08009d88 	.word	0x08009d88
 8007980:	08009eae 	.word	0x08009eae

08007984 <__multadd>:
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	690d      	ldr	r5, [r1, #16]
 800798a:	4607      	mov	r7, r0
 800798c:	460c      	mov	r4, r1
 800798e:	461e      	mov	r6, r3
 8007990:	f101 0c14 	add.w	ip, r1, #20
 8007994:	2000      	movs	r0, #0
 8007996:	f8dc 3000 	ldr.w	r3, [ip]
 800799a:	b299      	uxth	r1, r3
 800799c:	fb02 6101 	mla	r1, r2, r1, r6
 80079a0:	0c1e      	lsrs	r6, r3, #16
 80079a2:	0c0b      	lsrs	r3, r1, #16
 80079a4:	fb02 3306 	mla	r3, r2, r6, r3
 80079a8:	b289      	uxth	r1, r1
 80079aa:	3001      	adds	r0, #1
 80079ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079b0:	4285      	cmp	r5, r0
 80079b2:	f84c 1b04 	str.w	r1, [ip], #4
 80079b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ba:	dcec      	bgt.n	8007996 <__multadd+0x12>
 80079bc:	b30e      	cbz	r6, 8007a02 <__multadd+0x7e>
 80079be:	68a3      	ldr	r3, [r4, #8]
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	dc19      	bgt.n	80079f8 <__multadd+0x74>
 80079c4:	6861      	ldr	r1, [r4, #4]
 80079c6:	4638      	mov	r0, r7
 80079c8:	3101      	adds	r1, #1
 80079ca:	f7ff ff79 	bl	80078c0 <_Balloc>
 80079ce:	4680      	mov	r8, r0
 80079d0:	b928      	cbnz	r0, 80079de <__multadd+0x5a>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <__multadd+0x84>)
 80079d6:	480d      	ldr	r0, [pc, #52]	; (8007a0c <__multadd+0x88>)
 80079d8:	21ba      	movs	r1, #186	; 0xba
 80079da:	f7ff fae9 	bl	8006fb0 <__assert_func>
 80079de:	6922      	ldr	r2, [r4, #16]
 80079e0:	3202      	adds	r2, #2
 80079e2:	f104 010c 	add.w	r1, r4, #12
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	300c      	adds	r0, #12
 80079ea:	f7ff facb 	bl	8006f84 <memcpy>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff ffa5 	bl	8007940 <_Bfree>
 80079f6:	4644      	mov	r4, r8
 80079f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079fc:	3501      	adds	r5, #1
 80079fe:	615e      	str	r6, [r3, #20]
 8007a00:	6125      	str	r5, [r4, #16]
 8007a02:	4620      	mov	r0, r4
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	08009e3d 	.word	0x08009e3d
 8007a0c:	08009eae 	.word	0x08009eae

08007a10 <__s2b>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	460c      	mov	r4, r1
 8007a16:	4615      	mov	r5, r2
 8007a18:	461f      	mov	r7, r3
 8007a1a:	2209      	movs	r2, #9
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	4606      	mov	r6, r0
 8007a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a24:	2100      	movs	r1, #0
 8007a26:	2201      	movs	r2, #1
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	db09      	blt.n	8007a40 <__s2b+0x30>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f7ff ff47 	bl	80078c0 <_Balloc>
 8007a32:	b940      	cbnz	r0, 8007a46 <__s2b+0x36>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <__s2b+0x8c>)
 8007a38:	4819      	ldr	r0, [pc, #100]	; (8007aa0 <__s2b+0x90>)
 8007a3a:	21d3      	movs	r1, #211	; 0xd3
 8007a3c:	f7ff fab8 	bl	8006fb0 <__assert_func>
 8007a40:	0052      	lsls	r2, r2, #1
 8007a42:	3101      	adds	r1, #1
 8007a44:	e7f0      	b.n	8007a28 <__s2b+0x18>
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	6143      	str	r3, [r0, #20]
 8007a4a:	2d09      	cmp	r5, #9
 8007a4c:	f04f 0301 	mov.w	r3, #1
 8007a50:	6103      	str	r3, [r0, #16]
 8007a52:	dd16      	ble.n	8007a82 <__s2b+0x72>
 8007a54:	f104 0909 	add.w	r9, r4, #9
 8007a58:	46c8      	mov	r8, r9
 8007a5a:	442c      	add	r4, r5
 8007a5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a60:	4601      	mov	r1, r0
 8007a62:	3b30      	subs	r3, #48	; 0x30
 8007a64:	220a      	movs	r2, #10
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ff8c 	bl	8007984 <__multadd>
 8007a6c:	45a0      	cmp	r8, r4
 8007a6e:	d1f5      	bne.n	8007a5c <__s2b+0x4c>
 8007a70:	f1a5 0408 	sub.w	r4, r5, #8
 8007a74:	444c      	add	r4, r9
 8007a76:	1b2d      	subs	r5, r5, r4
 8007a78:	1963      	adds	r3, r4, r5
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	db04      	blt.n	8007a88 <__s2b+0x78>
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	340a      	adds	r4, #10
 8007a84:	2509      	movs	r5, #9
 8007a86:	e7f6      	b.n	8007a76 <__s2b+0x66>
 8007a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	3b30      	subs	r3, #48	; 0x30
 8007a90:	220a      	movs	r2, #10
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ff76 	bl	8007984 <__multadd>
 8007a98:	e7ee      	b.n	8007a78 <__s2b+0x68>
 8007a9a:	bf00      	nop
 8007a9c:	08009e3d 	.word	0x08009e3d
 8007aa0:	08009eae 	.word	0x08009eae

08007aa4 <__hi0bits>:
 8007aa4:	0c03      	lsrs	r3, r0, #16
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	b9d3      	cbnz	r3, 8007ae0 <__hi0bits+0x3c>
 8007aaa:	0400      	lsls	r0, r0, #16
 8007aac:	2310      	movs	r3, #16
 8007aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ab2:	bf04      	itt	eq
 8007ab4:	0200      	lsleq	r0, r0, #8
 8007ab6:	3308      	addeq	r3, #8
 8007ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007abc:	bf04      	itt	eq
 8007abe:	0100      	lsleq	r0, r0, #4
 8007ac0:	3304      	addeq	r3, #4
 8007ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ac6:	bf04      	itt	eq
 8007ac8:	0080      	lsleq	r0, r0, #2
 8007aca:	3302      	addeq	r3, #2
 8007acc:	2800      	cmp	r0, #0
 8007ace:	db05      	blt.n	8007adc <__hi0bits+0x38>
 8007ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ad4:	f103 0301 	add.w	r3, r3, #1
 8007ad8:	bf08      	it	eq
 8007ada:	2320      	moveq	r3, #32
 8007adc:	4618      	mov	r0, r3
 8007ade:	4770      	bx	lr
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e7e4      	b.n	8007aae <__hi0bits+0xa>

08007ae4 <__lo0bits>:
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	f013 0207 	ands.w	r2, r3, #7
 8007aea:	d00c      	beq.n	8007b06 <__lo0bits+0x22>
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	d422      	bmi.n	8007b36 <__lo0bits+0x52>
 8007af0:	079a      	lsls	r2, r3, #30
 8007af2:	bf49      	itett	mi
 8007af4:	085b      	lsrmi	r3, r3, #1
 8007af6:	089b      	lsrpl	r3, r3, #2
 8007af8:	6003      	strmi	r3, [r0, #0]
 8007afa:	2201      	movmi	r2, #1
 8007afc:	bf5c      	itt	pl
 8007afe:	6003      	strpl	r3, [r0, #0]
 8007b00:	2202      	movpl	r2, #2
 8007b02:	4610      	mov	r0, r2
 8007b04:	4770      	bx	lr
 8007b06:	b299      	uxth	r1, r3
 8007b08:	b909      	cbnz	r1, 8007b0e <__lo0bits+0x2a>
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	b2d9      	uxtb	r1, r3
 8007b10:	b909      	cbnz	r1, 8007b16 <__lo0bits+0x32>
 8007b12:	3208      	adds	r2, #8
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	0719      	lsls	r1, r3, #28
 8007b18:	bf04      	itt	eq
 8007b1a:	091b      	lsreq	r3, r3, #4
 8007b1c:	3204      	addeq	r2, #4
 8007b1e:	0799      	lsls	r1, r3, #30
 8007b20:	bf04      	itt	eq
 8007b22:	089b      	lsreq	r3, r3, #2
 8007b24:	3202      	addeq	r2, #2
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d403      	bmi.n	8007b32 <__lo0bits+0x4e>
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	f102 0201 	add.w	r2, r2, #1
 8007b30:	d003      	beq.n	8007b3a <__lo0bits+0x56>
 8007b32:	6003      	str	r3, [r0, #0]
 8007b34:	e7e5      	b.n	8007b02 <__lo0bits+0x1e>
 8007b36:	2200      	movs	r2, #0
 8007b38:	e7e3      	b.n	8007b02 <__lo0bits+0x1e>
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	e7e1      	b.n	8007b02 <__lo0bits+0x1e>
	...

08007b40 <__i2b>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	460c      	mov	r4, r1
 8007b44:	2101      	movs	r1, #1
 8007b46:	f7ff febb 	bl	80078c0 <_Balloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	b928      	cbnz	r0, 8007b5a <__i2b+0x1a>
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <__i2b+0x24>)
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <__i2b+0x28>)
 8007b52:	f240 1145 	movw	r1, #325	; 0x145
 8007b56:	f7ff fa2b 	bl	8006fb0 <__assert_func>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	6144      	str	r4, [r0, #20]
 8007b5e:	6103      	str	r3, [r0, #16]
 8007b60:	bd10      	pop	{r4, pc}
 8007b62:	bf00      	nop
 8007b64:	08009e3d 	.word	0x08009e3d
 8007b68:	08009eae 	.word	0x08009eae

08007b6c <__multiply>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	4691      	mov	r9, r2
 8007b72:	690a      	ldr	r2, [r1, #16]
 8007b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	460b      	movlt	r3, r1
 8007b7e:	460c      	mov	r4, r1
 8007b80:	bfbc      	itt	lt
 8007b82:	464c      	movlt	r4, r9
 8007b84:	4699      	movlt	r9, r3
 8007b86:	6927      	ldr	r7, [r4, #16]
 8007b88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b8c:	68a3      	ldr	r3, [r4, #8]
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	eb07 060a 	add.w	r6, r7, sl
 8007b94:	42b3      	cmp	r3, r6
 8007b96:	b085      	sub	sp, #20
 8007b98:	bfb8      	it	lt
 8007b9a:	3101      	addlt	r1, #1
 8007b9c:	f7ff fe90 	bl	80078c0 <_Balloc>
 8007ba0:	b930      	cbnz	r0, 8007bb0 <__multiply+0x44>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <__multiply+0x14c>)
 8007ba6:	4845      	ldr	r0, [pc, #276]	; (8007cbc <__multiply+0x150>)
 8007ba8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bac:	f7ff fa00 	bl	8006fb0 <__assert_func>
 8007bb0:	f100 0514 	add.w	r5, r0, #20
 8007bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bb8:	462b      	mov	r3, r5
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4543      	cmp	r3, r8
 8007bbe:	d321      	bcc.n	8007c04 <__multiply+0x98>
 8007bc0:	f104 0314 	add.w	r3, r4, #20
 8007bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bc8:	f109 0314 	add.w	r3, r9, #20
 8007bcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bd0:	9202      	str	r2, [sp, #8]
 8007bd2:	1b3a      	subs	r2, r7, r4
 8007bd4:	3a15      	subs	r2, #21
 8007bd6:	f022 0203 	bic.w	r2, r2, #3
 8007bda:	3204      	adds	r2, #4
 8007bdc:	f104 0115 	add.w	r1, r4, #21
 8007be0:	428f      	cmp	r7, r1
 8007be2:	bf38      	it	cc
 8007be4:	2204      	movcc	r2, #4
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9a02      	ldr	r2, [sp, #8]
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d80c      	bhi.n	8007c0a <__multiply+0x9e>
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	dd03      	ble.n	8007bfc <__multiply+0x90>
 8007bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d05b      	beq.n	8007cb4 <__multiply+0x148>
 8007bfc:	6106      	str	r6, [r0, #16]
 8007bfe:	b005      	add	sp, #20
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	f843 2b04 	str.w	r2, [r3], #4
 8007c08:	e7d8      	b.n	8007bbc <__multiply+0x50>
 8007c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c0e:	f1ba 0f00 	cmp.w	sl, #0
 8007c12:	d024      	beq.n	8007c5e <__multiply+0xf2>
 8007c14:	f104 0e14 	add.w	lr, r4, #20
 8007c18:	46a9      	mov	r9, r5
 8007c1a:	f04f 0c00 	mov.w	ip, #0
 8007c1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c22:	f8d9 1000 	ldr.w	r1, [r9]
 8007c26:	fa1f fb82 	uxth.w	fp, r2
 8007c2a:	b289      	uxth	r1, r1
 8007c2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c34:	f8d9 2000 	ldr.w	r2, [r9]
 8007c38:	4461      	add	r1, ip
 8007c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c46:	b289      	uxth	r1, r1
 8007c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c4c:	4577      	cmp	r7, lr
 8007c4e:	f849 1b04 	str.w	r1, [r9], #4
 8007c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c56:	d8e2      	bhi.n	8007c1e <__multiply+0xb2>
 8007c58:	9a01      	ldr	r2, [sp, #4]
 8007c5a:	f845 c002 	str.w	ip, [r5, r2]
 8007c5e:	9a03      	ldr	r2, [sp, #12]
 8007c60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c64:	3304      	adds	r3, #4
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	d021      	beq.n	8007cb0 <__multiply+0x144>
 8007c6c:	6829      	ldr	r1, [r5, #0]
 8007c6e:	f104 0c14 	add.w	ip, r4, #20
 8007c72:	46ae      	mov	lr, r5
 8007c74:	f04f 0a00 	mov.w	sl, #0
 8007c78:	f8bc b000 	ldrh.w	fp, [ip]
 8007c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c80:	fb09 220b 	mla	r2, r9, fp, r2
 8007c84:	4452      	add	r2, sl
 8007c86:	b289      	uxth	r1, r1
 8007c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c8c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c98:	f8be 1000 	ldrh.w	r1, [lr]
 8007c9c:	fb09 110a 	mla	r1, r9, sl, r1
 8007ca0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ca4:	4567      	cmp	r7, ip
 8007ca6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007caa:	d8e5      	bhi.n	8007c78 <__multiply+0x10c>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	50a9      	str	r1, [r5, r2]
 8007cb0:	3504      	adds	r5, #4
 8007cb2:	e799      	b.n	8007be8 <__multiply+0x7c>
 8007cb4:	3e01      	subs	r6, #1
 8007cb6:	e79b      	b.n	8007bf0 <__multiply+0x84>
 8007cb8:	08009e3d 	.word	0x08009e3d
 8007cbc:	08009eae 	.word	0x08009eae

08007cc0 <__pow5mult>:
 8007cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	f012 0203 	ands.w	r2, r2, #3
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	d007      	beq.n	8007ce0 <__pow5mult+0x20>
 8007cd0:	4c25      	ldr	r4, [pc, #148]	; (8007d68 <__pow5mult+0xa8>)
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cda:	f7ff fe53 	bl	8007984 <__multadd>
 8007cde:	4607      	mov	r7, r0
 8007ce0:	10ad      	asrs	r5, r5, #2
 8007ce2:	d03d      	beq.n	8007d60 <__pow5mult+0xa0>
 8007ce4:	69f4      	ldr	r4, [r6, #28]
 8007ce6:	b97c      	cbnz	r4, 8007d08 <__pow5mult+0x48>
 8007ce8:	2010      	movs	r0, #16
 8007cea:	f7ff fd23 	bl	8007734 <malloc>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	61f0      	str	r0, [r6, #28]
 8007cf2:	b928      	cbnz	r0, 8007d00 <__pow5mult+0x40>
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <__pow5mult+0xac>)
 8007cf6:	481e      	ldr	r0, [pc, #120]	; (8007d70 <__pow5mult+0xb0>)
 8007cf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007cfc:	f7ff f958 	bl	8006fb0 <__assert_func>
 8007d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d04:	6004      	str	r4, [r0, #0]
 8007d06:	60c4      	str	r4, [r0, #12]
 8007d08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d10:	b94c      	cbnz	r4, 8007d26 <__pow5mult+0x66>
 8007d12:	f240 2171 	movw	r1, #625	; 0x271
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ff12 	bl	8007b40 <__i2b>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d22:	4604      	mov	r4, r0
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	f04f 0900 	mov.w	r9, #0
 8007d2a:	07eb      	lsls	r3, r5, #31
 8007d2c:	d50a      	bpl.n	8007d44 <__pow5mult+0x84>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4622      	mov	r2, r4
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ff1a 	bl	8007b6c <__multiply>
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fdff 	bl	8007940 <_Bfree>
 8007d42:	4647      	mov	r7, r8
 8007d44:	106d      	asrs	r5, r5, #1
 8007d46:	d00b      	beq.n	8007d60 <__pow5mult+0xa0>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	b938      	cbnz	r0, 8007d5c <__pow5mult+0x9c>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff0b 	bl	8007b6c <__multiply>
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	f8c0 9000 	str.w	r9, [r0]
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	e7e4      	b.n	8007d2a <__pow5mult+0x6a>
 8007d60:	4638      	mov	r0, r7
 8007d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d66:	bf00      	nop
 8007d68:	08009ff8 	.word	0x08009ff8
 8007d6c:	08009d88 	.word	0x08009d88
 8007d70:	08009eae 	.word	0x08009eae

08007d74 <__lshift>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6849      	ldr	r1, [r1, #4]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	4607      	mov	r7, r0
 8007d86:	4691      	mov	r9, r2
 8007d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d8c:	f108 0601 	add.w	r6, r8, #1
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	db0b      	blt.n	8007dac <__lshift+0x38>
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff fd93 	bl	80078c0 <_Balloc>
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	b948      	cbnz	r0, 8007db2 <__lshift+0x3e>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <__lshift+0xd0>)
 8007da2:	4829      	ldr	r0, [pc, #164]	; (8007e48 <__lshift+0xd4>)
 8007da4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007da8:	f7ff f902 	bl	8006fb0 <__assert_func>
 8007dac:	3101      	adds	r1, #1
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	e7ee      	b.n	8007d90 <__lshift+0x1c>
 8007db2:	2300      	movs	r3, #0
 8007db4:	f100 0114 	add.w	r1, r0, #20
 8007db8:	f100 0210 	add.w	r2, r0, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	4553      	cmp	r3, sl
 8007dc0:	db33      	blt.n	8007e2a <__lshift+0xb6>
 8007dc2:	6920      	ldr	r0, [r4, #16]
 8007dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dc8:	f104 0314 	add.w	r3, r4, #20
 8007dcc:	f019 091f 	ands.w	r9, r9, #31
 8007dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dd8:	d02b      	beq.n	8007e32 <__lshift+0xbe>
 8007dda:	f1c9 0e20 	rsb	lr, r9, #32
 8007dde:	468a      	mov	sl, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	fa00 f009 	lsl.w	r0, r0, r9
 8007de8:	4310      	orrs	r0, r2
 8007dea:	f84a 0b04 	str.w	r0, [sl], #4
 8007dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df2:	459c      	cmp	ip, r3
 8007df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007df8:	d8f3      	bhi.n	8007de2 <__lshift+0x6e>
 8007dfa:	ebac 0304 	sub.w	r3, ip, r4
 8007dfe:	3b15      	subs	r3, #21
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3304      	adds	r3, #4
 8007e06:	f104 0015 	add.w	r0, r4, #21
 8007e0a:	4584      	cmp	ip, r0
 8007e0c:	bf38      	it	cc
 8007e0e:	2304      	movcc	r3, #4
 8007e10:	50ca      	str	r2, [r1, r3]
 8007e12:	b10a      	cbz	r2, 8007e18 <__lshift+0xa4>
 8007e14:	f108 0602 	add.w	r6, r8, #2
 8007e18:	3e01      	subs	r6, #1
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	612e      	str	r6, [r5, #16]
 8007e1e:	4621      	mov	r1, r4
 8007e20:	f7ff fd8e 	bl	8007940 <_Bfree>
 8007e24:	4628      	mov	r0, r5
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e2e:	3301      	adds	r3, #1
 8007e30:	e7c5      	b.n	8007dbe <__lshift+0x4a>
 8007e32:	3904      	subs	r1, #4
 8007e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e3c:	459c      	cmp	ip, r3
 8007e3e:	d8f9      	bhi.n	8007e34 <__lshift+0xc0>
 8007e40:	e7ea      	b.n	8007e18 <__lshift+0xa4>
 8007e42:	bf00      	nop
 8007e44:	08009e3d 	.word	0x08009e3d
 8007e48:	08009eae 	.word	0x08009eae

08007e4c <__mcmp>:
 8007e4c:	b530      	push	{r4, r5, lr}
 8007e4e:	6902      	ldr	r2, [r0, #16]
 8007e50:	690c      	ldr	r4, [r1, #16]
 8007e52:	1b12      	subs	r2, r2, r4
 8007e54:	d10e      	bne.n	8007e74 <__mcmp+0x28>
 8007e56:	f100 0314 	add.w	r3, r0, #20
 8007e5a:	3114      	adds	r1, #20
 8007e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e6c:	42a5      	cmp	r5, r4
 8007e6e:	d003      	beq.n	8007e78 <__mcmp+0x2c>
 8007e70:	d305      	bcc.n	8007e7e <__mcmp+0x32>
 8007e72:	2201      	movs	r2, #1
 8007e74:	4610      	mov	r0, r2
 8007e76:	bd30      	pop	{r4, r5, pc}
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	d3f3      	bcc.n	8007e64 <__mcmp+0x18>
 8007e7c:	e7fa      	b.n	8007e74 <__mcmp+0x28>
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	e7f7      	b.n	8007e74 <__mcmp+0x28>

08007e84 <__mdiff>:
 8007e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4690      	mov	r8, r2
 8007e92:	f7ff ffdb 	bl	8007e4c <__mcmp>
 8007e96:	1e05      	subs	r5, r0, #0
 8007e98:	d110      	bne.n	8007ebc <__mdiff+0x38>
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff fd0f 	bl	80078c0 <_Balloc>
 8007ea2:	b930      	cbnz	r0, 8007eb2 <__mdiff+0x2e>
 8007ea4:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <__mdiff+0x10c>)
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f240 2137 	movw	r1, #567	; 0x237
 8007eac:	4839      	ldr	r0, [pc, #228]	; (8007f94 <__mdiff+0x110>)
 8007eae:	f7ff f87f 	bl	8006fb0 <__assert_func>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	bfa4      	itt	ge
 8007ebe:	4643      	movge	r3, r8
 8007ec0:	46a0      	movge	r8, r4
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ec8:	bfa6      	itte	ge
 8007eca:	461c      	movge	r4, r3
 8007ecc:	2500      	movge	r5, #0
 8007ece:	2501      	movlt	r5, #1
 8007ed0:	f7ff fcf6 	bl	80078c0 <_Balloc>
 8007ed4:	b920      	cbnz	r0, 8007ee0 <__mdiff+0x5c>
 8007ed6:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__mdiff+0x10c>)
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f240 2145 	movw	r1, #581	; 0x245
 8007ede:	e7e5      	b.n	8007eac <__mdiff+0x28>
 8007ee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ee4:	6926      	ldr	r6, [r4, #16]
 8007ee6:	60c5      	str	r5, [r0, #12]
 8007ee8:	f104 0914 	add.w	r9, r4, #20
 8007eec:	f108 0514 	add.w	r5, r8, #20
 8007ef0:	f100 0e14 	add.w	lr, r0, #20
 8007ef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007efc:	f108 0210 	add.w	r2, r8, #16
 8007f00:	46f2      	mov	sl, lr
 8007f02:	2100      	movs	r1, #0
 8007f04:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f0c:	fa11 f88b 	uxtah	r8, r1, fp
 8007f10:	b299      	uxth	r1, r3
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	eba8 0801 	sub.w	r8, r8, r1
 8007f18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f20:	fa1f f888 	uxth.w	r8, r8
 8007f24:	1419      	asrs	r1, r3, #16
 8007f26:	454e      	cmp	r6, r9
 8007f28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f2c:	f84a 3b04 	str.w	r3, [sl], #4
 8007f30:	d8e8      	bhi.n	8007f04 <__mdiff+0x80>
 8007f32:	1b33      	subs	r3, r6, r4
 8007f34:	3b15      	subs	r3, #21
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	3415      	adds	r4, #21
 8007f3e:	42a6      	cmp	r6, r4
 8007f40:	bf38      	it	cc
 8007f42:	2304      	movcc	r3, #4
 8007f44:	441d      	add	r5, r3
 8007f46:	4473      	add	r3, lr
 8007f48:	469e      	mov	lr, r3
 8007f4a:	462e      	mov	r6, r5
 8007f4c:	4566      	cmp	r6, ip
 8007f4e:	d30e      	bcc.n	8007f6e <__mdiff+0xea>
 8007f50:	f10c 0203 	add.w	r2, ip, #3
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	f022 0203 	bic.w	r2, r2, #3
 8007f5a:	3d03      	subs	r5, #3
 8007f5c:	45ac      	cmp	ip, r5
 8007f5e:	bf38      	it	cc
 8007f60:	2200      	movcc	r2, #0
 8007f62:	4413      	add	r3, r2
 8007f64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f68:	b17a      	cbz	r2, 8007f8a <__mdiff+0x106>
 8007f6a:	6107      	str	r7, [r0, #16]
 8007f6c:	e7a4      	b.n	8007eb8 <__mdiff+0x34>
 8007f6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f72:	fa11 f288 	uxtah	r2, r1, r8
 8007f76:	1414      	asrs	r4, r2, #16
 8007f78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f7c:	b292      	uxth	r2, r2
 8007f7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f82:	f84e 2b04 	str.w	r2, [lr], #4
 8007f86:	1421      	asrs	r1, r4, #16
 8007f88:	e7e0      	b.n	8007f4c <__mdiff+0xc8>
 8007f8a:	3f01      	subs	r7, #1
 8007f8c:	e7ea      	b.n	8007f64 <__mdiff+0xe0>
 8007f8e:	bf00      	nop
 8007f90:	08009e3d 	.word	0x08009e3d
 8007f94:	08009eae 	.word	0x08009eae

08007f98 <__ulp>:
 8007f98:	b082      	sub	sp, #8
 8007f9a:	ed8d 0b00 	vstr	d0, [sp]
 8007f9e:	9a01      	ldr	r2, [sp, #4]
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <__ulp+0x48>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc08      	bgt.n	8007fbe <__ulp+0x26>
 8007fac:	425b      	negs	r3, r3
 8007fae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fb6:	da04      	bge.n	8007fc2 <__ulp+0x2a>
 8007fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fbc:	4113      	asrs	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e008      	b.n	8007fd4 <__ulp+0x3c>
 8007fc2:	f1a2 0314 	sub.w	r3, r2, #20
 8007fc6:	2b1e      	cmp	r3, #30
 8007fc8:	bfda      	itte	le
 8007fca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007fce:	40da      	lsrle	r2, r3
 8007fd0:	2201      	movgt	r2, #1
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	ec41 0b10 	vmov	d0, r0, r1
 8007fdc:	b002      	add	sp, #8
 8007fde:	4770      	bx	lr
 8007fe0:	7ff00000 	.word	0x7ff00000

08007fe4 <__b2d>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	6906      	ldr	r6, [r0, #16]
 8007fea:	f100 0814 	add.w	r8, r0, #20
 8007fee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007ff2:	1f37      	subs	r7, r6, #4
 8007ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7ff fd53 	bl	8007aa4 <__hi0bits>
 8007ffe:	f1c0 0320 	rsb	r3, r0, #32
 8008002:	280a      	cmp	r0, #10
 8008004:	600b      	str	r3, [r1, #0]
 8008006:	491b      	ldr	r1, [pc, #108]	; (8008074 <__b2d+0x90>)
 8008008:	dc15      	bgt.n	8008036 <__b2d+0x52>
 800800a:	f1c0 0c0b 	rsb	ip, r0, #11
 800800e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008012:	45b8      	cmp	r8, r7
 8008014:	ea43 0501 	orr.w	r5, r3, r1
 8008018:	bf34      	ite	cc
 800801a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800801e:	2300      	movcs	r3, #0
 8008020:	3015      	adds	r0, #21
 8008022:	fa02 f000 	lsl.w	r0, r2, r0
 8008026:	fa23 f30c 	lsr.w	r3, r3, ip
 800802a:	4303      	orrs	r3, r0
 800802c:	461c      	mov	r4, r3
 800802e:	ec45 4b10 	vmov	d0, r4, r5
 8008032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008036:	45b8      	cmp	r8, r7
 8008038:	bf3a      	itte	cc
 800803a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800803e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008042:	2300      	movcs	r3, #0
 8008044:	380b      	subs	r0, #11
 8008046:	d012      	beq.n	800806e <__b2d+0x8a>
 8008048:	f1c0 0120 	rsb	r1, r0, #32
 800804c:	fa23 f401 	lsr.w	r4, r3, r1
 8008050:	4082      	lsls	r2, r0
 8008052:	4322      	orrs	r2, r4
 8008054:	4547      	cmp	r7, r8
 8008056:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800805a:	bf8c      	ite	hi
 800805c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008060:	2200      	movls	r2, #0
 8008062:	4083      	lsls	r3, r0
 8008064:	40ca      	lsrs	r2, r1
 8008066:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800806a:	4313      	orrs	r3, r2
 800806c:	e7de      	b.n	800802c <__b2d+0x48>
 800806e:	ea42 0501 	orr.w	r5, r2, r1
 8008072:	e7db      	b.n	800802c <__b2d+0x48>
 8008074:	3ff00000 	.word	0x3ff00000

08008078 <__d2b>:
 8008078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800807c:	460f      	mov	r7, r1
 800807e:	2101      	movs	r1, #1
 8008080:	ec59 8b10 	vmov	r8, r9, d0
 8008084:	4616      	mov	r6, r2
 8008086:	f7ff fc1b 	bl	80078c0 <_Balloc>
 800808a:	4604      	mov	r4, r0
 800808c:	b930      	cbnz	r0, 800809c <__d2b+0x24>
 800808e:	4602      	mov	r2, r0
 8008090:	4b24      	ldr	r3, [pc, #144]	; (8008124 <__d2b+0xac>)
 8008092:	4825      	ldr	r0, [pc, #148]	; (8008128 <__d2b+0xb0>)
 8008094:	f240 310f 	movw	r1, #783	; 0x30f
 8008098:	f7fe ff8a 	bl	8006fb0 <__assert_func>
 800809c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080a4:	bb2d      	cbnz	r5, 80080f2 <__d2b+0x7a>
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	f1b8 0300 	subs.w	r3, r8, #0
 80080ac:	d026      	beq.n	80080fc <__d2b+0x84>
 80080ae:	4668      	mov	r0, sp
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	f7ff fd17 	bl	8007ae4 <__lo0bits>
 80080b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080ba:	b1e8      	cbz	r0, 80080f8 <__d2b+0x80>
 80080bc:	f1c0 0320 	rsb	r3, r0, #32
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	430b      	orrs	r3, r1
 80080c6:	40c2      	lsrs	r2, r0
 80080c8:	6163      	str	r3, [r4, #20]
 80080ca:	9201      	str	r2, [sp, #4]
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	61a3      	str	r3, [r4, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bf14      	ite	ne
 80080d4:	2202      	movne	r2, #2
 80080d6:	2201      	moveq	r2, #1
 80080d8:	6122      	str	r2, [r4, #16]
 80080da:	b1bd      	cbz	r5, 800810c <__d2b+0x94>
 80080dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080e0:	4405      	add	r5, r0
 80080e2:	603d      	str	r5, [r7, #0]
 80080e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080e8:	6030      	str	r0, [r6, #0]
 80080ea:	4620      	mov	r0, r4
 80080ec:	b003      	add	sp, #12
 80080ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080f6:	e7d6      	b.n	80080a6 <__d2b+0x2e>
 80080f8:	6161      	str	r1, [r4, #20]
 80080fa:	e7e7      	b.n	80080cc <__d2b+0x54>
 80080fc:	a801      	add	r0, sp, #4
 80080fe:	f7ff fcf1 	bl	8007ae4 <__lo0bits>
 8008102:	9b01      	ldr	r3, [sp, #4]
 8008104:	6163      	str	r3, [r4, #20]
 8008106:	3020      	adds	r0, #32
 8008108:	2201      	movs	r2, #1
 800810a:	e7e5      	b.n	80080d8 <__d2b+0x60>
 800810c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008114:	6038      	str	r0, [r7, #0]
 8008116:	6918      	ldr	r0, [r3, #16]
 8008118:	f7ff fcc4 	bl	8007aa4 <__hi0bits>
 800811c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008120:	e7e2      	b.n	80080e8 <__d2b+0x70>
 8008122:	bf00      	nop
 8008124:	08009e3d 	.word	0x08009e3d
 8008128:	08009eae 	.word	0x08009eae

0800812c <__ratio>:
 800812c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	4688      	mov	r8, r1
 8008132:	4669      	mov	r1, sp
 8008134:	4681      	mov	r9, r0
 8008136:	f7ff ff55 	bl	8007fe4 <__b2d>
 800813a:	a901      	add	r1, sp, #4
 800813c:	4640      	mov	r0, r8
 800813e:	ec55 4b10 	vmov	r4, r5, d0
 8008142:	f7ff ff4f 	bl	8007fe4 <__b2d>
 8008146:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800814a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800814e:	eba3 0c02 	sub.w	ip, r3, r2
 8008152:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800815c:	ec51 0b10 	vmov	r0, r1, d0
 8008160:	2b00      	cmp	r3, #0
 8008162:	bfd6      	itet	le
 8008164:	460a      	movle	r2, r1
 8008166:	462a      	movgt	r2, r5
 8008168:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800816c:	468b      	mov	fp, r1
 800816e:	462f      	mov	r7, r5
 8008170:	bfd4      	ite	le
 8008172:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008176:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800817a:	4620      	mov	r0, r4
 800817c:	ee10 2a10 	vmov	r2, s0
 8008180:	465b      	mov	r3, fp
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 fb62 	bl	800084c <__aeabi_ddiv>
 8008188:	ec41 0b10 	vmov	d0, r0, r1
 800818c:	b003      	add	sp, #12
 800818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008192 <__copybits>:
 8008192:	3901      	subs	r1, #1
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	1149      	asrs	r1, r1, #5
 8008198:	6914      	ldr	r4, [r2, #16]
 800819a:	3101      	adds	r1, #1
 800819c:	f102 0314 	add.w	r3, r2, #20
 80081a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081a8:	1f05      	subs	r5, r0, #4
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	d30c      	bcc.n	80081c8 <__copybits+0x36>
 80081ae:	1aa3      	subs	r3, r4, r2
 80081b0:	3b11      	subs	r3, #17
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	3211      	adds	r2, #17
 80081b8:	42a2      	cmp	r2, r4
 80081ba:	bf88      	it	hi
 80081bc:	2300      	movhi	r3, #0
 80081be:	4418      	add	r0, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	4288      	cmp	r0, r1
 80081c4:	d305      	bcc.n	80081d2 <__copybits+0x40>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80081cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80081d0:	e7eb      	b.n	80081aa <__copybits+0x18>
 80081d2:	f840 3b04 	str.w	r3, [r0], #4
 80081d6:	e7f4      	b.n	80081c2 <__copybits+0x30>

080081d8 <__any_on>:
 80081d8:	f100 0214 	add.w	r2, r0, #20
 80081dc:	6900      	ldr	r0, [r0, #16]
 80081de:	114b      	asrs	r3, r1, #5
 80081e0:	4298      	cmp	r0, r3
 80081e2:	b510      	push	{r4, lr}
 80081e4:	db11      	blt.n	800820a <__any_on+0x32>
 80081e6:	dd0a      	ble.n	80081fe <__any_on+0x26>
 80081e8:	f011 011f 	ands.w	r1, r1, #31
 80081ec:	d007      	beq.n	80081fe <__any_on+0x26>
 80081ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081f2:	fa24 f001 	lsr.w	r0, r4, r1
 80081f6:	fa00 f101 	lsl.w	r1, r0, r1
 80081fa:	428c      	cmp	r4, r1
 80081fc:	d10b      	bne.n	8008216 <__any_on+0x3e>
 80081fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008202:	4293      	cmp	r3, r2
 8008204:	d803      	bhi.n	800820e <__any_on+0x36>
 8008206:	2000      	movs	r0, #0
 8008208:	bd10      	pop	{r4, pc}
 800820a:	4603      	mov	r3, r0
 800820c:	e7f7      	b.n	80081fe <__any_on+0x26>
 800820e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008212:	2900      	cmp	r1, #0
 8008214:	d0f5      	beq.n	8008202 <__any_on+0x2a>
 8008216:	2001      	movs	r0, #1
 8008218:	e7f6      	b.n	8008208 <__any_on+0x30>

0800821a <__ascii_wctomb>:
 800821a:	b149      	cbz	r1, 8008230 <__ascii_wctomb+0x16>
 800821c:	2aff      	cmp	r2, #255	; 0xff
 800821e:	bf85      	ittet	hi
 8008220:	238a      	movhi	r3, #138	; 0x8a
 8008222:	6003      	strhi	r3, [r0, #0]
 8008224:	700a      	strbls	r2, [r1, #0]
 8008226:	f04f 30ff 	movhi.w	r0, #4294967295
 800822a:	bf98      	it	ls
 800822c:	2001      	movls	r0, #1
 800822e:	4770      	bx	lr
 8008230:	4608      	mov	r0, r1
 8008232:	4770      	bx	lr

08008234 <__ssputs_r>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	688e      	ldr	r6, [r1, #8]
 800823a:	461f      	mov	r7, r3
 800823c:	42be      	cmp	r6, r7
 800823e:	680b      	ldr	r3, [r1, #0]
 8008240:	4682      	mov	sl, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4690      	mov	r8, r2
 8008246:	d82c      	bhi.n	80082a2 <__ssputs_r+0x6e>
 8008248:	898a      	ldrh	r2, [r1, #12]
 800824a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800824e:	d026      	beq.n	800829e <__ssputs_r+0x6a>
 8008250:	6965      	ldr	r5, [r4, #20]
 8008252:	6909      	ldr	r1, [r1, #16]
 8008254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008258:	eba3 0901 	sub.w	r9, r3, r1
 800825c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008260:	1c7b      	adds	r3, r7, #1
 8008262:	444b      	add	r3, r9
 8008264:	106d      	asrs	r5, r5, #1
 8008266:	429d      	cmp	r5, r3
 8008268:	bf38      	it	cc
 800826a:	461d      	movcc	r5, r3
 800826c:	0553      	lsls	r3, r2, #21
 800826e:	d527      	bpl.n	80082c0 <__ssputs_r+0x8c>
 8008270:	4629      	mov	r1, r5
 8008272:	f7ff fa87 	bl	8007784 <_malloc_r>
 8008276:	4606      	mov	r6, r0
 8008278:	b360      	cbz	r0, 80082d4 <__ssputs_r+0xa0>
 800827a:	6921      	ldr	r1, [r4, #16]
 800827c:	464a      	mov	r2, r9
 800827e:	f7fe fe81 	bl	8006f84 <memcpy>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	6126      	str	r6, [r4, #16]
 8008290:	6165      	str	r5, [r4, #20]
 8008292:	444e      	add	r6, r9
 8008294:	eba5 0509 	sub.w	r5, r5, r9
 8008298:	6026      	str	r6, [r4, #0]
 800829a:	60a5      	str	r5, [r4, #8]
 800829c:	463e      	mov	r6, r7
 800829e:	42be      	cmp	r6, r7
 80082a0:	d900      	bls.n	80082a4 <__ssputs_r+0x70>
 80082a2:	463e      	mov	r6, r7
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	4632      	mov	r2, r6
 80082a8:	4641      	mov	r1, r8
 80082aa:	f000 fb6b 	bl	8008984 <memmove>
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	1b9b      	subs	r3, r3, r6
 80082b2:	60a3      	str	r3, [r4, #8]
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	4433      	add	r3, r6
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	2000      	movs	r0, #0
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	462a      	mov	r2, r5
 80082c2:	f000 fba6 	bl	8008a12 <_realloc_r>
 80082c6:	4606      	mov	r6, r0
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d1e0      	bne.n	800828e <__ssputs_r+0x5a>
 80082cc:	6921      	ldr	r1, [r4, #16]
 80082ce:	4650      	mov	r0, sl
 80082d0:	f7fe fe8c 	bl	8006fec <_free_r>
 80082d4:	230c      	movs	r3, #12
 80082d6:	f8ca 3000 	str.w	r3, [sl]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295
 80082e6:	e7e9      	b.n	80082bc <__ssputs_r+0x88>

080082e8 <_svfiprintf_r>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	4698      	mov	r8, r3
 80082ee:	898b      	ldrh	r3, [r1, #12]
 80082f0:	061b      	lsls	r3, r3, #24
 80082f2:	b09d      	sub	sp, #116	; 0x74
 80082f4:	4607      	mov	r7, r0
 80082f6:	460d      	mov	r5, r1
 80082f8:	4614      	mov	r4, r2
 80082fa:	d50e      	bpl.n	800831a <_svfiprintf_r+0x32>
 80082fc:	690b      	ldr	r3, [r1, #16]
 80082fe:	b963      	cbnz	r3, 800831a <_svfiprintf_r+0x32>
 8008300:	2140      	movs	r1, #64	; 0x40
 8008302:	f7ff fa3f 	bl	8007784 <_malloc_r>
 8008306:	6028      	str	r0, [r5, #0]
 8008308:	6128      	str	r0, [r5, #16]
 800830a:	b920      	cbnz	r0, 8008316 <_svfiprintf_r+0x2e>
 800830c:	230c      	movs	r3, #12
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e0d0      	b.n	80084b8 <_svfiprintf_r+0x1d0>
 8008316:	2340      	movs	r3, #64	; 0x40
 8008318:	616b      	str	r3, [r5, #20]
 800831a:	2300      	movs	r3, #0
 800831c:	9309      	str	r3, [sp, #36]	; 0x24
 800831e:	2320      	movs	r3, #32
 8008320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008324:	f8cd 800c 	str.w	r8, [sp, #12]
 8008328:	2330      	movs	r3, #48	; 0x30
 800832a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084d0 <_svfiprintf_r+0x1e8>
 800832e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008332:	f04f 0901 	mov.w	r9, #1
 8008336:	4623      	mov	r3, r4
 8008338:	469a      	mov	sl, r3
 800833a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833e:	b10a      	cbz	r2, 8008344 <_svfiprintf_r+0x5c>
 8008340:	2a25      	cmp	r2, #37	; 0x25
 8008342:	d1f9      	bne.n	8008338 <_svfiprintf_r+0x50>
 8008344:	ebba 0b04 	subs.w	fp, sl, r4
 8008348:	d00b      	beq.n	8008362 <_svfiprintf_r+0x7a>
 800834a:	465b      	mov	r3, fp
 800834c:	4622      	mov	r2, r4
 800834e:	4629      	mov	r1, r5
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ff6f 	bl	8008234 <__ssputs_r>
 8008356:	3001      	adds	r0, #1
 8008358:	f000 80a9 	beq.w	80084ae <_svfiprintf_r+0x1c6>
 800835c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835e:	445a      	add	r2, fp
 8008360:	9209      	str	r2, [sp, #36]	; 0x24
 8008362:	f89a 3000 	ldrb.w	r3, [sl]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80a1 	beq.w	80084ae <_svfiprintf_r+0x1c6>
 800836c:	2300      	movs	r3, #0
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008376:	f10a 0a01 	add.w	sl, sl, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008382:	931a      	str	r3, [sp, #104]	; 0x68
 8008384:	4654      	mov	r4, sl
 8008386:	2205      	movs	r2, #5
 8008388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838c:	4850      	ldr	r0, [pc, #320]	; (80084d0 <_svfiprintf_r+0x1e8>)
 800838e:	f7f7 ff27 	bl	80001e0 <memchr>
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	b9d8      	cbnz	r0, 80083ce <_svfiprintf_r+0xe6>
 8008396:	06d0      	lsls	r0, r2, #27
 8008398:	bf44      	itt	mi
 800839a:	2320      	movmi	r3, #32
 800839c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a0:	0711      	lsls	r1, r2, #28
 80083a2:	bf44      	itt	mi
 80083a4:	232b      	movmi	r3, #43	; 0x2b
 80083a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083aa:	f89a 3000 	ldrb.w	r3, [sl]
 80083ae:	2b2a      	cmp	r3, #42	; 0x2a
 80083b0:	d015      	beq.n	80083de <_svfiprintf_r+0xf6>
 80083b2:	9a07      	ldr	r2, [sp, #28]
 80083b4:	4654      	mov	r4, sl
 80083b6:	2000      	movs	r0, #0
 80083b8:	f04f 0c0a 	mov.w	ip, #10
 80083bc:	4621      	mov	r1, r4
 80083be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c2:	3b30      	subs	r3, #48	; 0x30
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d94d      	bls.n	8008464 <_svfiprintf_r+0x17c>
 80083c8:	b1b0      	cbz	r0, 80083f8 <_svfiprintf_r+0x110>
 80083ca:	9207      	str	r2, [sp, #28]
 80083cc:	e014      	b.n	80083f8 <_svfiprintf_r+0x110>
 80083ce:	eba0 0308 	sub.w	r3, r0, r8
 80083d2:	fa09 f303 	lsl.w	r3, r9, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	46a2      	mov	sl, r4
 80083dc:	e7d2      	b.n	8008384 <_svfiprintf_r+0x9c>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	1d19      	adds	r1, r3, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	9103      	str	r1, [sp, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfbb      	ittet	lt
 80083ea:	425b      	neglt	r3, r3
 80083ec:	f042 0202 	orrlt.w	r2, r2, #2
 80083f0:	9307      	strge	r3, [sp, #28]
 80083f2:	9307      	strlt	r3, [sp, #28]
 80083f4:	bfb8      	it	lt
 80083f6:	9204      	strlt	r2, [sp, #16]
 80083f8:	7823      	ldrb	r3, [r4, #0]
 80083fa:	2b2e      	cmp	r3, #46	; 0x2e
 80083fc:	d10c      	bne.n	8008418 <_svfiprintf_r+0x130>
 80083fe:	7863      	ldrb	r3, [r4, #1]
 8008400:	2b2a      	cmp	r3, #42	; 0x2a
 8008402:	d134      	bne.n	800846e <_svfiprintf_r+0x186>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	9203      	str	r2, [sp, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfb8      	it	lt
 8008410:	f04f 33ff 	movlt.w	r3, #4294967295
 8008414:	3402      	adds	r4, #2
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80084e0 <_svfiprintf_r+0x1f8>
 800841c:	7821      	ldrb	r1, [r4, #0]
 800841e:	2203      	movs	r2, #3
 8008420:	4650      	mov	r0, sl
 8008422:	f7f7 fedd 	bl	80001e0 <memchr>
 8008426:	b138      	cbz	r0, 8008438 <_svfiprintf_r+0x150>
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	eba0 000a 	sub.w	r0, r0, sl
 800842e:	2240      	movs	r2, #64	; 0x40
 8008430:	4082      	lsls	r2, r0
 8008432:	4313      	orrs	r3, r2
 8008434:	3401      	adds	r4, #1
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843c:	4825      	ldr	r0, [pc, #148]	; (80084d4 <_svfiprintf_r+0x1ec>)
 800843e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008442:	2206      	movs	r2, #6
 8008444:	f7f7 fecc 	bl	80001e0 <memchr>
 8008448:	2800      	cmp	r0, #0
 800844a:	d038      	beq.n	80084be <_svfiprintf_r+0x1d6>
 800844c:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <_svfiprintf_r+0x1f0>)
 800844e:	bb1b      	cbnz	r3, 8008498 <_svfiprintf_r+0x1b0>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	3307      	adds	r3, #7
 8008454:	f023 0307 	bic.w	r3, r3, #7
 8008458:	3308      	adds	r3, #8
 800845a:	9303      	str	r3, [sp, #12]
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	4433      	add	r3, r6
 8008460:	9309      	str	r3, [sp, #36]	; 0x24
 8008462:	e768      	b.n	8008336 <_svfiprintf_r+0x4e>
 8008464:	fb0c 3202 	mla	r2, ip, r2, r3
 8008468:	460c      	mov	r4, r1
 800846a:	2001      	movs	r0, #1
 800846c:	e7a6      	b.n	80083bc <_svfiprintf_r+0xd4>
 800846e:	2300      	movs	r3, #0
 8008470:	3401      	adds	r4, #1
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	4619      	mov	r1, r3
 8008476:	f04f 0c0a 	mov.w	ip, #10
 800847a:	4620      	mov	r0, r4
 800847c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008480:	3a30      	subs	r2, #48	; 0x30
 8008482:	2a09      	cmp	r2, #9
 8008484:	d903      	bls.n	800848e <_svfiprintf_r+0x1a6>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0c6      	beq.n	8008418 <_svfiprintf_r+0x130>
 800848a:	9105      	str	r1, [sp, #20]
 800848c:	e7c4      	b.n	8008418 <_svfiprintf_r+0x130>
 800848e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008492:	4604      	mov	r4, r0
 8008494:	2301      	movs	r3, #1
 8008496:	e7f0      	b.n	800847a <_svfiprintf_r+0x192>
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	462a      	mov	r2, r5
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <_svfiprintf_r+0x1f4>)
 80084a0:	a904      	add	r1, sp, #16
 80084a2:	4638      	mov	r0, r7
 80084a4:	f3af 8000 	nop.w
 80084a8:	1c42      	adds	r2, r0, #1
 80084aa:	4606      	mov	r6, r0
 80084ac:	d1d6      	bne.n	800845c <_svfiprintf_r+0x174>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	065b      	lsls	r3, r3, #25
 80084b2:	f53f af2d 	bmi.w	8008310 <_svfiprintf_r+0x28>
 80084b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b8:	b01d      	add	sp, #116	; 0x74
 80084ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084be:	ab03      	add	r3, sp, #12
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	462a      	mov	r2, r5
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <_svfiprintf_r+0x1f4>)
 80084c6:	a904      	add	r1, sp, #16
 80084c8:	4638      	mov	r0, r7
 80084ca:	f000 f879 	bl	80085c0 <_printf_i>
 80084ce:	e7eb      	b.n	80084a8 <_svfiprintf_r+0x1c0>
 80084d0:	0800a105 	.word	0x0800a105
 80084d4:	0800a10f 	.word	0x0800a10f
 80084d8:	00000000 	.word	0x00000000
 80084dc:	08008235 	.word	0x08008235
 80084e0:	0800a10b 	.word	0x0800a10b

080084e4 <_printf_common>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	4616      	mov	r6, r2
 80084ea:	4699      	mov	r9, r3
 80084ec:	688a      	ldr	r2, [r1, #8]
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	bfb8      	it	lt
 80084f8:	4613      	movlt	r3, r2
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008500:	4607      	mov	r7, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b10a      	cbz	r2, 800850a <_printf_common+0x26>
 8008506:	3301      	adds	r3, #1
 8008508:	6033      	str	r3, [r6, #0]
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	0699      	lsls	r1, r3, #26
 800850e:	bf42      	ittt	mi
 8008510:	6833      	ldrmi	r3, [r6, #0]
 8008512:	3302      	addmi	r3, #2
 8008514:	6033      	strmi	r3, [r6, #0]
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	f015 0506 	ands.w	r5, r5, #6
 800851c:	d106      	bne.n	800852c <_printf_common+0x48>
 800851e:	f104 0a19 	add.w	sl, r4, #25
 8008522:	68e3      	ldr	r3, [r4, #12]
 8008524:	6832      	ldr	r2, [r6, #0]
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	42ab      	cmp	r3, r5
 800852a:	dc26      	bgt.n	800857a <_printf_common+0x96>
 800852c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008530:	1e13      	subs	r3, r2, #0
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	bf18      	it	ne
 8008536:	2301      	movne	r3, #1
 8008538:	0692      	lsls	r2, r2, #26
 800853a:	d42b      	bmi.n	8008594 <_printf_common+0xb0>
 800853c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d01e      	beq.n	8008588 <_printf_common+0xa4>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	f003 0306 	and.w	r3, r3, #6
 8008552:	2b04      	cmp	r3, #4
 8008554:	bf02      	ittt	eq
 8008556:	68e5      	ldreq	r5, [r4, #12]
 8008558:	6833      	ldreq	r3, [r6, #0]
 800855a:	1aed      	subeq	r5, r5, r3
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	bf0c      	ite	eq
 8008560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008564:	2500      	movne	r5, #0
 8008566:	4293      	cmp	r3, r2
 8008568:	bfc4      	itt	gt
 800856a:	1a9b      	subgt	r3, r3, r2
 800856c:	18ed      	addgt	r5, r5, r3
 800856e:	2600      	movs	r6, #0
 8008570:	341a      	adds	r4, #26
 8008572:	42b5      	cmp	r5, r6
 8008574:	d11a      	bne.n	80085ac <_printf_common+0xc8>
 8008576:	2000      	movs	r0, #0
 8008578:	e008      	b.n	800858c <_printf_common+0xa8>
 800857a:	2301      	movs	r3, #1
 800857c:	4652      	mov	r2, sl
 800857e:	4649      	mov	r1, r9
 8008580:	4638      	mov	r0, r7
 8008582:	47c0      	blx	r8
 8008584:	3001      	adds	r0, #1
 8008586:	d103      	bne.n	8008590 <_printf_common+0xac>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008590:	3501      	adds	r5, #1
 8008592:	e7c6      	b.n	8008522 <_printf_common+0x3e>
 8008594:	18e1      	adds	r1, r4, r3
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	2030      	movs	r0, #48	; 0x30
 800859a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800859e:	4422      	add	r2, r4
 80085a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085a8:	3302      	adds	r3, #2
 80085aa:	e7c7      	b.n	800853c <_printf_common+0x58>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4622      	mov	r2, r4
 80085b0:	4649      	mov	r1, r9
 80085b2:	4638      	mov	r0, r7
 80085b4:	47c0      	blx	r8
 80085b6:	3001      	adds	r0, #1
 80085b8:	d0e6      	beq.n	8008588 <_printf_common+0xa4>
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7d9      	b.n	8008572 <_printf_common+0x8e>
	...

080085c0 <_printf_i>:
 80085c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	7e0f      	ldrb	r7, [r1, #24]
 80085c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085c8:	2f78      	cmp	r7, #120	; 0x78
 80085ca:	4691      	mov	r9, r2
 80085cc:	4680      	mov	r8, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	469a      	mov	sl, r3
 80085d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085d6:	d807      	bhi.n	80085e8 <_printf_i+0x28>
 80085d8:	2f62      	cmp	r7, #98	; 0x62
 80085da:	d80a      	bhi.n	80085f2 <_printf_i+0x32>
 80085dc:	2f00      	cmp	r7, #0
 80085de:	f000 80d4 	beq.w	800878a <_printf_i+0x1ca>
 80085e2:	2f58      	cmp	r7, #88	; 0x58
 80085e4:	f000 80c0 	beq.w	8008768 <_printf_i+0x1a8>
 80085e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085f0:	e03a      	b.n	8008668 <_printf_i+0xa8>
 80085f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085f6:	2b15      	cmp	r3, #21
 80085f8:	d8f6      	bhi.n	80085e8 <_printf_i+0x28>
 80085fa:	a101      	add	r1, pc, #4	; (adr r1, 8008600 <_printf_i+0x40>)
 80085fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008600:	08008659 	.word	0x08008659
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080085e9 	.word	0x080085e9
 800860c:	080085e9 	.word	0x080085e9
 8008610:	080085e9 	.word	0x080085e9
 8008614:	080085e9 	.word	0x080085e9
 8008618:	0800866d 	.word	0x0800866d
 800861c:	080085e9 	.word	0x080085e9
 8008620:	080085e9 	.word	0x080085e9
 8008624:	080085e9 	.word	0x080085e9
 8008628:	080085e9 	.word	0x080085e9
 800862c:	08008771 	.word	0x08008771
 8008630:	08008699 	.word	0x08008699
 8008634:	0800872b 	.word	0x0800872b
 8008638:	080085e9 	.word	0x080085e9
 800863c:	080085e9 	.word	0x080085e9
 8008640:	08008793 	.word	0x08008793
 8008644:	080085e9 	.word	0x080085e9
 8008648:	08008699 	.word	0x08008699
 800864c:	080085e9 	.word	0x080085e9
 8008650:	080085e9 	.word	0x080085e9
 8008654:	08008733 	.word	0x08008733
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008668:	2301      	movs	r3, #1
 800866a:	e09f      	b.n	80087ac <_printf_i+0x1ec>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	0607      	lsls	r7, r0, #24
 8008672:	f103 0104 	add.w	r1, r3, #4
 8008676:	6029      	str	r1, [r5, #0]
 8008678:	d501      	bpl.n	800867e <_printf_i+0xbe>
 800867a:	681e      	ldr	r6, [r3, #0]
 800867c:	e003      	b.n	8008686 <_printf_i+0xc6>
 800867e:	0646      	lsls	r6, r0, #25
 8008680:	d5fb      	bpl.n	800867a <_printf_i+0xba>
 8008682:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008686:	2e00      	cmp	r6, #0
 8008688:	da03      	bge.n	8008692 <_printf_i+0xd2>
 800868a:	232d      	movs	r3, #45	; 0x2d
 800868c:	4276      	negs	r6, r6
 800868e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008692:	485a      	ldr	r0, [pc, #360]	; (80087fc <_printf_i+0x23c>)
 8008694:	230a      	movs	r3, #10
 8008696:	e012      	b.n	80086be <_printf_i+0xfe>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	1d19      	adds	r1, r3, #4
 800869e:	6029      	str	r1, [r5, #0]
 80086a0:	0605      	lsls	r5, r0, #24
 80086a2:	d501      	bpl.n	80086a8 <_printf_i+0xe8>
 80086a4:	681e      	ldr	r6, [r3, #0]
 80086a6:	e002      	b.n	80086ae <_printf_i+0xee>
 80086a8:	0641      	lsls	r1, r0, #25
 80086aa:	d5fb      	bpl.n	80086a4 <_printf_i+0xe4>
 80086ac:	881e      	ldrh	r6, [r3, #0]
 80086ae:	4853      	ldr	r0, [pc, #332]	; (80087fc <_printf_i+0x23c>)
 80086b0:	2f6f      	cmp	r7, #111	; 0x6f
 80086b2:	bf0c      	ite	eq
 80086b4:	2308      	moveq	r3, #8
 80086b6:	230a      	movne	r3, #10
 80086b8:	2100      	movs	r1, #0
 80086ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086be:	6865      	ldr	r5, [r4, #4]
 80086c0:	60a5      	str	r5, [r4, #8]
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	bfa2      	ittt	ge
 80086c6:	6821      	ldrge	r1, [r4, #0]
 80086c8:	f021 0104 	bicge.w	r1, r1, #4
 80086cc:	6021      	strge	r1, [r4, #0]
 80086ce:	b90e      	cbnz	r6, 80086d4 <_printf_i+0x114>
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	d04b      	beq.n	800876c <_printf_i+0x1ac>
 80086d4:	4615      	mov	r5, r2
 80086d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80086da:	fb03 6711 	mls	r7, r3, r1, r6
 80086de:	5dc7      	ldrb	r7, [r0, r7]
 80086e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086e4:	4637      	mov	r7, r6
 80086e6:	42bb      	cmp	r3, r7
 80086e8:	460e      	mov	r6, r1
 80086ea:	d9f4      	bls.n	80086d6 <_printf_i+0x116>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d10b      	bne.n	8008708 <_printf_i+0x148>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	07de      	lsls	r6, r3, #31
 80086f4:	d508      	bpl.n	8008708 <_printf_i+0x148>
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	4299      	cmp	r1, r3
 80086fc:	bfde      	ittt	le
 80086fe:	2330      	movle	r3, #48	; 0x30
 8008700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008708:	1b52      	subs	r2, r2, r5
 800870a:	6122      	str	r2, [r4, #16]
 800870c:	f8cd a000 	str.w	sl, [sp]
 8008710:	464b      	mov	r3, r9
 8008712:	aa03      	add	r2, sp, #12
 8008714:	4621      	mov	r1, r4
 8008716:	4640      	mov	r0, r8
 8008718:	f7ff fee4 	bl	80084e4 <_printf_common>
 800871c:	3001      	adds	r0, #1
 800871e:	d14a      	bne.n	80087b6 <_printf_i+0x1f6>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	b004      	add	sp, #16
 8008726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	f043 0320 	orr.w	r3, r3, #32
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	4833      	ldr	r0, [pc, #204]	; (8008800 <_printf_i+0x240>)
 8008734:	2778      	movs	r7, #120	; 0x78
 8008736:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	6829      	ldr	r1, [r5, #0]
 800873e:	061f      	lsls	r7, r3, #24
 8008740:	f851 6b04 	ldr.w	r6, [r1], #4
 8008744:	d402      	bmi.n	800874c <_printf_i+0x18c>
 8008746:	065f      	lsls	r7, r3, #25
 8008748:	bf48      	it	mi
 800874a:	b2b6      	uxthmi	r6, r6
 800874c:	07df      	lsls	r7, r3, #31
 800874e:	bf48      	it	mi
 8008750:	f043 0320 	orrmi.w	r3, r3, #32
 8008754:	6029      	str	r1, [r5, #0]
 8008756:	bf48      	it	mi
 8008758:	6023      	strmi	r3, [r4, #0]
 800875a:	b91e      	cbnz	r6, 8008764 <_printf_i+0x1a4>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	f023 0320 	bic.w	r3, r3, #32
 8008762:	6023      	str	r3, [r4, #0]
 8008764:	2310      	movs	r3, #16
 8008766:	e7a7      	b.n	80086b8 <_printf_i+0xf8>
 8008768:	4824      	ldr	r0, [pc, #144]	; (80087fc <_printf_i+0x23c>)
 800876a:	e7e4      	b.n	8008736 <_printf_i+0x176>
 800876c:	4615      	mov	r5, r2
 800876e:	e7bd      	b.n	80086ec <_printf_i+0x12c>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	6826      	ldr	r6, [r4, #0]
 8008774:	6961      	ldr	r1, [r4, #20]
 8008776:	1d18      	adds	r0, r3, #4
 8008778:	6028      	str	r0, [r5, #0]
 800877a:	0635      	lsls	r5, r6, #24
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	d501      	bpl.n	8008784 <_printf_i+0x1c4>
 8008780:	6019      	str	r1, [r3, #0]
 8008782:	e002      	b.n	800878a <_printf_i+0x1ca>
 8008784:	0670      	lsls	r0, r6, #25
 8008786:	d5fb      	bpl.n	8008780 <_printf_i+0x1c0>
 8008788:	8019      	strh	r1, [r3, #0]
 800878a:	2300      	movs	r3, #0
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	4615      	mov	r5, r2
 8008790:	e7bc      	b.n	800870c <_printf_i+0x14c>
 8008792:	682b      	ldr	r3, [r5, #0]
 8008794:	1d1a      	adds	r2, r3, #4
 8008796:	602a      	str	r2, [r5, #0]
 8008798:	681d      	ldr	r5, [r3, #0]
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	2100      	movs	r1, #0
 800879e:	4628      	mov	r0, r5
 80087a0:	f7f7 fd1e 	bl	80001e0 <memchr>
 80087a4:	b108      	cbz	r0, 80087aa <_printf_i+0x1ea>
 80087a6:	1b40      	subs	r0, r0, r5
 80087a8:	6060      	str	r0, [r4, #4]
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	2300      	movs	r3, #0
 80087b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b4:	e7aa      	b.n	800870c <_printf_i+0x14c>
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4649      	mov	r1, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	47d0      	blx	sl
 80087c0:	3001      	adds	r0, #1
 80087c2:	d0ad      	beq.n	8008720 <_printf_i+0x160>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	079b      	lsls	r3, r3, #30
 80087c8:	d413      	bmi.n	80087f2 <_printf_i+0x232>
 80087ca:	68e0      	ldr	r0, [r4, #12]
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	4298      	cmp	r0, r3
 80087d0:	bfb8      	it	lt
 80087d2:	4618      	movlt	r0, r3
 80087d4:	e7a6      	b.n	8008724 <_printf_i+0x164>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4632      	mov	r2, r6
 80087da:	4649      	mov	r1, r9
 80087dc:	4640      	mov	r0, r8
 80087de:	47d0      	blx	sl
 80087e0:	3001      	adds	r0, #1
 80087e2:	d09d      	beq.n	8008720 <_printf_i+0x160>
 80087e4:	3501      	adds	r5, #1
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	9903      	ldr	r1, [sp, #12]
 80087ea:	1a5b      	subs	r3, r3, r1
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dcf2      	bgt.n	80087d6 <_printf_i+0x216>
 80087f0:	e7eb      	b.n	80087ca <_printf_i+0x20a>
 80087f2:	2500      	movs	r5, #0
 80087f4:	f104 0619 	add.w	r6, r4, #25
 80087f8:	e7f5      	b.n	80087e6 <_printf_i+0x226>
 80087fa:	bf00      	nop
 80087fc:	0800a116 	.word	0x0800a116
 8008800:	0800a127 	.word	0x0800a127

08008804 <__sflush_r>:
 8008804:	898a      	ldrh	r2, [r1, #12]
 8008806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880a:	4605      	mov	r5, r0
 800880c:	0710      	lsls	r0, r2, #28
 800880e:	460c      	mov	r4, r1
 8008810:	d458      	bmi.n	80088c4 <__sflush_r+0xc0>
 8008812:	684b      	ldr	r3, [r1, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	dc05      	bgt.n	8008824 <__sflush_r+0x20>
 8008818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	dc02      	bgt.n	8008824 <__sflush_r+0x20>
 800881e:	2000      	movs	r0, #0
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008826:	2e00      	cmp	r6, #0
 8008828:	d0f9      	beq.n	800881e <__sflush_r+0x1a>
 800882a:	2300      	movs	r3, #0
 800882c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008830:	682f      	ldr	r7, [r5, #0]
 8008832:	6a21      	ldr	r1, [r4, #32]
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	d032      	beq.n	800889e <__sflush_r+0x9a>
 8008838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	075a      	lsls	r2, r3, #29
 800883e:	d505      	bpl.n	800884c <__sflush_r+0x48>
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	1ac0      	subs	r0, r0, r3
 8008844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008846:	b10b      	cbz	r3, 800884c <__sflush_r+0x48>
 8008848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800884a:	1ac0      	subs	r0, r0, r3
 800884c:	2300      	movs	r3, #0
 800884e:	4602      	mov	r2, r0
 8008850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008852:	6a21      	ldr	r1, [r4, #32]
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	d106      	bne.n	800886c <__sflush_r+0x68>
 800885e:	6829      	ldr	r1, [r5, #0]
 8008860:	291d      	cmp	r1, #29
 8008862:	d82b      	bhi.n	80088bc <__sflush_r+0xb8>
 8008864:	4a29      	ldr	r2, [pc, #164]	; (800890c <__sflush_r+0x108>)
 8008866:	410a      	asrs	r2, r1
 8008868:	07d6      	lsls	r6, r2, #31
 800886a:	d427      	bmi.n	80088bc <__sflush_r+0xb8>
 800886c:	2200      	movs	r2, #0
 800886e:	6062      	str	r2, [r4, #4]
 8008870:	04d9      	lsls	r1, r3, #19
 8008872:	6922      	ldr	r2, [r4, #16]
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	d504      	bpl.n	8008882 <__sflush_r+0x7e>
 8008878:	1c42      	adds	r2, r0, #1
 800887a:	d101      	bne.n	8008880 <__sflush_r+0x7c>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b903      	cbnz	r3, 8008882 <__sflush_r+0x7e>
 8008880:	6560      	str	r0, [r4, #84]	; 0x54
 8008882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008884:	602f      	str	r7, [r5, #0]
 8008886:	2900      	cmp	r1, #0
 8008888:	d0c9      	beq.n	800881e <__sflush_r+0x1a>
 800888a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888e:	4299      	cmp	r1, r3
 8008890:	d002      	beq.n	8008898 <__sflush_r+0x94>
 8008892:	4628      	mov	r0, r5
 8008894:	f7fe fbaa 	bl	8006fec <_free_r>
 8008898:	2000      	movs	r0, #0
 800889a:	6360      	str	r0, [r4, #52]	; 0x34
 800889c:	e7c0      	b.n	8008820 <__sflush_r+0x1c>
 800889e:	2301      	movs	r3, #1
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	1c41      	adds	r1, r0, #1
 80088a6:	d1c8      	bne.n	800883a <__sflush_r+0x36>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0c5      	beq.n	800883a <__sflush_r+0x36>
 80088ae:	2b1d      	cmp	r3, #29
 80088b0:	d001      	beq.n	80088b6 <__sflush_r+0xb2>
 80088b2:	2b16      	cmp	r3, #22
 80088b4:	d101      	bne.n	80088ba <__sflush_r+0xb6>
 80088b6:	602f      	str	r7, [r5, #0]
 80088b8:	e7b1      	b.n	800881e <__sflush_r+0x1a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	e7ad      	b.n	8008820 <__sflush_r+0x1c>
 80088c4:	690f      	ldr	r7, [r1, #16]
 80088c6:	2f00      	cmp	r7, #0
 80088c8:	d0a9      	beq.n	800881e <__sflush_r+0x1a>
 80088ca:	0793      	lsls	r3, r2, #30
 80088cc:	680e      	ldr	r6, [r1, #0]
 80088ce:	bf08      	it	eq
 80088d0:	694b      	ldreq	r3, [r1, #20]
 80088d2:	600f      	str	r7, [r1, #0]
 80088d4:	bf18      	it	ne
 80088d6:	2300      	movne	r3, #0
 80088d8:	eba6 0807 	sub.w	r8, r6, r7
 80088dc:	608b      	str	r3, [r1, #8]
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	dd9c      	ble.n	800881e <__sflush_r+0x1a>
 80088e4:	6a21      	ldr	r1, [r4, #32]
 80088e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088e8:	4643      	mov	r3, r8
 80088ea:	463a      	mov	r2, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b0      	blx	r6
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dc06      	bgt.n	8008902 <__sflush_r+0xfe>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	e78e      	b.n	8008820 <__sflush_r+0x1c>
 8008902:	4407      	add	r7, r0
 8008904:	eba8 0800 	sub.w	r8, r8, r0
 8008908:	e7e9      	b.n	80088de <__sflush_r+0xda>
 800890a:	bf00      	nop
 800890c:	dfbffffe 	.word	0xdfbffffe

08008910 <_fflush_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b913      	cbnz	r3, 8008920 <_fflush_r+0x10>
 800891a:	2500      	movs	r5, #0
 800891c:	4628      	mov	r0, r5
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	b118      	cbz	r0, 800892a <_fflush_r+0x1a>
 8008922:	6a03      	ldr	r3, [r0, #32]
 8008924:	b90b      	cbnz	r3, 800892a <_fflush_r+0x1a>
 8008926:	f7fe f995 	bl	8006c54 <__sinit>
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f3      	beq.n	800891a <_fflush_r+0xa>
 8008932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008934:	07d0      	lsls	r0, r2, #31
 8008936:	d404      	bmi.n	8008942 <_fflush_r+0x32>
 8008938:	0599      	lsls	r1, r3, #22
 800893a:	d402      	bmi.n	8008942 <_fflush_r+0x32>
 800893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893e:	f7fe fb1f 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	4621      	mov	r1, r4
 8008946:	f7ff ff5d 	bl	8008804 <__sflush_r>
 800894a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	4605      	mov	r5, r0
 8008950:	d4e4      	bmi.n	800891c <_fflush_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	059b      	lsls	r3, r3, #22
 8008956:	d4e1      	bmi.n	800891c <_fflush_r+0xc>
 8008958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895a:	f7fe fb12 	bl	8006f82 <__retarget_lock_release_recursive>
 800895e:	e7dd      	b.n	800891c <_fflush_r+0xc>

08008960 <fiprintf>:
 8008960:	b40e      	push	{r1, r2, r3}
 8008962:	b503      	push	{r0, r1, lr}
 8008964:	4601      	mov	r1, r0
 8008966:	ab03      	add	r3, sp, #12
 8008968:	4805      	ldr	r0, [pc, #20]	; (8008980 <fiprintf+0x20>)
 800896a:	f853 2b04 	ldr.w	r2, [r3], #4
 800896e:	6800      	ldr	r0, [r0, #0]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	f000 f8a7 	bl	8008ac4 <_vfiprintf_r>
 8008976:	b002      	add	sp, #8
 8008978:	f85d eb04 	ldr.w	lr, [sp], #4
 800897c:	b003      	add	sp, #12
 800897e:	4770      	bx	lr
 8008980:	200002e4 	.word	0x200002e4

08008984 <memmove>:
 8008984:	4288      	cmp	r0, r1
 8008986:	b510      	push	{r4, lr}
 8008988:	eb01 0402 	add.w	r4, r1, r2
 800898c:	d902      	bls.n	8008994 <memmove+0x10>
 800898e:	4284      	cmp	r4, r0
 8008990:	4623      	mov	r3, r4
 8008992:	d807      	bhi.n	80089a4 <memmove+0x20>
 8008994:	1e43      	subs	r3, r0, #1
 8008996:	42a1      	cmp	r1, r4
 8008998:	d008      	beq.n	80089ac <memmove+0x28>
 800899a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800899e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089a2:	e7f8      	b.n	8008996 <memmove+0x12>
 80089a4:	4402      	add	r2, r0
 80089a6:	4601      	mov	r1, r0
 80089a8:	428a      	cmp	r2, r1
 80089aa:	d100      	bne.n	80089ae <memmove+0x2a>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089b6:	e7f7      	b.n	80089a8 <memmove+0x24>

080089b8 <_sbrk_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d06      	ldr	r5, [pc, #24]	; (80089d4 <_sbrk_r+0x1c>)
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7f9 fc56 	bl	8002274 <_sbrk>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_sbrk_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_sbrk_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20000710 	.word	0x20000710

080089d8 <abort>:
 80089d8:	b508      	push	{r3, lr}
 80089da:	2006      	movs	r0, #6
 80089dc:	f000 fa4a 	bl	8008e74 <raise>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f7f9 fbcf 	bl	8002184 <_exit>

080089e6 <_calloc_r>:
 80089e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e8:	fba1 2402 	umull	r2, r4, r1, r2
 80089ec:	b94c      	cbnz	r4, 8008a02 <_calloc_r+0x1c>
 80089ee:	4611      	mov	r1, r2
 80089f0:	9201      	str	r2, [sp, #4]
 80089f2:	f7fe fec7 	bl	8007784 <_malloc_r>
 80089f6:	9a01      	ldr	r2, [sp, #4]
 80089f8:	4605      	mov	r5, r0
 80089fa:	b930      	cbnz	r0, 8008a0a <_calloc_r+0x24>
 80089fc:	4628      	mov	r0, r5
 80089fe:	b003      	add	sp, #12
 8008a00:	bd30      	pop	{r4, r5, pc}
 8008a02:	220c      	movs	r2, #12
 8008a04:	6002      	str	r2, [r0, #0]
 8008a06:	2500      	movs	r5, #0
 8008a08:	e7f8      	b.n	80089fc <_calloc_r+0x16>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f7fe f9bb 	bl	8006d86 <memset>
 8008a10:	e7f4      	b.n	80089fc <_calloc_r+0x16>

08008a12 <_realloc_r>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	4680      	mov	r8, r0
 8008a18:	4614      	mov	r4, r2
 8008a1a:	460e      	mov	r6, r1
 8008a1c:	b921      	cbnz	r1, 8008a28 <_realloc_r+0x16>
 8008a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a22:	4611      	mov	r1, r2
 8008a24:	f7fe beae 	b.w	8007784 <_malloc_r>
 8008a28:	b92a      	cbnz	r2, 8008a36 <_realloc_r+0x24>
 8008a2a:	f7fe fadf 	bl	8006fec <_free_r>
 8008a2e:	4625      	mov	r5, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a36:	f000 fa39 	bl	8008eac <_malloc_usable_size_r>
 8008a3a:	4284      	cmp	r4, r0
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	d802      	bhi.n	8008a46 <_realloc_r+0x34>
 8008a40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a44:	d812      	bhi.n	8008a6c <_realloc_r+0x5a>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f7fe fe9b 	bl	8007784 <_malloc_r>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d0ed      	beq.n	8008a30 <_realloc_r+0x1e>
 8008a54:	42bc      	cmp	r4, r7
 8008a56:	4622      	mov	r2, r4
 8008a58:	4631      	mov	r1, r6
 8008a5a:	bf28      	it	cs
 8008a5c:	463a      	movcs	r2, r7
 8008a5e:	f7fe fa91 	bl	8006f84 <memcpy>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4640      	mov	r0, r8
 8008a66:	f7fe fac1 	bl	8006fec <_free_r>
 8008a6a:	e7e1      	b.n	8008a30 <_realloc_r+0x1e>
 8008a6c:	4635      	mov	r5, r6
 8008a6e:	e7df      	b.n	8008a30 <_realloc_r+0x1e>

08008a70 <__sfputc_r>:
 8008a70:	6893      	ldr	r3, [r2, #8]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	b410      	push	{r4}
 8008a78:	6093      	str	r3, [r2, #8]
 8008a7a:	da08      	bge.n	8008a8e <__sfputc_r+0x1e>
 8008a7c:	6994      	ldr	r4, [r2, #24]
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	db01      	blt.n	8008a86 <__sfputc_r+0x16>
 8008a82:	290a      	cmp	r1, #10
 8008a84:	d103      	bne.n	8008a8e <__sfputc_r+0x1e>
 8008a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a8a:	f000 b935 	b.w	8008cf8 <__swbuf_r>
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	1c58      	adds	r0, r3, #1
 8008a92:	6010      	str	r0, [r2, #0]
 8008a94:	7019      	strb	r1, [r3, #0]
 8008a96:	4608      	mov	r0, r1
 8008a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <__sfputs_r>:
 8008a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	18d5      	adds	r5, r2, r3
 8008aa8:	42ac      	cmp	r4, r5
 8008aaa:	d101      	bne.n	8008ab0 <__sfputs_r+0x12>
 8008aac:	2000      	movs	r0, #0
 8008aae:	e007      	b.n	8008ac0 <__sfputs_r+0x22>
 8008ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab4:	463a      	mov	r2, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffda 	bl	8008a70 <__sfputc_r>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d1f3      	bne.n	8008aa8 <__sfputs_r+0xa>
 8008ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ac4 <_vfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	460d      	mov	r5, r1
 8008aca:	b09d      	sub	sp, #116	; 0x74
 8008acc:	4614      	mov	r4, r2
 8008ace:	4698      	mov	r8, r3
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	b118      	cbz	r0, 8008adc <_vfiprintf_r+0x18>
 8008ad4:	6a03      	ldr	r3, [r0, #32]
 8008ad6:	b90b      	cbnz	r3, 8008adc <_vfiprintf_r+0x18>
 8008ad8:	f7fe f8bc 	bl	8006c54 <__sinit>
 8008adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ade:	07d9      	lsls	r1, r3, #31
 8008ae0:	d405      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	059a      	lsls	r2, r3, #22
 8008ae6:	d402      	bmi.n	8008aee <_vfiprintf_r+0x2a>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aea:	f7fe fa49 	bl	8006f80 <__retarget_lock_acquire_recursive>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	d501      	bpl.n	8008af8 <_vfiprintf_r+0x34>
 8008af4:	692b      	ldr	r3, [r5, #16]
 8008af6:	b99b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x5c>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f93a 	bl	8008d74 <__swsetup_r>
 8008b00:	b170      	cbz	r0, 8008b20 <_vfiprintf_r+0x5c>
 8008b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b04:	07dc      	lsls	r4, r3, #31
 8008b06:	d504      	bpl.n	8008b12 <_vfiprintf_r+0x4e>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	b01d      	add	sp, #116	; 0x74
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	0598      	lsls	r0, r3, #22
 8008b16:	d4f7      	bmi.n	8008b08 <_vfiprintf_r+0x44>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f7fe fa32 	bl	8006f82 <__retarget_lock_release_recursive>
 8008b1e:	e7f3      	b.n	8008b08 <_vfiprintf_r+0x44>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	2320      	movs	r3, #32
 8008b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2e:	2330      	movs	r3, #48	; 0x30
 8008b30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ce4 <_vfiprintf_r+0x220>
 8008b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	469a      	mov	sl, r3
 8008b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b44:	b10a      	cbz	r2, 8008b4a <_vfiprintf_r+0x86>
 8008b46:	2a25      	cmp	r2, #37	; 0x25
 8008b48:	d1f9      	bne.n	8008b3e <_vfiprintf_r+0x7a>
 8008b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b4e:	d00b      	beq.n	8008b68 <_vfiprintf_r+0xa4>
 8008b50:	465b      	mov	r3, fp
 8008b52:	4622      	mov	r2, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ffa1 	bl	8008a9e <__sfputs_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f000 80a9 	beq.w	8008cb4 <_vfiprintf_r+0x1f0>
 8008b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b64:	445a      	add	r2, fp
 8008b66:	9209      	str	r2, [sp, #36]	; 0x24
 8008b68:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a1 	beq.w	8008cb4 <_vfiprintf_r+0x1f0>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b88:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8a:	4654      	mov	r4, sl
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4854      	ldr	r0, [pc, #336]	; (8008ce4 <_vfiprintf_r+0x220>)
 8008b94:	f7f7 fb24 	bl	80001e0 <memchr>
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	b9d8      	cbnz	r0, 8008bd4 <_vfiprintf_r+0x110>
 8008b9c:	06d1      	lsls	r1, r2, #27
 8008b9e:	bf44      	itt	mi
 8008ba0:	2320      	movmi	r3, #32
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	0713      	lsls	r3, r2, #28
 8008ba8:	bf44      	itt	mi
 8008baa:	232b      	movmi	r3, #43	; 0x2b
 8008bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb6:	d015      	beq.n	8008be4 <_vfiprintf_r+0x120>
 8008bb8:	9a07      	ldr	r2, [sp, #28]
 8008bba:	4654      	mov	r4, sl
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f04f 0c0a 	mov.w	ip, #10
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc8:	3b30      	subs	r3, #48	; 0x30
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d94d      	bls.n	8008c6a <_vfiprintf_r+0x1a6>
 8008bce:	b1b0      	cbz	r0, 8008bfe <_vfiprintf_r+0x13a>
 8008bd0:	9207      	str	r2, [sp, #28]
 8008bd2:	e014      	b.n	8008bfe <_vfiprintf_r+0x13a>
 8008bd4:	eba0 0308 	sub.w	r3, r0, r8
 8008bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	46a2      	mov	sl, r4
 8008be2:	e7d2      	b.n	8008b8a <_vfiprintf_r+0xc6>
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	9103      	str	r1, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbb      	ittet	lt
 8008bf0:	425b      	neglt	r3, r3
 8008bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf6:	9307      	strge	r3, [sp, #28]
 8008bf8:	9307      	strlt	r3, [sp, #28]
 8008bfa:	bfb8      	it	lt
 8008bfc:	9204      	strlt	r2, [sp, #16]
 8008bfe:	7823      	ldrb	r3, [r4, #0]
 8008c00:	2b2e      	cmp	r3, #46	; 0x2e
 8008c02:	d10c      	bne.n	8008c1e <_vfiprintf_r+0x15a>
 8008c04:	7863      	ldrb	r3, [r4, #1]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	d134      	bne.n	8008c74 <_vfiprintf_r+0x1b0>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9203      	str	r2, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfb8      	it	lt
 8008c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1a:	3402      	adds	r4, #2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cf4 <_vfiprintf_r+0x230>
 8008c22:	7821      	ldrb	r1, [r4, #0]
 8008c24:	2203      	movs	r2, #3
 8008c26:	4650      	mov	r0, sl
 8008c28:	f7f7 fada 	bl	80001e0 <memchr>
 8008c2c:	b138      	cbz	r0, 8008c3e <_vfiprintf_r+0x17a>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	eba0 000a 	sub.w	r0, r0, sl
 8008c34:	2240      	movs	r2, #64	; 0x40
 8008c36:	4082      	lsls	r2, r0
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	3401      	adds	r4, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	4829      	ldr	r0, [pc, #164]	; (8008ce8 <_vfiprintf_r+0x224>)
 8008c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c48:	2206      	movs	r2, #6
 8008c4a:	f7f7 fac9 	bl	80001e0 <memchr>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d03f      	beq.n	8008cd2 <_vfiprintf_r+0x20e>
 8008c52:	4b26      	ldr	r3, [pc, #152]	; (8008cec <_vfiprintf_r+0x228>)
 8008c54:	bb1b      	cbnz	r3, 8008c9e <_vfiprintf_r+0x1da>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	3308      	adds	r3, #8
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c64:	443b      	add	r3, r7
 8008c66:	9309      	str	r3, [sp, #36]	; 0x24
 8008c68:	e768      	b.n	8008b3c <_vfiprintf_r+0x78>
 8008c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2001      	movs	r0, #1
 8008c72:	e7a6      	b.n	8008bc2 <_vfiprintf_r+0xfe>
 8008c74:	2300      	movs	r3, #0
 8008c76:	3401      	adds	r4, #1
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f04f 0c0a 	mov.w	ip, #10
 8008c80:	4620      	mov	r0, r4
 8008c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c86:	3a30      	subs	r2, #48	; 0x30
 8008c88:	2a09      	cmp	r2, #9
 8008c8a:	d903      	bls.n	8008c94 <_vfiprintf_r+0x1d0>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0c6      	beq.n	8008c1e <_vfiprintf_r+0x15a>
 8008c90:	9105      	str	r1, [sp, #20]
 8008c92:	e7c4      	b.n	8008c1e <_vfiprintf_r+0x15a>
 8008c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c98:	4604      	mov	r4, r0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e7f0      	b.n	8008c80 <_vfiprintf_r+0x1bc>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <_vfiprintf_r+0x22c>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f3af 8000 	nop.w
 8008cae:	4607      	mov	r7, r0
 8008cb0:	1c78      	adds	r0, r7, #1
 8008cb2:	d1d6      	bne.n	8008c62 <_vfiprintf_r+0x19e>
 8008cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb6:	07d9      	lsls	r1, r3, #31
 8008cb8:	d405      	bmi.n	8008cc6 <_vfiprintf_r+0x202>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_vfiprintf_r+0x202>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc2:	f7fe f95e 	bl	8006f82 <__retarget_lock_release_recursive>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	065b      	lsls	r3, r3, #25
 8008cca:	f53f af1d 	bmi.w	8008b08 <_vfiprintf_r+0x44>
 8008cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd0:	e71c      	b.n	8008b0c <_vfiprintf_r+0x48>
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <_vfiprintf_r+0x22c>)
 8008cda:	a904      	add	r1, sp, #16
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff fc6f 	bl	80085c0 <_printf_i>
 8008ce2:	e7e4      	b.n	8008cae <_vfiprintf_r+0x1ea>
 8008ce4:	0800a105 	.word	0x0800a105
 8008ce8:	0800a10f 	.word	0x0800a10f
 8008cec:	00000000 	.word	0x00000000
 8008cf0:	08008a9f 	.word	0x08008a9f
 8008cf4:	0800a10b 	.word	0x0800a10b

08008cf8 <__swbuf_r>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	460e      	mov	r6, r1
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b118      	cbz	r0, 8008d0a <__swbuf_r+0x12>
 8008d02:	6a03      	ldr	r3, [r0, #32]
 8008d04:	b90b      	cbnz	r3, 8008d0a <__swbuf_r+0x12>
 8008d06:	f7fd ffa5 	bl	8006c54 <__sinit>
 8008d0a:	69a3      	ldr	r3, [r4, #24]
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	071a      	lsls	r2, r3, #28
 8008d12:	d525      	bpl.n	8008d60 <__swbuf_r+0x68>
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b31b      	cbz	r3, 8008d60 <__swbuf_r+0x68>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	6922      	ldr	r2, [r4, #16]
 8008d1c:	1a98      	subs	r0, r3, r2
 8008d1e:	6963      	ldr	r3, [r4, #20]
 8008d20:	b2f6      	uxtb	r6, r6
 8008d22:	4283      	cmp	r3, r0
 8008d24:	4637      	mov	r7, r6
 8008d26:	dc04      	bgt.n	8008d32 <__swbuf_r+0x3a>
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7ff fdf0 	bl	8008910 <_fflush_r>
 8008d30:	b9e0      	cbnz	r0, 8008d6c <__swbuf_r+0x74>
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	60a3      	str	r3, [r4, #8]
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	6022      	str	r2, [r4, #0]
 8008d3e:	701e      	strb	r6, [r3, #0]
 8008d40:	6962      	ldr	r2, [r4, #20]
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d004      	beq.n	8008d52 <__swbuf_r+0x5a>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	07db      	lsls	r3, r3, #31
 8008d4c:	d506      	bpl.n	8008d5c <__swbuf_r+0x64>
 8008d4e:	2e0a      	cmp	r6, #10
 8008d50:	d104      	bne.n	8008d5c <__swbuf_r+0x64>
 8008d52:	4621      	mov	r1, r4
 8008d54:	4628      	mov	r0, r5
 8008d56:	f7ff fddb 	bl	8008910 <_fflush_r>
 8008d5a:	b938      	cbnz	r0, 8008d6c <__swbuf_r+0x74>
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d60:	4621      	mov	r1, r4
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 f806 	bl	8008d74 <__swsetup_r>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d0d5      	beq.n	8008d18 <__swbuf_r+0x20>
 8008d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d70:	e7f4      	b.n	8008d5c <__swbuf_r+0x64>
	...

08008d74 <__swsetup_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4b2a      	ldr	r3, [pc, #168]	; (8008e20 <__swsetup_r+0xac>)
 8008d78:	4605      	mov	r5, r0
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	b118      	cbz	r0, 8008d88 <__swsetup_r+0x14>
 8008d80:	6a03      	ldr	r3, [r0, #32]
 8008d82:	b90b      	cbnz	r3, 8008d88 <__swsetup_r+0x14>
 8008d84:	f7fd ff66 	bl	8006c54 <__sinit>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d8e:	0718      	lsls	r0, r3, #28
 8008d90:	d422      	bmi.n	8008dd8 <__swsetup_r+0x64>
 8008d92:	06d9      	lsls	r1, r3, #27
 8008d94:	d407      	bmi.n	8008da6 <__swsetup_r+0x32>
 8008d96:	2309      	movs	r3, #9
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e034      	b.n	8008e10 <__swsetup_r+0x9c>
 8008da6:	0758      	lsls	r0, r3, #29
 8008da8:	d512      	bpl.n	8008dd0 <__swsetup_r+0x5c>
 8008daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dac:	b141      	cbz	r1, 8008dc0 <__swsetup_r+0x4c>
 8008dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008db2:	4299      	cmp	r1, r3
 8008db4:	d002      	beq.n	8008dbc <__swsetup_r+0x48>
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7fe f918 	bl	8006fec <_free_r>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6063      	str	r3, [r4, #4]
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f043 0308 	orr.w	r3, r3, #8
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b94b      	cbnz	r3, 8008df0 <__swsetup_r+0x7c>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de6:	d003      	beq.n	8008df0 <__swsetup_r+0x7c>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f88c 	bl	8008f08 <__smakebuf_r>
 8008df0:	89a0      	ldrh	r0, [r4, #12]
 8008df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008df6:	f010 0301 	ands.w	r3, r0, #1
 8008dfa:	d00a      	beq.n	8008e12 <__swsetup_r+0x9e>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	6963      	ldr	r3, [r4, #20]
 8008e02:	425b      	negs	r3, r3
 8008e04:	61a3      	str	r3, [r4, #24]
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	b943      	cbnz	r3, 8008e1c <__swsetup_r+0xa8>
 8008e0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e0e:	d1c4      	bne.n	8008d9a <__swsetup_r+0x26>
 8008e10:	bd38      	pop	{r3, r4, r5, pc}
 8008e12:	0781      	lsls	r1, r0, #30
 8008e14:	bf58      	it	pl
 8008e16:	6963      	ldrpl	r3, [r4, #20]
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	e7f4      	b.n	8008e06 <__swsetup_r+0x92>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e7f7      	b.n	8008e10 <__swsetup_r+0x9c>
 8008e20:	200002e4 	.word	0x200002e4

08008e24 <_raise_r>:
 8008e24:	291f      	cmp	r1, #31
 8008e26:	b538      	push	{r3, r4, r5, lr}
 8008e28:	4604      	mov	r4, r0
 8008e2a:	460d      	mov	r5, r1
 8008e2c:	d904      	bls.n	8008e38 <_raise_r+0x14>
 8008e2e:	2316      	movs	r3, #22
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e3a:	b112      	cbz	r2, 8008e42 <_raise_r+0x1e>
 8008e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e40:	b94b      	cbnz	r3, 8008e56 <_raise_r+0x32>
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 f830 	bl	8008ea8 <_getpid_r>
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e52:	f000 b817 	b.w	8008e84 <_kill_r>
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d00a      	beq.n	8008e70 <_raise_r+0x4c>
 8008e5a:	1c59      	adds	r1, r3, #1
 8008e5c:	d103      	bne.n	8008e66 <_raise_r+0x42>
 8008e5e:	2316      	movs	r3, #22
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	2001      	movs	r0, #1
 8008e64:	e7e7      	b.n	8008e36 <_raise_r+0x12>
 8008e66:	2400      	movs	r4, #0
 8008e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	4798      	blx	r3
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7e0      	b.n	8008e36 <_raise_r+0x12>

08008e74 <raise>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <raise+0xc>)
 8008e76:	4601      	mov	r1, r0
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f7ff bfd3 	b.w	8008e24 <_raise_r>
 8008e7e:	bf00      	nop
 8008e80:	200002e4 	.word	0x200002e4

08008e84 <_kill_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	; (8008ea4 <_kill_r+0x20>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	4611      	mov	r1, r2
 8008e90:	602b      	str	r3, [r5, #0]
 8008e92:	f7f9 f967 	bl	8002164 <_kill>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d102      	bne.n	8008ea0 <_kill_r+0x1c>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b103      	cbz	r3, 8008ea0 <_kill_r+0x1c>
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000710 	.word	0x20000710

08008ea8 <_getpid_r>:
 8008ea8:	f7f9 b954 	b.w	8002154 <_getpid>

08008eac <_malloc_usable_size_r>:
 8008eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb0:	1f18      	subs	r0, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfbc      	itt	lt
 8008eb6:	580b      	ldrlt	r3, [r1, r0]
 8008eb8:	18c0      	addlt	r0, r0, r3
 8008eba:	4770      	bx	lr

08008ebc <__swhatbuf_r>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	b096      	sub	sp, #88	; 0x58
 8008ec8:	4615      	mov	r5, r2
 8008eca:	461e      	mov	r6, r3
 8008ecc:	da0d      	bge.n	8008eea <__swhatbuf_r+0x2e>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ed4:	f04f 0100 	mov.w	r1, #0
 8008ed8:	bf0c      	ite	eq
 8008eda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ede:	2340      	movne	r3, #64	; 0x40
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	6031      	str	r1, [r6, #0]
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	b016      	add	sp, #88	; 0x58
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	466a      	mov	r2, sp
 8008eec:	f000 f848 	bl	8008f80 <_fstat_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dbec      	blt.n	8008ece <__swhatbuf_r+0x12>
 8008ef4:	9901      	ldr	r1, [sp, #4]
 8008ef6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008efa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008efe:	4259      	negs	r1, r3
 8008f00:	4159      	adcs	r1, r3
 8008f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f06:	e7eb      	b.n	8008ee0 <__swhatbuf_r+0x24>

08008f08 <__smakebuf_r>:
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f0c:	079d      	lsls	r5, r3, #30
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	d507      	bpl.n	8008f24 <__smakebuf_r+0x1c>
 8008f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	b002      	add	sp, #8
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	ab01      	add	r3, sp, #4
 8008f26:	466a      	mov	r2, sp
 8008f28:	f7ff ffc8 	bl	8008ebc <__swhatbuf_r>
 8008f2c:	9900      	ldr	r1, [sp, #0]
 8008f2e:	4605      	mov	r5, r0
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7fe fc27 	bl	8007784 <_malloc_r>
 8008f36:	b948      	cbnz	r0, 8008f4c <__smakebuf_r+0x44>
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d4ef      	bmi.n	8008f20 <__smakebuf_r+0x18>
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e7e3      	b.n	8008f14 <__smakebuf_r+0xc>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	6163      	str	r3, [r4, #20]
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	6120      	str	r0, [r4, #16]
 8008f5e:	b15b      	cbz	r3, 8008f78 <__smakebuf_r+0x70>
 8008f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f64:	4630      	mov	r0, r6
 8008f66:	f000 f81d 	bl	8008fa4 <_isatty_r>
 8008f6a:	b128      	cbz	r0, 8008f78 <__smakebuf_r+0x70>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f023 0303 	bic.w	r3, r3, #3
 8008f72:	f043 0301 	orr.w	r3, r3, #1
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	431d      	orrs	r5, r3
 8008f7c:	81a5      	strh	r5, [r4, #12]
 8008f7e:	e7cf      	b.n	8008f20 <__smakebuf_r+0x18>

08008f80 <_fstat_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	; (8008fa0 <_fstat_r+0x20>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f9 f948 	bl	8002222 <_fstat>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_fstat_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_fstat_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000710 	.word	0x20000710

08008fa4 <_isatty_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d06      	ldr	r5, [pc, #24]	; (8008fc0 <_isatty_r+0x1c>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7f9 f947 	bl	8002242 <_isatty>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_isatty_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_isatty_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000710 	.word	0x20000710

08008fc4 <asin>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	ed2d 8b02 	vpush	{d8}
 8008fca:	ec55 4b10 	vmov	r4, r5, d0
 8008fce:	f000 f93f 	bl	8009250 <__ieee754_asin>
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	eeb0 8a40 	vmov.f32	s16, s0
 8008fde:	eef0 8a60 	vmov.f32	s17, s1
 8008fe2:	f7f7 fda3 	bl	8000b2c <__aeabi_dcmpun>
 8008fe6:	b9a8      	cbnz	r0, 8009014 <asin+0x50>
 8008fe8:	ec45 4b10 	vmov	d0, r4, r5
 8008fec:	f000 f84c 	bl	8009088 <fabs>
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <asin+0x60>)
 8008ff2:	ec51 0b10 	vmov	r0, r1, d0
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f7f7 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8008ffc:	b150      	cbz	r0, 8009014 <asin+0x50>
 8008ffe:	f7fd ff95 	bl	8006f2c <__errno>
 8009002:	ecbd 8b02 	vpop	{d8}
 8009006:	2321      	movs	r3, #33	; 0x21
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900e:	4806      	ldr	r0, [pc, #24]	; (8009028 <asin+0x64>)
 8009010:	f7fd bfc6 	b.w	8006fa0 <nan>
 8009014:	eeb0 0a48 	vmov.f32	s0, s16
 8009018:	eef0 0a68 	vmov.f32	s1, s17
 800901c:	ecbd 8b02 	vpop	{d8}
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	08009e3c 	.word	0x08009e3c

0800902c <atan2>:
 800902c:	f000 bb24 	b.w	8009678 <__ieee754_atan2>

08009030 <sqrt>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	ed2d 8b02 	vpush	{d8}
 8009036:	ec55 4b10 	vmov	r4, r5, d0
 800903a:	f000 f82f 	bl	800909c <__ieee754_sqrt>
 800903e:	4622      	mov	r2, r4
 8009040:	462b      	mov	r3, r5
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	eeb0 8a40 	vmov.f32	s16, s0
 800904a:	eef0 8a60 	vmov.f32	s17, s1
 800904e:	f7f7 fd6d 	bl	8000b2c <__aeabi_dcmpun>
 8009052:	b990      	cbnz	r0, 800907a <sqrt+0x4a>
 8009054:	2200      	movs	r2, #0
 8009056:	2300      	movs	r3, #0
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 fd3e 	bl	8000adc <__aeabi_dcmplt>
 8009060:	b158      	cbz	r0, 800907a <sqrt+0x4a>
 8009062:	f7fd ff63 	bl	8006f2c <__errno>
 8009066:	2321      	movs	r3, #33	; 0x21
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f7f7 fbeb 	bl	800084c <__aeabi_ddiv>
 8009076:	ec41 0b18 	vmov	d8, r0, r1
 800907a:	eeb0 0a48 	vmov.f32	s0, s16
 800907e:	eef0 0a68 	vmov.f32	s1, s17
 8009082:	ecbd 8b02 	vpop	{d8}
 8009086:	bd38      	pop	{r3, r4, r5, pc}

08009088 <fabs>:
 8009088:	ec51 0b10 	vmov	r0, r1, d0
 800908c:	ee10 2a10 	vmov	r2, s0
 8009090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009094:	ec43 2b10 	vmov	d0, r2, r3
 8009098:	4770      	bx	lr
	...

0800909c <__ieee754_sqrt>:
 800909c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	ec55 4b10 	vmov	r4, r5, d0
 80090a4:	4e67      	ldr	r6, [pc, #412]	; (8009244 <__ieee754_sqrt+0x1a8>)
 80090a6:	43ae      	bics	r6, r5
 80090a8:	ee10 0a10 	vmov	r0, s0
 80090ac:	ee10 2a10 	vmov	r2, s0
 80090b0:	4629      	mov	r1, r5
 80090b2:	462b      	mov	r3, r5
 80090b4:	d10d      	bne.n	80090d2 <__ieee754_sqrt+0x36>
 80090b6:	f7f7 fa9f 	bl	80005f8 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 f8e3 	bl	800028c <__adddf3>
 80090c6:	4604      	mov	r4, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	ec45 4b10 	vmov	d0, r4, r5
 80090ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	dc0b      	bgt.n	80090ee <__ieee754_sqrt+0x52>
 80090d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090da:	4326      	orrs	r6, r4
 80090dc:	d0f5      	beq.n	80090ca <__ieee754_sqrt+0x2e>
 80090de:	b135      	cbz	r5, 80090ee <__ieee754_sqrt+0x52>
 80090e0:	f7f7 f8d2 	bl	8000288 <__aeabi_dsub>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	f7f7 fbb0 	bl	800084c <__aeabi_ddiv>
 80090ec:	e7eb      	b.n	80090c6 <__ieee754_sqrt+0x2a>
 80090ee:	1509      	asrs	r1, r1, #20
 80090f0:	f000 808d 	beq.w	800920e <__ieee754_sqrt+0x172>
 80090f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80090fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009100:	07c9      	lsls	r1, r1, #31
 8009102:	bf5c      	itt	pl
 8009104:	005b      	lslpl	r3, r3, #1
 8009106:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800910a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800910e:	bf58      	it	pl
 8009110:	0052      	lslpl	r2, r2, #1
 8009112:	2500      	movs	r5, #0
 8009114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009118:	1076      	asrs	r6, r6, #1
 800911a:	0052      	lsls	r2, r2, #1
 800911c:	f04f 0e16 	mov.w	lr, #22
 8009120:	46ac      	mov	ip, r5
 8009122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009126:	eb0c 0001 	add.w	r0, ip, r1
 800912a:	4298      	cmp	r0, r3
 800912c:	bfde      	ittt	le
 800912e:	1a1b      	suble	r3, r3, r0
 8009130:	eb00 0c01 	addle.w	ip, r0, r1
 8009134:	186d      	addle	r5, r5, r1
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	f1be 0e01 	subs.w	lr, lr, #1
 800913c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009140:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009144:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009148:	d1ed      	bne.n	8009126 <__ieee754_sqrt+0x8a>
 800914a:	4674      	mov	r4, lr
 800914c:	2720      	movs	r7, #32
 800914e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009152:	4563      	cmp	r3, ip
 8009154:	eb01 000e 	add.w	r0, r1, lr
 8009158:	dc02      	bgt.n	8009160 <__ieee754_sqrt+0xc4>
 800915a:	d113      	bne.n	8009184 <__ieee754_sqrt+0xe8>
 800915c:	4290      	cmp	r0, r2
 800915e:	d811      	bhi.n	8009184 <__ieee754_sqrt+0xe8>
 8009160:	2800      	cmp	r0, #0
 8009162:	eb00 0e01 	add.w	lr, r0, r1
 8009166:	da57      	bge.n	8009218 <__ieee754_sqrt+0x17c>
 8009168:	f1be 0f00 	cmp.w	lr, #0
 800916c:	db54      	blt.n	8009218 <__ieee754_sqrt+0x17c>
 800916e:	f10c 0801 	add.w	r8, ip, #1
 8009172:	eba3 030c 	sub.w	r3, r3, ip
 8009176:	4290      	cmp	r0, r2
 8009178:	bf88      	it	hi
 800917a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800917e:	1a12      	subs	r2, r2, r0
 8009180:	440c      	add	r4, r1
 8009182:	46c4      	mov	ip, r8
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	3f01      	subs	r7, #1
 8009188:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800918c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009190:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009194:	d1dd      	bne.n	8009152 <__ieee754_sqrt+0xb6>
 8009196:	4313      	orrs	r3, r2
 8009198:	d01b      	beq.n	80091d2 <__ieee754_sqrt+0x136>
 800919a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009248 <__ieee754_sqrt+0x1ac>
 800919e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800924c <__ieee754_sqrt+0x1b0>
 80091a2:	e9da 0100 	ldrd	r0, r1, [sl]
 80091a6:	e9db 2300 	ldrd	r2, r3, [fp]
 80091aa:	f7f7 f86d 	bl	8000288 <__aeabi_dsub>
 80091ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 fc99 	bl	8000af0 <__aeabi_dcmple>
 80091be:	b140      	cbz	r0, 80091d2 <__ieee754_sqrt+0x136>
 80091c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80091c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80091c8:	e9db 2300 	ldrd	r2, r3, [fp]
 80091cc:	d126      	bne.n	800921c <__ieee754_sqrt+0x180>
 80091ce:	3501      	adds	r5, #1
 80091d0:	463c      	mov	r4, r7
 80091d2:	106a      	asrs	r2, r5, #1
 80091d4:	0863      	lsrs	r3, r4, #1
 80091d6:	07e9      	lsls	r1, r5, #31
 80091d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091e0:	bf48      	it	mi
 80091e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80091ea:	461c      	mov	r4, r3
 80091ec:	e76d      	b.n	80090ca <__ieee754_sqrt+0x2e>
 80091ee:	0ad3      	lsrs	r3, r2, #11
 80091f0:	3815      	subs	r0, #21
 80091f2:	0552      	lsls	r2, r2, #21
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0fa      	beq.n	80091ee <__ieee754_sqrt+0x152>
 80091f8:	02dc      	lsls	r4, r3, #11
 80091fa:	d50a      	bpl.n	8009212 <__ieee754_sqrt+0x176>
 80091fc:	f1c1 0420 	rsb	r4, r1, #32
 8009200:	fa22 f404 	lsr.w	r4, r2, r4
 8009204:	1e4d      	subs	r5, r1, #1
 8009206:	408a      	lsls	r2, r1
 8009208:	4323      	orrs	r3, r4
 800920a:	1b41      	subs	r1, r0, r5
 800920c:	e772      	b.n	80090f4 <__ieee754_sqrt+0x58>
 800920e:	4608      	mov	r0, r1
 8009210:	e7f0      	b.n	80091f4 <__ieee754_sqrt+0x158>
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	3101      	adds	r1, #1
 8009216:	e7ef      	b.n	80091f8 <__ieee754_sqrt+0x15c>
 8009218:	46e0      	mov	r8, ip
 800921a:	e7aa      	b.n	8009172 <__ieee754_sqrt+0xd6>
 800921c:	f7f7 f836 	bl	800028c <__adddf3>
 8009220:	e9da 8900 	ldrd	r8, r9, [sl]
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4640      	mov	r0, r8
 800922a:	4649      	mov	r1, r9
 800922c:	f7f7 fc56 	bl	8000adc <__aeabi_dcmplt>
 8009230:	b120      	cbz	r0, 800923c <__ieee754_sqrt+0x1a0>
 8009232:	1ca0      	adds	r0, r4, #2
 8009234:	bf08      	it	eq
 8009236:	3501      	addeq	r5, #1
 8009238:	3402      	adds	r4, #2
 800923a:	e7ca      	b.n	80091d2 <__ieee754_sqrt+0x136>
 800923c:	3401      	adds	r4, #1
 800923e:	f024 0401 	bic.w	r4, r4, #1
 8009242:	e7c6      	b.n	80091d2 <__ieee754_sqrt+0x136>
 8009244:	7ff00000 	.word	0x7ff00000
 8009248:	200002e8 	.word	0x200002e8
 800924c:	200002f0 	.word	0x200002f0

08009250 <__ieee754_asin>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	ed2d 8b04 	vpush	{d8-d9}
 8009258:	ec55 4b10 	vmov	r4, r5, d0
 800925c:	4bcc      	ldr	r3, [pc, #816]	; (8009590 <__ieee754_asin+0x340>)
 800925e:	b083      	sub	sp, #12
 8009260:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009264:	4598      	cmp	r8, r3
 8009266:	9501      	str	r5, [sp, #4]
 8009268:	dd33      	ble.n	80092d2 <__ieee754_asin+0x82>
 800926a:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800926e:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009272:	ea58 0804 	orrs.w	r8, r8, r4
 8009276:	d117      	bne.n	80092a8 <__ieee754_asin+0x58>
 8009278:	a3ab      	add	r3, pc, #684	; (adr r3, 8009528 <__ieee754_asin+0x2d8>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	ee10 0a10 	vmov	r0, s0
 8009282:	4629      	mov	r1, r5
 8009284:	f7f7 f9b8 	bl	80005f8 <__aeabi_dmul>
 8009288:	a3a9      	add	r3, pc, #676	; (adr r3, 8009530 <__ieee754_asin+0x2e0>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	4606      	mov	r6, r0
 8009290:	460f      	mov	r7, r1
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	f7f7 f9af 	bl	80005f8 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f6 fff3 	bl	800028c <__adddf3>
 80092a6:	e00b      	b.n	80092c0 <__ieee754_asin+0x70>
 80092a8:	ee10 2a10 	vmov	r2, s0
 80092ac:	462b      	mov	r3, r5
 80092ae:	ee10 0a10 	vmov	r0, s0
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f6 ffe8 	bl	8000288 <__aeabi_dsub>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	f7f7 fac6 	bl	800084c <__aeabi_ddiv>
 80092c0:	4604      	mov	r4, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	ec45 4b10 	vmov	d0, r4, r5
 80092c8:	b003      	add	sp, #12
 80092ca:	ecbd 8b04 	vpop	{d8-d9}
 80092ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d2:	4bb0      	ldr	r3, [pc, #704]	; (8009594 <__ieee754_asin+0x344>)
 80092d4:	4598      	cmp	r8, r3
 80092d6:	dc11      	bgt.n	80092fc <__ieee754_asin+0xac>
 80092d8:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80092dc:	f280 80ae 	bge.w	800943c <__ieee754_asin+0x1ec>
 80092e0:	a395      	add	r3, pc, #596	; (adr r3, 8009538 <__ieee754_asin+0x2e8>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	ee10 0a10 	vmov	r0, s0
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ffce 	bl	800028c <__adddf3>
 80092f0:	4ba9      	ldr	r3, [pc, #676]	; (8009598 <__ieee754_asin+0x348>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	f7f7 fc10 	bl	8000b18 <__aeabi_dcmpgt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d1e3      	bne.n	80092c4 <__ieee754_asin+0x74>
 80092fc:	ec45 4b10 	vmov	d0, r4, r5
 8009300:	f7ff fec2 	bl	8009088 <fabs>
 8009304:	49a4      	ldr	r1, [pc, #656]	; (8009598 <__ieee754_asin+0x348>)
 8009306:	ec53 2b10 	vmov	r2, r3, d0
 800930a:	2000      	movs	r0, #0
 800930c:	f7f6 ffbc 	bl	8000288 <__aeabi_dsub>
 8009310:	4ba2      	ldr	r3, [pc, #648]	; (800959c <__ieee754_asin+0x34c>)
 8009312:	2200      	movs	r2, #0
 8009314:	f7f7 f970 	bl	80005f8 <__aeabi_dmul>
 8009318:	a389      	add	r3, pc, #548	; (adr r3, 8009540 <__ieee754_asin+0x2f0>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	a388      	add	r3, pc, #544	; (adr r3, 8009548 <__ieee754_asin+0x2f8>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7f6 ffae 	bl	800028c <__adddf3>
 8009330:	4622      	mov	r2, r4
 8009332:	462b      	mov	r3, r5
 8009334:	f7f7 f960 	bl	80005f8 <__aeabi_dmul>
 8009338:	a385      	add	r3, pc, #532	; (adr r3, 8009550 <__ieee754_asin+0x300>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ffa3 	bl	8000288 <__aeabi_dsub>
 8009342:	4622      	mov	r2, r4
 8009344:	462b      	mov	r3, r5
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	a383      	add	r3, pc, #524	; (adr r3, 8009558 <__ieee754_asin+0x308>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ff9c 	bl	800028c <__adddf3>
 8009354:	4622      	mov	r2, r4
 8009356:	462b      	mov	r3, r5
 8009358:	f7f7 f94e 	bl	80005f8 <__aeabi_dmul>
 800935c:	a380      	add	r3, pc, #512	; (adr r3, 8009560 <__ieee754_asin+0x310>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f6 ff91 	bl	8000288 <__aeabi_dsub>
 8009366:	4622      	mov	r2, r4
 8009368:	462b      	mov	r3, r5
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	a37e      	add	r3, pc, #504	; (adr r3, 8009568 <__ieee754_asin+0x318>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 ff8a 	bl	800028c <__adddf3>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	a37b      	add	r3, pc, #492	; (adr r3, 8009570 <__ieee754_asin+0x320>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	ec41 0b18 	vmov	d8, r0, r1
 800938a:	4620      	mov	r0, r4
 800938c:	4629      	mov	r1, r5
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	a379      	add	r3, pc, #484	; (adr r3, 8009578 <__ieee754_asin+0x328>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff76 	bl	8000288 <__aeabi_dsub>
 800939c:	4622      	mov	r2, r4
 800939e:	462b      	mov	r3, r5
 80093a0:	f7f7 f92a 	bl	80005f8 <__aeabi_dmul>
 80093a4:	a376      	add	r3, pc, #472	; (adr r3, 8009580 <__ieee754_asin+0x330>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff6f 	bl	800028c <__adddf3>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	a374      	add	r3, pc, #464	; (adr r3, 8009588 <__ieee754_asin+0x338>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff64 	bl	8000288 <__aeabi_dsub>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f918 	bl	80005f8 <__aeabi_dmul>
 80093c8:	4b73      	ldr	r3, [pc, #460]	; (8009598 <__ieee754_asin+0x348>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f6 ff5e 	bl	800028c <__adddf3>
 80093d0:	ec45 4b10 	vmov	d0, r4, r5
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	f7ff fe60 	bl	800909c <__ieee754_sqrt>
 80093dc:	4b70      	ldr	r3, [pc, #448]	; (80095a0 <__ieee754_asin+0x350>)
 80093de:	4598      	cmp	r8, r3
 80093e0:	ec5b ab10 	vmov	sl, fp, d0
 80093e4:	f340 80de 	ble.w	80095a4 <__ieee754_asin+0x354>
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	ec51 0b18 	vmov	r0, r1, d8
 80093f0:	f7f7 fa2c 	bl	800084c <__aeabi_ddiv>
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	4652      	mov	r2, sl
 80093fe:	465b      	mov	r3, fp
 8009400:	f7f6 ff44 	bl	800028c <__adddf3>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	f7f6 ff40 	bl	800028c <__adddf3>
 800940c:	a348      	add	r3, pc, #288	; (adr r3, 8009530 <__ieee754_asin+0x2e0>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f6 ff39 	bl	8000288 <__aeabi_dsub>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	a143      	add	r1, pc, #268	; (adr r1, 8009528 <__ieee754_asin+0x2d8>)
 800941c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009420:	f7f6 ff32 	bl	8000288 <__aeabi_dsub>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfdc      	itt	le
 800942a:	4602      	movle	r2, r0
 800942c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	bfdc      	itt	le
 8009436:	4614      	movle	r4, r2
 8009438:	461d      	movle	r5, r3
 800943a:	e743      	b.n	80092c4 <__ieee754_asin+0x74>
 800943c:	ee10 2a10 	vmov	r2, s0
 8009440:	ee10 0a10 	vmov	r0, s0
 8009444:	462b      	mov	r3, r5
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 f8d6 	bl	80005f8 <__aeabi_dmul>
 800944c:	a33c      	add	r3, pc, #240	; (adr r3, 8009540 <__ieee754_asin+0x2f0>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	4606      	mov	r6, r0
 8009454:	460f      	mov	r7, r1
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	a33b      	add	r3, pc, #236	; (adr r3, 8009548 <__ieee754_asin+0x2f8>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f6 ff14 	bl	800028c <__adddf3>
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	f7f7 f8c6 	bl	80005f8 <__aeabi_dmul>
 800946c:	a338      	add	r3, pc, #224	; (adr r3, 8009550 <__ieee754_asin+0x300>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	4632      	mov	r2, r6
 8009478:	463b      	mov	r3, r7
 800947a:	f7f7 f8bd 	bl	80005f8 <__aeabi_dmul>
 800947e:	a336      	add	r3, pc, #216	; (adr r3, 8009558 <__ieee754_asin+0x308>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 ff02 	bl	800028c <__adddf3>
 8009488:	4632      	mov	r2, r6
 800948a:	463b      	mov	r3, r7
 800948c:	f7f7 f8b4 	bl	80005f8 <__aeabi_dmul>
 8009490:	a333      	add	r3, pc, #204	; (adr r3, 8009560 <__ieee754_asin+0x310>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 fef7 	bl	8000288 <__aeabi_dsub>
 800949a:	4632      	mov	r2, r6
 800949c:	463b      	mov	r3, r7
 800949e:	f7f7 f8ab 	bl	80005f8 <__aeabi_dmul>
 80094a2:	a331      	add	r3, pc, #196	; (adr r3, 8009568 <__ieee754_asin+0x318>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 fef0 	bl	800028c <__adddf3>
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	f7f7 f8a2 	bl	80005f8 <__aeabi_dmul>
 80094b4:	a32e      	add	r3, pc, #184	; (adr r3, 8009570 <__ieee754_asin+0x320>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 f899 	bl	80005f8 <__aeabi_dmul>
 80094c6:	a32c      	add	r3, pc, #176	; (adr r3, 8009578 <__ieee754_asin+0x328>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f6 fedc 	bl	8000288 <__aeabi_dsub>
 80094d0:	4632      	mov	r2, r6
 80094d2:	463b      	mov	r3, r7
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	a329      	add	r3, pc, #164	; (adr r3, 8009580 <__ieee754_asin+0x330>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f6 fed5 	bl	800028c <__adddf3>
 80094e2:	4632      	mov	r2, r6
 80094e4:	463b      	mov	r3, r7
 80094e6:	f7f7 f887 	bl	80005f8 <__aeabi_dmul>
 80094ea:	a327      	add	r3, pc, #156	; (adr r3, 8009588 <__ieee754_asin+0x338>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f6 feca 	bl	8000288 <__aeabi_dsub>
 80094f4:	4632      	mov	r2, r6
 80094f6:	463b      	mov	r3, r7
 80094f8:	f7f7 f87e 	bl	80005f8 <__aeabi_dmul>
 80094fc:	4b26      	ldr	r3, [pc, #152]	; (8009598 <__ieee754_asin+0x348>)
 80094fe:	2200      	movs	r2, #0
 8009500:	f7f6 fec4 	bl	800028c <__adddf3>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4640      	mov	r0, r8
 800950a:	4649      	mov	r1, r9
 800950c:	f7f7 f99e 	bl	800084c <__aeabi_ddiv>
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	f7f7 f870 	bl	80005f8 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	e6bf      	b.n	80092a2 <__ieee754_asin+0x52>
 8009522:	bf00      	nop
 8009524:	f3af 8000 	nop.w
 8009528:	54442d18 	.word	0x54442d18
 800952c:	3ff921fb 	.word	0x3ff921fb
 8009530:	33145c07 	.word	0x33145c07
 8009534:	3c91a626 	.word	0x3c91a626
 8009538:	8800759c 	.word	0x8800759c
 800953c:	7e37e43c 	.word	0x7e37e43c
 8009540:	0dfdf709 	.word	0x0dfdf709
 8009544:	3f023de1 	.word	0x3f023de1
 8009548:	7501b288 	.word	0x7501b288
 800954c:	3f49efe0 	.word	0x3f49efe0
 8009550:	b5688f3b 	.word	0xb5688f3b
 8009554:	3fa48228 	.word	0x3fa48228
 8009558:	0e884455 	.word	0x0e884455
 800955c:	3fc9c155 	.word	0x3fc9c155
 8009560:	03eb6f7d 	.word	0x03eb6f7d
 8009564:	3fd4d612 	.word	0x3fd4d612
 8009568:	55555555 	.word	0x55555555
 800956c:	3fc55555 	.word	0x3fc55555
 8009570:	b12e9282 	.word	0xb12e9282
 8009574:	3fb3b8c5 	.word	0x3fb3b8c5
 8009578:	1b8d0159 	.word	0x1b8d0159
 800957c:	3fe6066c 	.word	0x3fe6066c
 8009580:	9c598ac8 	.word	0x9c598ac8
 8009584:	40002ae5 	.word	0x40002ae5
 8009588:	1c8a2d4b 	.word	0x1c8a2d4b
 800958c:	40033a27 	.word	0x40033a27
 8009590:	3fefffff 	.word	0x3fefffff
 8009594:	3fdfffff 	.word	0x3fdfffff
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	3fef3332 	.word	0x3fef3332
 80095a4:	ee10 2a10 	vmov	r2, s0
 80095a8:	ee10 0a10 	vmov	r0, s0
 80095ac:	465b      	mov	r3, fp
 80095ae:	4659      	mov	r1, fp
 80095b0:	f7f6 fe6c 	bl	800028c <__adddf3>
 80095b4:	4632      	mov	r2, r6
 80095b6:	463b      	mov	r3, r7
 80095b8:	ec41 0b19 	vmov	d9, r0, r1
 80095bc:	ec51 0b18 	vmov	r0, r1, d8
 80095c0:	f7f7 f944 	bl	800084c <__aeabi_ddiv>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	ec51 0b19 	vmov	r0, r1, d9
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	f04f 0800 	mov.w	r8, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	4642      	mov	r2, r8
 80095da:	465b      	mov	r3, fp
 80095dc:	4640      	mov	r0, r8
 80095de:	4659      	mov	r1, fp
 80095e0:	f7f7 f80a 	bl	80005f8 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f6 fe4c 	bl	8000288 <__aeabi_dsub>
 80095f0:	4642      	mov	r2, r8
 80095f2:	4604      	mov	r4, r0
 80095f4:	460d      	mov	r5, r1
 80095f6:	465b      	mov	r3, fp
 80095f8:	4650      	mov	r0, sl
 80095fa:	4659      	mov	r1, fp
 80095fc:	f7f6 fe46 	bl	800028c <__adddf3>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f7 f920 	bl	800084c <__aeabi_ddiv>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	f7f6 fe3c 	bl	800028c <__adddf3>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	a113      	add	r1, pc, #76	; (adr r1, 8009668 <__ieee754_asin+0x418>)
 800961a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961e:	f7f6 fe33 	bl	8000288 <__aeabi_dsub>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f6 fe2d 	bl	8000288 <__aeabi_dsub>
 800962e:	4642      	mov	r2, r8
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	465b      	mov	r3, fp
 8009636:	4640      	mov	r0, r8
 8009638:	4659      	mov	r1, fp
 800963a:	f7f6 fe27 	bl	800028c <__adddf3>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	a10b      	add	r1, pc, #44	; (adr r1, 8009670 <__ieee754_asin+0x420>)
 8009644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009648:	f7f6 fe1e 	bl	8000288 <__aeabi_dsub>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f6 fe18 	bl	8000288 <__aeabi_dsub>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	a104      	add	r1, pc, #16	; (adr r1, 8009670 <__ieee754_asin+0x420>)
 800965e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009662:	e6dd      	b.n	8009420 <__ieee754_asin+0x1d0>
 8009664:	f3af 8000 	nop.w
 8009668:	33145c07 	.word	0x33145c07
 800966c:	3c91a626 	.word	0x3c91a626
 8009670:	54442d18 	.word	0x54442d18
 8009674:	3fe921fb 	.word	0x3fe921fb

08009678 <__ieee754_atan2>:
 8009678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800967c:	ec57 6b11 	vmov	r6, r7, d1
 8009680:	4273      	negs	r3, r6
 8009682:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009800 <__ieee754_atan2+0x188>
 8009686:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800968a:	4333      	orrs	r3, r6
 800968c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009690:	4543      	cmp	r3, r8
 8009692:	ec51 0b10 	vmov	r0, r1, d0
 8009696:	ee11 5a10 	vmov	r5, s2
 800969a:	d80a      	bhi.n	80096b2 <__ieee754_atan2+0x3a>
 800969c:	4244      	negs	r4, r0
 800969e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096a2:	4304      	orrs	r4, r0
 80096a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80096a8:	4544      	cmp	r4, r8
 80096aa:	ee10 9a10 	vmov	r9, s0
 80096ae:	468e      	mov	lr, r1
 80096b0:	d907      	bls.n	80096c2 <__ieee754_atan2+0x4a>
 80096b2:	4632      	mov	r2, r6
 80096b4:	463b      	mov	r3, r7
 80096b6:	f7f6 fde9 	bl	800028c <__adddf3>
 80096ba:	ec41 0b10 	vmov	d0, r0, r1
 80096be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80096c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096ca:	4334      	orrs	r4, r6
 80096cc:	d103      	bne.n	80096d6 <__ieee754_atan2+0x5e>
 80096ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d2:	f000 b899 	b.w	8009808 <atan>
 80096d6:	17bc      	asrs	r4, r7, #30
 80096d8:	f004 0402 	and.w	r4, r4, #2
 80096dc:	ea53 0909 	orrs.w	r9, r3, r9
 80096e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80096e4:	d107      	bne.n	80096f6 <__ieee754_atan2+0x7e>
 80096e6:	2c02      	cmp	r4, #2
 80096e8:	d05f      	beq.n	80097aa <__ieee754_atan2+0x132>
 80096ea:	2c03      	cmp	r4, #3
 80096ec:	d1e5      	bne.n	80096ba <__ieee754_atan2+0x42>
 80096ee:	a140      	add	r1, pc, #256	; (adr r1, 80097f0 <__ieee754_atan2+0x178>)
 80096f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f4:	e7e1      	b.n	80096ba <__ieee754_atan2+0x42>
 80096f6:	4315      	orrs	r5, r2
 80096f8:	d106      	bne.n	8009708 <__ieee754_atan2+0x90>
 80096fa:	f1be 0f00 	cmp.w	lr, #0
 80096fe:	da5f      	bge.n	80097c0 <__ieee754_atan2+0x148>
 8009700:	a13d      	add	r1, pc, #244	; (adr r1, 80097f8 <__ieee754_atan2+0x180>)
 8009702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009706:	e7d8      	b.n	80096ba <__ieee754_atan2+0x42>
 8009708:	4542      	cmp	r2, r8
 800970a:	d10f      	bne.n	800972c <__ieee754_atan2+0xb4>
 800970c:	4293      	cmp	r3, r2
 800970e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009712:	d107      	bne.n	8009724 <__ieee754_atan2+0xac>
 8009714:	2c02      	cmp	r4, #2
 8009716:	d84c      	bhi.n	80097b2 <__ieee754_atan2+0x13a>
 8009718:	4b33      	ldr	r3, [pc, #204]	; (80097e8 <__ieee754_atan2+0x170>)
 800971a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800971e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009722:	e7ca      	b.n	80096ba <__ieee754_atan2+0x42>
 8009724:	2c02      	cmp	r4, #2
 8009726:	d848      	bhi.n	80097ba <__ieee754_atan2+0x142>
 8009728:	4b30      	ldr	r3, [pc, #192]	; (80097ec <__ieee754_atan2+0x174>)
 800972a:	e7f6      	b.n	800971a <__ieee754_atan2+0xa2>
 800972c:	4543      	cmp	r3, r8
 800972e:	d0e4      	beq.n	80096fa <__ieee754_atan2+0x82>
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009736:	ea4f 5223 	mov.w	r2, r3, asr #20
 800973a:	da1e      	bge.n	800977a <__ieee754_atan2+0x102>
 800973c:	2f00      	cmp	r7, #0
 800973e:	da01      	bge.n	8009744 <__ieee754_atan2+0xcc>
 8009740:	323c      	adds	r2, #60	; 0x3c
 8009742:	db1e      	blt.n	8009782 <__ieee754_atan2+0x10a>
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	f7f7 f880 	bl	800084c <__aeabi_ddiv>
 800974c:	ec41 0b10 	vmov	d0, r0, r1
 8009750:	f7ff fc9a 	bl	8009088 <fabs>
 8009754:	f000 f858 	bl	8009808 <atan>
 8009758:	ec51 0b10 	vmov	r0, r1, d0
 800975c:	2c01      	cmp	r4, #1
 800975e:	d013      	beq.n	8009788 <__ieee754_atan2+0x110>
 8009760:	2c02      	cmp	r4, #2
 8009762:	d015      	beq.n	8009790 <__ieee754_atan2+0x118>
 8009764:	2c00      	cmp	r4, #0
 8009766:	d0a8      	beq.n	80096ba <__ieee754_atan2+0x42>
 8009768:	a317      	add	r3, pc, #92	; (adr r3, 80097c8 <__ieee754_atan2+0x150>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f6 fd8b 	bl	8000288 <__aeabi_dsub>
 8009772:	a317      	add	r3, pc, #92	; (adr r3, 80097d0 <__ieee754_atan2+0x158>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	e014      	b.n	80097a4 <__ieee754_atan2+0x12c>
 800977a:	a117      	add	r1, pc, #92	; (adr r1, 80097d8 <__ieee754_atan2+0x160>)
 800977c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009780:	e7ec      	b.n	800975c <__ieee754_atan2+0xe4>
 8009782:	2000      	movs	r0, #0
 8009784:	2100      	movs	r1, #0
 8009786:	e7e9      	b.n	800975c <__ieee754_atan2+0xe4>
 8009788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800978c:	4619      	mov	r1, r3
 800978e:	e794      	b.n	80096ba <__ieee754_atan2+0x42>
 8009790:	a30d      	add	r3, pc, #52	; (adr r3, 80097c8 <__ieee754_atan2+0x150>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd77 	bl	8000288 <__aeabi_dsub>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	a10c      	add	r1, pc, #48	; (adr r1, 80097d0 <__ieee754_atan2+0x158>)
 80097a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a4:	f7f6 fd70 	bl	8000288 <__aeabi_dsub>
 80097a8:	e787      	b.n	80096ba <__ieee754_atan2+0x42>
 80097aa:	a109      	add	r1, pc, #36	; (adr r1, 80097d0 <__ieee754_atan2+0x158>)
 80097ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b0:	e783      	b.n	80096ba <__ieee754_atan2+0x42>
 80097b2:	a10b      	add	r1, pc, #44	; (adr r1, 80097e0 <__ieee754_atan2+0x168>)
 80097b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b8:	e77f      	b.n	80096ba <__ieee754_atan2+0x42>
 80097ba:	2000      	movs	r0, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	e77c      	b.n	80096ba <__ieee754_atan2+0x42>
 80097c0:	a105      	add	r1, pc, #20	; (adr r1, 80097d8 <__ieee754_atan2+0x160>)
 80097c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c6:	e778      	b.n	80096ba <__ieee754_atan2+0x42>
 80097c8:	33145c07 	.word	0x33145c07
 80097cc:	3ca1a626 	.word	0x3ca1a626
 80097d0:	54442d18 	.word	0x54442d18
 80097d4:	400921fb 	.word	0x400921fb
 80097d8:	54442d18 	.word	0x54442d18
 80097dc:	3ff921fb 	.word	0x3ff921fb
 80097e0:	54442d18 	.word	0x54442d18
 80097e4:	3fe921fb 	.word	0x3fe921fb
 80097e8:	0800a138 	.word	0x0800a138
 80097ec:	0800a150 	.word	0x0800a150
 80097f0:	54442d18 	.word	0x54442d18
 80097f4:	c00921fb 	.word	0xc00921fb
 80097f8:	54442d18 	.word	0x54442d18
 80097fc:	bff921fb 	.word	0xbff921fb
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	00000000 	.word	0x00000000

08009808 <atan>:
 8009808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	ec55 4b10 	vmov	r4, r5, d0
 8009810:	4bc3      	ldr	r3, [pc, #780]	; (8009b20 <atan+0x318>)
 8009812:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009816:	429e      	cmp	r6, r3
 8009818:	46ab      	mov	fp, r5
 800981a:	dd18      	ble.n	800984e <atan+0x46>
 800981c:	4bc1      	ldr	r3, [pc, #772]	; (8009b24 <atan+0x31c>)
 800981e:	429e      	cmp	r6, r3
 8009820:	dc01      	bgt.n	8009826 <atan+0x1e>
 8009822:	d109      	bne.n	8009838 <atan+0x30>
 8009824:	b144      	cbz	r4, 8009838 <atan+0x30>
 8009826:	4622      	mov	r2, r4
 8009828:	462b      	mov	r3, r5
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	f7f6 fd2d 	bl	800028c <__adddf3>
 8009832:	4604      	mov	r4, r0
 8009834:	460d      	mov	r5, r1
 8009836:	e006      	b.n	8009846 <atan+0x3e>
 8009838:	f1bb 0f00 	cmp.w	fp, #0
 800983c:	f300 8131 	bgt.w	8009aa2 <atan+0x29a>
 8009840:	a59b      	add	r5, pc, #620	; (adr r5, 8009ab0 <atan+0x2a8>)
 8009842:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009846:	ec45 4b10 	vmov	d0, r4, r5
 800984a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	4bb6      	ldr	r3, [pc, #728]	; (8009b28 <atan+0x320>)
 8009850:	429e      	cmp	r6, r3
 8009852:	dc14      	bgt.n	800987e <atan+0x76>
 8009854:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009858:	429e      	cmp	r6, r3
 800985a:	dc0d      	bgt.n	8009878 <atan+0x70>
 800985c:	a396      	add	r3, pc, #600	; (adr r3, 8009ab8 <atan+0x2b0>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	ee10 0a10 	vmov	r0, s0
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd10 	bl	800028c <__adddf3>
 800986c:	4baf      	ldr	r3, [pc, #700]	; (8009b2c <atan+0x324>)
 800986e:	2200      	movs	r2, #0
 8009870:	f7f7 f952 	bl	8000b18 <__aeabi_dcmpgt>
 8009874:	2800      	cmp	r0, #0
 8009876:	d1e6      	bne.n	8009846 <atan+0x3e>
 8009878:	f04f 3aff 	mov.w	sl, #4294967295
 800987c:	e02b      	b.n	80098d6 <atan+0xce>
 800987e:	f7ff fc03 	bl	8009088 <fabs>
 8009882:	4bab      	ldr	r3, [pc, #684]	; (8009b30 <atan+0x328>)
 8009884:	429e      	cmp	r6, r3
 8009886:	ec55 4b10 	vmov	r4, r5, d0
 800988a:	f300 80bf 	bgt.w	8009a0c <atan+0x204>
 800988e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009892:	429e      	cmp	r6, r3
 8009894:	f300 80a0 	bgt.w	80099d8 <atan+0x1d0>
 8009898:	ee10 2a10 	vmov	r2, s0
 800989c:	ee10 0a10 	vmov	r0, s0
 80098a0:	462b      	mov	r3, r5
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7f6 fcf2 	bl	800028c <__adddf3>
 80098a8:	4ba0      	ldr	r3, [pc, #640]	; (8009b2c <atan+0x324>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 fcec 	bl	8000288 <__aeabi_dsub>
 80098b0:	2200      	movs	r2, #0
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098ba:	4620      	mov	r0, r4
 80098bc:	4629      	mov	r1, r5
 80098be:	f7f6 fce5 	bl	800028c <__adddf3>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4630      	mov	r0, r6
 80098c8:	4639      	mov	r1, r7
 80098ca:	f7f6 ffbf 	bl	800084c <__aeabi_ddiv>
 80098ce:	f04f 0a00 	mov.w	sl, #0
 80098d2:	4604      	mov	r4, r0
 80098d4:	460d      	mov	r5, r1
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	4620      	mov	r0, r4
 80098dc:	4629      	mov	r1, r5
 80098de:	f7f6 fe8b 	bl	80005f8 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4680      	mov	r8, r0
 80098e8:	4689      	mov	r9, r1
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	a374      	add	r3, pc, #464	; (adr r3, 8009ac0 <atan+0x2b8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	4606      	mov	r6, r0
 80098f6:	460f      	mov	r7, r1
 80098f8:	f7f6 fe7e 	bl	80005f8 <__aeabi_dmul>
 80098fc:	a372      	add	r3, pc, #456	; (adr r3, 8009ac8 <atan+0x2c0>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fcc3 	bl	800028c <__adddf3>
 8009906:	4632      	mov	r2, r6
 8009908:	463b      	mov	r3, r7
 800990a:	f7f6 fe75 	bl	80005f8 <__aeabi_dmul>
 800990e:	a370      	add	r3, pc, #448	; (adr r3, 8009ad0 <atan+0x2c8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f6 fcba 	bl	800028c <__adddf3>
 8009918:	4632      	mov	r2, r6
 800991a:	463b      	mov	r3, r7
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	a36d      	add	r3, pc, #436	; (adr r3, 8009ad8 <atan+0x2d0>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fcb1 	bl	800028c <__adddf3>
 800992a:	4632      	mov	r2, r6
 800992c:	463b      	mov	r3, r7
 800992e:	f7f6 fe63 	bl	80005f8 <__aeabi_dmul>
 8009932:	a36b      	add	r3, pc, #428	; (adr r3, 8009ae0 <atan+0x2d8>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fca8 	bl	800028c <__adddf3>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	f7f6 fe5a 	bl	80005f8 <__aeabi_dmul>
 8009944:	a368      	add	r3, pc, #416	; (adr r3, 8009ae8 <atan+0x2e0>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	4642      	mov	r2, r8
 8009950:	464b      	mov	r3, r9
 8009952:	f7f6 fe51 	bl	80005f8 <__aeabi_dmul>
 8009956:	a366      	add	r3, pc, #408	; (adr r3, 8009af0 <atan+0x2e8>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	4680      	mov	r8, r0
 800995e:	4689      	mov	r9, r1
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f6 fe48 	bl	80005f8 <__aeabi_dmul>
 8009968:	a363      	add	r3, pc, #396	; (adr r3, 8009af8 <atan+0x2f0>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	4632      	mov	r2, r6
 8009974:	463b      	mov	r3, r7
 8009976:	f7f6 fe3f 	bl	80005f8 <__aeabi_dmul>
 800997a:	a361      	add	r3, pc, #388	; (adr r3, 8009b00 <atan+0x2f8>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc82 	bl	8000288 <__aeabi_dsub>
 8009984:	4632      	mov	r2, r6
 8009986:	463b      	mov	r3, r7
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	a35e      	add	r3, pc, #376	; (adr r3, 8009b08 <atan+0x300>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc79 	bl	8000288 <__aeabi_dsub>
 8009996:	4632      	mov	r2, r6
 8009998:	463b      	mov	r3, r7
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	a35c      	add	r3, pc, #368	; (adr r3, 8009b10 <atan+0x308>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f6 fc70 	bl	8000288 <__aeabi_dsub>
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	f7f6 fe24 	bl	80005f8 <__aeabi_dmul>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f6 fc68 	bl	800028c <__adddf3>
 80099bc:	4622      	mov	r2, r4
 80099be:	462b      	mov	r3, r5
 80099c0:	f7f6 fe1a 	bl	80005f8 <__aeabi_dmul>
 80099c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	d14b      	bne.n	8009a66 <atan+0x25e>
 80099ce:	4620      	mov	r0, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f6 fc59 	bl	8000288 <__aeabi_dsub>
 80099d6:	e72c      	b.n	8009832 <atan+0x2a>
 80099d8:	ee10 0a10 	vmov	r0, s0
 80099dc:	4b53      	ldr	r3, [pc, #332]	; (8009b2c <atan+0x324>)
 80099de:	2200      	movs	r2, #0
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fc51 	bl	8000288 <__aeabi_dsub>
 80099e6:	4b51      	ldr	r3, [pc, #324]	; (8009b2c <atan+0x324>)
 80099e8:	4606      	mov	r6, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	2200      	movs	r2, #0
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc4b 	bl	800028c <__adddf3>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 ff25 	bl	800084c <__aeabi_ddiv>
 8009a02:	f04f 0a01 	mov.w	sl, #1
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	e764      	b.n	80098d6 <atan+0xce>
 8009a0c:	4b49      	ldr	r3, [pc, #292]	; (8009b34 <atan+0x32c>)
 8009a0e:	429e      	cmp	r6, r3
 8009a10:	da1d      	bge.n	8009a4e <atan+0x246>
 8009a12:	ee10 0a10 	vmov	r0, s0
 8009a16:	4b48      	ldr	r3, [pc, #288]	; (8009b38 <atan+0x330>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	4b45      	ldr	r3, [pc, #276]	; (8009b38 <atan+0x330>)
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	2200      	movs	r2, #0
 8009a28:	4620      	mov	r0, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f7f6 fde4 	bl	80005f8 <__aeabi_dmul>
 8009a30:	4b3e      	ldr	r3, [pc, #248]	; (8009b2c <atan+0x324>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f7f6 fc2a 	bl	800028c <__adddf3>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 ff04 	bl	800084c <__aeabi_ddiv>
 8009a44:	f04f 0a02 	mov.w	sl, #2
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	e743      	b.n	80098d6 <atan+0xce>
 8009a4e:	462b      	mov	r3, r5
 8009a50:	ee10 2a10 	vmov	r2, s0
 8009a54:	4939      	ldr	r1, [pc, #228]	; (8009b3c <atan+0x334>)
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7f6 fef8 	bl	800084c <__aeabi_ddiv>
 8009a5c:	f04f 0a03 	mov.w	sl, #3
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	e737      	b.n	80098d6 <atan+0xce>
 8009a66:	4b36      	ldr	r3, [pc, #216]	; (8009b40 <atan+0x338>)
 8009a68:	4e36      	ldr	r6, [pc, #216]	; (8009b44 <atan+0x33c>)
 8009a6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fc09 	bl	8000288 <__aeabi_dsub>
 8009a76:	4622      	mov	r2, r4
 8009a78:	462b      	mov	r3, r5
 8009a7a:	f7f6 fc05 	bl	8000288 <__aeabi_dsub>
 8009a7e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009a8a:	f7f6 fbfd 	bl	8000288 <__aeabi_dsub>
 8009a8e:	f1bb 0f00 	cmp.w	fp, #0
 8009a92:	4604      	mov	r4, r0
 8009a94:	460d      	mov	r5, r1
 8009a96:	f6bf aed6 	bge.w	8009846 <atan+0x3e>
 8009a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a9e:	461d      	mov	r5, r3
 8009aa0:	e6d1      	b.n	8009846 <atan+0x3e>
 8009aa2:	a51d      	add	r5, pc, #116	; (adr r5, 8009b18 <atan+0x310>)
 8009aa4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009aa8:	e6cd      	b.n	8009846 <atan+0x3e>
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w
 8009ab0:	54442d18 	.word	0x54442d18
 8009ab4:	bff921fb 	.word	0xbff921fb
 8009ab8:	8800759c 	.word	0x8800759c
 8009abc:	7e37e43c 	.word	0x7e37e43c
 8009ac0:	e322da11 	.word	0xe322da11
 8009ac4:	3f90ad3a 	.word	0x3f90ad3a
 8009ac8:	24760deb 	.word	0x24760deb
 8009acc:	3fa97b4b 	.word	0x3fa97b4b
 8009ad0:	a0d03d51 	.word	0xa0d03d51
 8009ad4:	3fb10d66 	.word	0x3fb10d66
 8009ad8:	c54c206e 	.word	0xc54c206e
 8009adc:	3fb745cd 	.word	0x3fb745cd
 8009ae0:	920083ff 	.word	0x920083ff
 8009ae4:	3fc24924 	.word	0x3fc24924
 8009ae8:	5555550d 	.word	0x5555550d
 8009aec:	3fd55555 	.word	0x3fd55555
 8009af0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009af4:	bfa2b444 	.word	0xbfa2b444
 8009af8:	52defd9a 	.word	0x52defd9a
 8009afc:	3fadde2d 	.word	0x3fadde2d
 8009b00:	af749a6d 	.word	0xaf749a6d
 8009b04:	3fb3b0f2 	.word	0x3fb3b0f2
 8009b08:	fe231671 	.word	0xfe231671
 8009b0c:	3fbc71c6 	.word	0x3fbc71c6
 8009b10:	9998ebc4 	.word	0x9998ebc4
 8009b14:	3fc99999 	.word	0x3fc99999
 8009b18:	54442d18 	.word	0x54442d18
 8009b1c:	3ff921fb 	.word	0x3ff921fb
 8009b20:	440fffff 	.word	0x440fffff
 8009b24:	7ff00000 	.word	0x7ff00000
 8009b28:	3fdbffff 	.word	0x3fdbffff
 8009b2c:	3ff00000 	.word	0x3ff00000
 8009b30:	3ff2ffff 	.word	0x3ff2ffff
 8009b34:	40038000 	.word	0x40038000
 8009b38:	3ff80000 	.word	0x3ff80000
 8009b3c:	bff00000 	.word	0xbff00000
 8009b40:	0800a188 	.word	0x0800a188
 8009b44:	0800a168 	.word	0x0800a168

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
