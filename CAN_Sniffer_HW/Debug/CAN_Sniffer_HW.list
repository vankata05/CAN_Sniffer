
CAN_Sniffer_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08008d80  08008d80  00018d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009420  08009420  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009428  08009428  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009428  08009428  00019428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08009430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c0  2**0
                  CONTENTS
 10 .bss          00000428  200002c0  200002c0  000202c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e8  200006e8  000202c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fe7c  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d08  00000000  00000000  000301af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c80  00000000  00000000  00032eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000973  00000000  00000000  00033b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023747  00000000  00000000  000344ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112d7  00000000  00000000  00057bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9d42  00000000  00000000  00068ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004508  00000000  00000000  00132c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00137114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d64 	.word	0x08008d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	08008d64 	.word	0x08008d64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9a6 	b.w	8000ed0 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <GNSS_Init>:

GPS L96Data = {0, 0};

uint8_t received = 0;

void GNSS_Init(UART_HandleTypeDef *huart){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	GNSS_Transmit(huart, (uint8_t*)"PMTK104");
 8000edc:	490e      	ldr	r1, [pc, #56]	; (8000f18 <GNSS_Init+0x44>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f89c 	bl	800101c <GNSS_Transmit>
	HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f001 f96a 	bl	80021c0 <HAL_Delay>
	GNSS_Transmit(huart, (uint8_t*)MSG);
 8000eec:	490b      	ldr	r1, [pc, #44]	; (8000f1c <GNSS_Init+0x48>)
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f894 	bl	800101c <GNSS_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA( huart, L96MainBuff, L96MainBuffSize);
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	490a      	ldr	r1, [pc, #40]	; (8000f20 <GNSS_Init+0x4c>)
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f003 fcbb 	bl	8004874 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <GNSS_Init+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <GNSS_Init+0x50>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0208 	bic.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08008d80 	.word	0x08008d80
 8000f1c:	08008d88 	.word	0x08008d88
 8000f20:	2000031c 	.word	0x2000031c
 8000f24:	20000520 	.word	0x20000520

08000f28 <CRC_>:

uint8_t CRC_(const uint8_t* str) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < strlen((char*)str); i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	e009      	b.n	8000f4e <CRC_+0x26>
        checksum ^= (uint8_t)str[i];
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4053      	eors	r3, r2
 8000f46:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < strlen((char*)str); i++) {
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff f93e 	bl	80001d0 <strlen>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8ee      	bhi.n	8000f3a <CRC_+0x12>
    }

    return checksum;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <pharse_GLL>:
//strtok_r(str, outer_delimiters, &outer_saveptr)

//$GNGLL,4239.5628,N,02318.8838,E,152112.000,A,A*45
//4239.5628,N,02318.8838,E,152112.000,A,A*45
//4239563823188844
void pharse_GLL(uint8_t* payload){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if(strstr((char*) payload, ",,,,") != NULL){
 8000f70:	4927      	ldr	r1, [pc, #156]	; (8001010 <pharse_GLL+0xa8>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f005 fe4c 	bl	8006c10 <strstr>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <pharse_GLL+0x22>
		L96Data.lat = 0;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <pharse_GLL+0xac>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
		L96Data.lon = 0;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <pharse_GLL+0xac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
	}
	strtok((char*)payload, ",");
 8000f8a:	4923      	ldr	r1, [pc, #140]	; (8001018 <pharse_GLL+0xb0>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f005 fde3 	bl	8006b58 <strtok>
//	uint8_t lat[10] = {0};
//	uint8_t lon[10] = {0};
	L96Data.lat = (uint32_t)(atof(strtok(NULL, ",")) * 10000);
 8000f92:	4921      	ldr	r1, [pc, #132]	; (8001018 <pharse_GLL+0xb0>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f005 fddf 	bl	8006b58 <strtok>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fe84 	bl	8005caa <atof>
 8000fa2:	ec51 0b10 	vmov	r0, r1, d0
 8000fa6:	a318      	add	r3, pc, #96	; (adr r3, 8001008 <pharse_GLL+0xa0>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fb24 	bl	80005f8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fdb8 	bl	8000b2c <__aeabi_d2uiz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <pharse_GLL+0xac>)
 8000fc0:	6013      	str	r3, [r2, #0]
//	strtok_r((char*)payload, ",", &lat);
	strtok(NULL, ",");
 8000fc2:	4915      	ldr	r1, [pc, #84]	; (8001018 <pharse_GLL+0xb0>)
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f005 fdc7 	bl	8006b58 <strtok>
	L96Data.lon = (uint32_t)(atof(strtok(NULL, ",")) * 10000);
 8000fca:	4913      	ldr	r1, [pc, #76]	; (8001018 <pharse_GLL+0xb0>)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f005 fdc3 	bl	8006b58 <strtok>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fe68 	bl	8005caa <atof>
 8000fda:	ec51 0b10 	vmov	r0, r1, d0
 8000fde:	a30a      	add	r3, pc, #40	; (adr r3, 8001008 <pharse_GLL+0xa0>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fb08 	bl	80005f8 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd9c 	bl	8000b2c <__aeabi_d2uiz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <pharse_GLL+0xac>)
 8000ff8:	6053      	str	r3, [r2, #4]
//	strtok_r((char*)payload, ",", &lon);
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	00000000 	.word	0x00000000
 800100c:	40c38800 	.word	0x40c38800
 8001010:	08008db8 	.word	0x08008db8
 8001014:	2000035c 	.word	0x2000035c
 8001018:	08008dc0 	.word	0x08008dc0

0800101c <GNSS_Transmit>:
	  memset(L96MainBuff, 0, 64);

	  return 1;
}

void GNSS_Transmit(UART_HandleTypeDef *huart, uint8_t* msg){
 800101c:	b580      	push	{r7, lr}
 800101e:	b092      	sub	sp, #72	; 0x48
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	  uint8_t req[64] = {0};
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	223c      	movs	r2, #60	; 0x3c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fd67 	bl	8006b06 <memset>
	  sprintf((char*)req, "$%s*%X\r\n", msg, CRC_((uint8_t*)msg));
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f7ff ff75 	bl	8000f28 <CRC_>
 800103e:	4603      	mov	r3, r0
 8001040:	f107 0008 	add.w	r0, r7, #8
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	490a      	ldr	r1, [pc, #40]	; (8001070 <GNSS_Transmit+0x54>)
 8001048:	f005 fcfa 	bl	8006a40 <siprintf>
	  HAL_UART_Transmit(huart, req, strlen((char*)req), 1000);
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f107 0108 	add.w	r1, r7, #8
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f003 fb74 	bl	8004750 <HAL_UART_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3748      	adds	r7, #72	; 0x48
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08008dd8 	.word	0x08008dd8

08001074 <AT_Send>:
	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
	HAL_UART_Transmit(huart, (uint8_t*)"AT+DR=2\r\n", strlen("AT+DR=2\n"), 1000);
	HAL_Delay(50);
}

void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[64] = {0};
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	223c      	movs	r2, #60	; 0x3c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fd39 	bl	8006b06 <memset>

	sprintf((char*)msg, "AT+SEND=%d:0:%s\r\n", GPS_PORT,  (char*)data);
 8001094:	f107 0010 	add.w	r0, r7, #16
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2201      	movs	r2, #1
 800109c:	490d      	ldr	r1, [pc, #52]	; (80010d4 <AT_Send+0x60>)
 800109e:	f005 fccf 	bl	8006a40 <siprintf>
//	sprintf((char*)msg, "AT+SEND=%d:1:FFFFFFFF\r\n", GPS_PORT);
	HAL_UART_Transmit(huart, (uint8_t*)PREAMBLE, strlen((char*)PREAMBLE), 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	2200      	movs	r2, #0
 80010a8:	490b      	ldr	r1, [pc, #44]	; (80010d8 <AT_Send+0x64>)
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f003 fb50 	bl	8004750 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f88b 	bl	80001d0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0110 	add.w	r1, r7, #16
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f003 fb42 	bl	8004750 <HAL_UART_Transmit>

}
 80010cc:	bf00      	nop
 80010ce:	3750      	adds	r7, #80	; 0x50
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08008e00 	.word	0x08008e00
 80010d8:	08008de4 	.word	0x08008de4

080010dc <Auto_Baudrate_Setup>:
	  }
}

extern UART_HandleTypeDef huart3;

void Auto_Baudrate_Setup(CAN_HandleTypeDef *hcan, uint32_t PRE[]){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for(i = 0; i < 4; i++){
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010ec:	e034      	b.n	8001158 <Auto_Baudrate_Setup+0x7c>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <Auto_Baudrate_Setup+0x10c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d133      	bne.n	8001160 <Auto_Baudrate_Setup+0x84>
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <Auto_Baudrate_Setup+0x110>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12e      	bne.n	8001160 <Auto_Baudrate_Setup+0x84>
		  if(i == 0){
 8001102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10d      	bne.n	8001126 <Auto_Baudrate_Setup+0x4a>
			  CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f91e 	bl	8001354 <CAN1_Init>
			  HAL_CAN_Start(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 fa51 	bl	80025c0 <HAL_CAN_Start>
			  HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f001 f84e 	bl	80021c0 <HAL_Delay>
 8001124:	e013      	b.n	800114e <Auto_Baudrate_Setup+0x72>
		  }else{
			  HAL_CAN_Stop(hcan);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fa8e 	bl	8002648 <HAL_CAN_Stop>
			  CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800112c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f909 	bl	8001354 <CAN1_Init>
			  HAL_CAN_Start(hcan);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f001 fa3c 	bl	80025c0 <HAL_CAN_Start>
			  HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f001 f839 	bl	80021c0 <HAL_Delay>
  for(i = 0; i < 4; i++){
 800114e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001152:	3301      	adds	r3, #1
 8001154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800115c:	2b03      	cmp	r3, #3
 800115e:	d9c6      	bls.n	80010ee <Auto_Baudrate_Setup+0x12>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <Auto_Baudrate_Setup+0x10c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d104      	bne.n	8001174 <Auto_Baudrate_Setup+0x98>
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <Auto_Baudrate_Setup+0x110>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02e      	beq.n	80011d2 <Auto_Baudrate_Setup+0xf6>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8001174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800117c:	3b01      	subs	r3, #1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4919      	ldr	r1, [pc, #100]	; (80011f0 <Auto_Baudrate_Setup+0x114>)
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fc57 	bl	8006a40 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f81a 	bl	80001d0 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f107 010c 	add.w	r1, r7, #12
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <Auto_Baudrate_Setup+0x118>)
 80011aa:	f003 fad1 	bl	8004750 <HAL_UART_Transmit>
	  HAL_CAN_Stop(hcan);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f001 fa4a 	bl	8002648 <HAL_CAN_Stop>
	  hcan->Init.Mode = CAN_MODE_NORMAL;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(hcan);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f001 f824 	bl	8002208 <HAL_CAN_Init>
	  CAN1_Filter_Config(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f898 	bl	80012f6 <CAN1_Filter_Config>
	  HAL_CAN_Start(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f9fa 	bl	80025c0 <HAL_CAN_Start>
	  BDTKTD = 1;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <Auto_Baudrate_Setup+0x11c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <Auto_Baudrate_Setup+0x10c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <Auto_Baudrate_Setup+0x104>
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <Auto_Baudrate_Setup+0x110>)
 80011de:	781b      	ldrb	r3, [r3, #0]
//	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
//	  Error_Handler();
  }
}
 80011e0:	bf00      	nop
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200003ab 	.word	0x200003ab
 80011ec:	200003aa 	.word	0x200003aa
 80011f0:	08008f98 	.word	0x08008f98
 80011f4:	2000047c 	.word	0x2000047c
 80011f8:	200003a9 	.word	0x200003a9

080011fc <Capture_PID>:

uint8_t* Capture_PID(CAN_HandleTypeDef *hcan, Parameters* PID){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	  memset(PID->LastVal, 0 , 8);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3309      	adds	r3, #9
 800120a:	2208      	movs	r2, #8
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fc79 	bl	8006b06 <memset>
//	  PID->LastVal = {0};
	  uint32_t TSLR = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]

	  Capture_PID_(hcan, PID->PID);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f834 	bl	800128c <Capture_PID_>

	  if(IRQRX == 1){
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <Capture_PID+0x88>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d118      	bne.n	800125e <Capture_PID+0x62>
	  	  IRQRX = 0;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <Capture_PID+0x88>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
	  	  TSLR = HAL_GetTick();
 8001232:	f000 ffb9 	bl	80021a8 <HAL_GetTick>
 8001236:	60f8      	str	r0, [r7, #12]
	  }

	  while(IRQRX != 1){
 8001238:	e011      	b.n	800125e <Capture_PID+0x62>
		  if(HAL_GetTick() - TSLR > 5000){
 800123a:	f000 ffb5 	bl	80021a8 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d908      	bls.n	800125e <Capture_PID+0x62>
		  		  //**Retransmit request in case there was no response**
		  		  Capture_PID_(hcan, PID->PID);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f81a 	bl	800128c <Capture_PID_>
		  		  TSLR = HAL_GetTick();
 8001258:	f000 ffa6 	bl	80021a8 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]
	  while(IRQRX != 1){
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <Capture_PID+0x88>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d1e9      	bne.n	800123a <Capture_PID+0x3e>
//		  PID->LastVal = (PID->LastVal<<8) + payload[i];
//	  }
//
//	  PID->LastVal = (PID->LastVal * PID->Scale) + PID->Offset;
//void *	 memcpy (void *__restrict, const void *__restrict, size_t);
	  memcpy(PID->LastVal, payload, 8);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3309      	adds	r3, #9
 800126a:	4907      	ldr	r1, [pc, #28]	; (8001288 <Capture_PID+0x8c>)
 800126c:	461a      	mov	r2, r3
 800126e:	460b      	mov	r3, r1
 8001270:	cb03      	ldmia	r3!, {r0, r1}
 8001272:	6010      	str	r0, [r2, #0]
 8001274:	6051      	str	r1, [r2, #4]
//	  PID->LastVal = payload;

	  return PID->LastVal;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3309      	adds	r3, #9
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200003a8 	.word	0x200003a8
 8001288:	200003ac 	.word	0x200003ac

0800128c <Capture_PID_>:

//	**Helper**
void Capture_PID_(CAN_HandleTypeDef *hcan, uint8_t PID){
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
	  uint32_t mailbox;
	  CAN_TxHeaderTypeDef pHead = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
	  pHead.StdId = 0x7DF;
 80012aa:	f240 73df 	movw	r3, #2015	; 0x7df
 80012ae:	617b      	str	r3, [r7, #20]
	  pHead.IDE = CAN_ID_STD;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
	  pHead.RTR = CAN_RTR_DATA;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	  pHead.DLC = 8;
 80012b8:	2308      	movs	r3, #8
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24

	  uint8_t data[] = {0x02, 0x01, PID, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80012bc:	2302      	movs	r3, #2
 80012be:	733b      	strb	r3, [r7, #12]
 80012c0:	2301      	movs	r3, #1
 80012c2:	737b      	strb	r3, [r7, #13]
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	23aa      	movs	r3, #170	; 0xaa
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	23aa      	movs	r3, #170	; 0xaa
 80012ce:	743b      	strb	r3, [r7, #16]
 80012d0:	23aa      	movs	r3, #170	; 0xaa
 80012d2:	747b      	strb	r3, [r7, #17]
 80012d4:	23aa      	movs	r3, #170	; 0xaa
 80012d6:	74bb      	strb	r3, [r7, #18]
 80012d8:	23aa      	movs	r3, #170	; 0xaa
 80012da:	74fb      	strb	r3, [r7, #19]

	  HAL_CAN_AddTxMessage(hcan, &pHead, data, &mailbox);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	f107 0114 	add.w	r1, r7, #20
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f9f6 	bl	80026da <HAL_CAN_AddTxMessage>

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <CAN1_Filter_Config>:

void CAN1_Filter_Config(CAN_HandleTypeDef *hcan){
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b08c      	sub	sp, #48	; 0x30
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2228      	movs	r2, #40	; 0x28
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f005 fbfd 	bl	8006b06 <memset>

  filters.FilterActivation = ENABLE;
 800130c:	2301      	movs	r3, #1
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  filters.FilterBank = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  filters.FilterIdHigh = 0x7E8 << 5;
 8001320:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001324:	60bb      	str	r3, [r7, #8]
  filters.FilterIdLow = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 800132a:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 800132e:	613b      	str	r3, [r7, #16]
  filters.FilterMaskIdLow = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(hcan, &filters) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f001 f860 	bl	8002400 <HAL_CAN_ConfigFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <CAN1_Filter_Config+0x54>
  {
    Error_Handler();
 8001346:	f000 fb75 	bl	8001a34 <Error_Handler>
  }

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <CAN1_Init>:

void CAN1_Init(uint32_t Prescaler, uint32_t Mode){
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <CAN1_Init+0x94>)
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <CAN1_Init+0x98>)
 8001362:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8001364:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <CAN1_Init+0x94>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <CAN1_Init+0x94>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <CAN1_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <CAN1_Init+0x94>)
 8001378:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800137c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <CAN1_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <CAN1_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <CAN1_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <CAN1_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <CAN1_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <CAN1_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <CAN1_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <CAN1_Init+0x94>)
 80013aa:	f000 ff2d 	bl	8002208 <HAL_CAN_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <CAN1_Init+0x64>
  {
    Error_Handler();
 80013b4:	f000 fb3e 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <CAN1_Init+0x94>)
 80013be:	f001 fb79 	bl	8002ab4 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2228      	movs	r2, #40	; 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 fb9b 	bl	8006b06 <memset>
  filters.FilterActivation = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <CAN1_Init+0x94>)
 80013dc:	f001 f810 	bl	8002400 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200003b8 	.word	0x200003b8
 80013ec:	40006400 	.word	0x40006400

080013f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern UART_HandleTypeDef huart3;

//uint8_t cnt = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxPHead = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxPHead, payload);
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001412:	2100      	movs	r1, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f001 fa3b 	bl	8002890 <HAL_CAN_GetRxMessage>

	HAL_UART_Transmit(&huart3, payload, 8, 1000);
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	2208      	movs	r2, #8
 8001420:	4908      	ldr	r1, [pc, #32]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001424:	f003 f994 	bl	8004750 <HAL_UART_Transmit>

	IRQRX = 1;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
	if(BDTKTD == 1){
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d102      	bne.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
//	  HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
//	  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxPHead, payload);
	  HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f000 fec2 	bl	80021c0 <HAL_Delay>

	}
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200003ac 	.word	0x200003ac
 8001448:	2000047c 	.word	0x2000047c
 800144c:	200003a8 	.word	0x200003a8
 8001450:	200003a9 	.word	0x200003a9

08001454 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
//	L96 RX
	if (huart->Instance == USART3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_UARTEx_RxEventCallback+0x144>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d16a      	bne.n	8001540 <HAL_UARTEx_RxEventCallback+0xec>
	{
		oldPos = newPos;
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_UARTEx_RxEventCallback+0x148>)
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001470:	701a      	strb	r2, [r3, #0]

		if (oldPos+Size > L96MainBuffSize)
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4413      	add	r3, r2
 800147c:	2b40      	cmp	r3, #64	; 0x40
 800147e:	dd25      	ble.n	80014cc <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = L96MainBuffSize-oldPos;
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800148a:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)L96MainBuff+oldPos, L96RxBuff, datatocopy);
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 8001494:	4413      	add	r3, r2
 8001496:	89fa      	ldrh	r2, [r7, #14]
 8001498:	4943      	ldr	r1, [pc, #268]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x154>)
 800149a:	4618      	mov	r0, r3
 800149c:	f005 fc40 	bl	8006d20 <memcpy>

			oldPos = 0;
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			memcpy ((uint8_t *)L96MainBuff, (uint8_t *)L96RxBuff+datatocopy, (Size-datatocopy));
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	4a3f      	ldr	r2, [pc, #252]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x154>)
 80014aa:	1899      	adds	r1, r3, r2
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	483b      	ldr	r0, [pc, #236]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 80014b6:	f005 fc33 	bl	8006d20 <memcpy>
			newPos = (Size-datatocopy);
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_UARTEx_RxEventCallback+0x148>)
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e011      	b.n	80014f0 <HAL_UARTEx_RxEventCallback+0x9c>
		}

		else
		{
			memcpy ((uint8_t *)L96MainBuff+oldPos, L96RxBuff, Size);
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 80014d4:	4413      	add	r3, r2
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	4933      	ldr	r1, [pc, #204]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x154>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fc20 	bl	8006d20 <memcpy>
			newPos = Size+oldPos;
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x14c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_UARTEx_RxEventCallback+0x148>)
 80014ee:	701a      	strb	r2, [r3, #0]
		}

		if(strstr((char*)L96MainBuff, "$PMTK558,") || strstr((char*)L96MainBuff, "$GNGLL,") != NULL){
 80014f0:	492e      	ldr	r1, [pc, #184]	; (80015ac <HAL_UARTEx_RxEventCallback+0x158>)
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 80014f4:	f005 fb8c 	bl	8006c10 <strstr>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_UARTEx_RxEventCallback+0xb8>
 80014fe:	492c      	ldr	r1, [pc, #176]	; (80015b0 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001500:	4828      	ldr	r0, [pc, #160]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 8001502:	f005 fb85 	bl	8006c10 <strstr>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0xbe>
			received = 1;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_UARTEx_RxEventCallback+0x160>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *) L96RxBuff, L96RxBuffSize);
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	4924      	ldr	r1, [pc, #144]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x154>)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f003 f9ac 	bl	8004874 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_UARTEx_RxEventCallback+0x164>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_UARTEx_RxEventCallback+0x164>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0208 	bic.w	r2, r2, #8
 800152a:	601a      	str	r2, [r3, #0]

		if(strstr((char*)L96MainBuff, "$GNGLL,") != NULL){
 800152c:	4920      	ldr	r1, [pc, #128]	; (80015b0 <HAL_UARTEx_RxEventCallback+0x15c>)
 800152e:	481d      	ldr	r0, [pc, #116]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 8001530:	f005 fb6e 	bl	8006c10 <strstr>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_UARTEx_RxEventCallback+0xec>
			pharse_GLL(L96MainBuff);
 800153a:	481a      	ldr	r0, [pc, #104]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x150>)
 800153c:	f7ff fd14 	bl	8000f68 <pharse_GLL>
		}

	}

//	Wio-E5
	if (huart->Instance == USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_UARTEx_RxEventCallback+0x168>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d121      	bne.n	800158e <HAL_UARTEx_RxEventCallback+0x13a>
	{
		if(strstr((char*)E5RxBuff, "JOINED") != NULL){
 800154a:	491d      	ldr	r1, [pc, #116]	; (80015c0 <HAL_UARTEx_RxEventCallback+0x16c>)
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <HAL_UARTEx_RxEventCallback+0x170>)
 800154e:	f005 fb5f 	bl	8006c10 <strstr>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_UARTEx_RxEventCallback+0x10c>
			joined = 1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e00c      	b.n	800157a <HAL_UARTEx_RxEventCallback+0x126>
		}else{
			HAL_UARTEx_ReceiveToIdle_DMA(huart, E5RxBuff, E5RxBuffSize);
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	4918      	ldr	r1, [pc, #96]	; (80015c4 <HAL_UARTEx_RxEventCallback+0x170>)
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f003 f985 	bl	8004874 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_UARTEx_RxEventCallback+0x178>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_UARTEx_RxEventCallback+0x178>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
		}

		if(strstr((char*)E5RxBuff, "FAILED") != NULL)
 800157a:	4915      	ldr	r1, [pc, #84]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <HAL_UARTEx_RxEventCallback+0x170>)
 800157e:	f005 fb47 	bl	8006c10 <strstr>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_UARTEx_RxEventCallback+0x13a>
			joined = 2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x174>)
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]

	}
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004800 	.word	0x40004800
 800159c:	200003b5 	.word	0x200003b5
 80015a0:	200003b4 	.word	0x200003b4
 80015a4:	2000031c 	.word	0x2000031c
 80015a8:	200002dc 	.word	0x200002dc
 80015ac:	08008fc4 	.word	0x08008fc4
 80015b0:	08008fd0 	.word	0x08008fd0
 80015b4:	20000364 	.word	0x20000364
 80015b8:	20000520 	.word	0x20000520
 80015bc:	40004400 	.word	0x40004400
 80015c0:	08008fd8 	.word	0x08008fd8
 80015c4:	20000368 	.word	0x20000368
 80015c8:	20000365 	.word	0x20000365
 80015cc:	200004c0 	.word	0x200004c0
 80015d0:	08008fe0 	.word	0x08008fe0

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0a2      	sub	sp, #136	; 0x88
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f000 fd7f 	bl	80020dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f889 	bl	80016f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(1000);
 80015e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e6:	f000 fdeb 	bl	80021c0 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ea:	f000 f993 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ee:	f000 f969 	bl	80018c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015f2:	f000 f913 	bl	800181c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015f6:	f000 f93b 	bl	8001870 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80015fa:	f000 f8d9 	bl	80017b0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80015fe:	f004 fa8f 	bl	8005b20 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//  LoRa_Init(&huart2);
//  AT_Join(&huart2);;

  Auto_Baudrate_Setup(&hcan1, PRE);
 8001602:	4935      	ldr	r1, [pc, #212]	; (80016d8 <main+0x104>)
 8001604:	4835      	ldr	r0, [pc, #212]	; (80016dc <main+0x108>)
 8001606:	f7ff fd69 	bl	80010dc <Auto_Baudrate_Setup>

  GNSS_Init(&huart3);
 800160a:	4835      	ldr	r0, [pc, #212]	; (80016e0 <main+0x10c>)
 800160c:	f7ff fc62 	bl	8000ed4 <GNSS_Init>

  HAL_CAN_Start(&hcan1);
 8001610:	4832      	ldr	r0, [pc, #200]	; (80016dc <main+0x108>)
 8001612:	f000 ffd5 	bl	80025c0 <HAL_CAN_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  GNSS_Get_Coords(&huart3);

	  if(L96Data.lat != 0 && L96Data.lon != 0){
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <main+0x110>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01d      	beq.n	800165a <main+0x86>
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <main+0x110>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <main+0x86>
		  uint8_t msg[32] = {0};
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]
		  sprintf((char*)msg, "%lu%lu", L96Data.lat, L96Data.lon);
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <main+0x110>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <main+0x110>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	1d38      	adds	r0, r7, #4
 8001648:	4927      	ldr	r1, [pc, #156]	; (80016e8 <main+0x114>)
 800164a:	f005 f9f9 	bl	8006a40 <siprintf>
		  AT_Send(&huart2, msg, GPS_PORT);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <main+0x118>)
 8001656:	f7ff fd0d 	bl	8001074 <AT_Send>
//			  Capture_PID_(&hcan1, i);
//			  HAL_Delay(100);
//		  }
//	  }

	  uint8_t msg[128] = {0};
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	227c      	movs	r2, #124	; 0x7c
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f005 fa4d 	bl	8006b06 <memset>

	  for(int i = 0; i < 10; i++){
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001672:	e022      	b.n	80016ba <main+0xe6>
		  Capture_PID(&hcan1, &PIDs[i]);
 8001674:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <main+0x11c>)
 8001682:	4413      	add	r3, r2
 8001684:	4619      	mov	r1, r3
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <main+0x108>)
 8001688:	f7ff fdb8 	bl	80011fc <Capture_PID>
		  strcat((char*)msg, (char*)PIDs[i].LastVal);
 800168c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	3308      	adds	r3, #8
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <main+0x11c>)
 800169c:	4413      	add	r3, r2
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fa36 	bl	8006b16 <strcat>
		  HAL_Delay(100);
 80016aa:	2064      	movs	r0, #100	; 0x64
 80016ac:	f000 fd88 	bl	80021c0 <HAL_Delay>
	  for(int i = 0; i < 10; i++){
 80016b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b4:	3301      	adds	r3, #1
 80016b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016be:	2b09      	cmp	r3, #9
 80016c0:	ddd8      	ble.n	8001674 <main+0xa0>
	  }

	  AT_Send(&huart2, msg, OBD_PORT);
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2202      	movs	r2, #2
 80016c6:	4619      	mov	r1, r3
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <main+0x118>)
 80016ca:	f7ff fcd3 	bl	8001074 <AT_Send>

//	  uint8_t state[32] = getState(&hcan1);

//	  pharse_GLL((uint8_t*)"$GNGLL,4239.5638,N,02318.8844,E,152057.000,A,A*4F");

	  HAL_Delay(30000);
 80016ce:	f247 5030 	movw	r0, #30000	; 0x7530
 80016d2:	f000 fd75 	bl	80021c0 <HAL_Delay>
  {
 80016d6:	e79e      	b.n	8001616 <main+0x42>
 80016d8:	20000000 	.word	0x20000000
 80016dc:	200003b8 	.word	0x200003b8
 80016e0:	2000047c 	.word	0x2000047c
 80016e4:	2000035c 	.word	0x2000035c
 80016e8:	08008fe8 	.word	0x08008fe8
 80016ec:	20000438 	.word	0x20000438
 80016f0:	20000010 	.word	0x20000010

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f005 f9ff 	bl	8006b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <SystemClock_Config+0xb4>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <SystemClock_Config+0xb4>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <SystemClock_Config+0xb4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <SystemClock_Config+0xb8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <SystemClock_Config+0xb8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <SystemClock_Config+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fac6 	bl	8003cf4 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800176e:	f000 f961 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fd28 	bl	80041e4 <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800179a:	f000 f94b 	bl	8001a34 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	; 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI1_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_SPI1_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI1_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI1_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI1_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_SPI1_Init+0x64>)
 8001802:	f002 fecf 	bl	80045a4 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800180c:	f000 f912 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200003e0 	.word	0x200003e0
 8001818:	40013000 	.word	0x40013000

0800181c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <MX_USART2_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001854:	f002 ff2f 	bl	80046b6 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f8e9 	bl	8001a34 <Error_Handler>
//
//  HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &HAL_UART_RxCpltCallback);

  /* USER CODE END USART2_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000438 	.word	0x20000438
 800186c:	40004400 	.word	0x40004400

08001870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_USART3_UART_Init+0x50>)
 8001878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 800187c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART3_UART_Init+0x4c>)
 80018a8:	f002 ff05 	bl	80046b6 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f000 f8bf 	bl	8001a34 <Error_Handler>

//  HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, HAL_UART_RxCpltCallback);

  /* USER CODE END USART3_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000047c 	.word	0x2000047c
 80018c0:	40004800 	.word	0x40004800

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_DMA_Init+0x4c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <MX_DMA_Init+0x4c>)
 80018d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_DMA_Init+0x4c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	200c      	movs	r0, #12
 80018ec:	f001 fc13 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018f0:	200c      	movs	r0, #12
 80018f2:	f001 fc2c 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2010      	movs	r0, #16
 80018fc:	f001 fc0b 	bl	8003116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001900:	2010      	movs	r0, #16
 8001902:	f001 fc24 	bl	800314e <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <MX_GPIO_Init+0x114>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <MX_GPIO_Init+0x114>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <MX_GPIO_Init+0x114>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_GPIO_Init+0x114>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_GPIO_Init+0x114>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	4815      	ldr	r0, [pc, #84]	; (8001a2c <MX_GPIO_Init+0x118>)
 80019d8:	f002 f972 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NeoPixel_GPIO_Port, NeoPixel_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2101      	movs	r1, #1
 80019e0:	4813      	ldr	r0, [pc, #76]	; (8001a30 <MX_GPIO_Init+0x11c>)
 80019e2:	f002 f96d 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <MX_GPIO_Init+0x118>)
 80019fe:	f001 ffc3 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : NeoPixel_Pin */
  GPIO_InitStruct.Pin = NeoPixel_Pin;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NeoPixel_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_GPIO_Init+0x11c>)
 8001a1a:	f001 ffb5 	bl	8003988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_CAN_MspInit+0xc4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d14b      	bne.n	8001b4a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_CAN_MspInit+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aea:	2303      	movs	r3, #3
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001afa:	2309      	movs	r3, #9
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <HAL_CAN_MspInit+0xcc>)
 8001b06:	f001 ff3f 	bl	8003988 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2013      	movs	r0, #19
 8001b10:	f001 fb01 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b14:	2013      	movs	r0, #19
 8001b16:	f001 fb1a 	bl	800314e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2014      	movs	r0, #20
 8001b20:	f001 faf9 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b24:	2014      	movs	r0, #20
 8001b26:	f001 fb12 	bl	800314e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2015      	movs	r0, #21
 8001b30:	f001 faf1 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b34:	2015      	movs	r0, #21
 8001b36:	f001 fb0a 	bl	800314e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2016      	movs	r0, #22
 8001b40:	f001 fae9 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001b44:	2016      	movs	r0, #22
 8001b46:	f001 fb02 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40006400 	.word	0x40006400
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020c00 	.word	0x40020c00

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_SPI_MspInit+0x84>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12b      	bne.n	8001bda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23e0      	movs	r3, #224	; 0xe0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_SPI_MspInit+0x8c>)
 8001bd6:	f001 fed7 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a68      	ldr	r2, [pc, #416]	; (8001db0 <HAL_UART_MspInit+0x1c0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d162      	bne.n	8001cd8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a66      	ldr	r2, [pc, #408]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a5f      	ldr	r2, [pc, #380]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4854      	ldr	r0, [pc, #336]	; (8001db8 <HAL_UART_MspInit+0x1c8>)
 8001c66:	f001 fe8f 	bl	8003988 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c6c:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_UART_MspInit+0x1d0>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001caa:	4844      	ldr	r0, [pc, #272]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001cac:	f001 fa6a 	bl	8003184 <HAL_DMA_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001cb6:	f7ff febd 	bl	8001a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a3f      	ldr	r2, [pc, #252]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc0:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <HAL_UART_MspInit+0x1cc>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2026      	movs	r0, #38	; 0x26
 8001ccc:	f001 fa23 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd0:	2026      	movs	r0, #38	; 0x26
 8001cd2:	f001 fa3c 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cd6:	e067      	b.n	8001da8 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_UART_MspInit+0x1d4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d162      	bne.n	8001da8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a2b      	ldr	r2, [pc, #172]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_UART_MspInit+0x1c4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <HAL_UART_MspInit+0x1d8>)
 8001d38:	f001 fe26 	bl	8003988 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d3e:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <HAL_UART_MspInit+0x1e0>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d7e:	f001 fa01 	bl	8003184 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001d88:	f7ff fe54 	bl	8001a34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_UART_MspInit+0x1dc>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2027      	movs	r0, #39	; 0x27
 8001d9e:	f001 f9ba 	bl	8003116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da2:	2027      	movs	r0, #39	; 0x27
 8001da4:	f001 f9d3 	bl	800314e <HAL_NVIC_EnableIRQ>
}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	200004c0 	.word	0x200004c0
 8001dc0:	40026088 	.word	0x40026088
 8001dc4:	40004800 	.word	0x40004800
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	20000520 	.word	0x20000520
 8001dd0:	40026028 	.word	0x40026028

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 f9ae 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <DMA1_Stream1_IRQHandler+0x10>)
 8001e2e:	f001 fb41 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000520 	.word	0x20000520

08001e3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <DMA1_Stream5_IRQHandler+0x10>)
 8001e42:	f001 fb37 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200004c0 	.word	0x200004c0

08001e50 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <CAN1_TX_IRQHandler+0x10>)
 8001e56:	f000 fe53 	bl	8002b00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003b8 	.word	0x200003b8

08001e64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  IRQRX0 = 1;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <CAN1_RX0_IRQHandler+0x14>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e6e:	4803      	ldr	r0, [pc, #12]	; (8001e7c <CAN1_RX0_IRQHandler+0x18>)
 8001e70:	f000 fe46 	bl	8002b00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200003aa 	.word	0x200003aa
 8001e7c:	200003b8 	.word	0x200003b8

08001e80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  IRQRX1 = 1;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <CAN1_RX1_IRQHandler+0x14>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <CAN1_RX1_IRQHandler+0x18>)
 8001e8c:	f000 fe38 	bl	8002b00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200003ab 	.word	0x200003ab
 8001e98:	200003b8 	.word	0x200003b8

08001e9c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <CAN1_SCE_IRQHandler+0x10>)
 8001ea2:	f000 fe2d 	bl	8002b00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200003b8 	.word	0x200003b8

08001eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USART2_IRQHandler+0x10>)
 8001eb6:	f002 fd43 	bl	8004940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000438 	.word	0x20000438

08001ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <USART3_IRQHandler+0x10>)
 8001eca:	f002 fd39 	bl	8004940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000047c 	.word	0x2000047c

08001ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_kill>:

int _kill(int pid, int sig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef2:	f004 fee9 	bl	8006cc8 <__errno>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2216      	movs	r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
  return -1;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_exit>:

void _exit (int status)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe7 	bl	8001ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1a:	e7fe      	b.n	8001f1a <_exit+0x12>

08001f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e00a      	b.n	8001f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f2e:	f3af 8000 	nop.w
 8001f32:	4601      	mov	r1, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	b2ca      	uxtb	r2, r1
 8001f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf0      	blt.n	8001f2e <_read+0x12>
  }

  return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e009      	b.n	8001f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf1      	blt.n	8001f68 <_write+0x12>
  }
  return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_close>:

int _close(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_isatty>:

int _isatty(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f004 fe4e 	bl	8006cc8 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20020000 	.word	0x20020000
 8002058:	00000400 	.word	0x00000400
 800205c:	20000580 	.word	0x20000580
 8002060:	200006e8 	.word	0x200006e8

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b2:	f7ff ffd7 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f004 fe0d 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7ff fa8b 	bl	80015d4 <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80020cc:	08009430 	.word	0x08009430
  ldr r2, =_sbss
 80020d0:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80020d4:	200006e8 	.word	0x200006e8

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>
	...

080020dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <HAL_Init+0x40>)
 80020e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_Init+0x40>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_Init+0x40>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 fffb 	bl	8003100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210a:	200f      	movs	r0, #15
 800210c:	f000 f808 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002110:	f7ff fc96 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f001 f813 	bl	800316a <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 ffdb 	bl	8003116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200000d8 	.word	0x200000d8
 8002178:	200000e0 	.word	0x200000e0
 800217c:	200000dc 	.word	0x200000dc

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	200000e0 	.word	0x200000e0
 80021a4:	20000584 	.word	0x20000584

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000584 	.word	0x20000584

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000e0 	.word	0x200000e0

08002208 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0ed      	b.n	80023f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fc32 	bl	8001a90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223c:	f7ff ffb4 	bl	80021a8 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002242:	e012      	b.n	800226a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002244:	f7ff ffb0 	bl	80021a8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b0a      	cmp	r3, #10
 8002250:	d90b      	bls.n	800226a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0c5      	b.n	80023f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0e5      	beq.n	8002244 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0202 	bic.w	r2, r2, #2
 8002286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002288:	f7ff ff8e 	bl	80021a8 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800228e:	e012      	b.n	80022b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002290:	f7ff ff8a 	bl	80021a8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d90b      	bls.n	80022b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2205      	movs	r2, #5
 80022ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e09f      	b.n	80023f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e5      	bne.n	8002290 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e1b      	ldrb	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d108      	bne.n	80022de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e007      	b.n	80022ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e5b      	ldrb	r3, [r3, #25]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e007      	b.n	8002318 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e9b      	ldrb	r3, [r3, #26]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e007      	b.n	8002342 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0220 	bic.w	r2, r2, #32
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7edb      	ldrb	r3, [r3, #27]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0210 	bic.w	r2, r2, #16
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e007      	b.n	800236c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0210 	orr.w	r2, r2, #16
 800236a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7f1b      	ldrb	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0208 	orr.w	r2, r2, #8
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e007      	b.n	8002396 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0208 	bic.w	r2, r2, #8
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7f5b      	ldrb	r3, [r3, #29]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0204 	orr.w	r2, r2, #4
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e007      	b.n	80023c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	ea42 0103 	orr.w	r1, r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d003      	beq.n	8002426 <HAL_CAN_ConfigFilter+0x26>
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b02      	cmp	r3, #2
 8002422:	f040 80be 	bne.w	80025a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_CAN_ConfigFilter+0x1bc>)
 8002428:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002440:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2201      	movs	r2, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	401a      	ands	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d123      	bne.n	80024d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3248      	adds	r2, #72	; 0x48
 80024b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c6:	6979      	ldr	r1, [r7, #20]
 80024c8:	3348      	adds	r3, #72	; 0x48
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d122      	bne.n	800251e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3248      	adds	r2, #72	; 0x48
 80024fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002512:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	3348      	adds	r3, #72	; 0x48
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002538:	e007      	b.n	800254a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002564:	e007      	b.n	8002576 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	431a      	orrs	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	431a      	orrs	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002594:	f023 0201 	bic.w	r2, r3, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40006400 	.word	0x40006400

080025c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d12e      	bne.n	8002632 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ec:	f7ff fddc 	bl	80021a8 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025f2:	e012      	b.n	800261a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f4:	f7ff fdd8 	bl	80021a8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b0a      	cmp	r3, #10
 8002600:	d90b      	bls.n	800261a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2205      	movs	r2, #5
 8002612:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e012      	b.n	8002640 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e5      	bne.n	80025f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e006      	b.n	8002640 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d133      	bne.n	80026c4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800266c:	f7ff fd9c 	bl	80021a8 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002672:	e012      	b.n	800269a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002674:	f7ff fd98 	bl	80021a8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b0a      	cmp	r3, #10
 8002680:	d90b      	bls.n	800269a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2205      	movs	r2, #5
 8002692:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01b      	b.n	80026d2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0e5      	beq.n	8002674 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0202 	bic.w	r2, r2, #2
 80026b6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e006      	b.n	80026d2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026da:	b480      	push	{r7}
 80026dc:	b089      	sub	sp, #36	; 0x24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d003      	beq.n	8002706 <HAL_CAN_AddTxMessage+0x2c>
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	2b02      	cmp	r3, #2
 8002702:	f040 80b8 	bne.w	8002876 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a0 	beq.w	8002866 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	0e1b      	lsrs	r3, r3, #24
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d907      	bls.n	8002746 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e09e      	b.n	8002884 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002746:	2201      	movs	r2, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	6809      	ldr	r1, [r1, #0]
 8002766:	431a      	orrs	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3318      	adds	r3, #24
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	440b      	add	r3, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800277e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002788:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3318      	adds	r3, #24
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	440b      	add	r3, r1
 8002792:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3318      	adds	r3, #24
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	440b      	add	r3, r1
 80027a4:	3304      	adds	r3, #4
 80027a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	7d1b      	ldrb	r3, [r3, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d111      	bne.n	80027d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3318      	adds	r3, #24
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3318      	adds	r3, #24
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	440b      	add	r3, r1
 80027d0:	3304      	adds	r3, #4
 80027d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3307      	adds	r3, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	061a      	lsls	r2, r3, #24
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3306      	adds	r3, #6
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3305      	adds	r3, #5
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	4313      	orrs	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	3204      	adds	r2, #4
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	4610      	mov	r0, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	6811      	ldr	r1, [r2, #0]
 80027fc:	ea43 0200 	orr.w	r2, r3, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800280a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3303      	adds	r3, #3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	061a      	lsls	r2, r3, #24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3302      	adds	r3, #2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3301      	adds	r3, #1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4313      	orrs	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	4610      	mov	r0, r2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	ea43 0200 	orr.w	r2, r3, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	440b      	add	r3, r1
 800283c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002840:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3318      	adds	r3, #24
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	6811      	ldr	r1, [r2, #0]
 8002854:	f043 0201 	orr.w	r2, r3, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3318      	adds	r3, #24
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	440b      	add	r3, r1
 8002860:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e00e      	b.n	8002884 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e006      	b.n	8002884 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3724      	adds	r7, #36	; 0x24
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d003      	beq.n	80028b4 <HAL_CAN_GetRxMessage+0x24>
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 80f3 	bne.w	8002a9a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0e7      	b.n	8002aa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0d8      	b.n	8002aa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	331b      	adds	r3, #27
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0204 	and.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	331b      	adds	r3, #27
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0d5b      	lsrs	r3, r3, #21
 8002924:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e00b      	b.n	8002946 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	331b      	adds	r3, #27
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	331b      	adds	r3, #27
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0202 	and.w	r2, r3, #2
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	331b      	adds	r3, #27
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	331b      	adds	r3, #27
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	331b      	adds	r3, #27
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	3304      	adds	r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	4413      	add	r3, r2
 80029de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0c1a      	lsrs	r2, r3, #16
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	3302      	adds	r3, #2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e1a      	lsrs	r2, r3, #24
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3303      	adds	r3, #3
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0a1a      	lsrs	r2, r3, #8
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3305      	adds	r3, #5
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0c1a      	lsrs	r2, r3, #16
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	3306      	adds	r3, #6
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e1a      	lsrs	r2, r3, #24
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	3307      	adds	r3, #7
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	e007      	b.n	8002a96 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e006      	b.n	8002aa8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <HAL_CAN_ActivateNotification+0x1e>
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d109      	bne.n	8002ae6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6959      	ldr	r1, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e006      	b.n	8002af4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07c      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f983 	bl	8002e6e <HAL_CAN_TxMailbox0CompleteCallback>
 8002b68:	e016      	b.n	8002b98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	e00c      	b.n	8002b98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e002      	b.n	8002b98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f989 	bl	8002eaa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002baa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f963 	bl	8002e82 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bbc:	e016      	b.n	8002bec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e00c      	b.n	8002bec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e002      	b.n	8002bec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f969 	bl	8002ebe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d024      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f943 	bl	8002e96 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c10:	e016      	b.n	8002c40 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	e00c      	b.n	8002c40 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	e002      	b.n	8002c40 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f949 	bl	8002ed2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f930 	bl	8002ee6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fba6 	bl	80013f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f912 	bl	8002f0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8f9 	bl	8002efa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8fc 	bl	8002f22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d006      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8f5 	bl	8002f36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d07b      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d072      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d043      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03e      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dce:	2b60      	cmp	r3, #96	; 0x60
 8002dd0:	d02b      	beq.n	8002e2a <HAL_CAN_IRQHandler+0x32a>
 8002dd2:	2b60      	cmp	r3, #96	; 0x60
 8002dd4:	d82e      	bhi.n	8002e34 <HAL_CAN_IRQHandler+0x334>
 8002dd6:	2b50      	cmp	r3, #80	; 0x50
 8002dd8:	d022      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x320>
 8002dda:	2b50      	cmp	r3, #80	; 0x50
 8002ddc:	d82a      	bhi.n	8002e34 <HAL_CAN_IRQHandler+0x334>
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d019      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x316>
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d826      	bhi.n	8002e34 <HAL_CAN_IRQHandler+0x334>
 8002de6:	2b30      	cmp	r3, #48	; 0x30
 8002de8:	d010      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x30c>
 8002dea:	2b30      	cmp	r3, #48	; 0x30
 8002dec:	d822      	bhi.n	8002e34 <HAL_CAN_IRQHandler+0x334>
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d002      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x2f8>
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d005      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002df6:	e01d      	b.n	8002e34 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	f043 0308 	orr.w	r3, r3, #8
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e00:	e019      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f043 0310 	orr.w	r3, r3, #16
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e0a:	e014      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e14:	e00f      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e1e:	e00a      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e28:	e005      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e32:	e000      	b.n	8002e36 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f872 	bl	8002f4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	; (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030cc:	d301      	bcc.n	80030d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <SysTick_Config+0x40>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030da:	210f      	movs	r1, #15
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f7ff ff8e 	bl	8003000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <SysTick_Config+0x40>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <SysTick_Config+0x40>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff29 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003128:	f7ff ff3e 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 800312c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ff8e 	bl	8003054 <NVIC_EncodePriority>
 8003138:	4602      	mov	r2, r0
 800313a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff5d 	bl	8003000 <__NVIC_SetPriority>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff31 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ffa2 	bl	80030bc <SysTick_Config>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff f80a 	bl	80021a8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e099      	b.n	80032d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c0:	e00f      	b.n	80031e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031c2:	f7fe fff1 	bl	80021a8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d908      	bls.n	80031e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2203      	movs	r2, #3
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e078      	b.n	80032d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e8      	bne.n	80031c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <HAL_DMA_Init+0x158>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800320e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b04      	cmp	r3, #4
 800323a:	d107      	bne.n	800324c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4313      	orrs	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b04      	cmp	r3, #4
 8003274:	d117      	bne.n	80032a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fb01 	bl	8003890 <DMA_CheckFifoParam>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032a2:	2301      	movs	r3, #1
 80032a4:	e016      	b.n	80032d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fab8 	bl	8003824 <DMA_CalcBaseAndBitshift>
 80032b4:	4603      	mov	r3, r0
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	223f      	movs	r2, #63	; 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	f010803f 	.word	0xf010803f

080032e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_DMA_Start_IT+0x26>
 8003302:	2302      	movs	r3, #2
 8003304:	e040      	b.n	8003388 <HAL_DMA_Start_IT+0xa8>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d12f      	bne.n	800337a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fa4a 	bl	80037c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	223f      	movs	r2, #63	; 0x3f
 800333a:	409a      	lsls	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0216 	orr.w	r2, r2, #22
 800334e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e005      	b.n	8003386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800339e:	f7fe ff03 	bl	80021a8 <HAL_GetTick>
 80033a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d008      	beq.n	80033c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e052      	b.n	8003468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0216 	bic.w	r2, r2, #22
 80033d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_DMA_Abort+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003412:	e013      	b.n	800343c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003414:	f7fe fec8 	bl	80021a8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b05      	cmp	r3, #5
 8003420:	d90c      	bls.n	800343c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e015      	b.n	8003468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e4      	bne.n	8003414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	223f      	movs	r2, #63	; 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d004      	beq.n	800348e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00c      	b.n	80034a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2205      	movs	r2, #5
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c0:	4b8e      	ldr	r3, [pc, #568]	; (80036fc <HAL_DMA_IRQHandler+0x248>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a8e      	ldr	r2, [pc, #568]	; (8003700 <HAL_DMA_IRQHandler+0x24c>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2208      	movs	r2, #8
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01a      	beq.n	8003520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	2208      	movs	r2, #8
 800350e:	409a      	lsls	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	2201      	movs	r2, #1
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0202 	orr.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	2204      	movs	r2, #4
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	2204      	movs	r2, #4
 800357a:	409a      	lsls	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	2210      	movs	r2, #16
 8003592:	409a      	lsls	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d043      	beq.n	8003624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d03c      	beq.n	8003624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	2210      	movs	r2, #16
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d024      	beq.n	8003624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e01f      	b.n	8003624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e016      	b.n	8003624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0208 	bic.w	r2, r2, #8
 8003612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	2220      	movs	r2, #32
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 808f 	beq.w	8003754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8087 	beq.w	8003754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	2220      	movs	r2, #32
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b05      	cmp	r3, #5
 800365c:	d136      	bne.n	80036cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0216 	bic.w	r2, r2, #22
 800366c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800367c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_DMA_IRQHandler+0x1da>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0208 	bic.w	r2, r2, #8
 800369c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	223f      	movs	r2, #63	; 0x3f
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d07e      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
        }
        return;
 80036ca:	e079      	b.n	80037c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01d      	beq.n	8003716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d031      	beq.n	8003754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
 80036f8:	e02c      	b.n	8003754 <HAL_DMA_IRQHandler+0x2a0>
 80036fa:	bf00      	nop
 80036fc:	200000d8 	.word	0x200000d8
 8003700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
 8003714:	e01e      	b.n	8003754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0210 	bic.w	r2, r2, #16
 8003732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d032      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d022      	beq.n	80037ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2205      	movs	r2, #5
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3301      	adds	r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	d307      	bcc.n	800379c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f2      	bne.n	8003780 <HAL_DMA_IRQHandler+0x2cc>
 800379a:	e000      	b.n	800379e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800379c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	e000      	b.n	80037c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c0:	bf00      	nop
    }
  }
}
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d108      	bne.n	8003808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003806:	e007      	b.n	8003818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	3b10      	subs	r3, #16
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <DMA_CalcBaseAndBitshift+0x64>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <DMA_CalcBaseAndBitshift+0x68>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d909      	bls.n	8003866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	1d1a      	adds	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
 8003864:	e007      	b.n	8003876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	aaaaaaab 	.word	0xaaaaaaab
 800388c:	08009008 	.word	0x08009008

08003890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11f      	bne.n	80038ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d856      	bhi.n	800395e <DMA_CheckFifoParam+0xce>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <DMA_CheckFifoParam+0x28>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038db 	.word	0x080038db
 80038c0:	080038c9 	.word	0x080038c9
 80038c4:	0800395f 	.word	0x0800395f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d046      	beq.n	8003962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d8:	e043      	b.n	8003962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e2:	d140      	bne.n	8003966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e03d      	b.n	8003966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	d121      	bne.n	8003938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d837      	bhi.n	800396a <DMA_CheckFifoParam+0xda>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x70>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	08003917 	.word	0x08003917
 8003908:	08003911 	.word	0x08003911
 800390c:	08003929 	.word	0x08003929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e030      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d025      	beq.n	800396e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003926:	e022      	b.n	800396e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003936:	e01c      	b.n	8003972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d903      	bls.n	8003946 <DMA_CheckFifoParam+0xb6>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d003      	beq.n	800394c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003944:	e018      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
      break;
 800394a:	e015      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      break;
 800395c:	e00b      	b.n	8003976 <DMA_CheckFifoParam+0xe6>
      break;
 800395e:	bf00      	nop
 8003960:	e00a      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e008      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
 8003968:	e006      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;   
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
    }
  } 
  
  return status; 
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e16b      	b.n	8003c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	f040 815a 	bne.w	8003c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d005      	beq.n	80039da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d130      	bne.n	8003a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0201 	and.w	r2, r3, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d017      	beq.n	8003a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d123      	bne.n	8003acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	08da      	lsrs	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80b4 	beq.w	8003c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b60      	ldr	r3, [pc, #384]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a5f      	ldr	r2, [pc, #380]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <HAL_GPIO_Init+0x30c>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2a:	4a5b      	ldr	r2, [pc, #364]	; (8003c98 <HAL_GPIO_Init+0x310>)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_GPIO_Init+0x314>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <HAL_GPIO_Init+0x226>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x318>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d025      	beq.n	8003baa <HAL_GPIO_Init+0x222>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_GPIO_Init+0x31c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_GPIO_Init+0x21e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_GPIO_Init+0x320>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d019      	beq.n	8003ba2 <HAL_GPIO_Init+0x21a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_GPIO_Init+0x324>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0x216>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4d      	ldr	r2, [pc, #308]	; (8003cb0 <HAL_GPIO_Init+0x328>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_GPIO_Init+0x212>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <HAL_GPIO_Init+0x32c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x20e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_GPIO_Init+0x330>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_GPIO_Init+0x20a>
 8003b8e:	2307      	movs	r3, #7
 8003b90:	e00e      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e00c      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003b96:	2306      	movs	r3, #6
 8003b98:	e00a      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003b9a:	2305      	movs	r3, #5
 8003b9c:	e008      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e004      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e002      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_GPIO_Init+0x228>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	f002 0203 	and.w	r2, r2, #3
 8003bb6:	0092      	lsls	r2, r2, #2
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc0:	4935      	ldr	r1, [pc, #212]	; (8003c98 <HAL_GPIO_Init+0x310>)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf2:	4a32      	ldr	r2, [pc, #200]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c1c:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c70:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <HAL_GPIO_Init+0x334>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b0f      	cmp	r3, #15
 8003c80:	f67f ae90 	bls.w	80039a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40020000 	.word	0x40020000
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	40020c00 	.word	0x40020c00
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40021400 	.word	0x40021400
 8003cb4:	40021800 	.word	0x40021800
 8003cb8:	40021c00 	.word	0x40021c00
 8003cbc:	40013c00 	.word	0x40013c00

08003cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd0:	787b      	ldrb	r3, [r7, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cdc:	e003      	b.n	8003ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	041a      	lsls	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	619a      	str	r2, [r3, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e267      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d075      	beq.n	8003dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d12:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d00c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b85      	ldr	r3, [pc, #532]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b82      	ldr	r3, [pc, #520]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x108>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d157      	bne.n	8003dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e242      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x74>
 8003d5a:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6f      	ldr	r2, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6c      	ldr	r2, [pc, #432]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	4b69      	ldr	r3, [pc, #420]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a68      	ldr	r2, [pc, #416]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe f9fc 	bl	80021a8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe f9f8 	bl	80021a8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e207      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xc0>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f9e8 	bl	80021a8 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f9e4 	bl	80021a8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1f3      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0xe8>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d063      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1c7      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4937      	ldr	r1, [pc, #220]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <HAL_RCC_OscConfig+0x244>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fe f99d 	bl	80021a8 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe f999 	bl	80021a8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1a8      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4925      	ldr	r1, [pc, #148]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_OscConfig+0x244>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe f97c 	bl	80021a8 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f978 	bl	80021a8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e187      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d036      	beq.n	8003f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x248>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe f95c 	bl	80021a8 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fe f958 	bl	80021a8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e167      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_OscConfig+0x240>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x200>
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x248>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fe f945 	bl	80021a8 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	e00e      	b.n	8003f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fe f941 	bl	80021a8 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d907      	bls.n	8003f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e150      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	42470000 	.word	0x42470000
 8003f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8097 	beq.w	8004088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	4b7d      	ldr	r3, [pc, #500]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a7c      	ldr	r2, [pc, #496]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b77      	ldr	r3, [pc, #476]	; (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b74      	ldr	r3, [pc, #464]	; (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a73      	ldr	r2, [pc, #460]	; (8004168 <HAL_RCC_OscConfig+0x474>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f901 	bl	80021a8 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe f8fd 	bl	80021a8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e10c      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_OscConfig+0x474>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x2ea>
 8003fd0:	4b64      	ldr	r3, [pc, #400]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a63      	ldr	r2, [pc, #396]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x324>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x30c>
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x324>
 8004000:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a57      	ldr	r2, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b55      	ldr	r3, [pc, #340]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a54      	ldr	r2, [pc, #336]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe f8c2 	bl	80021a8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe f8be 	bl	80021a8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0cb      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ee      	beq.n	8004028 <HAL_RCC_OscConfig+0x334>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fe f8ac 	bl	80021a8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fe f8a8 	bl	80021a8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0b5      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	4b3e      	ldr	r3, [pc, #248]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ee      	bne.n	8004054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	4a38      	ldr	r2, [pc, #224]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80a1 	beq.w	80041d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004092:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d05c      	beq.n	8004158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d141      	bne.n	800412a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_OscConfig+0x478>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe f87c 	bl	80021a8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe f878 	bl	80021a8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e087      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x478>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe f851 	bl	80021a8 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe f84d 	bl	80021a8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e05c      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x416>
 8004128:	e054      	b.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_OscConfig+0x478>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fe f83a 	bl	80021a8 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe f836 	bl	80021a8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e045      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x470>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x444>
 8004156:	e03d      	b.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e038      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x4ec>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d028      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d121      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d11a      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a0:	4013      	ands	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d111      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	3b01      	subs	r3, #1
 80041ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0cc      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f8:	4b68      	ldr	r3, [pc, #416]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d90c      	bls.n	8004220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d044      	beq.n	8004304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d119      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b2:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e067      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4934      	ldr	r1, [pc, #208]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fd ff68 	bl	80021a8 <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fd ff64 	bl	80021a8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e04f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d20c      	bcs.n	800432c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fec8 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	40023800 	.word	0x40023800
 80043a4:	08008ff0 	.word	0x08008ff0
 80043a8:	200000d8 	.word	0x200000d8
 80043ac:	200000dc 	.word	0x200000dc

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b090      	sub	sp, #64	; 0x40
 80043b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
 80043bc:	2300      	movs	r3, #0
 80043be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d00d      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x40>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	f200 80a1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x16c>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x3a>
 80043e2:	e09b      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_GetSysClockFreq+0x184>)
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043e8:	e09b      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ea:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ee:	e098      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f0:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043fa:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d028      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	2200      	movs	r2, #0
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	627a      	str	r2, [r7, #36]	; 0x24
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004418:	2100      	movs	r1, #0
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 800441c:	fb03 f201 	mul.w	r2, r3, r1
 8004420:	2300      	movs	r3, #0
 8004422:	fb00 f303 	mul.w	r3, r0, r3
 8004426:	4413      	add	r3, r2
 8004428:	4a43      	ldr	r2, [pc, #268]	; (8004538 <HAL_RCC_GetSysClockFreq+0x188>)
 800442a:	fba0 1202 	umull	r1, r2, r0, r2
 800442e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004430:	460a      	mov	r2, r1
 8004432:	62ba      	str	r2, [r7, #40]	; 0x28
 8004434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004436:	4413      	add	r3, r2
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	2200      	movs	r2, #0
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	61fa      	str	r2, [r7, #28]
 8004442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800444a:	f7fc fb8f 	bl	8000b6c <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4613      	mov	r3, r2
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004456:	e053      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004458:	4b35      	ldr	r3, [pc, #212]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	2200      	movs	r2, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	617a      	str	r2, [r7, #20]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800446a:	f04f 0b00 	mov.w	fp, #0
 800446e:	4652      	mov	r2, sl
 8004470:	465b      	mov	r3, fp
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	0159      	lsls	r1, r3, #5
 800447c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004480:	0150      	lsls	r0, r2, #5
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	ebb2 080a 	subs.w	r8, r2, sl
 800448a:	eb63 090b 	sbc.w	r9, r3, fp
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800449a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800449e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044a2:	ebb2 0408 	subs.w	r4, r2, r8
 80044a6:	eb63 0509 	sbc.w	r5, r3, r9
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	00eb      	lsls	r3, r5, #3
 80044b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b8:	00e2      	lsls	r2, r4, #3
 80044ba:	4614      	mov	r4, r2
 80044bc:	461d      	mov	r5, r3
 80044be:	eb14 030a 	adds.w	r3, r4, sl
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	eb45 030b 	adc.w	r3, r5, fp
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	2200      	movs	r2, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f4:	f7fc fb3a 	bl	8000b6c <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetSysClockFreq+0x180>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetSysClockFreq+0x184>)
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004524:	4618      	mov	r0, r3
 8004526:	3740      	adds	r7, #64	; 0x40
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	017d7840 	.word	0x017d7840

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	200000d8 	.word	0x200000d8

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08009000 	.word	0x08009000

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	08009000 	.word	0x08009000

080045a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e07b      	b.n	80046ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d009      	beq.n	80045dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
 80045ce:	e005      	b.n	80045dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fab2 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	ea42 0103 	orr.w	r1, r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0104 	and.w	r1, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0210 	and.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e03f      	b.n	8004748 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fd fa87 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2224      	movs	r2, #36	; 0x24
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 ff9c 	bl	8005638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800471e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	d17c      	bne.n	800486a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_UART_Transmit+0x2c>
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e075      	b.n	800486c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_UART_Transmit+0x3e>
 800478a:	2302      	movs	r3, #2
 800478c:	e06e      	b.n	800486c <HAL_UART_Transmit+0x11c>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2221      	movs	r2, #33	; 0x21
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047a4:	f7fd fd00 	bl	80021a8 <HAL_GetTick>
 80047a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d108      	bne.n	80047d2 <HAL_UART_Transmit+0x82>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e003      	b.n	80047da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047e2:	e02a      	b.n	800483a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fc54 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e036      	b.n	800486c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004812:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	3302      	adds	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e007      	b.n	800482c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3301      	adds	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1cf      	bne.n	80047e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fc24 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e006      	b.n	800486c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	; 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b20      	cmp	r3, #32
 800488c:	d152      	bne.n	8004934 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e04b      	b.n	8004936 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e044      	b.n	8004936 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	461a      	mov	r2, r3
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fc59 	bl	8005178 <UART_Start_Receive_DMA>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d12c      	bne.n	800492e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d125      	bne.n	8004928 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	617b      	str	r3, [r7, #20]
   return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f043 0310 	orr.w	r3, r3, #16
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004912:	627a      	str	r2, [r7, #36]	; 0x24
 8004914:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6a39      	ldr	r1, [r7, #32]
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004926:	e002      	b.n	800492e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800492e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004932:	e000      	b.n	8004936 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3730      	adds	r7, #48	; 0x30
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0ba      	sub	sp, #232	; 0xe8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800497e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_UART_IRQHandler+0x66>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fd8f 	bl	80054c2 <UART_Receive_IT>
      return;
 80049a4:	e256      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80de 	beq.w	8004b6c <HAL_UART_IRQHandler+0x22c>
 80049b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80d1 	beq.w	8004b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xae>
 80049d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0xd2>
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_UART_IRQHandler+0xf6>
 8004a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0204 	orr.w	r2, r3, #4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d011      	beq.n	8004a66 <HAL_UART_IRQHandler+0x126>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f043 0208 	orr.w	r2, r3, #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 81ed 	beq.w	8004e4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x14e>
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fd1a 	bl	80054c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <HAL_UART_IRQHandler+0x17a>
 8004ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04f      	beq.n	8004b5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc22 	bl	8005304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d141      	bne.n	8004b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004afa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1d9      	bne.n	8004ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	4a7d      	ldr	r2, [pc, #500]	; (8004d1c <HAL_UART_IRQHandler+0x3dc>)
 8004b28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fc9e 	bl	8003470 <HAL_DMA_Abort_IT>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b44:	4610      	mov	r0, r2
 8004b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e00e      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9a4 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e00a      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9a0 	bl	8004e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	e006      	b.n	8004b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f99c 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b66:	e170      	b.n	8004e4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	bf00      	nop
    return;
 8004b6a:	e16e      	b.n	8004e4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f040 814a 	bne.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8143 	beq.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 813c 	beq.w	8004e0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	f040 80b4 	bne.w	8004d20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8140 	beq.w	8004e4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	f080 8139 	bcs.w	8004e4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004be2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	f000 8088 	beq.w	8004d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1d9      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e1      	bne.n	8004c3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3314      	adds	r3, #20
 8004c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e3      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fb47 	bl	8003390 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fb9e 	bl	8001454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d18:	e099      	b.n	8004e4e <HAL_UART_IRQHandler+0x50e>
 8004d1a:	bf00      	nop
 8004d1c:	080053cb 	.word	0x080053cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 808b 	beq.w	8004e52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8086 	beq.w	8004e52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004da2:	633a      	str	r2, [r7, #48]	; 0x30
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004de8:	61fa      	str	r2, [r7, #28]
 8004dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	617b      	str	r3, [r7, #20]
   return(result);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fb26 	bl	8001454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e08:	e023      	b.n	8004e52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_UART_IRQHandler+0x4ea>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fae5 	bl	80053f2 <UART_Transmit_IT>
    return;
 8004e28:	e014      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00e      	beq.n	8004e54 <HAL_UART_IRQHandler+0x514>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fb25 	bl	8005492 <UART_EndTransmit_IT>
    return;
 8004e48:	e004      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
    return;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
      return;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_UART_IRQHandler+0x514>
      return;
 8004e52:	bf00      	nop
  }
}
 8004e54:	37e8      	adds	r7, #232	; 0xe8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop

08004e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b09c      	sub	sp, #112	; 0x70
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d172      	bne.n	8004fae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	2200      	movs	r2, #0
 8004ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eee:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ef0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f22:	647a      	str	r2, [r7, #68]	; 0x44
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	623b      	str	r3, [r7, #32]
   return(result);
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f56:	633a      	str	r2, [r7, #48]	; 0x30
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d119      	bne.n	8004fae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f9a:	61fa      	str	r2, [r7, #28]
 8004f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	69b9      	ldr	r1, [r7, #24]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d106      	bne.n	8004fc4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fbe:	f7fc fa49 	bl	8001454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fc2:	e002      	b.n	8004fca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004fc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fc6:	f7ff ff53 	bl	8004e70 <HAL_UART_RxCpltCallback>
}
 8004fca:	bf00      	nop
 8004fcc:	3770      	adds	r7, #112	; 0x70
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d108      	bne.n	8004ffa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7fc fa2e 	bl	8001454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ff8:	e002      	b.n	8005000 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff42 	bl	8004e84 <HAL_UART_RxHalfCpltCallback>
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b80      	cmp	r3, #128	; 0x80
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d108      	bne.n	800504e <UART_DMAError+0x46>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005048:	68b8      	ldr	r0, [r7, #8]
 800504a:	f000 f933 	bl	80052b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b22      	cmp	r3, #34	; 0x22
 800506e:	d108      	bne.n	8005082 <UART_DMAError+0x7a>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800507c:	68b8      	ldr	r0, [r7, #8]
 800507e:	f000 f941 	bl	8005304 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508e:	68b8      	ldr	r0, [r7, #8]
 8005090:	f7ff ff02 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b090      	sub	sp, #64	; 0x40
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	e050      	b.n	8005150 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d04c      	beq.n	8005150 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x30>
 80050bc:	f7fd f874 	bl	80021a8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d241      	bcs.n	8005150 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ec:	637a      	str	r2, [r7, #52]	; 0x34
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	613b      	str	r3, [r7, #16]
   return(result);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005120:	623a      	str	r2, [r7, #32]
 8005122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	6a3a      	ldr	r2, [r7, #32]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	61bb      	str	r3, [r7, #24]
   return(result);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00f      	b.n	8005170 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	429a      	cmp	r2, r3
 800516c:	d09f      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3740      	adds	r7, #64	; 0x40
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b098      	sub	sp, #96	; 0x60
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2222      	movs	r2, #34	; 0x22
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <UART_Start_Receive_DMA+0x130>)
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <UART_Start_Receive_DMA+0x134>)
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <UART_Start_Receive_DMA+0x138>)
 80051b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	2200      	movs	r2, #0
 80051be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	f7fe f882 	bl	80032e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005218:	65bb      	str	r3, [r7, #88]	; 0x58
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005222:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005224:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	657b      	str	r3, [r7, #84]	; 0x54
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005256:	63ba      	str	r2, [r7, #56]	; 0x38
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800525c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3314      	adds	r3, #20
 8005270:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	617b      	str	r3, [r7, #20]
   return(result);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800528a:	627a      	str	r2, [r7, #36]	; 0x24
 800528c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6a39      	ldr	r1, [r7, #32]
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	61fb      	str	r3, [r7, #28]
   return(result);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e5      	bne.n	800526a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3760      	adds	r7, #96	; 0x60
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	08004ead 	.word	0x08004ead
 80052ac:	08004fd3 	.word	0x08004fd3
 80052b0:	08005009 	.word	0x08005009

080052b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	61ba      	str	r2, [r7, #24]
 80052de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052f8:	bf00      	nop
 80052fa:	3724      	adds	r7, #36	; 0x24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b095      	sub	sp, #84	; 0x54
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800532c:	643a      	str	r2, [r7, #64]	; 0x40
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3314      	adds	r3, #20
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	2b01      	cmp	r3, #1
 800537a:	d119      	bne.n	80053b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	60bb      	str	r3, [r7, #8]
   return(result);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800539c:	61ba      	str	r2, [r7, #24]
 800539e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	613b      	str	r3, [r7, #16]
   return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053be:	bf00      	nop
 80053c0:	3754      	adds	r7, #84	; 0x54
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fd57 	bl	8004e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b21      	cmp	r3, #33	; 0x21
 8005404:	d13e      	bne.n	8005484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	d114      	bne.n	800543a <UART_Transmit_IT+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d110      	bne.n	800543a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]
 8005438:	e008      	b.n	800544c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	1c59      	adds	r1, r3, #1
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6211      	str	r1, [r2, #32]
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4619      	mov	r1, r3
 800545a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10f      	bne.n	8005480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800546e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fcd2 	bl	8004e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08c      	sub	sp, #48	; 0x30
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b22      	cmp	r3, #34	; 0x22
 80054d4:	f040 80ab 	bne.w	800562e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d117      	bne.n	8005512 <UART_Receive_IT+0x50>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d113      	bne.n	8005512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	b29a      	uxth	r2, r3
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
 8005510:	e026      	b.n	8005560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d007      	beq.n	8005536 <UART_Receive_IT+0x74>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <UART_Receive_IT+0x82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e008      	b.n	8005556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005550:	b2da      	uxtb	r2, r3
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29b      	uxth	r3, r3
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4619      	mov	r1, r3
 800556e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005570:	2b00      	cmp	r3, #0
 8005572:	d15a      	bne.n	800562a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0220 	bic.w	r2, r2, #32
 8005582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d135      	bne.n	8005620 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f023 0310 	bic.w	r3, r3, #16
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	623a      	str	r2, [r7, #32]
 80055dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	69f9      	ldr	r1, [r7, #28]
 80055e0:	6a3a      	ldr	r2, [r7, #32]
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d10a      	bne.n	8005612 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fb ff1b 	bl	8001454 <HAL_UARTEx_RxEventCallback>
 800561e:	e002      	b.n	8005626 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fc25 	bl	8004e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e002      	b.n	8005630 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	; 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b0c0      	sub	sp, #256	; 0x100
 800563e:	af00      	add	r7, sp, #0
 8005640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	68d9      	ldr	r1, [r3, #12]
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	ea40 0301 	orr.w	r3, r0, r1
 8005660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005690:	f021 010c 	bic.w	r1, r1, #12
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569e:	430b      	orrs	r3, r1
 80056a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	6999      	ldr	r1, [r3, #24]
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	ea40 0301 	orr.w	r3, r0, r1
 80056be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b8f      	ldr	r3, [pc, #572]	; (8005904 <UART_SetConfig+0x2cc>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d005      	beq.n	80056d8 <UART_SetConfig+0xa0>
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b8d      	ldr	r3, [pc, #564]	; (8005908 <UART_SetConfig+0x2d0>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d104      	bne.n	80056e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe ff50 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 80056dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056e0:	e003      	b.n	80056ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7fe ff37 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80056e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f4:	f040 810c 	bne.w	8005910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800570a:	4622      	mov	r2, r4
 800570c:	462b      	mov	r3, r5
 800570e:	1891      	adds	r1, r2, r2
 8005710:	65b9      	str	r1, [r7, #88]	; 0x58
 8005712:	415b      	adcs	r3, r3
 8005714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800571a:	4621      	mov	r1, r4
 800571c:	eb12 0801 	adds.w	r8, r2, r1
 8005720:	4629      	mov	r1, r5
 8005722:	eb43 0901 	adc.w	r9, r3, r1
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	4623      	mov	r3, r4
 8005740:	eb18 0303 	adds.w	r3, r8, r3
 8005744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005748:	462b      	mov	r3, r5
 800574a:	eb49 0303 	adc.w	r3, r9, r3
 800574e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800575e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005766:	460b      	mov	r3, r1
 8005768:	18db      	adds	r3, r3, r3
 800576a:	653b      	str	r3, [r7, #80]	; 0x50
 800576c:	4613      	mov	r3, r2
 800576e:	eb42 0303 	adc.w	r3, r2, r3
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
 8005774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800577c:	f7fb f9f6 	bl	8000b6c <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <UART_SetConfig+0x2d4>)
 8005786:	fba3 2302 	umull	r2, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	011c      	lsls	r4, r3, #4
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800579c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80057a8:	415b      	adcs	r3, r3
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057b0:	4641      	mov	r1, r8
 80057b2:	eb12 0a01 	adds.w	sl, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0b01 	adc.w	fp, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d0:	4692      	mov	sl, r2
 80057d2:	469b      	mov	fp, r3
 80057d4:	4643      	mov	r3, r8
 80057d6:	eb1a 0303 	adds.w	r3, sl, r3
 80057da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057de:	464b      	mov	r3, r9
 80057e0:	eb4b 0303 	adc.w	r3, fp, r3
 80057e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
 800580a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800580e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005812:	f7fb f9ab 	bl	8000b6c <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4611      	mov	r1, r2
 800581c:	4b3b      	ldr	r3, [pc, #236]	; (800590c <UART_SetConfig+0x2d4>)
 800581e:	fba3 2301 	umull	r2, r3, r3, r1
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2264      	movs	r2, #100	; 0x64
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	1acb      	subs	r3, r1, r3
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <UART_SetConfig+0x2d4>)
 8005834:	fba3 2302 	umull	r2, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005840:	441c      	add	r4, r3
 8005842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800584c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	1891      	adds	r1, r2, r2
 800585a:	63b9      	str	r1, [r7, #56]	; 0x38
 800585c:	415b      	adcs	r3, r3
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005864:	4641      	mov	r1, r8
 8005866:	1851      	adds	r1, r2, r1
 8005868:	6339      	str	r1, [r7, #48]	; 0x30
 800586a:	4649      	mov	r1, r9
 800586c:	414b      	adcs	r3, r1
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800587c:	4659      	mov	r1, fp
 800587e:	00cb      	lsls	r3, r1, #3
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005886:	4651      	mov	r1, sl
 8005888:	00ca      	lsls	r2, r1, #3
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	4603      	mov	r3, r0
 8005890:	4642      	mov	r2, r8
 8005892:	189b      	adds	r3, r3, r2
 8005894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005898:	464b      	mov	r3, r9
 800589a:	460a      	mov	r2, r1
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058ce:	f7fb f94d 	bl	8000b6c <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <UART_SetConfig+0x2d4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <UART_SetConfig+0x2d4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0207 	and.w	r2, r3, #7
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4422      	add	r2, r4
 80058fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005900:	e106      	b.n	8005b10 <UART_SetConfig+0x4d8>
 8005902:	bf00      	nop
 8005904:	40011000 	.word	0x40011000
 8005908:	40011400 	.word	0x40011400
 800590c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800591a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800591e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005922:	4642      	mov	r2, r8
 8005924:	464b      	mov	r3, r9
 8005926:	1891      	adds	r1, r2, r2
 8005928:	6239      	str	r1, [r7, #32]
 800592a:	415b      	adcs	r3, r3
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005932:	4641      	mov	r1, r8
 8005934:	1854      	adds	r4, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0501 	adc.w	r5, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	00eb      	lsls	r3, r5, #3
 8005946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800594a:	00e2      	lsls	r2, r4, #3
 800594c:	4614      	mov	r4, r2
 800594e:	461d      	mov	r5, r3
 8005950:	4643      	mov	r3, r8
 8005952:	18e3      	adds	r3, r4, r3
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005958:	464b      	mov	r3, r9
 800595a:	eb45 0303 	adc.w	r3, r5, r3
 800595e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800596e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800597e:	4629      	mov	r1, r5
 8005980:	008b      	lsls	r3, r1, #2
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005988:	4621      	mov	r1, r4
 800598a:	008a      	lsls	r2, r1, #2
 800598c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005990:	f7fb f8ec 	bl	8000b6c <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <UART_SetConfig+0x4e4>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011c      	lsls	r4, r3, #4
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	61b9      	str	r1, [r7, #24]
 80059bc:	415b      	adcs	r3, r3
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6139      	str	r1, [r7, #16]
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	008b      	lsls	r3, r1, #2
 8005a20:	4641      	mov	r1, r8
 8005a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a26:	4641      	mov	r1, r8
 8005a28:	008a      	lsls	r2, r1, #2
 8005a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a2e:	f7fb f89d 	bl	8000b6c <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	; 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	3332      	adds	r3, #50	; 0x32
 8005a4c:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a58:	441c      	add	r4, r3
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	673b      	str	r3, [r7, #112]	; 0x70
 8005a62:	677a      	str	r2, [r7, #116]	; 0x74
 8005a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	415b      	adcs	r3, r3
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a78:	4641      	mov	r1, r8
 8005a7a:	1851      	adds	r1, r2, r1
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	4649      	mov	r1, r9
 8005a80:	414b      	adcs	r3, r1
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a90:	4659      	mov	r1, fp
 8005a92:	00cb      	lsls	r3, r1, #3
 8005a94:	4651      	mov	r1, sl
 8005a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	00ca      	lsls	r2, r1, #3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aaa:	464b      	mov	r3, r9
 8005aac:	460a      	mov	r2, r1
 8005aae:	eb42 0303 	adc.w	r3, r2, r3
 8005ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	663b      	str	r3, [r7, #96]	; 0x60
 8005abe:	667a      	str	r2, [r7, #100]	; 0x64
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005acc:	4649      	mov	r1, r9
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	008a      	lsls	r2, r1, #2
 8005ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ade:	f7fb f845 	bl	8000b6c <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	3332      	adds	r3, #50	; 0x32
 8005afa:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4422      	add	r2, r4
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1c:	51eb851f 	.word	0x51eb851f

08005b20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005b24:	4904      	ldr	r1, [pc, #16]	; (8005b38 <MX_FATFS_Init+0x18>)
 8005b26:	4805      	ldr	r0, [pc, #20]	; (8005b3c <MX_FATFS_Init+0x1c>)
 8005b28:	f000 f8b0 	bl	8005c8c <FATFS_LinkDriver>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <MX_FATFS_Init+0x20>)
 8005b32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2000058c 	.word	0x2000058c
 8005b3c:	200000e4 	.word	0x200000e4
 8005b40:	20000588 	.word	0x20000588

08005b44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <USER_initialize+0x24>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <USER_initialize+0x24>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	200000e1 	.word	0x200000e1

08005b6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <USER_status+0x24>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <USER_status+0x24>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200000e1 	.word	0x200000e1

08005b94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005ba4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005bc2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	603a      	str	r2, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
    return res;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c0c:	7a5b      	ldrb	r3, [r3, #9]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d131      	bne.n	8005c78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c16:	7a5b      	ldrb	r3, [r3, #9]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005c22:	4b19      	ldr	r3, [pc, #100]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c24:	7a5b      	ldrb	r3, [r3, #9]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c34:	7a5b      	ldrb	r3, [r3, #9]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c44:	7a5b      	ldrb	r3, [r3, #9]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	b2d1      	uxtb	r1, r2
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <FATFS_LinkDriverEx+0x94>)
 8005c4e:	7251      	strb	r1, [r2, #9]
 8005c50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
 8005c54:	3330      	adds	r3, #48	; 0x30
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	223a      	movs	r2, #58	; 0x3a
 8005c62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3302      	adds	r3, #2
 8005c68:	222f      	movs	r2, #47	; 0x2f
 8005c6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000590 	.word	0x20000590

08005c8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005c96:	2200      	movs	r2, #0
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff ffaa 	bl	8005bf4 <FATFS_LinkDriverEx>
 8005ca0:	4603      	mov	r3, r0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <atof>:
 8005caa:	2100      	movs	r1, #0
 8005cac:	f000 be0c 	b.w	80068c8 <strtod>

08005cb0 <sulp>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	ec45 4b10 	vmov	d0, r4, r5
 8005cba:	4616      	mov	r6, r2
 8005cbc:	f002 f83c 	bl	8007d38 <__ulp>
 8005cc0:	ec51 0b10 	vmov	r0, r1, d0
 8005cc4:	b17e      	cbz	r6, 8005ce6 <sulp+0x36>
 8005cc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dd09      	ble.n	8005ce6 <sulp+0x36>
 8005cd2:	051b      	lsls	r3, r3, #20
 8005cd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005cd8:	2400      	movs	r4, #0
 8005cda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cde:	4622      	mov	r2, r4
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	f7fa fc89 	bl	80005f8 <__aeabi_dmul>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}

08005ce8 <_strtod_l>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b02 	vpush	{d8}
 8005cf0:	b09b      	sub	sp, #108	; 0x6c
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	9216      	str	r2, [sp, #88]	; 0x58
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	f04f 0800 	mov.w	r8, #0
 8005d00:	f04f 0900 	mov.w	r9, #0
 8005d04:	460a      	mov	r2, r1
 8005d06:	9215      	str	r2, [sp, #84]	; 0x54
 8005d08:	7811      	ldrb	r1, [r2, #0]
 8005d0a:	292b      	cmp	r1, #43	; 0x2b
 8005d0c:	d04c      	beq.n	8005da8 <_strtod_l+0xc0>
 8005d0e:	d83a      	bhi.n	8005d86 <_strtod_l+0x9e>
 8005d10:	290d      	cmp	r1, #13
 8005d12:	d834      	bhi.n	8005d7e <_strtod_l+0x96>
 8005d14:	2908      	cmp	r1, #8
 8005d16:	d834      	bhi.n	8005d82 <_strtod_l+0x9a>
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d03d      	beq.n	8005d98 <_strtod_l+0xb0>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	920a      	str	r2, [sp, #40]	; 0x28
 8005d20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005d22:	7832      	ldrb	r2, [r6, #0]
 8005d24:	2a30      	cmp	r2, #48	; 0x30
 8005d26:	f040 80b4 	bne.w	8005e92 <_strtod_l+0x1aa>
 8005d2a:	7872      	ldrb	r2, [r6, #1]
 8005d2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005d30:	2a58      	cmp	r2, #88	; 0x58
 8005d32:	d170      	bne.n	8005e16 <_strtod_l+0x12e>
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	ab16      	add	r3, sp, #88	; 0x58
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4a8e      	ldr	r2, [pc, #568]	; (8005f78 <_strtod_l+0x290>)
 8005d40:	ab17      	add	r3, sp, #92	; 0x5c
 8005d42:	a915      	add	r1, sp, #84	; 0x54
 8005d44:	4620      	mov	r0, r4
 8005d46:	f001 f8d5 	bl	8006ef4 <__gethex>
 8005d4a:	f010 070f 	ands.w	r7, r0, #15
 8005d4e:	4605      	mov	r5, r0
 8005d50:	d005      	beq.n	8005d5e <_strtod_l+0x76>
 8005d52:	2f06      	cmp	r7, #6
 8005d54:	d12a      	bne.n	8005dac <_strtod_l+0xc4>
 8005d56:	3601      	adds	r6, #1
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9615      	str	r6, [sp, #84]	; 0x54
 8005d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 857f 	bne.w	8006864 <_strtod_l+0xb7c>
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	b1db      	cbz	r3, 8005da2 <_strtod_l+0xba>
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d70:	ec43 2b10 	vmov	d0, r2, r3
 8005d74:	b01b      	add	sp, #108	; 0x6c
 8005d76:	ecbd 8b02 	vpop	{d8}
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	2920      	cmp	r1, #32
 8005d80:	d1cc      	bne.n	8005d1c <_strtod_l+0x34>
 8005d82:	3201      	adds	r2, #1
 8005d84:	e7bf      	b.n	8005d06 <_strtod_l+0x1e>
 8005d86:	292d      	cmp	r1, #45	; 0x2d
 8005d88:	d1c8      	bne.n	8005d1c <_strtod_l+0x34>
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	910a      	str	r1, [sp, #40]	; 0x28
 8005d8e:	1c51      	adds	r1, r2, #1
 8005d90:	9115      	str	r1, [sp, #84]	; 0x54
 8005d92:	7852      	ldrb	r2, [r2, #1]
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	d1c3      	bne.n	8005d20 <_strtod_l+0x38>
 8005d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d9a:	9515      	str	r5, [sp, #84]	; 0x54
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 855f 	bne.w	8006860 <_strtod_l+0xb78>
 8005da2:	4642      	mov	r2, r8
 8005da4:	464b      	mov	r3, r9
 8005da6:	e7e3      	b.n	8005d70 <_strtod_l+0x88>
 8005da8:	2100      	movs	r1, #0
 8005daa:	e7ef      	b.n	8005d8c <_strtod_l+0xa4>
 8005dac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005dae:	b13a      	cbz	r2, 8005dc0 <_strtod_l+0xd8>
 8005db0:	2135      	movs	r1, #53	; 0x35
 8005db2:	a818      	add	r0, sp, #96	; 0x60
 8005db4:	f002 f8bd 	bl	8007f32 <__copybits>
 8005db8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f001 fc90 	bl	80076e0 <_Bfree>
 8005dc0:	3f01      	subs	r7, #1
 8005dc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dc4:	2f04      	cmp	r7, #4
 8005dc6:	d806      	bhi.n	8005dd6 <_strtod_l+0xee>
 8005dc8:	e8df f007 	tbb	[pc, r7]
 8005dcc:	201d0314 	.word	0x201d0314
 8005dd0:	14          	.byte	0x14
 8005dd1:	00          	.byte	0x00
 8005dd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005dd6:	05e9      	lsls	r1, r5, #23
 8005dd8:	bf48      	it	mi
 8005dda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005de2:	0d1b      	lsrs	r3, r3, #20
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1b9      	bne.n	8005d5e <_strtod_l+0x76>
 8005dea:	f000 ff6d 	bl	8006cc8 <__errno>
 8005dee:	2322      	movs	r3, #34	; 0x22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	e7b4      	b.n	8005d5e <_strtod_l+0x76>
 8005df4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005df8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005dfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005e04:	e7e7      	b.n	8005dd6 <_strtod_l+0xee>
 8005e06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005f80 <_strtod_l+0x298>
 8005e0a:	e7e4      	b.n	8005dd6 <_strtod_l+0xee>
 8005e0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005e10:	f04f 38ff 	mov.w	r8, #4294967295
 8005e14:	e7df      	b.n	8005dd6 <_strtod_l+0xee>
 8005e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b30      	cmp	r3, #48	; 0x30
 8005e20:	d0f9      	beq.n	8005e16 <_strtod_l+0x12e>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d09b      	beq.n	8005d5e <_strtod_l+0x76>
 8005e26:	2301      	movs	r3, #1
 8005e28:	f04f 0a00 	mov.w	sl, #0
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005e36:	46d3      	mov	fp, sl
 8005e38:	220a      	movs	r2, #10
 8005e3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005e3c:	7806      	ldrb	r6, [r0, #0]
 8005e3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e42:	b2d9      	uxtb	r1, r3
 8005e44:	2909      	cmp	r1, #9
 8005e46:	d926      	bls.n	8005e96 <_strtod_l+0x1ae>
 8005e48:	494c      	ldr	r1, [pc, #304]	; (8005f7c <_strtod_l+0x294>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f000 fe72 	bl	8006b34 <strncmp>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d030      	beq.n	8005eb6 <_strtod_l+0x1ce>
 8005e54:	2000      	movs	r0, #0
 8005e56:	4632      	mov	r2, r6
 8005e58:	9005      	str	r0, [sp, #20]
 8005e5a:	465e      	mov	r6, fp
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2a65      	cmp	r2, #101	; 0x65
 8005e60:	d001      	beq.n	8005e66 <_strtod_l+0x17e>
 8005e62:	2a45      	cmp	r2, #69	; 0x45
 8005e64:	d113      	bne.n	8005e8e <_strtod_l+0x1a6>
 8005e66:	b91e      	cbnz	r6, 8005e70 <_strtod_l+0x188>
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	4302      	orrs	r2, r0
 8005e6c:	d094      	beq.n	8005d98 <_strtod_l+0xb0>
 8005e6e:	2600      	movs	r6, #0
 8005e70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005e72:	1c6a      	adds	r2, r5, #1
 8005e74:	9215      	str	r2, [sp, #84]	; 0x54
 8005e76:	786a      	ldrb	r2, [r5, #1]
 8005e78:	2a2b      	cmp	r2, #43	; 0x2b
 8005e7a:	d074      	beq.n	8005f66 <_strtod_l+0x27e>
 8005e7c:	2a2d      	cmp	r2, #45	; 0x2d
 8005e7e:	d078      	beq.n	8005f72 <_strtod_l+0x28a>
 8005e80:	f04f 0c00 	mov.w	ip, #0
 8005e84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e88:	2909      	cmp	r1, #9
 8005e8a:	d97f      	bls.n	8005f8c <_strtod_l+0x2a4>
 8005e8c:	9515      	str	r5, [sp, #84]	; 0x54
 8005e8e:	2700      	movs	r7, #0
 8005e90:	e09e      	b.n	8005fd0 <_strtod_l+0x2e8>
 8005e92:	2300      	movs	r3, #0
 8005e94:	e7c8      	b.n	8005e28 <_strtod_l+0x140>
 8005e96:	f1bb 0f08 	cmp.w	fp, #8
 8005e9a:	bfd8      	it	le
 8005e9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005e9e:	f100 0001 	add.w	r0, r0, #1
 8005ea2:	bfda      	itte	le
 8005ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ea8:	9309      	strle	r3, [sp, #36]	; 0x24
 8005eaa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005eae:	f10b 0b01 	add.w	fp, fp, #1
 8005eb2:	9015      	str	r0, [sp, #84]	; 0x54
 8005eb4:	e7c1      	b.n	8005e3a <_strtod_l+0x152>
 8005eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	9215      	str	r2, [sp, #84]	; 0x54
 8005ebc:	785a      	ldrb	r2, [r3, #1]
 8005ebe:	f1bb 0f00 	cmp.w	fp, #0
 8005ec2:	d037      	beq.n	8005f34 <_strtod_l+0x24c>
 8005ec4:	9005      	str	r0, [sp, #20]
 8005ec6:	465e      	mov	r6, fp
 8005ec8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	d912      	bls.n	8005ef6 <_strtod_l+0x20e>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7c4      	b.n	8005e5e <_strtod_l+0x176>
 8005ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	9215      	str	r2, [sp, #84]	; 0x54
 8005eda:	785a      	ldrb	r2, [r3, #1]
 8005edc:	3001      	adds	r0, #1
 8005ede:	2a30      	cmp	r2, #48	; 0x30
 8005ee0:	d0f8      	beq.n	8005ed4 <_strtod_l+0x1ec>
 8005ee2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	f200 84c1 	bhi.w	800686e <_strtod_l+0xb86>
 8005eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eee:	9005      	str	r0, [sp, #20]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	3a30      	subs	r2, #48	; 0x30
 8005ef8:	f100 0301 	add.w	r3, r0, #1
 8005efc:	d014      	beq.n	8005f28 <_strtod_l+0x240>
 8005efe:	9905      	ldr	r1, [sp, #20]
 8005f00:	4419      	add	r1, r3
 8005f02:	9105      	str	r1, [sp, #20]
 8005f04:	4633      	mov	r3, r6
 8005f06:	eb00 0c06 	add.w	ip, r0, r6
 8005f0a:	210a      	movs	r1, #10
 8005f0c:	4563      	cmp	r3, ip
 8005f0e:	d113      	bne.n	8005f38 <_strtod_l+0x250>
 8005f10:	1833      	adds	r3, r6, r0
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	f106 0601 	add.w	r6, r6, #1
 8005f18:	4406      	add	r6, r0
 8005f1a:	dc1a      	bgt.n	8005f52 <_strtod_l+0x26a>
 8005f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f1e:	230a      	movs	r3, #10
 8005f20:	fb03 2301 	mla	r3, r3, r1, r2
 8005f24:	9309      	str	r3, [sp, #36]	; 0x24
 8005f26:	2300      	movs	r3, #0
 8005f28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f2a:	1c51      	adds	r1, r2, #1
 8005f2c:	9115      	str	r1, [sp, #84]	; 0x54
 8005f2e:	7852      	ldrb	r2, [r2, #1]
 8005f30:	4618      	mov	r0, r3
 8005f32:	e7c9      	b.n	8005ec8 <_strtod_l+0x1e0>
 8005f34:	4658      	mov	r0, fp
 8005f36:	e7d2      	b.n	8005ede <_strtod_l+0x1f6>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	f103 0301 	add.w	r3, r3, #1
 8005f3e:	dc03      	bgt.n	8005f48 <_strtod_l+0x260>
 8005f40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f42:	434f      	muls	r7, r1
 8005f44:	9709      	str	r7, [sp, #36]	; 0x24
 8005f46:	e7e1      	b.n	8005f0c <_strtod_l+0x224>
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	bfd8      	it	le
 8005f4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005f50:	e7dc      	b.n	8005f0c <_strtod_l+0x224>
 8005f52:	2e10      	cmp	r6, #16
 8005f54:	bfdc      	itt	le
 8005f56:	230a      	movle	r3, #10
 8005f58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005f5c:	e7e3      	b.n	8005f26 <_strtod_l+0x23e>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	2301      	movs	r3, #1
 8005f64:	e780      	b.n	8005e68 <_strtod_l+0x180>
 8005f66:	f04f 0c00 	mov.w	ip, #0
 8005f6a:	1caa      	adds	r2, r5, #2
 8005f6c:	9215      	str	r2, [sp, #84]	; 0x54
 8005f6e:	78aa      	ldrb	r2, [r5, #2]
 8005f70:	e788      	b.n	8005e84 <_strtod_l+0x19c>
 8005f72:	f04f 0c01 	mov.w	ip, #1
 8005f76:	e7f8      	b.n	8005f6a <_strtod_l+0x282>
 8005f78:	08009020 	.word	0x08009020
 8005f7c:	08009010 	.word	0x08009010
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f86:	1c51      	adds	r1, r2, #1
 8005f88:	9115      	str	r1, [sp, #84]	; 0x54
 8005f8a:	7852      	ldrb	r2, [r2, #1]
 8005f8c:	2a30      	cmp	r2, #48	; 0x30
 8005f8e:	d0f9      	beq.n	8005f84 <_strtod_l+0x29c>
 8005f90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f94:	2908      	cmp	r1, #8
 8005f96:	f63f af7a 	bhi.w	8005e8e <_strtod_l+0x1a6>
 8005f9a:	3a30      	subs	r2, #48	; 0x30
 8005f9c:	9208      	str	r2, [sp, #32]
 8005f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fa0:	920c      	str	r2, [sp, #48]	; 0x30
 8005fa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fa4:	1c57      	adds	r7, r2, #1
 8005fa6:	9715      	str	r7, [sp, #84]	; 0x54
 8005fa8:	7852      	ldrb	r2, [r2, #1]
 8005faa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005fae:	f1be 0f09 	cmp.w	lr, #9
 8005fb2:	d938      	bls.n	8006026 <_strtod_l+0x33e>
 8005fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fb6:	1a7f      	subs	r7, r7, r1
 8005fb8:	2f08      	cmp	r7, #8
 8005fba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005fbe:	dc03      	bgt.n	8005fc8 <_strtod_l+0x2e0>
 8005fc0:	9908      	ldr	r1, [sp, #32]
 8005fc2:	428f      	cmp	r7, r1
 8005fc4:	bfa8      	it	ge
 8005fc6:	460f      	movge	r7, r1
 8005fc8:	f1bc 0f00 	cmp.w	ip, #0
 8005fcc:	d000      	beq.n	8005fd0 <_strtod_l+0x2e8>
 8005fce:	427f      	negs	r7, r7
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	d14f      	bne.n	8006074 <_strtod_l+0x38c>
 8005fd4:	9904      	ldr	r1, [sp, #16]
 8005fd6:	4301      	orrs	r1, r0
 8005fd8:	f47f aec1 	bne.w	8005d5e <_strtod_l+0x76>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f aedb 	bne.w	8005d98 <_strtod_l+0xb0>
 8005fe2:	2a69      	cmp	r2, #105	; 0x69
 8005fe4:	d029      	beq.n	800603a <_strtod_l+0x352>
 8005fe6:	dc26      	bgt.n	8006036 <_strtod_l+0x34e>
 8005fe8:	2a49      	cmp	r2, #73	; 0x49
 8005fea:	d026      	beq.n	800603a <_strtod_l+0x352>
 8005fec:	2a4e      	cmp	r2, #78	; 0x4e
 8005fee:	f47f aed3 	bne.w	8005d98 <_strtod_l+0xb0>
 8005ff2:	499b      	ldr	r1, [pc, #620]	; (8006260 <_strtod_l+0x578>)
 8005ff4:	a815      	add	r0, sp, #84	; 0x54
 8005ff6:	f001 f9bd 	bl	8007374 <__match>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f aecc 	beq.w	8005d98 <_strtod_l+0xb0>
 8006000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b28      	cmp	r3, #40	; 0x28
 8006006:	d12f      	bne.n	8006068 <_strtod_l+0x380>
 8006008:	4996      	ldr	r1, [pc, #600]	; (8006264 <_strtod_l+0x57c>)
 800600a:	aa18      	add	r2, sp, #96	; 0x60
 800600c:	a815      	add	r0, sp, #84	; 0x54
 800600e:	f001 f9c5 	bl	800739c <__hexnan>
 8006012:	2805      	cmp	r0, #5
 8006014:	d128      	bne.n	8006068 <_strtod_l+0x380>
 8006016:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800601c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006020:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006024:	e69b      	b.n	8005d5e <_strtod_l+0x76>
 8006026:	9f08      	ldr	r7, [sp, #32]
 8006028:	210a      	movs	r1, #10
 800602a:	fb01 2107 	mla	r1, r1, r7, r2
 800602e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006032:	9208      	str	r2, [sp, #32]
 8006034:	e7b5      	b.n	8005fa2 <_strtod_l+0x2ba>
 8006036:	2a6e      	cmp	r2, #110	; 0x6e
 8006038:	e7d9      	b.n	8005fee <_strtod_l+0x306>
 800603a:	498b      	ldr	r1, [pc, #556]	; (8006268 <_strtod_l+0x580>)
 800603c:	a815      	add	r0, sp, #84	; 0x54
 800603e:	f001 f999 	bl	8007374 <__match>
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f aea8 	beq.w	8005d98 <_strtod_l+0xb0>
 8006048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800604a:	4988      	ldr	r1, [pc, #544]	; (800626c <_strtod_l+0x584>)
 800604c:	3b01      	subs	r3, #1
 800604e:	a815      	add	r0, sp, #84	; 0x54
 8006050:	9315      	str	r3, [sp, #84]	; 0x54
 8006052:	f001 f98f 	bl	8007374 <__match>
 8006056:	b910      	cbnz	r0, 800605e <_strtod_l+0x376>
 8006058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800605a:	3301      	adds	r3, #1
 800605c:	9315      	str	r3, [sp, #84]	; 0x54
 800605e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800627c <_strtod_l+0x594>
 8006062:	f04f 0800 	mov.w	r8, #0
 8006066:	e67a      	b.n	8005d5e <_strtod_l+0x76>
 8006068:	4881      	ldr	r0, [pc, #516]	; (8006270 <_strtod_l+0x588>)
 800606a:	f000 fe69 	bl	8006d40 <nan>
 800606e:	ec59 8b10 	vmov	r8, r9, d0
 8006072:	e674      	b.n	8005d5e <_strtod_l+0x76>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006078:	1afb      	subs	r3, r7, r3
 800607a:	f1bb 0f00 	cmp.w	fp, #0
 800607e:	bf08      	it	eq
 8006080:	46b3      	moveq	fp, r6
 8006082:	2e10      	cmp	r6, #16
 8006084:	9308      	str	r3, [sp, #32]
 8006086:	4635      	mov	r5, r6
 8006088:	bfa8      	it	ge
 800608a:	2510      	movge	r5, #16
 800608c:	f7fa fa3a 	bl	8000504 <__aeabi_ui2d>
 8006090:	2e09      	cmp	r6, #9
 8006092:	4680      	mov	r8, r0
 8006094:	4689      	mov	r9, r1
 8006096:	dd13      	ble.n	80060c0 <_strtod_l+0x3d8>
 8006098:	4b76      	ldr	r3, [pc, #472]	; (8006274 <_strtod_l+0x58c>)
 800609a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800609e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80060a2:	f7fa faa9 	bl	80005f8 <__aeabi_dmul>
 80060a6:	4680      	mov	r8, r0
 80060a8:	4650      	mov	r0, sl
 80060aa:	4689      	mov	r9, r1
 80060ac:	f7fa fa2a 	bl	8000504 <__aeabi_ui2d>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa f8e8 	bl	800028c <__adddf3>
 80060bc:	4680      	mov	r8, r0
 80060be:	4689      	mov	r9, r1
 80060c0:	2e0f      	cmp	r6, #15
 80060c2:	dc38      	bgt.n	8006136 <_strtod_l+0x44e>
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f43f ae49 	beq.w	8005d5e <_strtod_l+0x76>
 80060cc:	dd24      	ble.n	8006118 <_strtod_l+0x430>
 80060ce:	2b16      	cmp	r3, #22
 80060d0:	dc0b      	bgt.n	80060ea <_strtod_l+0x402>
 80060d2:	4968      	ldr	r1, [pc, #416]	; (8006274 <_strtod_l+0x58c>)
 80060d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	f7fa fa8a 	bl	80005f8 <__aeabi_dmul>
 80060e4:	4680      	mov	r8, r0
 80060e6:	4689      	mov	r9, r1
 80060e8:	e639      	b.n	8005d5e <_strtod_l+0x76>
 80060ea:	9a08      	ldr	r2, [sp, #32]
 80060ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80060f0:	4293      	cmp	r3, r2
 80060f2:	db20      	blt.n	8006136 <_strtod_l+0x44e>
 80060f4:	4c5f      	ldr	r4, [pc, #380]	; (8006274 <_strtod_l+0x58c>)
 80060f6:	f1c6 060f 	rsb	r6, r6, #15
 80060fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80060fe:	4642      	mov	r2, r8
 8006100:	464b      	mov	r3, r9
 8006102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	9b08      	ldr	r3, [sp, #32]
 800610c:	1b9e      	subs	r6, r3, r6
 800610e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006112:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006116:	e7e3      	b.n	80060e0 <_strtod_l+0x3f8>
 8006118:	9b08      	ldr	r3, [sp, #32]
 800611a:	3316      	adds	r3, #22
 800611c:	db0b      	blt.n	8006136 <_strtod_l+0x44e>
 800611e:	9b05      	ldr	r3, [sp, #20]
 8006120:	1bdf      	subs	r7, r3, r7
 8006122:	4b54      	ldr	r3, [pc, #336]	; (8006274 <_strtod_l+0x58c>)
 8006124:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612c:	4640      	mov	r0, r8
 800612e:	4649      	mov	r1, r9
 8006130:	f7fa fb8c 	bl	800084c <__aeabi_ddiv>
 8006134:	e7d6      	b.n	80060e4 <_strtod_l+0x3fc>
 8006136:	9b08      	ldr	r3, [sp, #32]
 8006138:	1b75      	subs	r5, r6, r5
 800613a:	441d      	add	r5, r3
 800613c:	2d00      	cmp	r5, #0
 800613e:	dd70      	ble.n	8006222 <_strtod_l+0x53a>
 8006140:	f015 030f 	ands.w	r3, r5, #15
 8006144:	d00a      	beq.n	800615c <_strtod_l+0x474>
 8006146:	494b      	ldr	r1, [pc, #300]	; (8006274 <_strtod_l+0x58c>)
 8006148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	4680      	mov	r8, r0
 800615a:	4689      	mov	r9, r1
 800615c:	f035 050f 	bics.w	r5, r5, #15
 8006160:	d04d      	beq.n	80061fe <_strtod_l+0x516>
 8006162:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006166:	dd22      	ble.n	80061ae <_strtod_l+0x4c6>
 8006168:	2500      	movs	r5, #0
 800616a:	46ab      	mov	fp, r5
 800616c:	9509      	str	r5, [sp, #36]	; 0x24
 800616e:	9505      	str	r5, [sp, #20]
 8006170:	2322      	movs	r3, #34	; 0x22
 8006172:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800627c <_strtod_l+0x594>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	f43f aded 	beq.w	8005d5e <_strtod_l+0x76>
 8006184:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006186:	4620      	mov	r0, r4
 8006188:	f001 faaa 	bl	80076e0 <_Bfree>
 800618c:	9905      	ldr	r1, [sp, #20]
 800618e:	4620      	mov	r0, r4
 8006190:	f001 faa6 	bl	80076e0 <_Bfree>
 8006194:	4659      	mov	r1, fp
 8006196:	4620      	mov	r0, r4
 8006198:	f001 faa2 	bl	80076e0 <_Bfree>
 800619c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619e:	4620      	mov	r0, r4
 80061a0:	f001 fa9e 	bl	80076e0 <_Bfree>
 80061a4:	4629      	mov	r1, r5
 80061a6:	4620      	mov	r0, r4
 80061a8:	f001 fa9a 	bl	80076e0 <_Bfree>
 80061ac:	e5d7      	b.n	8005d5e <_strtod_l+0x76>
 80061ae:	4b32      	ldr	r3, [pc, #200]	; (8006278 <_strtod_l+0x590>)
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	112d      	asrs	r5, r5, #4
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	469a      	mov	sl, r3
 80061bc:	2d01      	cmp	r5, #1
 80061be:	dc21      	bgt.n	8006204 <_strtod_l+0x51c>
 80061c0:	b10b      	cbz	r3, 80061c6 <_strtod_l+0x4de>
 80061c2:	4680      	mov	r8, r0
 80061c4:	4689      	mov	r9, r1
 80061c6:	492c      	ldr	r1, [pc, #176]	; (8006278 <_strtod_l+0x590>)
 80061c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80061cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	4b27      	ldr	r3, [pc, #156]	; (800627c <_strtod_l+0x594>)
 80061de:	460a      	mov	r2, r1
 80061e0:	400b      	ands	r3, r1
 80061e2:	4927      	ldr	r1, [pc, #156]	; (8006280 <_strtod_l+0x598>)
 80061e4:	428b      	cmp	r3, r1
 80061e6:	4680      	mov	r8, r0
 80061e8:	d8be      	bhi.n	8006168 <_strtod_l+0x480>
 80061ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061ee:	428b      	cmp	r3, r1
 80061f0:	bf86      	itte	hi
 80061f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006284 <_strtod_l+0x59c>
 80061f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80061fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80061fe:	2300      	movs	r3, #0
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	e07b      	b.n	80062fc <_strtod_l+0x614>
 8006204:	07ea      	lsls	r2, r5, #31
 8006206:	d505      	bpl.n	8006214 <_strtod_l+0x52c>
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	2301      	movs	r3, #1
 8006214:	9a04      	ldr	r2, [sp, #16]
 8006216:	3208      	adds	r2, #8
 8006218:	f10a 0a01 	add.w	sl, sl, #1
 800621c:	106d      	asrs	r5, r5, #1
 800621e:	9204      	str	r2, [sp, #16]
 8006220:	e7cc      	b.n	80061bc <_strtod_l+0x4d4>
 8006222:	d0ec      	beq.n	80061fe <_strtod_l+0x516>
 8006224:	426d      	negs	r5, r5
 8006226:	f015 020f 	ands.w	r2, r5, #15
 800622a:	d00a      	beq.n	8006242 <_strtod_l+0x55a>
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <_strtod_l+0x58c>)
 800622e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006232:	4640      	mov	r0, r8
 8006234:	4649      	mov	r1, r9
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f7fa fb07 	bl	800084c <__aeabi_ddiv>
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	112d      	asrs	r5, r5, #4
 8006244:	d0db      	beq.n	80061fe <_strtod_l+0x516>
 8006246:	2d1f      	cmp	r5, #31
 8006248:	dd1e      	ble.n	8006288 <_strtod_l+0x5a0>
 800624a:	2500      	movs	r5, #0
 800624c:	46ab      	mov	fp, r5
 800624e:	9509      	str	r5, [sp, #36]	; 0x24
 8006250:	9505      	str	r5, [sp, #20]
 8006252:	2322      	movs	r3, #34	; 0x22
 8006254:	f04f 0800 	mov.w	r8, #0
 8006258:	f04f 0900 	mov.w	r9, #0
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	e78d      	b.n	800617c <_strtod_l+0x494>
 8006260:	0800901b 	.word	0x0800901b
 8006264:	08009034 	.word	0x08009034
 8006268:	08009012 	.word	0x08009012
 800626c:	08009015 	.word	0x08009015
 8006270:	08009124 	.word	0x08009124
 8006274:	08009218 	.word	0x08009218
 8006278:	080091f0 	.word	0x080091f0
 800627c:	7ff00000 	.word	0x7ff00000
 8006280:	7ca00000 	.word	0x7ca00000
 8006284:	7fefffff 	.word	0x7fefffff
 8006288:	f015 0310 	ands.w	r3, r5, #16
 800628c:	bf18      	it	ne
 800628e:	236a      	movne	r3, #106	; 0x6a
 8006290:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006634 <_strtod_l+0x94c>
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	2300      	movs	r3, #0
 800629c:	07ea      	lsls	r2, r5, #31
 800629e:	d504      	bpl.n	80062aa <_strtod_l+0x5c2>
 80062a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80062a4:	f7fa f9a8 	bl	80005f8 <__aeabi_dmul>
 80062a8:	2301      	movs	r3, #1
 80062aa:	106d      	asrs	r5, r5, #1
 80062ac:	f10a 0a08 	add.w	sl, sl, #8
 80062b0:	d1f4      	bne.n	800629c <_strtod_l+0x5b4>
 80062b2:	b10b      	cbz	r3, 80062b8 <_strtod_l+0x5d0>
 80062b4:	4680      	mov	r8, r0
 80062b6:	4689      	mov	r9, r1
 80062b8:	9b04      	ldr	r3, [sp, #16]
 80062ba:	b1bb      	cbz	r3, 80062ec <_strtod_l+0x604>
 80062bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80062c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	4649      	mov	r1, r9
 80062c8:	dd10      	ble.n	80062ec <_strtod_l+0x604>
 80062ca:	2b1f      	cmp	r3, #31
 80062cc:	f340 811e 	ble.w	800650c <_strtod_l+0x824>
 80062d0:	2b34      	cmp	r3, #52	; 0x34
 80062d2:	bfde      	ittt	le
 80062d4:	f04f 33ff 	movle.w	r3, #4294967295
 80062d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062dc:	4093      	lslle	r3, r2
 80062de:	f04f 0800 	mov.w	r8, #0
 80062e2:	bfcc      	ite	gt
 80062e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80062e8:	ea03 0901 	andle.w	r9, r3, r1
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7fa fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d1a6      	bne.n	800624a <_strtod_l+0x562>
 80062fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006302:	4633      	mov	r3, r6
 8006304:	465a      	mov	r2, fp
 8006306:	4620      	mov	r0, r4
 8006308:	f001 fa52 	bl	80077b0 <__s2b>
 800630c:	9009      	str	r0, [sp, #36]	; 0x24
 800630e:	2800      	cmp	r0, #0
 8006310:	f43f af2a 	beq.w	8006168 <_strtod_l+0x480>
 8006314:	9a08      	ldr	r2, [sp, #32]
 8006316:	9b05      	ldr	r3, [sp, #20]
 8006318:	2a00      	cmp	r2, #0
 800631a:	eba3 0307 	sub.w	r3, r3, r7
 800631e:	bfa8      	it	ge
 8006320:	2300      	movge	r3, #0
 8006322:	930c      	str	r3, [sp, #48]	; 0x30
 8006324:	2500      	movs	r5, #0
 8006326:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800632a:	9312      	str	r3, [sp, #72]	; 0x48
 800632c:	46ab      	mov	fp, r5
 800632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006330:	4620      	mov	r0, r4
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	f001 f994 	bl	8007660 <_Balloc>
 8006338:	9005      	str	r0, [sp, #20]
 800633a:	2800      	cmp	r0, #0
 800633c:	f43f af18 	beq.w	8006170 <_strtod_l+0x488>
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	3202      	adds	r2, #2
 8006346:	f103 010c 	add.w	r1, r3, #12
 800634a:	0092      	lsls	r2, r2, #2
 800634c:	300c      	adds	r0, #12
 800634e:	f000 fce7 	bl	8006d20 <memcpy>
 8006352:	ec49 8b10 	vmov	d0, r8, r9
 8006356:	aa18      	add	r2, sp, #96	; 0x60
 8006358:	a917      	add	r1, sp, #92	; 0x5c
 800635a:	4620      	mov	r0, r4
 800635c:	f001 fd5c 	bl	8007e18 <__d2b>
 8006360:	ec49 8b18 	vmov	d8, r8, r9
 8006364:	9016      	str	r0, [sp, #88]	; 0x58
 8006366:	2800      	cmp	r0, #0
 8006368:	f43f af02 	beq.w	8006170 <_strtod_l+0x488>
 800636c:	2101      	movs	r1, #1
 800636e:	4620      	mov	r0, r4
 8006370:	f001 fab6 	bl	80078e0 <__i2b>
 8006374:	4683      	mov	fp, r0
 8006376:	2800      	cmp	r0, #0
 8006378:	f43f aefa 	beq.w	8006170 <_strtod_l+0x488>
 800637c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800637e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006380:	2e00      	cmp	r6, #0
 8006382:	bfab      	itete	ge
 8006384:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006386:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006388:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800638a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800638e:	bfac      	ite	ge
 8006390:	eb06 0a03 	addge.w	sl, r6, r3
 8006394:	1b9f      	sublt	r7, r3, r6
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	1af6      	subs	r6, r6, r3
 800639a:	4416      	add	r6, r2
 800639c:	4ba0      	ldr	r3, [pc, #640]	; (8006620 <_strtod_l+0x938>)
 800639e:	3e01      	subs	r6, #1
 80063a0:	429e      	cmp	r6, r3
 80063a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063a6:	f280 80c4 	bge.w	8006532 <_strtod_l+0x84a>
 80063aa:	1b9b      	subs	r3, r3, r6
 80063ac:	2b1f      	cmp	r3, #31
 80063ae:	eba2 0203 	sub.w	r2, r2, r3
 80063b2:	f04f 0101 	mov.w	r1, #1
 80063b6:	f300 80b0 	bgt.w	800651a <_strtod_l+0x832>
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	930e      	str	r3, [sp, #56]	; 0x38
 80063c0:	2300      	movs	r3, #0
 80063c2:	930d      	str	r3, [sp, #52]	; 0x34
 80063c4:	eb0a 0602 	add.w	r6, sl, r2
 80063c8:	9b04      	ldr	r3, [sp, #16]
 80063ca:	45b2      	cmp	sl, r6
 80063cc:	4417      	add	r7, r2
 80063ce:	441f      	add	r7, r3
 80063d0:	4653      	mov	r3, sl
 80063d2:	bfa8      	it	ge
 80063d4:	4633      	movge	r3, r6
 80063d6:	42bb      	cmp	r3, r7
 80063d8:	bfa8      	it	ge
 80063da:	463b      	movge	r3, r7
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfc2      	ittt	gt
 80063e0:	1af6      	subgt	r6, r6, r3
 80063e2:	1aff      	subgt	r7, r7, r3
 80063e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80063e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd17      	ble.n	800641e <_strtod_l+0x736>
 80063ee:	4659      	mov	r1, fp
 80063f0:	461a      	mov	r2, r3
 80063f2:	4620      	mov	r0, r4
 80063f4:	f001 fb34 	bl	8007a60 <__pow5mult>
 80063f8:	4683      	mov	fp, r0
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f43f aeb8 	beq.w	8006170 <_strtod_l+0x488>
 8006400:	4601      	mov	r1, r0
 8006402:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006404:	4620      	mov	r0, r4
 8006406:	f001 fa81 	bl	800790c <__multiply>
 800640a:	900b      	str	r0, [sp, #44]	; 0x2c
 800640c:	2800      	cmp	r0, #0
 800640e:	f43f aeaf 	beq.w	8006170 <_strtod_l+0x488>
 8006412:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006414:	4620      	mov	r0, r4
 8006416:	f001 f963 	bl	80076e0 <_Bfree>
 800641a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641c:	9316      	str	r3, [sp, #88]	; 0x58
 800641e:	2e00      	cmp	r6, #0
 8006420:	f300 808c 	bgt.w	800653c <_strtod_l+0x854>
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd08      	ble.n	800643c <_strtod_l+0x754>
 800642a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800642c:	9905      	ldr	r1, [sp, #20]
 800642e:	4620      	mov	r0, r4
 8006430:	f001 fb16 	bl	8007a60 <__pow5mult>
 8006434:	9005      	str	r0, [sp, #20]
 8006436:	2800      	cmp	r0, #0
 8006438:	f43f ae9a 	beq.w	8006170 <_strtod_l+0x488>
 800643c:	2f00      	cmp	r7, #0
 800643e:	dd08      	ble.n	8006452 <_strtod_l+0x76a>
 8006440:	9905      	ldr	r1, [sp, #20]
 8006442:	463a      	mov	r2, r7
 8006444:	4620      	mov	r0, r4
 8006446:	f001 fb65 	bl	8007b14 <__lshift>
 800644a:	9005      	str	r0, [sp, #20]
 800644c:	2800      	cmp	r0, #0
 800644e:	f43f ae8f 	beq.w	8006170 <_strtod_l+0x488>
 8006452:	f1ba 0f00 	cmp.w	sl, #0
 8006456:	dd08      	ble.n	800646a <_strtod_l+0x782>
 8006458:	4659      	mov	r1, fp
 800645a:	4652      	mov	r2, sl
 800645c:	4620      	mov	r0, r4
 800645e:	f001 fb59 	bl	8007b14 <__lshift>
 8006462:	4683      	mov	fp, r0
 8006464:	2800      	cmp	r0, #0
 8006466:	f43f ae83 	beq.w	8006170 <_strtod_l+0x488>
 800646a:	9a05      	ldr	r2, [sp, #20]
 800646c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800646e:	4620      	mov	r0, r4
 8006470:	f001 fbd8 	bl	8007c24 <__mdiff>
 8006474:	4605      	mov	r5, r0
 8006476:	2800      	cmp	r0, #0
 8006478:	f43f ae7a 	beq.w	8006170 <_strtod_l+0x488>
 800647c:	68c3      	ldr	r3, [r0, #12]
 800647e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006480:	2300      	movs	r3, #0
 8006482:	60c3      	str	r3, [r0, #12]
 8006484:	4659      	mov	r1, fp
 8006486:	f001 fbb1 	bl	8007bec <__mcmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	da60      	bge.n	8006550 <_strtod_l+0x868>
 800648e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006490:	ea53 0308 	orrs.w	r3, r3, r8
 8006494:	f040 8084 	bne.w	80065a0 <_strtod_l+0x8b8>
 8006498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800649c:	2b00      	cmp	r3, #0
 800649e:	d17f      	bne.n	80065a0 <_strtod_l+0x8b8>
 80064a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064a4:	0d1b      	lsrs	r3, r3, #20
 80064a6:	051b      	lsls	r3, r3, #20
 80064a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80064ac:	d978      	bls.n	80065a0 <_strtod_l+0x8b8>
 80064ae:	696b      	ldr	r3, [r5, #20]
 80064b0:	b913      	cbnz	r3, 80064b8 <_strtod_l+0x7d0>
 80064b2:	692b      	ldr	r3, [r5, #16]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	dd73      	ble.n	80065a0 <_strtod_l+0x8b8>
 80064b8:	4629      	mov	r1, r5
 80064ba:	2201      	movs	r2, #1
 80064bc:	4620      	mov	r0, r4
 80064be:	f001 fb29 	bl	8007b14 <__lshift>
 80064c2:	4659      	mov	r1, fp
 80064c4:	4605      	mov	r5, r0
 80064c6:	f001 fb91 	bl	8007bec <__mcmp>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	dd68      	ble.n	80065a0 <_strtod_l+0x8b8>
 80064ce:	9904      	ldr	r1, [sp, #16]
 80064d0:	4a54      	ldr	r2, [pc, #336]	; (8006624 <_strtod_l+0x93c>)
 80064d2:	464b      	mov	r3, r9
 80064d4:	2900      	cmp	r1, #0
 80064d6:	f000 8084 	beq.w	80065e2 <_strtod_l+0x8fa>
 80064da:	ea02 0109 	and.w	r1, r2, r9
 80064de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064e2:	dc7e      	bgt.n	80065e2 <_strtod_l+0x8fa>
 80064e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064e8:	f77f aeb3 	ble.w	8006252 <_strtod_l+0x56a>
 80064ec:	4b4e      	ldr	r3, [pc, #312]	; (8006628 <_strtod_l+0x940>)
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	2200      	movs	r2, #0
 80064f4:	f7fa f880 	bl	80005f8 <__aeabi_dmul>
 80064f8:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <_strtod_l+0x93c>)
 80064fa:	400b      	ands	r3, r1
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f ae3f 	bne.w	8006184 <_strtod_l+0x49c>
 8006506:	2322      	movs	r3, #34	; 0x22
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	e63b      	b.n	8006184 <_strtod_l+0x49c>
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	ea03 0808 	and.w	r8, r3, r8
 8006518:	e6e8      	b.n	80062ec <_strtod_l+0x604>
 800651a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800651e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006522:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006526:	36e2      	adds	r6, #226	; 0xe2
 8006528:	fa01 f306 	lsl.w	r3, r1, r6
 800652c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006530:	e748      	b.n	80063c4 <_strtod_l+0x6dc>
 8006532:	2100      	movs	r1, #0
 8006534:	2301      	movs	r3, #1
 8006536:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800653a:	e743      	b.n	80063c4 <_strtod_l+0x6dc>
 800653c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800653e:	4632      	mov	r2, r6
 8006540:	4620      	mov	r0, r4
 8006542:	f001 fae7 	bl	8007b14 <__lshift>
 8006546:	9016      	str	r0, [sp, #88]	; 0x58
 8006548:	2800      	cmp	r0, #0
 800654a:	f47f af6b 	bne.w	8006424 <_strtod_l+0x73c>
 800654e:	e60f      	b.n	8006170 <_strtod_l+0x488>
 8006550:	46ca      	mov	sl, r9
 8006552:	d171      	bne.n	8006638 <_strtod_l+0x950>
 8006554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800655a:	b352      	cbz	r2, 80065b2 <_strtod_l+0x8ca>
 800655c:	4a33      	ldr	r2, [pc, #204]	; (800662c <_strtod_l+0x944>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d12a      	bne.n	80065b8 <_strtod_l+0x8d0>
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	4641      	mov	r1, r8
 8006566:	b1fb      	cbz	r3, 80065a8 <_strtod_l+0x8c0>
 8006568:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <_strtod_l+0x93c>)
 800656a:	ea09 0303 	and.w	r3, r9, r3
 800656e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	d81a      	bhi.n	80065ae <_strtod_l+0x8c6>
 8006578:	0d1b      	lsrs	r3, r3, #20
 800657a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	4299      	cmp	r1, r3
 8006584:	d118      	bne.n	80065b8 <_strtod_l+0x8d0>
 8006586:	4b2a      	ldr	r3, [pc, #168]	; (8006630 <_strtod_l+0x948>)
 8006588:	459a      	cmp	sl, r3
 800658a:	d102      	bne.n	8006592 <_strtod_l+0x8aa>
 800658c:	3101      	adds	r1, #1
 800658e:	f43f adef 	beq.w	8006170 <_strtod_l+0x488>
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <_strtod_l+0x93c>)
 8006594:	ea0a 0303 	and.w	r3, sl, r3
 8006598:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800659c:	f04f 0800 	mov.w	r8, #0
 80065a0:	9b04      	ldr	r3, [sp, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1a2      	bne.n	80064ec <_strtod_l+0x804>
 80065a6:	e5ed      	b.n	8006184 <_strtod_l+0x49c>
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	e7e9      	b.n	8006582 <_strtod_l+0x89a>
 80065ae:	4613      	mov	r3, r2
 80065b0:	e7e7      	b.n	8006582 <_strtod_l+0x89a>
 80065b2:	ea53 0308 	orrs.w	r3, r3, r8
 80065b6:	d08a      	beq.n	80064ce <_strtod_l+0x7e6>
 80065b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ba:	b1e3      	cbz	r3, 80065f6 <_strtod_l+0x90e>
 80065bc:	ea13 0f0a 	tst.w	r3, sl
 80065c0:	d0ee      	beq.n	80065a0 <_strtod_l+0x8b8>
 80065c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c4:	9a04      	ldr	r2, [sp, #16]
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	b1c3      	cbz	r3, 80065fe <_strtod_l+0x916>
 80065cc:	f7ff fb70 	bl	8005cb0 <sulp>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	ec51 0b18 	vmov	r0, r1, d8
 80065d8:	f7f9 fe58 	bl	800028c <__adddf3>
 80065dc:	4680      	mov	r8, r0
 80065de:	4689      	mov	r9, r1
 80065e0:	e7de      	b.n	80065a0 <_strtod_l+0x8b8>
 80065e2:	4013      	ands	r3, r2
 80065e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80065ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80065f0:	f04f 38ff 	mov.w	r8, #4294967295
 80065f4:	e7d4      	b.n	80065a0 <_strtod_l+0x8b8>
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	ea13 0f08 	tst.w	r3, r8
 80065fc:	e7e0      	b.n	80065c0 <_strtod_l+0x8d8>
 80065fe:	f7ff fb57 	bl	8005cb0 <sulp>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	ec51 0b18 	vmov	r0, r1, d8
 800660a:	f7f9 fe3d 	bl	8000288 <__aeabi_dsub>
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	4680      	mov	r8, r0
 8006614:	4689      	mov	r9, r1
 8006616:	f7fa fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800661a:	2800      	cmp	r0, #0
 800661c:	d0c0      	beq.n	80065a0 <_strtod_l+0x8b8>
 800661e:	e618      	b.n	8006252 <_strtod_l+0x56a>
 8006620:	fffffc02 	.word	0xfffffc02
 8006624:	7ff00000 	.word	0x7ff00000
 8006628:	39500000 	.word	0x39500000
 800662c:	000fffff 	.word	0x000fffff
 8006630:	7fefffff 	.word	0x7fefffff
 8006634:	08009048 	.word	0x08009048
 8006638:	4659      	mov	r1, fp
 800663a:	4628      	mov	r0, r5
 800663c:	f001 fc46 	bl	8007ecc <__ratio>
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	ee10 0a10 	vmov	r0, s0
 8006648:	2200      	movs	r2, #0
 800664a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664e:	4639      	mov	r1, r7
 8006650:	f7fa fa4e 	bl	8000af0 <__aeabi_dcmple>
 8006654:	2800      	cmp	r0, #0
 8006656:	d071      	beq.n	800673c <_strtod_l+0xa54>
 8006658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d17c      	bne.n	8006758 <_strtod_l+0xa70>
 800665e:	f1b8 0f00 	cmp.w	r8, #0
 8006662:	d15a      	bne.n	800671a <_strtod_l+0xa32>
 8006664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006668:	2b00      	cmp	r3, #0
 800666a:	d15d      	bne.n	8006728 <_strtod_l+0xa40>
 800666c:	4b90      	ldr	r3, [pc, #576]	; (80068b0 <_strtod_l+0xbc8>)
 800666e:	2200      	movs	r2, #0
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa fa32 	bl	8000adc <__aeabi_dcmplt>
 8006678:	2800      	cmp	r0, #0
 800667a:	d15c      	bne.n	8006736 <_strtod_l+0xa4e>
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	4b8c      	ldr	r3, [pc, #560]	; (80068b4 <_strtod_l+0xbcc>)
 8006682:	2200      	movs	r2, #0
 8006684:	f7f9 ffb8 	bl	80005f8 <__aeabi_dmul>
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006690:	9606      	str	r6, [sp, #24]
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006698:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800669c:	4b86      	ldr	r3, [pc, #536]	; (80068b8 <_strtod_l+0xbd0>)
 800669e:	ea0a 0303 	and.w	r3, sl, r3
 80066a2:	930d      	str	r3, [sp, #52]	; 0x34
 80066a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066a6:	4b85      	ldr	r3, [pc, #532]	; (80068bc <_strtod_l+0xbd4>)
 80066a8:	429a      	cmp	r2, r3
 80066aa:	f040 8090 	bne.w	80067ce <_strtod_l+0xae6>
 80066ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80066b2:	ec49 8b10 	vmov	d0, r8, r9
 80066b6:	f001 fb3f 	bl	8007d38 <__ulp>
 80066ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066be:	ec51 0b10 	vmov	r0, r1, d0
 80066c2:	f7f9 ff99 	bl	80005f8 <__aeabi_dmul>
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	f7f9 fddf 	bl	800028c <__adddf3>
 80066ce:	460b      	mov	r3, r1
 80066d0:	4979      	ldr	r1, [pc, #484]	; (80068b8 <_strtod_l+0xbd0>)
 80066d2:	4a7b      	ldr	r2, [pc, #492]	; (80068c0 <_strtod_l+0xbd8>)
 80066d4:	4019      	ands	r1, r3
 80066d6:	4291      	cmp	r1, r2
 80066d8:	4680      	mov	r8, r0
 80066da:	d944      	bls.n	8006766 <_strtod_l+0xa7e>
 80066dc:	ee18 2a90 	vmov	r2, s17
 80066e0:	4b78      	ldr	r3, [pc, #480]	; (80068c4 <_strtod_l+0xbdc>)
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d104      	bne.n	80066f0 <_strtod_l+0xa08>
 80066e6:	ee18 3a10 	vmov	r3, s16
 80066ea:	3301      	adds	r3, #1
 80066ec:	f43f ad40 	beq.w	8006170 <_strtod_l+0x488>
 80066f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80068c4 <_strtod_l+0xbdc>
 80066f4:	f04f 38ff 	mov.w	r8, #4294967295
 80066f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fff0 	bl	80076e0 <_Bfree>
 8006700:	9905      	ldr	r1, [sp, #20]
 8006702:	4620      	mov	r0, r4
 8006704:	f000 ffec 	bl	80076e0 <_Bfree>
 8006708:	4659      	mov	r1, fp
 800670a:	4620      	mov	r0, r4
 800670c:	f000 ffe8 	bl	80076e0 <_Bfree>
 8006710:	4629      	mov	r1, r5
 8006712:	4620      	mov	r0, r4
 8006714:	f000 ffe4 	bl	80076e0 <_Bfree>
 8006718:	e609      	b.n	800632e <_strtod_l+0x646>
 800671a:	f1b8 0f01 	cmp.w	r8, #1
 800671e:	d103      	bne.n	8006728 <_strtod_l+0xa40>
 8006720:	f1b9 0f00 	cmp.w	r9, #0
 8006724:	f43f ad95 	beq.w	8006252 <_strtod_l+0x56a>
 8006728:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006880 <_strtod_l+0xb98>
 800672c:	4f60      	ldr	r7, [pc, #384]	; (80068b0 <_strtod_l+0xbc8>)
 800672e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006732:	2600      	movs	r6, #0
 8006734:	e7ae      	b.n	8006694 <_strtod_l+0x9ac>
 8006736:	4f5f      	ldr	r7, [pc, #380]	; (80068b4 <_strtod_l+0xbcc>)
 8006738:	2600      	movs	r6, #0
 800673a:	e7a7      	b.n	800668c <_strtod_l+0x9a4>
 800673c:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <_strtod_l+0xbcc>)
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	2200      	movs	r2, #0
 8006744:	f7f9 ff58 	bl	80005f8 <__aeabi_dmul>
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d09c      	beq.n	800668c <_strtod_l+0x9a4>
 8006752:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006756:	e79d      	b.n	8006694 <_strtod_l+0x9ac>
 8006758:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006888 <_strtod_l+0xba0>
 800675c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006760:	ec57 6b17 	vmov	r6, r7, d7
 8006764:	e796      	b.n	8006694 <_strtod_l+0x9ac>
 8006766:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800676a:	9b04      	ldr	r3, [sp, #16]
 800676c:	46ca      	mov	sl, r9
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1c2      	bne.n	80066f8 <_strtod_l+0xa10>
 8006772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006778:	0d1b      	lsrs	r3, r3, #20
 800677a:	051b      	lsls	r3, r3, #20
 800677c:	429a      	cmp	r2, r3
 800677e:	d1bb      	bne.n	80066f8 <_strtod_l+0xa10>
 8006780:	4630      	mov	r0, r6
 8006782:	4639      	mov	r1, r7
 8006784:	f7fa fa0a 	bl	8000b9c <__aeabi_d2lz>
 8006788:	f7f9 ff08 	bl	800059c <__aeabi_l2d>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 fd78 	bl	8000288 <__aeabi_dsub>
 8006798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800679a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800679e:	ea43 0308 	orr.w	r3, r3, r8
 80067a2:	4313      	orrs	r3, r2
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	d054      	beq.n	8006854 <_strtod_l+0xb6c>
 80067aa:	a339      	add	r3, pc, #228	; (adr r3, 8006890 <_strtod_l+0xba8>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7fa f994 	bl	8000adc <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f47f ace5 	bne.w	8006184 <_strtod_l+0x49c>
 80067ba:	a337      	add	r3, pc, #220	; (adr r3, 8006898 <_strtod_l+0xbb0>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7fa f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d095      	beq.n	80066f8 <_strtod_l+0xa10>
 80067cc:	e4da      	b.n	8006184 <_strtod_l+0x49c>
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	b333      	cbz	r3, 8006820 <_strtod_l+0xb38>
 80067d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067d8:	d822      	bhi.n	8006820 <_strtod_l+0xb38>
 80067da:	a331      	add	r3, pc, #196	; (adr r3, 80068a0 <_strtod_l+0xbb8>)
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f984 	bl	8000af0 <__aeabi_dcmple>
 80067e8:	b1a0      	cbz	r0, 8006814 <_strtod_l+0xb2c>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7fa f99d 	bl	8000b2c <__aeabi_d2uiz>
 80067f2:	2801      	cmp	r0, #1
 80067f4:	bf38      	it	cc
 80067f6:	2001      	movcc	r0, #1
 80067f8:	f7f9 fe84 	bl	8000504 <__aeabi_ui2d>
 80067fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fe:	4606      	mov	r6, r0
 8006800:	460f      	mov	r7, r1
 8006802:	bb23      	cbnz	r3, 800684e <_strtod_l+0xb66>
 8006804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006808:	9010      	str	r0, [sp, #64]	; 0x40
 800680a:	9311      	str	r3, [sp, #68]	; 0x44
 800680c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006810:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006818:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006820:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006824:	eeb0 0a48 	vmov.f32	s0, s16
 8006828:	eef0 0a68 	vmov.f32	s1, s17
 800682c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006830:	f001 fa82 	bl	8007d38 <__ulp>
 8006834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006838:	ec53 2b10 	vmov	r2, r3, d0
 800683c:	f7f9 fedc 	bl	80005f8 <__aeabi_dmul>
 8006840:	ec53 2b18 	vmov	r2, r3, d8
 8006844:	f7f9 fd22 	bl	800028c <__adddf3>
 8006848:	4680      	mov	r8, r0
 800684a:	4689      	mov	r9, r1
 800684c:	e78d      	b.n	800676a <_strtod_l+0xa82>
 800684e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006852:	e7db      	b.n	800680c <_strtod_l+0xb24>
 8006854:	a314      	add	r3, pc, #80	; (adr r3, 80068a8 <_strtod_l+0xbc0>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7fa f93f 	bl	8000adc <__aeabi_dcmplt>
 800685e:	e7b3      	b.n	80067c8 <_strtod_l+0xae0>
 8006860:	2300      	movs	r3, #0
 8006862:	930a      	str	r3, [sp, #40]	; 0x28
 8006864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	f7ff ba7c 	b.w	8005d66 <_strtod_l+0x7e>
 800686e:	2a65      	cmp	r2, #101	; 0x65
 8006870:	f43f ab75 	beq.w	8005f5e <_strtod_l+0x276>
 8006874:	2a45      	cmp	r2, #69	; 0x45
 8006876:	f43f ab72 	beq.w	8005f5e <_strtod_l+0x276>
 800687a:	2301      	movs	r3, #1
 800687c:	f7ff bbaa 	b.w	8005fd4 <_strtod_l+0x2ec>
 8006880:	00000000 	.word	0x00000000
 8006884:	bff00000 	.word	0xbff00000
 8006888:	00000000 	.word	0x00000000
 800688c:	3ff00000 	.word	0x3ff00000
 8006890:	94a03595 	.word	0x94a03595
 8006894:	3fdfffff 	.word	0x3fdfffff
 8006898:	35afe535 	.word	0x35afe535
 800689c:	3fe00000 	.word	0x3fe00000
 80068a0:	ffc00000 	.word	0xffc00000
 80068a4:	41dfffff 	.word	0x41dfffff
 80068a8:	94a03595 	.word	0x94a03595
 80068ac:	3fcfffff 	.word	0x3fcfffff
 80068b0:	3ff00000 	.word	0x3ff00000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	7fe00000 	.word	0x7fe00000
 80068c0:	7c9fffff 	.word	0x7c9fffff
 80068c4:	7fefffff 	.word	0x7fefffff

080068c8 <strtod>:
 80068c8:	460a      	mov	r2, r1
 80068ca:	4601      	mov	r1, r0
 80068cc:	4802      	ldr	r0, [pc, #8]	; (80068d8 <strtod+0x10>)
 80068ce:	4b03      	ldr	r3, [pc, #12]	; (80068dc <strtod+0x14>)
 80068d0:	6800      	ldr	r0, [r0, #0]
 80068d2:	f7ff ba09 	b.w	8005ce8 <_strtod_l>
 80068d6:	bf00      	nop
 80068d8:	200002bc 	.word	0x200002bc
 80068dc:	20000104 	.word	0x20000104

080068e0 <std>:
 80068e0:	2300      	movs	r3, #0
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ee:	6083      	str	r3, [r0, #8]
 80068f0:	8181      	strh	r1, [r0, #12]
 80068f2:	6643      	str	r3, [r0, #100]	; 0x64
 80068f4:	81c2      	strh	r2, [r0, #14]
 80068f6:	6183      	str	r3, [r0, #24]
 80068f8:	4619      	mov	r1, r3
 80068fa:	2208      	movs	r2, #8
 80068fc:	305c      	adds	r0, #92	; 0x5c
 80068fe:	f000 f902 	bl	8006b06 <memset>
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <std+0x38>)
 8006904:	6263      	str	r3, [r4, #36]	; 0x24
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <std+0x3c>)
 8006908:	62a3      	str	r3, [r4, #40]	; 0x28
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <std+0x40>)
 800690c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <std+0x44>)
 8006910:	6224      	str	r4, [r4, #32]
 8006912:	6323      	str	r3, [r4, #48]	; 0x30
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	08006a81 	.word	0x08006a81
 800691c:	08006aa3 	.word	0x08006aa3
 8006920:	08006adb 	.word	0x08006adb
 8006924:	08006aff 	.word	0x08006aff

08006928 <stdio_exit_handler>:
 8006928:	4a02      	ldr	r2, [pc, #8]	; (8006934 <stdio_exit_handler+0xc>)
 800692a:	4903      	ldr	r1, [pc, #12]	; (8006938 <stdio_exit_handler+0x10>)
 800692c:	4803      	ldr	r0, [pc, #12]	; (800693c <stdio_exit_handler+0x14>)
 800692e:	f000 b869 	b.w	8006a04 <_fwalk_sglue>
 8006932:	bf00      	nop
 8006934:	200000f8 	.word	0x200000f8
 8006938:	080086b1 	.word	0x080086b1
 800693c:	20000270 	.word	0x20000270

08006940 <cleanup_stdio>:
 8006940:	6841      	ldr	r1, [r0, #4]
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <cleanup_stdio+0x34>)
 8006944:	4299      	cmp	r1, r3
 8006946:	b510      	push	{r4, lr}
 8006948:	4604      	mov	r4, r0
 800694a:	d001      	beq.n	8006950 <cleanup_stdio+0x10>
 800694c:	f001 feb0 	bl	80086b0 <_fflush_r>
 8006950:	68a1      	ldr	r1, [r4, #8]
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <cleanup_stdio+0x38>)
 8006954:	4299      	cmp	r1, r3
 8006956:	d002      	beq.n	800695e <cleanup_stdio+0x1e>
 8006958:	4620      	mov	r0, r4
 800695a:	f001 fea9 	bl	80086b0 <_fflush_r>
 800695e:	68e1      	ldr	r1, [r4, #12]
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <cleanup_stdio+0x3c>)
 8006962:	4299      	cmp	r1, r3
 8006964:	d004      	beq.n	8006970 <cleanup_stdio+0x30>
 8006966:	4620      	mov	r0, r4
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696c:	f001 bea0 	b.w	80086b0 <_fflush_r>
 8006970:	bd10      	pop	{r4, pc}
 8006972:	bf00      	nop
 8006974:	2000059c 	.word	0x2000059c
 8006978:	20000604 	.word	0x20000604
 800697c:	2000066c 	.word	0x2000066c

08006980 <global_stdio_init.part.0>:
 8006980:	b510      	push	{r4, lr}
 8006982:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <global_stdio_init.part.0+0x30>)
 8006984:	4c0b      	ldr	r4, [pc, #44]	; (80069b4 <global_stdio_init.part.0+0x34>)
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <global_stdio_init.part.0+0x38>)
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	4620      	mov	r0, r4
 800698c:	2200      	movs	r2, #0
 800698e:	2104      	movs	r1, #4
 8006990:	f7ff ffa6 	bl	80068e0 <std>
 8006994:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006998:	2201      	movs	r2, #1
 800699a:	2109      	movs	r1, #9
 800699c:	f7ff ffa0 	bl	80068e0 <std>
 80069a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069a4:	2202      	movs	r2, #2
 80069a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069aa:	2112      	movs	r1, #18
 80069ac:	f7ff bf98 	b.w	80068e0 <std>
 80069b0:	200006d4 	.word	0x200006d4
 80069b4:	2000059c 	.word	0x2000059c
 80069b8:	08006929 	.word	0x08006929

080069bc <__sfp_lock_acquire>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__sfp_lock_acquire+0x8>)
 80069be:	f000 b9ad 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 80069c2:	bf00      	nop
 80069c4:	200006dd 	.word	0x200006dd

080069c8 <__sfp_lock_release>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sfp_lock_release+0x8>)
 80069ca:	f000 b9a8 	b.w	8006d1e <__retarget_lock_release_recursive>
 80069ce:	bf00      	nop
 80069d0:	200006dd 	.word	0x200006dd

080069d4 <__sinit>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	4604      	mov	r4, r0
 80069d8:	f7ff fff0 	bl	80069bc <__sfp_lock_acquire>
 80069dc:	6a23      	ldr	r3, [r4, #32]
 80069de:	b11b      	cbz	r3, 80069e8 <__sinit+0x14>
 80069e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e4:	f7ff bff0 	b.w	80069c8 <__sfp_lock_release>
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <__sinit+0x28>)
 80069ea:	6223      	str	r3, [r4, #32]
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <__sinit+0x2c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f5      	bne.n	80069e0 <__sinit+0xc>
 80069f4:	f7ff ffc4 	bl	8006980 <global_stdio_init.part.0>
 80069f8:	e7f2      	b.n	80069e0 <__sinit+0xc>
 80069fa:	bf00      	nop
 80069fc:	08006941 	.word	0x08006941
 8006a00:	200006d4 	.word	0x200006d4

08006a04 <_fwalk_sglue>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4607      	mov	r7, r0
 8006a0a:	4688      	mov	r8, r1
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a14:	f1b9 0901 	subs.w	r9, r9, #1
 8006a18:	d505      	bpl.n	8006a26 <_fwalk_sglue+0x22>
 8006a1a:	6824      	ldr	r4, [r4, #0]
 8006a1c:	2c00      	cmp	r4, #0
 8006a1e:	d1f7      	bne.n	8006a10 <_fwalk_sglue+0xc>
 8006a20:	4630      	mov	r0, r6
 8006a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d907      	bls.n	8006a3c <_fwalk_sglue+0x38>
 8006a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a30:	3301      	adds	r3, #1
 8006a32:	d003      	beq.n	8006a3c <_fwalk_sglue+0x38>
 8006a34:	4629      	mov	r1, r5
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	4306      	orrs	r6, r0
 8006a3c:	3568      	adds	r5, #104	; 0x68
 8006a3e:	e7e9      	b.n	8006a14 <_fwalk_sglue+0x10>

08006a40 <siprintf>:
 8006a40:	b40e      	push	{r1, r2, r3}
 8006a42:	b500      	push	{lr}
 8006a44:	b09c      	sub	sp, #112	; 0x70
 8006a46:	ab1d      	add	r3, sp, #116	; 0x74
 8006a48:	9002      	str	r0, [sp, #8]
 8006a4a:	9006      	str	r0, [sp, #24]
 8006a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a50:	4809      	ldr	r0, [pc, #36]	; (8006a78 <siprintf+0x38>)
 8006a52:	9107      	str	r1, [sp, #28]
 8006a54:	9104      	str	r1, [sp, #16]
 8006a56:	4909      	ldr	r1, [pc, #36]	; (8006a7c <siprintf+0x3c>)
 8006a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a5c:	9105      	str	r1, [sp, #20]
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	a902      	add	r1, sp, #8
 8006a64:	f001 fb10 	bl	8008088 <_svfiprintf_r>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	b01c      	add	sp, #112	; 0x70
 8006a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a74:	b003      	add	sp, #12
 8006a76:	4770      	bx	lr
 8006a78:	200002bc 	.word	0x200002bc
 8006a7c:	ffff0208 	.word	0xffff0208

08006a80 <__sread>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	460c      	mov	r4, r1
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	f000 f8fa 	bl	8006c80 <_read_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	bfab      	itete	ge
 8006a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a92:	89a3      	ldrhlt	r3, [r4, #12]
 8006a94:	181b      	addge	r3, r3, r0
 8006a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a9a:	bfac      	ite	ge
 8006a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a9e:	81a3      	strhlt	r3, [r4, #12]
 8006aa0:	bd10      	pop	{r4, pc}

08006aa2 <__swrite>:
 8006aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	898b      	ldrh	r3, [r1, #12]
 8006aaa:	05db      	lsls	r3, r3, #23
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	d505      	bpl.n	8006ac0 <__swrite+0x1e>
 8006ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab8:	2302      	movs	r3, #2
 8006aba:	2200      	movs	r2, #0
 8006abc:	f000 f8ce 	bl	8006c5c <_lseek_r>
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	f000 b8e5 	b.w	8006ca4 <_write_r>

08006ada <__sseek>:
 8006ada:	b510      	push	{r4, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae2:	f000 f8bb 	bl	8006c5c <_lseek_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	bf15      	itete	ne
 8006aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006af6:	81a3      	strheq	r3, [r4, #12]
 8006af8:	bf18      	it	ne
 8006afa:	81a3      	strhne	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__sclose>:
 8006afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b02:	f000 b89b 	b.w	8006c3c <_close_r>

08006b06 <memset>:
 8006b06:	4402      	add	r2, r0
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d100      	bne.n	8006b10 <memset+0xa>
 8006b0e:	4770      	bx	lr
 8006b10:	f803 1b01 	strb.w	r1, [r3], #1
 8006b14:	e7f9      	b.n	8006b0a <memset+0x4>

08006b16 <strcat>:
 8006b16:	b510      	push	{r4, lr}
 8006b18:	4602      	mov	r2, r0
 8006b1a:	7814      	ldrb	r4, [r2, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	3201      	adds	r2, #1
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	d1fa      	bne.n	8006b1a <strcat+0x4>
 8006b24:	3b01      	subs	r3, #1
 8006b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d1f9      	bne.n	8006b26 <strcat+0x10>
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <strncmp>:
 8006b34:	b510      	push	{r4, lr}
 8006b36:	b16a      	cbz	r2, 8006b54 <strncmp+0x20>
 8006b38:	3901      	subs	r1, #1
 8006b3a:	1884      	adds	r4, r0, r2
 8006b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d103      	bne.n	8006b50 <strncmp+0x1c>
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d001      	beq.n	8006b50 <strncmp+0x1c>
 8006b4c:	2a00      	cmp	r2, #0
 8006b4e:	d1f5      	bne.n	8006b3c <strncmp+0x8>
 8006b50:	1ad0      	subs	r0, r2, r3
 8006b52:	bd10      	pop	{r4, pc}
 8006b54:	4610      	mov	r0, r2
 8006b56:	e7fc      	b.n	8006b52 <strncmp+0x1e>

08006b58 <strtok>:
 8006b58:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <strtok+0x5c>)
 8006b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b5c:	681e      	ldr	r6, [r3, #0]
 8006b5e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006b60:	4605      	mov	r5, r0
 8006b62:	b9fc      	cbnz	r4, 8006ba4 <strtok+0x4c>
 8006b64:	2050      	movs	r0, #80	; 0x50
 8006b66:	9101      	str	r1, [sp, #4]
 8006b68:	f000 fcb4 	bl	80074d4 <malloc>
 8006b6c:	9901      	ldr	r1, [sp, #4]
 8006b6e:	6470      	str	r0, [r6, #68]	; 0x44
 8006b70:	4602      	mov	r2, r0
 8006b72:	b920      	cbnz	r0, 8006b7e <strtok+0x26>
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <strtok+0x60>)
 8006b76:	4811      	ldr	r0, [pc, #68]	; (8006bbc <strtok+0x64>)
 8006b78:	215b      	movs	r1, #91	; 0x5b
 8006b7a:	f000 f8e9 	bl	8006d50 <__assert_func>
 8006b7e:	e9c0 4400 	strd	r4, r4, [r0]
 8006b82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006b86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006b8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006b8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006b92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006b96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006b9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006b9e:	6184      	str	r4, [r0, #24]
 8006ba0:	7704      	strb	r4, [r0, #28]
 8006ba2:	6244      	str	r4, [r0, #36]	; 0x24
 8006ba4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4628      	mov	r0, r5
 8006baa:	b002      	add	sp, #8
 8006bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bb0:	f000 b806 	b.w	8006bc0 <__strtok_r>
 8006bb4:	200002bc 	.word	0x200002bc
 8006bb8:	08009070 	.word	0x08009070
 8006bbc:	08009087 	.word	0x08009087

08006bc0 <__strtok_r>:
 8006bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc2:	b908      	cbnz	r0, 8006bc8 <__strtok_r+0x8>
 8006bc4:	6810      	ldr	r0, [r2, #0]
 8006bc6:	b188      	cbz	r0, 8006bec <__strtok_r+0x2c>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006bd6:	b91e      	cbnz	r6, 8006be0 <__strtok_r+0x20>
 8006bd8:	b965      	cbnz	r5, 8006bf4 <__strtok_r+0x34>
 8006bda:	6015      	str	r5, [r2, #0]
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e005      	b.n	8006bec <__strtok_r+0x2c>
 8006be0:	42b5      	cmp	r5, r6
 8006be2:	d1f6      	bne.n	8006bd2 <__strtok_r+0x12>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <__strtok_r+0xa>
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	7003      	strb	r3, [r0, #0]
 8006bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bee:	461c      	mov	r4, r3
 8006bf0:	e00c      	b.n	8006c0c <__strtok_r+0x4c>
 8006bf2:	b915      	cbnz	r5, 8006bfa <__strtok_r+0x3a>
 8006bf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bf8:	460e      	mov	r6, r1
 8006bfa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006bfe:	42ab      	cmp	r3, r5
 8006c00:	d1f7      	bne.n	8006bf2 <__strtok_r+0x32>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f3      	beq.n	8006bee <__strtok_r+0x2e>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006c0c:	6014      	str	r4, [r2, #0]
 8006c0e:	e7ed      	b.n	8006bec <__strtok_r+0x2c>

08006c10 <strstr>:
 8006c10:	780a      	ldrb	r2, [r1, #0]
 8006c12:	b570      	push	{r4, r5, r6, lr}
 8006c14:	b96a      	cbnz	r2, 8006c32 <strstr+0x22>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d109      	bne.n	8006c30 <strstr+0x20>
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	4605      	mov	r5, r0
 8006c20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f6      	beq.n	8006c16 <strstr+0x6>
 8006c28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006c2c:	429e      	cmp	r6, r3
 8006c2e:	d0f7      	beq.n	8006c20 <strstr+0x10>
 8006c30:	3001      	adds	r0, #1
 8006c32:	7803      	ldrb	r3, [r0, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1ef      	bne.n	8006c18 <strstr+0x8>
 8006c38:	4618      	mov	r0, r3
 8006c3a:	e7ec      	b.n	8006c16 <strstr+0x6>

08006c3c <_close_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	; (8006c58 <_close_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fb f9a1 	bl	8001f8e <_close>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_close_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_close_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200006d8 	.word	0x200006d8

08006c5c <_lseek_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	; (8006c7c <_lseek_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fb f9b6 	bl	8001fdc <_lseek>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_lseek_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_lseek_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	200006d8 	.word	0x200006d8

08006c80 <_read_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_read_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fb f944 	bl	8001f1c <_read>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_read_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_read_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200006d8 	.word	0x200006d8

08006ca4 <_write_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	; (8006cc4 <_write_r+0x20>)
 8006ca8:	4604      	mov	r4, r0
 8006caa:	4608      	mov	r0, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fb f94f 	bl	8001f56 <_write>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_write_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_write_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	200006d8 	.word	0x200006d8

08006cc8 <__errno>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	; (8006cd0 <__errno+0x8>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200002bc 	.word	0x200002bc

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	; (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	; (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	; (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	; (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f002 f83c 	bl	8008d64 <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08009428 	.word	0x08009428
 8006d10:	08009428 	.word	0x08009428
 8006d14:	08009428 	.word	0x08009428
 8006d18:	0800942c 	.word	0x0800942c

08006d1c <__retarget_lock_acquire_recursive>:
 8006d1c:	4770      	bx	lr

08006d1e <__retarget_lock_release_recursive>:
 8006d1e:	4770      	bx	lr

08006d20 <memcpy>:
 8006d20:	440a      	add	r2, r1
 8006d22:	4291      	cmp	r1, r2
 8006d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d28:	d100      	bne.n	8006d2c <memcpy+0xc>
 8006d2a:	4770      	bx	lr
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d36:	4291      	cmp	r1, r2
 8006d38:	d1f9      	bne.n	8006d2e <memcpy+0xe>
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <nan>:
 8006d40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006d48 <nan+0x8>
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	00000000 	.word	0x00000000
 8006d4c:	7ff80000 	.word	0x7ff80000

08006d50 <__assert_func>:
 8006d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d52:	4614      	mov	r4, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <__assert_func+0x2c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	68d8      	ldr	r0, [r3, #12]
 8006d5e:	b14c      	cbz	r4, 8006d74 <__assert_func+0x24>
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <__assert_func+0x30>)
 8006d62:	9100      	str	r1, [sp, #0]
 8006d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d68:	4906      	ldr	r1, [pc, #24]	; (8006d84 <__assert_func+0x34>)
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	f001 fcc8 	bl	8008700 <fiprintf>
 8006d70:	f001 fd02 	bl	8008778 <abort>
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <__assert_func+0x38>)
 8006d76:	461c      	mov	r4, r3
 8006d78:	e7f3      	b.n	8006d62 <__assert_func+0x12>
 8006d7a:	bf00      	nop
 8006d7c:	200002bc 	.word	0x200002bc
 8006d80:	080090e9 	.word	0x080090e9
 8006d84:	080090f6 	.word	0x080090f6
 8006d88:	08009124 	.word	0x08009124

08006d8c <_free_r>:
 8006d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d044      	beq.n	8006e1c <_free_r+0x90>
 8006d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d9e:	bfb8      	it	lt
 8006da0:	18e4      	addlt	r4, r4, r3
 8006da2:	f000 fc51 	bl	8007648 <__malloc_lock>
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <_free_r+0x94>)
 8006da8:	9801      	ldr	r0, [sp, #4]
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	b933      	cbnz	r3, 8006dbc <_free_r+0x30>
 8006dae:	6063      	str	r3, [r4, #4]
 8006db0:	6014      	str	r4, [r2, #0]
 8006db2:	b003      	add	sp, #12
 8006db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db8:	f000 bc4c 	b.w	8007654 <__malloc_unlock>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d908      	bls.n	8006dd2 <_free_r+0x46>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf01      	itttt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	e7ed      	b.n	8006dae <_free_r+0x22>
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b10b      	cbz	r3, 8006ddc <_free_r+0x50>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d9fa      	bls.n	8006dd2 <_free_r+0x46>
 8006ddc:	6811      	ldr	r1, [r2, #0]
 8006dde:	1855      	adds	r5, r2, r1
 8006de0:	42a5      	cmp	r5, r4
 8006de2:	d10b      	bne.n	8006dfc <_free_r+0x70>
 8006de4:	6824      	ldr	r4, [r4, #0]
 8006de6:	4421      	add	r1, r4
 8006de8:	1854      	adds	r4, r2, r1
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	6011      	str	r1, [r2, #0]
 8006dee:	d1e0      	bne.n	8006db2 <_free_r+0x26>
 8006df0:	681c      	ldr	r4, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	440c      	add	r4, r1
 8006df8:	6014      	str	r4, [r2, #0]
 8006dfa:	e7da      	b.n	8006db2 <_free_r+0x26>
 8006dfc:	d902      	bls.n	8006e04 <_free_r+0x78>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7d6      	b.n	8006db2 <_free_r+0x26>
 8006e04:	6825      	ldr	r5, [r4, #0]
 8006e06:	1961      	adds	r1, r4, r5
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf04      	itt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	bf04      	itt	eq
 8006e14:	1949      	addeq	r1, r1, r5
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	6054      	str	r4, [r2, #4]
 8006e1a:	e7ca      	b.n	8006db2 <_free_r+0x26>
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bd30      	pop	{r4, r5, pc}
 8006e20:	200006e0 	.word	0x200006e0

08006e24 <rshift>:
 8006e24:	6903      	ldr	r3, [r0, #16]
 8006e26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e32:	f100 0414 	add.w	r4, r0, #20
 8006e36:	dd45      	ble.n	8006ec4 <rshift+0xa0>
 8006e38:	f011 011f 	ands.w	r1, r1, #31
 8006e3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e44:	d10c      	bne.n	8006e60 <rshift+0x3c>
 8006e46:	f100 0710 	add.w	r7, r0, #16
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	42b1      	cmp	r1, r6
 8006e4e:	d334      	bcc.n	8006eba <rshift+0x96>
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	1eea      	subs	r2, r5, #3
 8006e56:	4296      	cmp	r6, r2
 8006e58:	bf38      	it	cc
 8006e5a:	2300      	movcc	r3, #0
 8006e5c:	4423      	add	r3, r4
 8006e5e:	e015      	b.n	8006e8c <rshift+0x68>
 8006e60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e64:	f1c1 0820 	rsb	r8, r1, #32
 8006e68:	40cf      	lsrs	r7, r1
 8006e6a:	f105 0e04 	add.w	lr, r5, #4
 8006e6e:	46a1      	mov	r9, r4
 8006e70:	4576      	cmp	r6, lr
 8006e72:	46f4      	mov	ip, lr
 8006e74:	d815      	bhi.n	8006ea2 <rshift+0x7e>
 8006e76:	1a9a      	subs	r2, r3, r2
 8006e78:	0092      	lsls	r2, r2, #2
 8006e7a:	3a04      	subs	r2, #4
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	42ae      	cmp	r6, r5
 8006e80:	bf38      	it	cc
 8006e82:	2200      	movcc	r2, #0
 8006e84:	18a3      	adds	r3, r4, r2
 8006e86:	50a7      	str	r7, [r4, r2]
 8006e88:	b107      	cbz	r7, 8006e8c <rshift+0x68>
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	1b1a      	subs	r2, r3, r4
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e94:	bf08      	it	eq
 8006e96:	2300      	moveq	r3, #0
 8006e98:	6102      	str	r2, [r0, #16]
 8006e9a:	bf08      	it	eq
 8006e9c:	6143      	streq	r3, [r0, #20]
 8006e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ea2:	f8dc c000 	ldr.w	ip, [ip]
 8006ea6:	fa0c fc08 	lsl.w	ip, ip, r8
 8006eaa:	ea4c 0707 	orr.w	r7, ip, r7
 8006eae:	f849 7b04 	str.w	r7, [r9], #4
 8006eb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006eb6:	40cf      	lsrs	r7, r1
 8006eb8:	e7da      	b.n	8006e70 <rshift+0x4c>
 8006eba:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ebe:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ec2:	e7c3      	b.n	8006e4c <rshift+0x28>
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	e7e1      	b.n	8006e8c <rshift+0x68>

08006ec8 <__hexdig_fun>:
 8006ec8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d802      	bhi.n	8006ed6 <__hexdig_fun+0xe>
 8006ed0:	3820      	subs	r0, #32
 8006ed2:	b2c0      	uxtb	r0, r0
 8006ed4:	4770      	bx	lr
 8006ed6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d801      	bhi.n	8006ee2 <__hexdig_fun+0x1a>
 8006ede:	3847      	subs	r0, #71	; 0x47
 8006ee0:	e7f7      	b.n	8006ed2 <__hexdig_fun+0xa>
 8006ee2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d801      	bhi.n	8006eee <__hexdig_fun+0x26>
 8006eea:	3827      	subs	r0, #39	; 0x27
 8006eec:	e7f1      	b.n	8006ed2 <__hexdig_fun+0xa>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	4770      	bx	lr
	...

08006ef4 <__gethex>:
 8006ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	4617      	mov	r7, r2
 8006efa:	680a      	ldr	r2, [r1, #0]
 8006efc:	b085      	sub	sp, #20
 8006efe:	f102 0b02 	add.w	fp, r2, #2
 8006f02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f0a:	4681      	mov	r9, r0
 8006f0c:	468a      	mov	sl, r1
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	32fe      	adds	r2, #254	; 0xfe
 8006f12:	eb02 030b 	add.w	r3, r2, fp
 8006f16:	46d8      	mov	r8, fp
 8006f18:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2830      	cmp	r0, #48	; 0x30
 8006f20:	d0f7      	beq.n	8006f12 <__gethex+0x1e>
 8006f22:	f7ff ffd1 	bl	8006ec8 <__hexdig_fun>
 8006f26:	4604      	mov	r4, r0
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d138      	bne.n	8006f9e <__gethex+0xaa>
 8006f2c:	49a7      	ldr	r1, [pc, #668]	; (80071cc <__gethex+0x2d8>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4640      	mov	r0, r8
 8006f32:	f7ff fdff 	bl	8006b34 <strncmp>
 8006f36:	4606      	mov	r6, r0
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d169      	bne.n	8007010 <__gethex+0x11c>
 8006f3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006f40:	465d      	mov	r5, fp
 8006f42:	f7ff ffc1 	bl	8006ec8 <__hexdig_fun>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d064      	beq.n	8007014 <__gethex+0x120>
 8006f4a:	465a      	mov	r2, fp
 8006f4c:	7810      	ldrb	r0, [r2, #0]
 8006f4e:	2830      	cmp	r0, #48	; 0x30
 8006f50:	4690      	mov	r8, r2
 8006f52:	f102 0201 	add.w	r2, r2, #1
 8006f56:	d0f9      	beq.n	8006f4c <__gethex+0x58>
 8006f58:	f7ff ffb6 	bl	8006ec8 <__hexdig_fun>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	fab0 f480 	clz	r4, r0
 8006f62:	0964      	lsrs	r4, r4, #5
 8006f64:	465e      	mov	r6, fp
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	3201      	adds	r2, #1
 8006f6e:	7828      	ldrb	r0, [r5, #0]
 8006f70:	f7ff ffaa 	bl	8006ec8 <__hexdig_fun>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d1f8      	bne.n	8006f6a <__gethex+0x76>
 8006f78:	4994      	ldr	r1, [pc, #592]	; (80071cc <__gethex+0x2d8>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7ff fdd9 	bl	8006b34 <strncmp>
 8006f82:	b978      	cbnz	r0, 8006fa4 <__gethex+0xb0>
 8006f84:	b946      	cbnz	r6, 8006f98 <__gethex+0xa4>
 8006f86:	1c6e      	adds	r6, r5, #1
 8006f88:	4632      	mov	r2, r6
 8006f8a:	4615      	mov	r5, r2
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	7828      	ldrb	r0, [r5, #0]
 8006f90:	f7ff ff9a 	bl	8006ec8 <__hexdig_fun>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d1f8      	bne.n	8006f8a <__gethex+0x96>
 8006f98:	1b73      	subs	r3, r6, r5
 8006f9a:	009e      	lsls	r6, r3, #2
 8006f9c:	e004      	b.n	8006fa8 <__gethex+0xb4>
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	4626      	mov	r6, r4
 8006fa2:	e7e1      	b.n	8006f68 <__gethex+0x74>
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	d1f7      	bne.n	8006f98 <__gethex+0xa4>
 8006fa8:	782b      	ldrb	r3, [r5, #0]
 8006faa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fae:	2b50      	cmp	r3, #80	; 0x50
 8006fb0:	d13d      	bne.n	800702e <__gethex+0x13a>
 8006fb2:	786b      	ldrb	r3, [r5, #1]
 8006fb4:	2b2b      	cmp	r3, #43	; 0x2b
 8006fb6:	d02f      	beq.n	8007018 <__gethex+0x124>
 8006fb8:	2b2d      	cmp	r3, #45	; 0x2d
 8006fba:	d031      	beq.n	8007020 <__gethex+0x12c>
 8006fbc:	1c69      	adds	r1, r5, #1
 8006fbe:	f04f 0b00 	mov.w	fp, #0
 8006fc2:	7808      	ldrb	r0, [r1, #0]
 8006fc4:	f7ff ff80 	bl	8006ec8 <__hexdig_fun>
 8006fc8:	1e42      	subs	r2, r0, #1
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	2a18      	cmp	r2, #24
 8006fce:	d82e      	bhi.n	800702e <__gethex+0x13a>
 8006fd0:	f1a0 0210 	sub.w	r2, r0, #16
 8006fd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006fd8:	f7ff ff76 	bl	8006ec8 <__hexdig_fun>
 8006fdc:	f100 3cff 	add.w	ip, r0, #4294967295
 8006fe0:	fa5f fc8c 	uxtb.w	ip, ip
 8006fe4:	f1bc 0f18 	cmp.w	ip, #24
 8006fe8:	d91d      	bls.n	8007026 <__gethex+0x132>
 8006fea:	f1bb 0f00 	cmp.w	fp, #0
 8006fee:	d000      	beq.n	8006ff2 <__gethex+0xfe>
 8006ff0:	4252      	negs	r2, r2
 8006ff2:	4416      	add	r6, r2
 8006ff4:	f8ca 1000 	str.w	r1, [sl]
 8006ff8:	b1dc      	cbz	r4, 8007032 <__gethex+0x13e>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf14      	ite	ne
 8007000:	f04f 0800 	movne.w	r8, #0
 8007004:	f04f 0806 	moveq.w	r8, #6
 8007008:	4640      	mov	r0, r8
 800700a:	b005      	add	sp, #20
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	4645      	mov	r5, r8
 8007012:	4626      	mov	r6, r4
 8007014:	2401      	movs	r4, #1
 8007016:	e7c7      	b.n	8006fa8 <__gethex+0xb4>
 8007018:	f04f 0b00 	mov.w	fp, #0
 800701c:	1ca9      	adds	r1, r5, #2
 800701e:	e7d0      	b.n	8006fc2 <__gethex+0xce>
 8007020:	f04f 0b01 	mov.w	fp, #1
 8007024:	e7fa      	b.n	800701c <__gethex+0x128>
 8007026:	230a      	movs	r3, #10
 8007028:	fb03 0002 	mla	r0, r3, r2, r0
 800702c:	e7d0      	b.n	8006fd0 <__gethex+0xdc>
 800702e:	4629      	mov	r1, r5
 8007030:	e7e0      	b.n	8006ff4 <__gethex+0x100>
 8007032:	eba5 0308 	sub.w	r3, r5, r8
 8007036:	3b01      	subs	r3, #1
 8007038:	4621      	mov	r1, r4
 800703a:	2b07      	cmp	r3, #7
 800703c:	dc0a      	bgt.n	8007054 <__gethex+0x160>
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fb0e 	bl	8007660 <_Balloc>
 8007044:	4604      	mov	r4, r0
 8007046:	b940      	cbnz	r0, 800705a <__gethex+0x166>
 8007048:	4b61      	ldr	r3, [pc, #388]	; (80071d0 <__gethex+0x2dc>)
 800704a:	4602      	mov	r2, r0
 800704c:	21e4      	movs	r1, #228	; 0xe4
 800704e:	4861      	ldr	r0, [pc, #388]	; (80071d4 <__gethex+0x2e0>)
 8007050:	f7ff fe7e 	bl	8006d50 <__assert_func>
 8007054:	3101      	adds	r1, #1
 8007056:	105b      	asrs	r3, r3, #1
 8007058:	e7ef      	b.n	800703a <__gethex+0x146>
 800705a:	f100 0a14 	add.w	sl, r0, #20
 800705e:	2300      	movs	r3, #0
 8007060:	495a      	ldr	r1, [pc, #360]	; (80071cc <__gethex+0x2d8>)
 8007062:	f8cd a004 	str.w	sl, [sp, #4]
 8007066:	469b      	mov	fp, r3
 8007068:	45a8      	cmp	r8, r5
 800706a:	d342      	bcc.n	80070f2 <__gethex+0x1fe>
 800706c:	9801      	ldr	r0, [sp, #4]
 800706e:	f840 bb04 	str.w	fp, [r0], #4
 8007072:	eba0 000a 	sub.w	r0, r0, sl
 8007076:	1080      	asrs	r0, r0, #2
 8007078:	6120      	str	r0, [r4, #16]
 800707a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800707e:	4658      	mov	r0, fp
 8007080:	f000 fbe0 	bl	8007844 <__hi0bits>
 8007084:	683d      	ldr	r5, [r7, #0]
 8007086:	eba8 0000 	sub.w	r0, r8, r0
 800708a:	42a8      	cmp	r0, r5
 800708c:	dd59      	ble.n	8007142 <__gethex+0x24e>
 800708e:	eba0 0805 	sub.w	r8, r0, r5
 8007092:	4641      	mov	r1, r8
 8007094:	4620      	mov	r0, r4
 8007096:	f000 ff6f 	bl	8007f78 <__any_on>
 800709a:	4683      	mov	fp, r0
 800709c:	b1b8      	cbz	r0, 80070ce <__gethex+0x1da>
 800709e:	f108 33ff 	add.w	r3, r8, #4294967295
 80070a2:	1159      	asrs	r1, r3, #5
 80070a4:	f003 021f 	and.w	r2, r3, #31
 80070a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80070ac:	f04f 0b01 	mov.w	fp, #1
 80070b0:	fa0b f202 	lsl.w	r2, fp, r2
 80070b4:	420a      	tst	r2, r1
 80070b6:	d00a      	beq.n	80070ce <__gethex+0x1da>
 80070b8:	455b      	cmp	r3, fp
 80070ba:	dd06      	ble.n	80070ca <__gethex+0x1d6>
 80070bc:	f1a8 0102 	sub.w	r1, r8, #2
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 ff59 	bl	8007f78 <__any_on>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d138      	bne.n	800713c <__gethex+0x248>
 80070ca:	f04f 0b02 	mov.w	fp, #2
 80070ce:	4641      	mov	r1, r8
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fea7 	bl	8006e24 <rshift>
 80070d6:	4446      	add	r6, r8
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	42b3      	cmp	r3, r6
 80070dc:	da41      	bge.n	8007162 <__gethex+0x26e>
 80070de:	4621      	mov	r1, r4
 80070e0:	4648      	mov	r0, r9
 80070e2:	f000 fafd 	bl	80076e0 <_Bfree>
 80070e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070e8:	2300      	movs	r3, #0
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80070f0:	e78a      	b.n	8007008 <__gethex+0x114>
 80070f2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80070f6:	2a2e      	cmp	r2, #46	; 0x2e
 80070f8:	d014      	beq.n	8007124 <__gethex+0x230>
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d106      	bne.n	800710c <__gethex+0x218>
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	f843 bb04 	str.w	fp, [r3], #4
 8007104:	f04f 0b00 	mov.w	fp, #0
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	465b      	mov	r3, fp
 800710c:	7828      	ldrb	r0, [r5, #0]
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	f7ff feda 	bl	8006ec8 <__hexdig_fun>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	f000 000f 	and.w	r0, r0, #15
 800711a:	4098      	lsls	r0, r3
 800711c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007120:	3304      	adds	r3, #4
 8007122:	e7a1      	b.n	8007068 <__gethex+0x174>
 8007124:	45a8      	cmp	r8, r5
 8007126:	d8e8      	bhi.n	80070fa <__gethex+0x206>
 8007128:	2201      	movs	r2, #1
 800712a:	4628      	mov	r0, r5
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	f7ff fd01 	bl	8006b34 <strncmp>
 8007132:	4926      	ldr	r1, [pc, #152]	; (80071cc <__gethex+0x2d8>)
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	2800      	cmp	r0, #0
 8007138:	d1df      	bne.n	80070fa <__gethex+0x206>
 800713a:	e795      	b.n	8007068 <__gethex+0x174>
 800713c:	f04f 0b03 	mov.w	fp, #3
 8007140:	e7c5      	b.n	80070ce <__gethex+0x1da>
 8007142:	da0b      	bge.n	800715c <__gethex+0x268>
 8007144:	eba5 0800 	sub.w	r8, r5, r0
 8007148:	4621      	mov	r1, r4
 800714a:	4642      	mov	r2, r8
 800714c:	4648      	mov	r0, r9
 800714e:	f000 fce1 	bl	8007b14 <__lshift>
 8007152:	eba6 0608 	sub.w	r6, r6, r8
 8007156:	4604      	mov	r4, r0
 8007158:	f100 0a14 	add.w	sl, r0, #20
 800715c:	f04f 0b00 	mov.w	fp, #0
 8007160:	e7ba      	b.n	80070d8 <__gethex+0x1e4>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	42b3      	cmp	r3, r6
 8007166:	dd73      	ble.n	8007250 <__gethex+0x35c>
 8007168:	1b9e      	subs	r6, r3, r6
 800716a:	42b5      	cmp	r5, r6
 800716c:	dc34      	bgt.n	80071d8 <__gethex+0x2e4>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d023      	beq.n	80071bc <__gethex+0x2c8>
 8007174:	2b03      	cmp	r3, #3
 8007176:	d025      	beq.n	80071c4 <__gethex+0x2d0>
 8007178:	2b01      	cmp	r3, #1
 800717a:	d115      	bne.n	80071a8 <__gethex+0x2b4>
 800717c:	42b5      	cmp	r5, r6
 800717e:	d113      	bne.n	80071a8 <__gethex+0x2b4>
 8007180:	2d01      	cmp	r5, #1
 8007182:	d10b      	bne.n	800719c <__gethex+0x2a8>
 8007184:	9a02      	ldr	r2, [sp, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	2301      	movs	r3, #1
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	f8ca 3000 	str.w	r3, [sl]
 8007192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007194:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007198:	601c      	str	r4, [r3, #0]
 800719a:	e735      	b.n	8007008 <__gethex+0x114>
 800719c:	1e69      	subs	r1, r5, #1
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 feea 	bl	8007f78 <__any_on>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d1ed      	bne.n	8007184 <__gethex+0x290>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4648      	mov	r0, r9
 80071ac:	f000 fa98 	bl	80076e0 <_Bfree>
 80071b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b2:	2300      	movs	r3, #0
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80071ba:	e725      	b.n	8007008 <__gethex+0x114>
 80071bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f2      	bne.n	80071a8 <__gethex+0x2b4>
 80071c2:	e7df      	b.n	8007184 <__gethex+0x290>
 80071c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1dc      	bne.n	8007184 <__gethex+0x290>
 80071ca:	e7ed      	b.n	80071a8 <__gethex+0x2b4>
 80071cc:	08009010 	.word	0x08009010
 80071d0:	08009125 	.word	0x08009125
 80071d4:	08009136 	.word	0x08009136
 80071d8:	f106 38ff 	add.w	r8, r6, #4294967295
 80071dc:	f1bb 0f00 	cmp.w	fp, #0
 80071e0:	d133      	bne.n	800724a <__gethex+0x356>
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	d004      	beq.n	80071f2 <__gethex+0x2fe>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fec4 	bl	8007f78 <__any_on>
 80071f0:	4683      	mov	fp, r0
 80071f2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80071f6:	2301      	movs	r3, #1
 80071f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80071fc:	f008 081f 	and.w	r8, r8, #31
 8007200:	fa03 f308 	lsl.w	r3, r3, r8
 8007204:	4213      	tst	r3, r2
 8007206:	4631      	mov	r1, r6
 8007208:	4620      	mov	r0, r4
 800720a:	bf18      	it	ne
 800720c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007210:	1bad      	subs	r5, r5, r6
 8007212:	f7ff fe07 	bl	8006e24 <rshift>
 8007216:	687e      	ldr	r6, [r7, #4]
 8007218:	f04f 0802 	mov.w	r8, #2
 800721c:	f1bb 0f00 	cmp.w	fp, #0
 8007220:	d04a      	beq.n	80072b8 <__gethex+0x3c4>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d016      	beq.n	8007256 <__gethex+0x362>
 8007228:	2b03      	cmp	r3, #3
 800722a:	d018      	beq.n	800725e <__gethex+0x36a>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d109      	bne.n	8007244 <__gethex+0x350>
 8007230:	f01b 0f02 	tst.w	fp, #2
 8007234:	d006      	beq.n	8007244 <__gethex+0x350>
 8007236:	f8da 3000 	ldr.w	r3, [sl]
 800723a:	ea4b 0b03 	orr.w	fp, fp, r3
 800723e:	f01b 0f01 	tst.w	fp, #1
 8007242:	d10f      	bne.n	8007264 <__gethex+0x370>
 8007244:	f048 0810 	orr.w	r8, r8, #16
 8007248:	e036      	b.n	80072b8 <__gethex+0x3c4>
 800724a:	f04f 0b01 	mov.w	fp, #1
 800724e:	e7d0      	b.n	80071f2 <__gethex+0x2fe>
 8007250:	f04f 0801 	mov.w	r8, #1
 8007254:	e7e2      	b.n	800721c <__gethex+0x328>
 8007256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007258:	f1c3 0301 	rsb	r3, r3, #1
 800725c:	930f      	str	r3, [sp, #60]	; 0x3c
 800725e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ef      	beq.n	8007244 <__gethex+0x350>
 8007264:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007268:	f104 0214 	add.w	r2, r4, #20
 800726c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007276:	2300      	movs	r3, #0
 8007278:	4694      	mov	ip, r2
 800727a:	f852 1b04 	ldr.w	r1, [r2], #4
 800727e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007282:	d01e      	beq.n	80072c2 <__gethex+0x3ce>
 8007284:	3101      	adds	r1, #1
 8007286:	f8cc 1000 	str.w	r1, [ip]
 800728a:	f1b8 0f02 	cmp.w	r8, #2
 800728e:	f104 0214 	add.w	r2, r4, #20
 8007292:	d13d      	bne.n	8007310 <__gethex+0x41c>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	3b01      	subs	r3, #1
 8007298:	42ab      	cmp	r3, r5
 800729a:	d10b      	bne.n	80072b4 <__gethex+0x3c0>
 800729c:	1169      	asrs	r1, r5, #5
 800729e:	2301      	movs	r3, #1
 80072a0:	f005 051f 	and.w	r5, r5, #31
 80072a4:	fa03 f505 	lsl.w	r5, r3, r5
 80072a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072ac:	421d      	tst	r5, r3
 80072ae:	bf18      	it	ne
 80072b0:	f04f 0801 	movne.w	r8, #1
 80072b4:	f048 0820 	orr.w	r8, r8, #32
 80072b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ba:	601c      	str	r4, [r3, #0]
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	601e      	str	r6, [r3, #0]
 80072c0:	e6a2      	b.n	8007008 <__gethex+0x114>
 80072c2:	4290      	cmp	r0, r2
 80072c4:	f842 3c04 	str.w	r3, [r2, #-4]
 80072c8:	d8d6      	bhi.n	8007278 <__gethex+0x384>
 80072ca:	68a2      	ldr	r2, [r4, #8]
 80072cc:	4593      	cmp	fp, r2
 80072ce:	db17      	blt.n	8007300 <__gethex+0x40c>
 80072d0:	6861      	ldr	r1, [r4, #4]
 80072d2:	4648      	mov	r0, r9
 80072d4:	3101      	adds	r1, #1
 80072d6:	f000 f9c3 	bl	8007660 <_Balloc>
 80072da:	4682      	mov	sl, r0
 80072dc:	b918      	cbnz	r0, 80072e6 <__gethex+0x3f2>
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <__gethex+0x458>)
 80072e0:	4602      	mov	r2, r0
 80072e2:	2184      	movs	r1, #132	; 0x84
 80072e4:	e6b3      	b.n	800704e <__gethex+0x15a>
 80072e6:	6922      	ldr	r2, [r4, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	f104 010c 	add.w	r1, r4, #12
 80072ee:	0092      	lsls	r2, r2, #2
 80072f0:	300c      	adds	r0, #12
 80072f2:	f7ff fd15 	bl	8006d20 <memcpy>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4648      	mov	r0, r9
 80072fa:	f000 f9f1 	bl	80076e0 <_Bfree>
 80072fe:	4654      	mov	r4, sl
 8007300:	6922      	ldr	r2, [r4, #16]
 8007302:	1c51      	adds	r1, r2, #1
 8007304:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007308:	6121      	str	r1, [r4, #16]
 800730a:	2101      	movs	r1, #1
 800730c:	6151      	str	r1, [r2, #20]
 800730e:	e7bc      	b.n	800728a <__gethex+0x396>
 8007310:	6921      	ldr	r1, [r4, #16]
 8007312:	4559      	cmp	r1, fp
 8007314:	dd0b      	ble.n	800732e <__gethex+0x43a>
 8007316:	2101      	movs	r1, #1
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff fd83 	bl	8006e24 <rshift>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3601      	adds	r6, #1
 8007322:	42b3      	cmp	r3, r6
 8007324:	f6ff aedb 	blt.w	80070de <__gethex+0x1ea>
 8007328:	f04f 0801 	mov.w	r8, #1
 800732c:	e7c2      	b.n	80072b4 <__gethex+0x3c0>
 800732e:	f015 051f 	ands.w	r5, r5, #31
 8007332:	d0f9      	beq.n	8007328 <__gethex+0x434>
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	441a      	add	r2, r3
 8007338:	f1c5 0520 	rsb	r5, r5, #32
 800733c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007340:	f000 fa80 	bl	8007844 <__hi0bits>
 8007344:	42a8      	cmp	r0, r5
 8007346:	dbe6      	blt.n	8007316 <__gethex+0x422>
 8007348:	e7ee      	b.n	8007328 <__gethex+0x434>
 800734a:	bf00      	nop
 800734c:	08009125 	.word	0x08009125

08007350 <L_shift>:
 8007350:	f1c2 0208 	rsb	r2, r2, #8
 8007354:	0092      	lsls	r2, r2, #2
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	f1c2 0620 	rsb	r6, r2, #32
 800735c:	6843      	ldr	r3, [r0, #4]
 800735e:	6804      	ldr	r4, [r0, #0]
 8007360:	fa03 f506 	lsl.w	r5, r3, r6
 8007364:	432c      	orrs	r4, r5
 8007366:	40d3      	lsrs	r3, r2
 8007368:	6004      	str	r4, [r0, #0]
 800736a:	f840 3f04 	str.w	r3, [r0, #4]!
 800736e:	4288      	cmp	r0, r1
 8007370:	d3f4      	bcc.n	800735c <L_shift+0xc>
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__match>:
 8007374:	b530      	push	{r4, r5, lr}
 8007376:	6803      	ldr	r3, [r0, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800737e:	b914      	cbnz	r4, 8007386 <__match+0x12>
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	2001      	movs	r0, #1
 8007384:	bd30      	pop	{r4, r5, pc}
 8007386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800738a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800738e:	2d19      	cmp	r5, #25
 8007390:	bf98      	it	ls
 8007392:	3220      	addls	r2, #32
 8007394:	42a2      	cmp	r2, r4
 8007396:	d0f0      	beq.n	800737a <__match+0x6>
 8007398:	2000      	movs	r0, #0
 800739a:	e7f3      	b.n	8007384 <__match+0x10>

0800739c <__hexnan>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	680b      	ldr	r3, [r1, #0]
 80073a2:	6801      	ldr	r1, [r0, #0]
 80073a4:	115e      	asrs	r6, r3, #5
 80073a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073aa:	f013 031f 	ands.w	r3, r3, #31
 80073ae:	b087      	sub	sp, #28
 80073b0:	bf18      	it	ne
 80073b2:	3604      	addne	r6, #4
 80073b4:	2500      	movs	r5, #0
 80073b6:	1f37      	subs	r7, r6, #4
 80073b8:	4682      	mov	sl, r0
 80073ba:	4690      	mov	r8, r2
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	f846 5c04 	str.w	r5, [r6, #-4]
 80073c2:	46b9      	mov	r9, r7
 80073c4:	463c      	mov	r4, r7
 80073c6:	9502      	str	r5, [sp, #8]
 80073c8:	46ab      	mov	fp, r5
 80073ca:	784a      	ldrb	r2, [r1, #1]
 80073cc:	1c4b      	adds	r3, r1, #1
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	b342      	cbz	r2, 8007424 <__hexnan+0x88>
 80073d2:	4610      	mov	r0, r2
 80073d4:	9105      	str	r1, [sp, #20]
 80073d6:	9204      	str	r2, [sp, #16]
 80073d8:	f7ff fd76 	bl	8006ec8 <__hexdig_fun>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d14f      	bne.n	8007480 <__hexnan+0xe4>
 80073e0:	9a04      	ldr	r2, [sp, #16]
 80073e2:	9905      	ldr	r1, [sp, #20]
 80073e4:	2a20      	cmp	r2, #32
 80073e6:	d818      	bhi.n	800741a <__hexnan+0x7e>
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	459b      	cmp	fp, r3
 80073ec:	dd13      	ble.n	8007416 <__hexnan+0x7a>
 80073ee:	454c      	cmp	r4, r9
 80073f0:	d206      	bcs.n	8007400 <__hexnan+0x64>
 80073f2:	2d07      	cmp	r5, #7
 80073f4:	dc04      	bgt.n	8007400 <__hexnan+0x64>
 80073f6:	462a      	mov	r2, r5
 80073f8:	4649      	mov	r1, r9
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff ffa8 	bl	8007350 <L_shift>
 8007400:	4544      	cmp	r4, r8
 8007402:	d950      	bls.n	80074a6 <__hexnan+0x10a>
 8007404:	2300      	movs	r3, #0
 8007406:	f1a4 0904 	sub.w	r9, r4, #4
 800740a:	f844 3c04 	str.w	r3, [r4, #-4]
 800740e:	f8cd b008 	str.w	fp, [sp, #8]
 8007412:	464c      	mov	r4, r9
 8007414:	461d      	mov	r5, r3
 8007416:	9903      	ldr	r1, [sp, #12]
 8007418:	e7d7      	b.n	80073ca <__hexnan+0x2e>
 800741a:	2a29      	cmp	r2, #41	; 0x29
 800741c:	d155      	bne.n	80074ca <__hexnan+0x12e>
 800741e:	3102      	adds	r1, #2
 8007420:	f8ca 1000 	str.w	r1, [sl]
 8007424:	f1bb 0f00 	cmp.w	fp, #0
 8007428:	d04f      	beq.n	80074ca <__hexnan+0x12e>
 800742a:	454c      	cmp	r4, r9
 800742c:	d206      	bcs.n	800743c <__hexnan+0xa0>
 800742e:	2d07      	cmp	r5, #7
 8007430:	dc04      	bgt.n	800743c <__hexnan+0xa0>
 8007432:	462a      	mov	r2, r5
 8007434:	4649      	mov	r1, r9
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff ff8a 	bl	8007350 <L_shift>
 800743c:	4544      	cmp	r4, r8
 800743e:	d934      	bls.n	80074aa <__hexnan+0x10e>
 8007440:	f1a8 0204 	sub.w	r2, r8, #4
 8007444:	4623      	mov	r3, r4
 8007446:	f853 1b04 	ldr.w	r1, [r3], #4
 800744a:	f842 1f04 	str.w	r1, [r2, #4]!
 800744e:	429f      	cmp	r7, r3
 8007450:	d2f9      	bcs.n	8007446 <__hexnan+0xaa>
 8007452:	1b3b      	subs	r3, r7, r4
 8007454:	f023 0303 	bic.w	r3, r3, #3
 8007458:	3304      	adds	r3, #4
 800745a:	3e03      	subs	r6, #3
 800745c:	3401      	adds	r4, #1
 800745e:	42a6      	cmp	r6, r4
 8007460:	bf38      	it	cc
 8007462:	2304      	movcc	r3, #4
 8007464:	4443      	add	r3, r8
 8007466:	2200      	movs	r2, #0
 8007468:	f843 2b04 	str.w	r2, [r3], #4
 800746c:	429f      	cmp	r7, r3
 800746e:	d2fb      	bcs.n	8007468 <__hexnan+0xcc>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b91b      	cbnz	r3, 800747c <__hexnan+0xe0>
 8007474:	4547      	cmp	r7, r8
 8007476:	d126      	bne.n	80074c6 <__hexnan+0x12a>
 8007478:	2301      	movs	r3, #1
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	2005      	movs	r0, #5
 800747e:	e025      	b.n	80074cc <__hexnan+0x130>
 8007480:	3501      	adds	r5, #1
 8007482:	2d08      	cmp	r5, #8
 8007484:	f10b 0b01 	add.w	fp, fp, #1
 8007488:	dd06      	ble.n	8007498 <__hexnan+0xfc>
 800748a:	4544      	cmp	r4, r8
 800748c:	d9c3      	bls.n	8007416 <__hexnan+0x7a>
 800748e:	2300      	movs	r3, #0
 8007490:	f844 3c04 	str.w	r3, [r4, #-4]
 8007494:	2501      	movs	r5, #1
 8007496:	3c04      	subs	r4, #4
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	f000 000f 	and.w	r0, r0, #15
 800749e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80074a2:	6020      	str	r0, [r4, #0]
 80074a4:	e7b7      	b.n	8007416 <__hexnan+0x7a>
 80074a6:	2508      	movs	r5, #8
 80074a8:	e7b5      	b.n	8007416 <__hexnan+0x7a>
 80074aa:	9b01      	ldr	r3, [sp, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0df      	beq.n	8007470 <__hexnan+0xd4>
 80074b0:	f1c3 0320 	rsb	r3, r3, #32
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	40da      	lsrs	r2, r3
 80074ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80074be:	4013      	ands	r3, r2
 80074c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80074c4:	e7d4      	b.n	8007470 <__hexnan+0xd4>
 80074c6:	3f04      	subs	r7, #4
 80074c8:	e7d2      	b.n	8007470 <__hexnan+0xd4>
 80074ca:	2004      	movs	r0, #4
 80074cc:	b007      	add	sp, #28
 80074ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080074d4 <malloc>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <malloc+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f000 b823 	b.w	8007524 <_malloc_r>
 80074de:	bf00      	nop
 80074e0:	200002bc 	.word	0x200002bc

080074e4 <sbrk_aligned>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4e0e      	ldr	r6, [pc, #56]	; (8007520 <sbrk_aligned+0x3c>)
 80074e8:	460c      	mov	r4, r1
 80074ea:	6831      	ldr	r1, [r6, #0]
 80074ec:	4605      	mov	r5, r0
 80074ee:	b911      	cbnz	r1, 80074f6 <sbrk_aligned+0x12>
 80074f0:	f001 f932 	bl	8008758 <_sbrk_r>
 80074f4:	6030      	str	r0, [r6, #0]
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f001 f92d 	bl	8008758 <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d00a      	beq.n	8007518 <sbrk_aligned+0x34>
 8007502:	1cc4      	adds	r4, r0, #3
 8007504:	f024 0403 	bic.w	r4, r4, #3
 8007508:	42a0      	cmp	r0, r4
 800750a:	d007      	beq.n	800751c <sbrk_aligned+0x38>
 800750c:	1a21      	subs	r1, r4, r0
 800750e:	4628      	mov	r0, r5
 8007510:	f001 f922 	bl	8008758 <_sbrk_r>
 8007514:	3001      	adds	r0, #1
 8007516:	d101      	bne.n	800751c <sbrk_aligned+0x38>
 8007518:	f04f 34ff 	mov.w	r4, #4294967295
 800751c:	4620      	mov	r0, r4
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	200006e4 	.word	0x200006e4

08007524 <_malloc_r>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	1ccd      	adds	r5, r1, #3
 800752a:	f025 0503 	bic.w	r5, r5, #3
 800752e:	3508      	adds	r5, #8
 8007530:	2d0c      	cmp	r5, #12
 8007532:	bf38      	it	cc
 8007534:	250c      	movcc	r5, #12
 8007536:	2d00      	cmp	r5, #0
 8007538:	4607      	mov	r7, r0
 800753a:	db01      	blt.n	8007540 <_malloc_r+0x1c>
 800753c:	42a9      	cmp	r1, r5
 800753e:	d905      	bls.n	800754c <_malloc_r+0x28>
 8007540:	230c      	movs	r3, #12
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	2600      	movs	r6, #0
 8007546:	4630      	mov	r0, r6
 8007548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007620 <_malloc_r+0xfc>
 8007550:	f000 f87a 	bl	8007648 <__malloc_lock>
 8007554:	f8d8 3000 	ldr.w	r3, [r8]
 8007558:	461c      	mov	r4, r3
 800755a:	bb5c      	cbnz	r4, 80075b4 <_malloc_r+0x90>
 800755c:	4629      	mov	r1, r5
 800755e:	4638      	mov	r0, r7
 8007560:	f7ff ffc0 	bl	80074e4 <sbrk_aligned>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	4604      	mov	r4, r0
 8007568:	d155      	bne.n	8007616 <_malloc_r+0xf2>
 800756a:	f8d8 4000 	ldr.w	r4, [r8]
 800756e:	4626      	mov	r6, r4
 8007570:	2e00      	cmp	r6, #0
 8007572:	d145      	bne.n	8007600 <_malloc_r+0xdc>
 8007574:	2c00      	cmp	r4, #0
 8007576:	d048      	beq.n	800760a <_malloc_r+0xe6>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	4631      	mov	r1, r6
 800757c:	4638      	mov	r0, r7
 800757e:	eb04 0903 	add.w	r9, r4, r3
 8007582:	f001 f8e9 	bl	8008758 <_sbrk_r>
 8007586:	4581      	cmp	r9, r0
 8007588:	d13f      	bne.n	800760a <_malloc_r+0xe6>
 800758a:	6821      	ldr	r1, [r4, #0]
 800758c:	1a6d      	subs	r5, r5, r1
 800758e:	4629      	mov	r1, r5
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff ffa7 	bl	80074e4 <sbrk_aligned>
 8007596:	3001      	adds	r0, #1
 8007598:	d037      	beq.n	800760a <_malloc_r+0xe6>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	442b      	add	r3, r5
 800759e:	6023      	str	r3, [r4, #0]
 80075a0:	f8d8 3000 	ldr.w	r3, [r8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d038      	beq.n	800761a <_malloc_r+0xf6>
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	42a2      	cmp	r2, r4
 80075ac:	d12b      	bne.n	8007606 <_malloc_r+0xe2>
 80075ae:	2200      	movs	r2, #0
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	e00f      	b.n	80075d4 <_malloc_r+0xb0>
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	1b52      	subs	r2, r2, r5
 80075b8:	d41f      	bmi.n	80075fa <_malloc_r+0xd6>
 80075ba:	2a0b      	cmp	r2, #11
 80075bc:	d917      	bls.n	80075ee <_malloc_r+0xca>
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	6025      	str	r5, [r4, #0]
 80075c4:	bf18      	it	ne
 80075c6:	6059      	strne	r1, [r3, #4]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	bf08      	it	eq
 80075cc:	f8c8 1000 	streq.w	r1, [r8]
 80075d0:	5162      	str	r2, [r4, r5]
 80075d2:	604b      	str	r3, [r1, #4]
 80075d4:	4638      	mov	r0, r7
 80075d6:	f104 060b 	add.w	r6, r4, #11
 80075da:	f000 f83b 	bl	8007654 <__malloc_unlock>
 80075de:	f026 0607 	bic.w	r6, r6, #7
 80075e2:	1d23      	adds	r3, r4, #4
 80075e4:	1af2      	subs	r2, r6, r3
 80075e6:	d0ae      	beq.n	8007546 <_malloc_r+0x22>
 80075e8:	1b9b      	subs	r3, r3, r6
 80075ea:	50a3      	str	r3, [r4, r2]
 80075ec:	e7ab      	b.n	8007546 <_malloc_r+0x22>
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	6862      	ldr	r2, [r4, #4]
 80075f2:	d1dd      	bne.n	80075b0 <_malloc_r+0x8c>
 80075f4:	f8c8 2000 	str.w	r2, [r8]
 80075f8:	e7ec      	b.n	80075d4 <_malloc_r+0xb0>
 80075fa:	4623      	mov	r3, r4
 80075fc:	6864      	ldr	r4, [r4, #4]
 80075fe:	e7ac      	b.n	800755a <_malloc_r+0x36>
 8007600:	4634      	mov	r4, r6
 8007602:	6876      	ldr	r6, [r6, #4]
 8007604:	e7b4      	b.n	8007570 <_malloc_r+0x4c>
 8007606:	4613      	mov	r3, r2
 8007608:	e7cc      	b.n	80075a4 <_malloc_r+0x80>
 800760a:	230c      	movs	r3, #12
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	4638      	mov	r0, r7
 8007610:	f000 f820 	bl	8007654 <__malloc_unlock>
 8007614:	e797      	b.n	8007546 <_malloc_r+0x22>
 8007616:	6025      	str	r5, [r4, #0]
 8007618:	e7dc      	b.n	80075d4 <_malloc_r+0xb0>
 800761a:	605b      	str	r3, [r3, #4]
 800761c:	deff      	udf	#255	; 0xff
 800761e:	bf00      	nop
 8007620:	200006e0 	.word	0x200006e0

08007624 <__ascii_mbtowc>:
 8007624:	b082      	sub	sp, #8
 8007626:	b901      	cbnz	r1, 800762a <__ascii_mbtowc+0x6>
 8007628:	a901      	add	r1, sp, #4
 800762a:	b142      	cbz	r2, 800763e <__ascii_mbtowc+0x1a>
 800762c:	b14b      	cbz	r3, 8007642 <__ascii_mbtowc+0x1e>
 800762e:	7813      	ldrb	r3, [r2, #0]
 8007630:	600b      	str	r3, [r1, #0]
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	1e10      	subs	r0, r2, #0
 8007636:	bf18      	it	ne
 8007638:	2001      	movne	r0, #1
 800763a:	b002      	add	sp, #8
 800763c:	4770      	bx	lr
 800763e:	4610      	mov	r0, r2
 8007640:	e7fb      	b.n	800763a <__ascii_mbtowc+0x16>
 8007642:	f06f 0001 	mvn.w	r0, #1
 8007646:	e7f8      	b.n	800763a <__ascii_mbtowc+0x16>

08007648 <__malloc_lock>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__malloc_lock+0x8>)
 800764a:	f7ff bb67 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	200006dc 	.word	0x200006dc

08007654 <__malloc_unlock>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__malloc_unlock+0x8>)
 8007656:	f7ff bb62 	b.w	8006d1e <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	200006dc 	.word	0x200006dc

08007660 <_Balloc>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	69c6      	ldr	r6, [r0, #28]
 8007664:	4604      	mov	r4, r0
 8007666:	460d      	mov	r5, r1
 8007668:	b976      	cbnz	r6, 8007688 <_Balloc+0x28>
 800766a:	2010      	movs	r0, #16
 800766c:	f7ff ff32 	bl	80074d4 <malloc>
 8007670:	4602      	mov	r2, r0
 8007672:	61e0      	str	r0, [r4, #28]
 8007674:	b920      	cbnz	r0, 8007680 <_Balloc+0x20>
 8007676:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <_Balloc+0x78>)
 8007678:	4818      	ldr	r0, [pc, #96]	; (80076dc <_Balloc+0x7c>)
 800767a:	216b      	movs	r1, #107	; 0x6b
 800767c:	f7ff fb68 	bl	8006d50 <__assert_func>
 8007680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007684:	6006      	str	r6, [r0, #0]
 8007686:	60c6      	str	r6, [r0, #12]
 8007688:	69e6      	ldr	r6, [r4, #28]
 800768a:	68f3      	ldr	r3, [r6, #12]
 800768c:	b183      	cbz	r3, 80076b0 <_Balloc+0x50>
 800768e:	69e3      	ldr	r3, [r4, #28]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007696:	b9b8      	cbnz	r0, 80076c8 <_Balloc+0x68>
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f605 	lsl.w	r6, r1, r5
 800769e:	1d72      	adds	r2, r6, #5
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	4620      	mov	r0, r4
 80076a4:	f001 f86f 	bl	8008786 <_calloc_r>
 80076a8:	b160      	cbz	r0, 80076c4 <_Balloc+0x64>
 80076aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076ae:	e00e      	b.n	80076ce <_Balloc+0x6e>
 80076b0:	2221      	movs	r2, #33	; 0x21
 80076b2:	2104      	movs	r1, #4
 80076b4:	4620      	mov	r0, r4
 80076b6:	f001 f866 	bl	8008786 <_calloc_r>
 80076ba:	69e3      	ldr	r3, [r4, #28]
 80076bc:	60f0      	str	r0, [r6, #12]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e4      	bne.n	800768e <_Balloc+0x2e>
 80076c4:	2000      	movs	r0, #0
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	6802      	ldr	r2, [r0, #0]
 80076ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076ce:	2300      	movs	r3, #0
 80076d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076d4:	e7f7      	b.n	80076c6 <_Balloc+0x66>
 80076d6:	bf00      	nop
 80076d8:	08009070 	.word	0x08009070
 80076dc:	08009196 	.word	0x08009196

080076e0 <_Bfree>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	69c6      	ldr	r6, [r0, #28]
 80076e4:	4605      	mov	r5, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	b976      	cbnz	r6, 8007708 <_Bfree+0x28>
 80076ea:	2010      	movs	r0, #16
 80076ec:	f7ff fef2 	bl	80074d4 <malloc>
 80076f0:	4602      	mov	r2, r0
 80076f2:	61e8      	str	r0, [r5, #28]
 80076f4:	b920      	cbnz	r0, 8007700 <_Bfree+0x20>
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <_Bfree+0x3c>)
 80076f8:	4809      	ldr	r0, [pc, #36]	; (8007720 <_Bfree+0x40>)
 80076fa:	218f      	movs	r1, #143	; 0x8f
 80076fc:	f7ff fb28 	bl	8006d50 <__assert_func>
 8007700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007704:	6006      	str	r6, [r0, #0]
 8007706:	60c6      	str	r6, [r0, #12]
 8007708:	b13c      	cbz	r4, 800771a <_Bfree+0x3a>
 800770a:	69eb      	ldr	r3, [r5, #28]
 800770c:	6862      	ldr	r2, [r4, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007714:	6021      	str	r1, [r4, #0]
 8007716:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	08009070 	.word	0x08009070
 8007720:	08009196 	.word	0x08009196

08007724 <__multadd>:
 8007724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007728:	690d      	ldr	r5, [r1, #16]
 800772a:	4607      	mov	r7, r0
 800772c:	460c      	mov	r4, r1
 800772e:	461e      	mov	r6, r3
 8007730:	f101 0c14 	add.w	ip, r1, #20
 8007734:	2000      	movs	r0, #0
 8007736:	f8dc 3000 	ldr.w	r3, [ip]
 800773a:	b299      	uxth	r1, r3
 800773c:	fb02 6101 	mla	r1, r2, r1, r6
 8007740:	0c1e      	lsrs	r6, r3, #16
 8007742:	0c0b      	lsrs	r3, r1, #16
 8007744:	fb02 3306 	mla	r3, r2, r6, r3
 8007748:	b289      	uxth	r1, r1
 800774a:	3001      	adds	r0, #1
 800774c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007750:	4285      	cmp	r5, r0
 8007752:	f84c 1b04 	str.w	r1, [ip], #4
 8007756:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800775a:	dcec      	bgt.n	8007736 <__multadd+0x12>
 800775c:	b30e      	cbz	r6, 80077a2 <__multadd+0x7e>
 800775e:	68a3      	ldr	r3, [r4, #8]
 8007760:	42ab      	cmp	r3, r5
 8007762:	dc19      	bgt.n	8007798 <__multadd+0x74>
 8007764:	6861      	ldr	r1, [r4, #4]
 8007766:	4638      	mov	r0, r7
 8007768:	3101      	adds	r1, #1
 800776a:	f7ff ff79 	bl	8007660 <_Balloc>
 800776e:	4680      	mov	r8, r0
 8007770:	b928      	cbnz	r0, 800777e <__multadd+0x5a>
 8007772:	4602      	mov	r2, r0
 8007774:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <__multadd+0x84>)
 8007776:	480d      	ldr	r0, [pc, #52]	; (80077ac <__multadd+0x88>)
 8007778:	21ba      	movs	r1, #186	; 0xba
 800777a:	f7ff fae9 	bl	8006d50 <__assert_func>
 800777e:	6922      	ldr	r2, [r4, #16]
 8007780:	3202      	adds	r2, #2
 8007782:	f104 010c 	add.w	r1, r4, #12
 8007786:	0092      	lsls	r2, r2, #2
 8007788:	300c      	adds	r0, #12
 800778a:	f7ff fac9 	bl	8006d20 <memcpy>
 800778e:	4621      	mov	r1, r4
 8007790:	4638      	mov	r0, r7
 8007792:	f7ff ffa5 	bl	80076e0 <_Bfree>
 8007796:	4644      	mov	r4, r8
 8007798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800779c:	3501      	adds	r5, #1
 800779e:	615e      	str	r6, [r3, #20]
 80077a0:	6125      	str	r5, [r4, #16]
 80077a2:	4620      	mov	r0, r4
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	08009125 	.word	0x08009125
 80077ac:	08009196 	.word	0x08009196

080077b0 <__s2b>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	460c      	mov	r4, r1
 80077b6:	4615      	mov	r5, r2
 80077b8:	461f      	mov	r7, r3
 80077ba:	2209      	movs	r2, #9
 80077bc:	3308      	adds	r3, #8
 80077be:	4606      	mov	r6, r0
 80077c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c4:	2100      	movs	r1, #0
 80077c6:	2201      	movs	r2, #1
 80077c8:	429a      	cmp	r2, r3
 80077ca:	db09      	blt.n	80077e0 <__s2b+0x30>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff ff47 	bl	8007660 <_Balloc>
 80077d2:	b940      	cbnz	r0, 80077e6 <__s2b+0x36>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4b19      	ldr	r3, [pc, #100]	; (800783c <__s2b+0x8c>)
 80077d8:	4819      	ldr	r0, [pc, #100]	; (8007840 <__s2b+0x90>)
 80077da:	21d3      	movs	r1, #211	; 0xd3
 80077dc:	f7ff fab8 	bl	8006d50 <__assert_func>
 80077e0:	0052      	lsls	r2, r2, #1
 80077e2:	3101      	adds	r1, #1
 80077e4:	e7f0      	b.n	80077c8 <__s2b+0x18>
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	6143      	str	r3, [r0, #20]
 80077ea:	2d09      	cmp	r5, #9
 80077ec:	f04f 0301 	mov.w	r3, #1
 80077f0:	6103      	str	r3, [r0, #16]
 80077f2:	dd16      	ble.n	8007822 <__s2b+0x72>
 80077f4:	f104 0909 	add.w	r9, r4, #9
 80077f8:	46c8      	mov	r8, r9
 80077fa:	442c      	add	r4, r5
 80077fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007800:	4601      	mov	r1, r0
 8007802:	3b30      	subs	r3, #48	; 0x30
 8007804:	220a      	movs	r2, #10
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff ff8c 	bl	8007724 <__multadd>
 800780c:	45a0      	cmp	r8, r4
 800780e:	d1f5      	bne.n	80077fc <__s2b+0x4c>
 8007810:	f1a5 0408 	sub.w	r4, r5, #8
 8007814:	444c      	add	r4, r9
 8007816:	1b2d      	subs	r5, r5, r4
 8007818:	1963      	adds	r3, r4, r5
 800781a:	42bb      	cmp	r3, r7
 800781c:	db04      	blt.n	8007828 <__s2b+0x78>
 800781e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007822:	340a      	adds	r4, #10
 8007824:	2509      	movs	r5, #9
 8007826:	e7f6      	b.n	8007816 <__s2b+0x66>
 8007828:	f814 3b01 	ldrb.w	r3, [r4], #1
 800782c:	4601      	mov	r1, r0
 800782e:	3b30      	subs	r3, #48	; 0x30
 8007830:	220a      	movs	r2, #10
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff ff76 	bl	8007724 <__multadd>
 8007838:	e7ee      	b.n	8007818 <__s2b+0x68>
 800783a:	bf00      	nop
 800783c:	08009125 	.word	0x08009125
 8007840:	08009196 	.word	0x08009196

08007844 <__hi0bits>:
 8007844:	0c03      	lsrs	r3, r0, #16
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	b9d3      	cbnz	r3, 8007880 <__hi0bits+0x3c>
 800784a:	0400      	lsls	r0, r0, #16
 800784c:	2310      	movs	r3, #16
 800784e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007852:	bf04      	itt	eq
 8007854:	0200      	lsleq	r0, r0, #8
 8007856:	3308      	addeq	r3, #8
 8007858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800785c:	bf04      	itt	eq
 800785e:	0100      	lsleq	r0, r0, #4
 8007860:	3304      	addeq	r3, #4
 8007862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007866:	bf04      	itt	eq
 8007868:	0080      	lsleq	r0, r0, #2
 800786a:	3302      	addeq	r3, #2
 800786c:	2800      	cmp	r0, #0
 800786e:	db05      	blt.n	800787c <__hi0bits+0x38>
 8007870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007874:	f103 0301 	add.w	r3, r3, #1
 8007878:	bf08      	it	eq
 800787a:	2320      	moveq	r3, #32
 800787c:	4618      	mov	r0, r3
 800787e:	4770      	bx	lr
 8007880:	2300      	movs	r3, #0
 8007882:	e7e4      	b.n	800784e <__hi0bits+0xa>

08007884 <__lo0bits>:
 8007884:	6803      	ldr	r3, [r0, #0]
 8007886:	f013 0207 	ands.w	r2, r3, #7
 800788a:	d00c      	beq.n	80078a6 <__lo0bits+0x22>
 800788c:	07d9      	lsls	r1, r3, #31
 800788e:	d422      	bmi.n	80078d6 <__lo0bits+0x52>
 8007890:	079a      	lsls	r2, r3, #30
 8007892:	bf49      	itett	mi
 8007894:	085b      	lsrmi	r3, r3, #1
 8007896:	089b      	lsrpl	r3, r3, #2
 8007898:	6003      	strmi	r3, [r0, #0]
 800789a:	2201      	movmi	r2, #1
 800789c:	bf5c      	itt	pl
 800789e:	6003      	strpl	r3, [r0, #0]
 80078a0:	2202      	movpl	r2, #2
 80078a2:	4610      	mov	r0, r2
 80078a4:	4770      	bx	lr
 80078a6:	b299      	uxth	r1, r3
 80078a8:	b909      	cbnz	r1, 80078ae <__lo0bits+0x2a>
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	2210      	movs	r2, #16
 80078ae:	b2d9      	uxtb	r1, r3
 80078b0:	b909      	cbnz	r1, 80078b6 <__lo0bits+0x32>
 80078b2:	3208      	adds	r2, #8
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	0719      	lsls	r1, r3, #28
 80078b8:	bf04      	itt	eq
 80078ba:	091b      	lsreq	r3, r3, #4
 80078bc:	3204      	addeq	r2, #4
 80078be:	0799      	lsls	r1, r3, #30
 80078c0:	bf04      	itt	eq
 80078c2:	089b      	lsreq	r3, r3, #2
 80078c4:	3202      	addeq	r2, #2
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d403      	bmi.n	80078d2 <__lo0bits+0x4e>
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	f102 0201 	add.w	r2, r2, #1
 80078d0:	d003      	beq.n	80078da <__lo0bits+0x56>
 80078d2:	6003      	str	r3, [r0, #0]
 80078d4:	e7e5      	b.n	80078a2 <__lo0bits+0x1e>
 80078d6:	2200      	movs	r2, #0
 80078d8:	e7e3      	b.n	80078a2 <__lo0bits+0x1e>
 80078da:	2220      	movs	r2, #32
 80078dc:	e7e1      	b.n	80078a2 <__lo0bits+0x1e>
	...

080078e0 <__i2b>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	2101      	movs	r1, #1
 80078e6:	f7ff febb 	bl	8007660 <_Balloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	b928      	cbnz	r0, 80078fa <__i2b+0x1a>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <__i2b+0x24>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <__i2b+0x28>)
 80078f2:	f240 1145 	movw	r1, #325	; 0x145
 80078f6:	f7ff fa2b 	bl	8006d50 <__assert_func>
 80078fa:	2301      	movs	r3, #1
 80078fc:	6144      	str	r4, [r0, #20]
 80078fe:	6103      	str	r3, [r0, #16]
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	08009125 	.word	0x08009125
 8007908:	08009196 	.word	0x08009196

0800790c <__multiply>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4691      	mov	r9, r2
 8007912:	690a      	ldr	r2, [r1, #16]
 8007914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	bfb8      	it	lt
 800791c:	460b      	movlt	r3, r1
 800791e:	460c      	mov	r4, r1
 8007920:	bfbc      	itt	lt
 8007922:	464c      	movlt	r4, r9
 8007924:	4699      	movlt	r9, r3
 8007926:	6927      	ldr	r7, [r4, #16]
 8007928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	6861      	ldr	r1, [r4, #4]
 8007930:	eb07 060a 	add.w	r6, r7, sl
 8007934:	42b3      	cmp	r3, r6
 8007936:	b085      	sub	sp, #20
 8007938:	bfb8      	it	lt
 800793a:	3101      	addlt	r1, #1
 800793c:	f7ff fe90 	bl	8007660 <_Balloc>
 8007940:	b930      	cbnz	r0, 8007950 <__multiply+0x44>
 8007942:	4602      	mov	r2, r0
 8007944:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <__multiply+0x14c>)
 8007946:	4845      	ldr	r0, [pc, #276]	; (8007a5c <__multiply+0x150>)
 8007948:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800794c:	f7ff fa00 	bl	8006d50 <__assert_func>
 8007950:	f100 0514 	add.w	r5, r0, #20
 8007954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007958:	462b      	mov	r3, r5
 800795a:	2200      	movs	r2, #0
 800795c:	4543      	cmp	r3, r8
 800795e:	d321      	bcc.n	80079a4 <__multiply+0x98>
 8007960:	f104 0314 	add.w	r3, r4, #20
 8007964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007968:	f109 0314 	add.w	r3, r9, #20
 800796c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	1b3a      	subs	r2, r7, r4
 8007974:	3a15      	subs	r2, #21
 8007976:	f022 0203 	bic.w	r2, r2, #3
 800797a:	3204      	adds	r2, #4
 800797c:	f104 0115 	add.w	r1, r4, #21
 8007980:	428f      	cmp	r7, r1
 8007982:	bf38      	it	cc
 8007984:	2204      	movcc	r2, #4
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	9a02      	ldr	r2, [sp, #8]
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d80c      	bhi.n	80079aa <__multiply+0x9e>
 8007990:	2e00      	cmp	r6, #0
 8007992:	dd03      	ble.n	800799c <__multiply+0x90>
 8007994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05b      	beq.n	8007a54 <__multiply+0x148>
 800799c:	6106      	str	r6, [r0, #16]
 800799e:	b005      	add	sp, #20
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	f843 2b04 	str.w	r2, [r3], #4
 80079a8:	e7d8      	b.n	800795c <__multiply+0x50>
 80079aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	d024      	beq.n	80079fe <__multiply+0xf2>
 80079b4:	f104 0e14 	add.w	lr, r4, #20
 80079b8:	46a9      	mov	r9, r5
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079c2:	f8d9 1000 	ldr.w	r1, [r9]
 80079c6:	fa1f fb82 	uxth.w	fp, r2
 80079ca:	b289      	uxth	r1, r1
 80079cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80079d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079d4:	f8d9 2000 	ldr.w	r2, [r9]
 80079d8:	4461      	add	r1, ip
 80079da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079de:	fb0a c20b 	mla	r2, sl, fp, ip
 80079e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079e6:	b289      	uxth	r1, r1
 80079e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079ec:	4577      	cmp	r7, lr
 80079ee:	f849 1b04 	str.w	r1, [r9], #4
 80079f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079f6:	d8e2      	bhi.n	80079be <__multiply+0xb2>
 80079f8:	9a01      	ldr	r2, [sp, #4]
 80079fa:	f845 c002 	str.w	ip, [r5, r2]
 80079fe:	9a03      	ldr	r2, [sp, #12]
 8007a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a04:	3304      	adds	r3, #4
 8007a06:	f1b9 0f00 	cmp.w	r9, #0
 8007a0a:	d021      	beq.n	8007a50 <__multiply+0x144>
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	f104 0c14 	add.w	ip, r4, #20
 8007a12:	46ae      	mov	lr, r5
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	f8bc b000 	ldrh.w	fp, [ip]
 8007a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a20:	fb09 220b 	mla	r2, r9, fp, r2
 8007a24:	4452      	add	r2, sl
 8007a26:	b289      	uxth	r1, r1
 8007a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8007a30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a38:	f8be 1000 	ldrh.w	r1, [lr]
 8007a3c:	fb09 110a 	mla	r1, r9, sl, r1
 8007a40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a44:	4567      	cmp	r7, ip
 8007a46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a4a:	d8e5      	bhi.n	8007a18 <__multiply+0x10c>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	50a9      	str	r1, [r5, r2]
 8007a50:	3504      	adds	r5, #4
 8007a52:	e799      	b.n	8007988 <__multiply+0x7c>
 8007a54:	3e01      	subs	r6, #1
 8007a56:	e79b      	b.n	8007990 <__multiply+0x84>
 8007a58:	08009125 	.word	0x08009125
 8007a5c:	08009196 	.word	0x08009196

08007a60 <__pow5mult>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	4615      	mov	r5, r2
 8007a66:	f012 0203 	ands.w	r2, r2, #3
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	d007      	beq.n	8007a80 <__pow5mult+0x20>
 8007a70:	4c25      	ldr	r4, [pc, #148]	; (8007b08 <__pow5mult+0xa8>)
 8007a72:	3a01      	subs	r2, #1
 8007a74:	2300      	movs	r3, #0
 8007a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a7a:	f7ff fe53 	bl	8007724 <__multadd>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	10ad      	asrs	r5, r5, #2
 8007a82:	d03d      	beq.n	8007b00 <__pow5mult+0xa0>
 8007a84:	69f4      	ldr	r4, [r6, #28]
 8007a86:	b97c      	cbnz	r4, 8007aa8 <__pow5mult+0x48>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7ff fd23 	bl	80074d4 <malloc>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	61f0      	str	r0, [r6, #28]
 8007a92:	b928      	cbnz	r0, 8007aa0 <__pow5mult+0x40>
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <__pow5mult+0xac>)
 8007a96:	481e      	ldr	r0, [pc, #120]	; (8007b10 <__pow5mult+0xb0>)
 8007a98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a9c:	f7ff f958 	bl	8006d50 <__assert_func>
 8007aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aa4:	6004      	str	r4, [r0, #0]
 8007aa6:	60c4      	str	r4, [r0, #12]
 8007aa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ab0:	b94c      	cbnz	r4, 8007ac6 <__pow5mult+0x66>
 8007ab2:	f240 2171 	movw	r1, #625	; 0x271
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ff12 	bl	80078e0 <__i2b>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	07eb      	lsls	r3, r5, #31
 8007acc:	d50a      	bpl.n	8007ae4 <__pow5mult+0x84>
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ff1a 	bl	800790c <__multiply>
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4680      	mov	r8, r0
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fdff 	bl	80076e0 <_Bfree>
 8007ae2:	4647      	mov	r7, r8
 8007ae4:	106d      	asrs	r5, r5, #1
 8007ae6:	d00b      	beq.n	8007b00 <__pow5mult+0xa0>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	b938      	cbnz	r0, 8007afc <__pow5mult+0x9c>
 8007aec:	4622      	mov	r2, r4
 8007aee:	4621      	mov	r1, r4
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ff0b 	bl	800790c <__multiply>
 8007af6:	6020      	str	r0, [r4, #0]
 8007af8:	f8c0 9000 	str.w	r9, [r0]
 8007afc:	4604      	mov	r4, r0
 8007afe:	e7e4      	b.n	8007aca <__pow5mult+0x6a>
 8007b00:	4638      	mov	r0, r7
 8007b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b06:	bf00      	nop
 8007b08:	080092e0 	.word	0x080092e0
 8007b0c:	08009070 	.word	0x08009070
 8007b10:	08009196 	.word	0x08009196

08007b14 <__lshift>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	6849      	ldr	r1, [r1, #4]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	4607      	mov	r7, r0
 8007b26:	4691      	mov	r9, r2
 8007b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b2c:	f108 0601 	add.w	r6, r8, #1
 8007b30:	42b3      	cmp	r3, r6
 8007b32:	db0b      	blt.n	8007b4c <__lshift+0x38>
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff fd93 	bl	8007660 <_Balloc>
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	b948      	cbnz	r0, 8007b52 <__lshift+0x3e>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <__lshift+0xd0>)
 8007b42:	4829      	ldr	r0, [pc, #164]	; (8007be8 <__lshift+0xd4>)
 8007b44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b48:	f7ff f902 	bl	8006d50 <__assert_func>
 8007b4c:	3101      	adds	r1, #1
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	e7ee      	b.n	8007b30 <__lshift+0x1c>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f100 0114 	add.w	r1, r0, #20
 8007b58:	f100 0210 	add.w	r2, r0, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4553      	cmp	r3, sl
 8007b60:	db33      	blt.n	8007bca <__lshift+0xb6>
 8007b62:	6920      	ldr	r0, [r4, #16]
 8007b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b68:	f104 0314 	add.w	r3, r4, #20
 8007b6c:	f019 091f 	ands.w	r9, r9, #31
 8007b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b78:	d02b      	beq.n	8007bd2 <__lshift+0xbe>
 8007b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b7e:	468a      	mov	sl, r1
 8007b80:	2200      	movs	r2, #0
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	fa00 f009 	lsl.w	r0, r0, r9
 8007b88:	4310      	orrs	r0, r2
 8007b8a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b92:	459c      	cmp	ip, r3
 8007b94:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b98:	d8f3      	bhi.n	8007b82 <__lshift+0x6e>
 8007b9a:	ebac 0304 	sub.w	r3, ip, r4
 8007b9e:	3b15      	subs	r3, #21
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	f104 0015 	add.w	r0, r4, #21
 8007baa:	4584      	cmp	ip, r0
 8007bac:	bf38      	it	cc
 8007bae:	2304      	movcc	r3, #4
 8007bb0:	50ca      	str	r2, [r1, r3]
 8007bb2:	b10a      	cbz	r2, 8007bb8 <__lshift+0xa4>
 8007bb4:	f108 0602 	add.w	r6, r8, #2
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	4638      	mov	r0, r7
 8007bbc:	612e      	str	r6, [r5, #16]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f7ff fd8e 	bl	80076e0 <_Bfree>
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bce:	3301      	adds	r3, #1
 8007bd0:	e7c5      	b.n	8007b5e <__lshift+0x4a>
 8007bd2:	3904      	subs	r1, #4
 8007bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bdc:	459c      	cmp	ip, r3
 8007bde:	d8f9      	bhi.n	8007bd4 <__lshift+0xc0>
 8007be0:	e7ea      	b.n	8007bb8 <__lshift+0xa4>
 8007be2:	bf00      	nop
 8007be4:	08009125 	.word	0x08009125
 8007be8:	08009196 	.word	0x08009196

08007bec <__mcmp>:
 8007bec:	b530      	push	{r4, r5, lr}
 8007bee:	6902      	ldr	r2, [r0, #16]
 8007bf0:	690c      	ldr	r4, [r1, #16]
 8007bf2:	1b12      	subs	r2, r2, r4
 8007bf4:	d10e      	bne.n	8007c14 <__mcmp+0x28>
 8007bf6:	f100 0314 	add.w	r3, r0, #20
 8007bfa:	3114      	adds	r1, #20
 8007bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d003      	beq.n	8007c18 <__mcmp+0x2c>
 8007c10:	d305      	bcc.n	8007c1e <__mcmp+0x32>
 8007c12:	2201      	movs	r2, #1
 8007c14:	4610      	mov	r0, r2
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d3f3      	bcc.n	8007c04 <__mcmp+0x18>
 8007c1c:	e7fa      	b.n	8007c14 <__mcmp+0x28>
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e7f7      	b.n	8007c14 <__mcmp+0x28>

08007c24 <__mdiff>:
 8007c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4690      	mov	r8, r2
 8007c32:	f7ff ffdb 	bl	8007bec <__mcmp>
 8007c36:	1e05      	subs	r5, r0, #0
 8007c38:	d110      	bne.n	8007c5c <__mdiff+0x38>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fd0f 	bl	8007660 <_Balloc>
 8007c42:	b930      	cbnz	r0, 8007c52 <__mdiff+0x2e>
 8007c44:	4b3a      	ldr	r3, [pc, #232]	; (8007d30 <__mdiff+0x10c>)
 8007c46:	4602      	mov	r2, r0
 8007c48:	f240 2137 	movw	r1, #567	; 0x237
 8007c4c:	4839      	ldr	r0, [pc, #228]	; (8007d34 <__mdiff+0x110>)
 8007c4e:	f7ff f87f 	bl	8006d50 <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	bfa4      	itt	ge
 8007c5e:	4643      	movge	r3, r8
 8007c60:	46a0      	movge	r8, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c68:	bfa6      	itte	ge
 8007c6a:	461c      	movge	r4, r3
 8007c6c:	2500      	movge	r5, #0
 8007c6e:	2501      	movlt	r5, #1
 8007c70:	f7ff fcf6 	bl	8007660 <_Balloc>
 8007c74:	b920      	cbnz	r0, 8007c80 <__mdiff+0x5c>
 8007c76:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <__mdiff+0x10c>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 2145 	movw	r1, #581	; 0x245
 8007c7e:	e7e5      	b.n	8007c4c <__mdiff+0x28>
 8007c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c84:	6926      	ldr	r6, [r4, #16]
 8007c86:	60c5      	str	r5, [r0, #12]
 8007c88:	f104 0914 	add.w	r9, r4, #20
 8007c8c:	f108 0514 	add.w	r5, r8, #20
 8007c90:	f100 0e14 	add.w	lr, r0, #20
 8007c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c9c:	f108 0210 	add.w	r2, r8, #16
 8007ca0:	46f2      	mov	sl, lr
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cac:	fa11 f88b 	uxtah	r8, r1, fp
 8007cb0:	b299      	uxth	r1, r3
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	eba8 0801 	sub.w	r8, r8, r1
 8007cb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cc0:	fa1f f888 	uxth.w	r8, r8
 8007cc4:	1419      	asrs	r1, r3, #16
 8007cc6:	454e      	cmp	r6, r9
 8007cc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ccc:	f84a 3b04 	str.w	r3, [sl], #4
 8007cd0:	d8e8      	bhi.n	8007ca4 <__mdiff+0x80>
 8007cd2:	1b33      	subs	r3, r6, r4
 8007cd4:	3b15      	subs	r3, #21
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	3304      	adds	r3, #4
 8007cdc:	3415      	adds	r4, #21
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	bf38      	it	cc
 8007ce2:	2304      	movcc	r3, #4
 8007ce4:	441d      	add	r5, r3
 8007ce6:	4473      	add	r3, lr
 8007ce8:	469e      	mov	lr, r3
 8007cea:	462e      	mov	r6, r5
 8007cec:	4566      	cmp	r6, ip
 8007cee:	d30e      	bcc.n	8007d0e <__mdiff+0xea>
 8007cf0:	f10c 0203 	add.w	r2, ip, #3
 8007cf4:	1b52      	subs	r2, r2, r5
 8007cf6:	f022 0203 	bic.w	r2, r2, #3
 8007cfa:	3d03      	subs	r5, #3
 8007cfc:	45ac      	cmp	ip, r5
 8007cfe:	bf38      	it	cc
 8007d00:	2200      	movcc	r2, #0
 8007d02:	4413      	add	r3, r2
 8007d04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d08:	b17a      	cbz	r2, 8007d2a <__mdiff+0x106>
 8007d0a:	6107      	str	r7, [r0, #16]
 8007d0c:	e7a4      	b.n	8007c58 <__mdiff+0x34>
 8007d0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d12:	fa11 f288 	uxtah	r2, r1, r8
 8007d16:	1414      	asrs	r4, r2, #16
 8007d18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d22:	f84e 2b04 	str.w	r2, [lr], #4
 8007d26:	1421      	asrs	r1, r4, #16
 8007d28:	e7e0      	b.n	8007cec <__mdiff+0xc8>
 8007d2a:	3f01      	subs	r7, #1
 8007d2c:	e7ea      	b.n	8007d04 <__mdiff+0xe0>
 8007d2e:	bf00      	nop
 8007d30:	08009125 	.word	0x08009125
 8007d34:	08009196 	.word	0x08009196

08007d38 <__ulp>:
 8007d38:	b082      	sub	sp, #8
 8007d3a:	ed8d 0b00 	vstr	d0, [sp]
 8007d3e:	9a01      	ldr	r2, [sp, #4]
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <__ulp+0x48>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dc08      	bgt.n	8007d5e <__ulp+0x26>
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007d52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d56:	da04      	bge.n	8007d62 <__ulp+0x2a>
 8007d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d5c:	4113      	asrs	r3, r2
 8007d5e:	2200      	movs	r2, #0
 8007d60:	e008      	b.n	8007d74 <__ulp+0x3c>
 8007d62:	f1a2 0314 	sub.w	r3, r2, #20
 8007d66:	2b1e      	cmp	r3, #30
 8007d68:	bfda      	itte	le
 8007d6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007d6e:	40da      	lsrle	r2, r3
 8007d70:	2201      	movgt	r2, #1
 8007d72:	2300      	movs	r3, #0
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	ec41 0b10 	vmov	d0, r0, r1
 8007d7c:	b002      	add	sp, #8
 8007d7e:	4770      	bx	lr
 8007d80:	7ff00000 	.word	0x7ff00000

08007d84 <__b2d>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	6906      	ldr	r6, [r0, #16]
 8007d8a:	f100 0814 	add.w	r8, r0, #20
 8007d8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d92:	1f37      	subs	r7, r6, #4
 8007d94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7ff fd53 	bl	8007844 <__hi0bits>
 8007d9e:	f1c0 0320 	rsb	r3, r0, #32
 8007da2:	280a      	cmp	r0, #10
 8007da4:	600b      	str	r3, [r1, #0]
 8007da6:	491b      	ldr	r1, [pc, #108]	; (8007e14 <__b2d+0x90>)
 8007da8:	dc15      	bgt.n	8007dd6 <__b2d+0x52>
 8007daa:	f1c0 0c0b 	rsb	ip, r0, #11
 8007dae:	fa22 f30c 	lsr.w	r3, r2, ip
 8007db2:	45b8      	cmp	r8, r7
 8007db4:	ea43 0501 	orr.w	r5, r3, r1
 8007db8:	bf34      	ite	cc
 8007dba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dbe:	2300      	movcs	r3, #0
 8007dc0:	3015      	adds	r0, #21
 8007dc2:	fa02 f000 	lsl.w	r0, r2, r0
 8007dc6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007dca:	4303      	orrs	r3, r0
 8007dcc:	461c      	mov	r4, r3
 8007dce:	ec45 4b10 	vmov	d0, r4, r5
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	45b8      	cmp	r8, r7
 8007dd8:	bf3a      	itte	cc
 8007dda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dde:	f1a6 0708 	subcc.w	r7, r6, #8
 8007de2:	2300      	movcs	r3, #0
 8007de4:	380b      	subs	r0, #11
 8007de6:	d012      	beq.n	8007e0e <__b2d+0x8a>
 8007de8:	f1c0 0120 	rsb	r1, r0, #32
 8007dec:	fa23 f401 	lsr.w	r4, r3, r1
 8007df0:	4082      	lsls	r2, r0
 8007df2:	4322      	orrs	r2, r4
 8007df4:	4547      	cmp	r7, r8
 8007df6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007dfa:	bf8c      	ite	hi
 8007dfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e00:	2200      	movls	r2, #0
 8007e02:	4083      	lsls	r3, r0
 8007e04:	40ca      	lsrs	r2, r1
 8007e06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	e7de      	b.n	8007dcc <__b2d+0x48>
 8007e0e:	ea42 0501 	orr.w	r5, r2, r1
 8007e12:	e7db      	b.n	8007dcc <__b2d+0x48>
 8007e14:	3ff00000 	.word	0x3ff00000

08007e18 <__d2b>:
 8007e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	2101      	movs	r1, #1
 8007e20:	ec59 8b10 	vmov	r8, r9, d0
 8007e24:	4616      	mov	r6, r2
 8007e26:	f7ff fc1b 	bl	8007660 <_Balloc>
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	b930      	cbnz	r0, 8007e3c <__d2b+0x24>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <__d2b+0xac>)
 8007e32:	4825      	ldr	r0, [pc, #148]	; (8007ec8 <__d2b+0xb0>)
 8007e34:	f240 310f 	movw	r1, #783	; 0x30f
 8007e38:	f7fe ff8a 	bl	8006d50 <__assert_func>
 8007e3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e44:	bb2d      	cbnz	r5, 8007e92 <__d2b+0x7a>
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	f1b8 0300 	subs.w	r3, r8, #0
 8007e4c:	d026      	beq.n	8007e9c <__d2b+0x84>
 8007e4e:	4668      	mov	r0, sp
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	f7ff fd17 	bl	8007884 <__lo0bits>
 8007e56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e5a:	b1e8      	cbz	r0, 8007e98 <__d2b+0x80>
 8007e5c:	f1c0 0320 	rsb	r3, r0, #32
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	430b      	orrs	r3, r1
 8007e66:	40c2      	lsrs	r2, r0
 8007e68:	6163      	str	r3, [r4, #20]
 8007e6a:	9201      	str	r2, [sp, #4]
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	61a3      	str	r3, [r4, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2202      	movne	r2, #2
 8007e76:	2201      	moveq	r2, #1
 8007e78:	6122      	str	r2, [r4, #16]
 8007e7a:	b1bd      	cbz	r5, 8007eac <__d2b+0x94>
 8007e7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e80:	4405      	add	r5, r0
 8007e82:	603d      	str	r5, [r7, #0]
 8007e84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e88:	6030      	str	r0, [r6, #0]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	b003      	add	sp, #12
 8007e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e96:	e7d6      	b.n	8007e46 <__d2b+0x2e>
 8007e98:	6161      	str	r1, [r4, #20]
 8007e9a:	e7e7      	b.n	8007e6c <__d2b+0x54>
 8007e9c:	a801      	add	r0, sp, #4
 8007e9e:	f7ff fcf1 	bl	8007884 <__lo0bits>
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	6163      	str	r3, [r4, #20]
 8007ea6:	3020      	adds	r0, #32
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	e7e5      	b.n	8007e78 <__d2b+0x60>
 8007eac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007eb4:	6038      	str	r0, [r7, #0]
 8007eb6:	6918      	ldr	r0, [r3, #16]
 8007eb8:	f7ff fcc4 	bl	8007844 <__hi0bits>
 8007ebc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ec0:	e7e2      	b.n	8007e88 <__d2b+0x70>
 8007ec2:	bf00      	nop
 8007ec4:	08009125 	.word	0x08009125
 8007ec8:	08009196 	.word	0x08009196

08007ecc <__ratio>:
 8007ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	4688      	mov	r8, r1
 8007ed2:	4669      	mov	r1, sp
 8007ed4:	4681      	mov	r9, r0
 8007ed6:	f7ff ff55 	bl	8007d84 <__b2d>
 8007eda:	a901      	add	r1, sp, #4
 8007edc:	4640      	mov	r0, r8
 8007ede:	ec55 4b10 	vmov	r4, r5, d0
 8007ee2:	f7ff ff4f 	bl	8007d84 <__b2d>
 8007ee6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007eea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007eee:	eba3 0c02 	sub.w	ip, r3, r2
 8007ef2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007efc:	ec51 0b10 	vmov	r0, r1, d0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfd6      	itet	le
 8007f04:	460a      	movle	r2, r1
 8007f06:	462a      	movgt	r2, r5
 8007f08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f0c:	468b      	mov	fp, r1
 8007f0e:	462f      	mov	r7, r5
 8007f10:	bfd4      	ite	le
 8007f12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	ee10 2a10 	vmov	r2, s0
 8007f20:	465b      	mov	r3, fp
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fc92 	bl	800084c <__aeabi_ddiv>
 8007f28:	ec41 0b10 	vmov	d0, r0, r1
 8007f2c:	b003      	add	sp, #12
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f32 <__copybits>:
 8007f32:	3901      	subs	r1, #1
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	1149      	asrs	r1, r1, #5
 8007f38:	6914      	ldr	r4, [r2, #16]
 8007f3a:	3101      	adds	r1, #1
 8007f3c:	f102 0314 	add.w	r3, r2, #20
 8007f40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f48:	1f05      	subs	r5, r0, #4
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	d30c      	bcc.n	8007f68 <__copybits+0x36>
 8007f4e:	1aa3      	subs	r3, r4, r2
 8007f50:	3b11      	subs	r3, #17
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	3211      	adds	r2, #17
 8007f58:	42a2      	cmp	r2, r4
 8007f5a:	bf88      	it	hi
 8007f5c:	2300      	movhi	r3, #0
 8007f5e:	4418      	add	r0, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	4288      	cmp	r0, r1
 8007f64:	d305      	bcc.n	8007f72 <__copybits+0x40>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f70:	e7eb      	b.n	8007f4a <__copybits+0x18>
 8007f72:	f840 3b04 	str.w	r3, [r0], #4
 8007f76:	e7f4      	b.n	8007f62 <__copybits+0x30>

08007f78 <__any_on>:
 8007f78:	f100 0214 	add.w	r2, r0, #20
 8007f7c:	6900      	ldr	r0, [r0, #16]
 8007f7e:	114b      	asrs	r3, r1, #5
 8007f80:	4298      	cmp	r0, r3
 8007f82:	b510      	push	{r4, lr}
 8007f84:	db11      	blt.n	8007faa <__any_on+0x32>
 8007f86:	dd0a      	ble.n	8007f9e <__any_on+0x26>
 8007f88:	f011 011f 	ands.w	r1, r1, #31
 8007f8c:	d007      	beq.n	8007f9e <__any_on+0x26>
 8007f8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f92:	fa24 f001 	lsr.w	r0, r4, r1
 8007f96:	fa00 f101 	lsl.w	r1, r0, r1
 8007f9a:	428c      	cmp	r4, r1
 8007f9c:	d10b      	bne.n	8007fb6 <__any_on+0x3e>
 8007f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d803      	bhi.n	8007fae <__any_on+0x36>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	4603      	mov	r3, r0
 8007fac:	e7f7      	b.n	8007f9e <__any_on+0x26>
 8007fae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	d0f5      	beq.n	8007fa2 <__any_on+0x2a>
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7f6      	b.n	8007fa8 <__any_on+0x30>

08007fba <__ascii_wctomb>:
 8007fba:	b149      	cbz	r1, 8007fd0 <__ascii_wctomb+0x16>
 8007fbc:	2aff      	cmp	r2, #255	; 0xff
 8007fbe:	bf85      	ittet	hi
 8007fc0:	238a      	movhi	r3, #138	; 0x8a
 8007fc2:	6003      	strhi	r3, [r0, #0]
 8007fc4:	700a      	strbls	r2, [r1, #0]
 8007fc6:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fca:	bf98      	it	ls
 8007fcc:	2001      	movls	r0, #1
 8007fce:	4770      	bx	lr
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4770      	bx	lr

08007fd4 <__ssputs_r>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	688e      	ldr	r6, [r1, #8]
 8007fda:	461f      	mov	r7, r3
 8007fdc:	42be      	cmp	r6, r7
 8007fde:	680b      	ldr	r3, [r1, #0]
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	4690      	mov	r8, r2
 8007fe6:	d82c      	bhi.n	8008042 <__ssputs_r+0x6e>
 8007fe8:	898a      	ldrh	r2, [r1, #12]
 8007fea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fee:	d026      	beq.n	800803e <__ssputs_r+0x6a>
 8007ff0:	6965      	ldr	r5, [r4, #20]
 8007ff2:	6909      	ldr	r1, [r1, #16]
 8007ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff8:	eba3 0901 	sub.w	r9, r3, r1
 8007ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008000:	1c7b      	adds	r3, r7, #1
 8008002:	444b      	add	r3, r9
 8008004:	106d      	asrs	r5, r5, #1
 8008006:	429d      	cmp	r5, r3
 8008008:	bf38      	it	cc
 800800a:	461d      	movcc	r5, r3
 800800c:	0553      	lsls	r3, r2, #21
 800800e:	d527      	bpl.n	8008060 <__ssputs_r+0x8c>
 8008010:	4629      	mov	r1, r5
 8008012:	f7ff fa87 	bl	8007524 <_malloc_r>
 8008016:	4606      	mov	r6, r0
 8008018:	b360      	cbz	r0, 8008074 <__ssputs_r+0xa0>
 800801a:	6921      	ldr	r1, [r4, #16]
 800801c:	464a      	mov	r2, r9
 800801e:	f7fe fe7f 	bl	8006d20 <memcpy>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	6126      	str	r6, [r4, #16]
 8008030:	6165      	str	r5, [r4, #20]
 8008032:	444e      	add	r6, r9
 8008034:	eba5 0509 	sub.w	r5, r5, r9
 8008038:	6026      	str	r6, [r4, #0]
 800803a:	60a5      	str	r5, [r4, #8]
 800803c:	463e      	mov	r6, r7
 800803e:	42be      	cmp	r6, r7
 8008040:	d900      	bls.n	8008044 <__ssputs_r+0x70>
 8008042:	463e      	mov	r6, r7
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	4632      	mov	r2, r6
 8008048:	4641      	mov	r1, r8
 800804a:	f000 fb6b 	bl	8008724 <memmove>
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	1b9b      	subs	r3, r3, r6
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	4433      	add	r3, r6
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	2000      	movs	r0, #0
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	462a      	mov	r2, r5
 8008062:	f000 fba6 	bl	80087b2 <_realloc_r>
 8008066:	4606      	mov	r6, r0
 8008068:	2800      	cmp	r0, #0
 800806a:	d1e0      	bne.n	800802e <__ssputs_r+0x5a>
 800806c:	6921      	ldr	r1, [r4, #16]
 800806e:	4650      	mov	r0, sl
 8008070:	f7fe fe8c 	bl	8006d8c <_free_r>
 8008074:	230c      	movs	r3, #12
 8008076:	f8ca 3000 	str.w	r3, [sl]
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	e7e9      	b.n	800805c <__ssputs_r+0x88>

08008088 <_svfiprintf_r>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4698      	mov	r8, r3
 800808e:	898b      	ldrh	r3, [r1, #12]
 8008090:	061b      	lsls	r3, r3, #24
 8008092:	b09d      	sub	sp, #116	; 0x74
 8008094:	4607      	mov	r7, r0
 8008096:	460d      	mov	r5, r1
 8008098:	4614      	mov	r4, r2
 800809a:	d50e      	bpl.n	80080ba <_svfiprintf_r+0x32>
 800809c:	690b      	ldr	r3, [r1, #16]
 800809e:	b963      	cbnz	r3, 80080ba <_svfiprintf_r+0x32>
 80080a0:	2140      	movs	r1, #64	; 0x40
 80080a2:	f7ff fa3f 	bl	8007524 <_malloc_r>
 80080a6:	6028      	str	r0, [r5, #0]
 80080a8:	6128      	str	r0, [r5, #16]
 80080aa:	b920      	cbnz	r0, 80080b6 <_svfiprintf_r+0x2e>
 80080ac:	230c      	movs	r3, #12
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e0d0      	b.n	8008258 <_svfiprintf_r+0x1d0>
 80080b6:	2340      	movs	r3, #64	; 0x40
 80080b8:	616b      	str	r3, [r5, #20]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	2320      	movs	r3, #32
 80080c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c8:	2330      	movs	r3, #48	; 0x30
 80080ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008270 <_svfiprintf_r+0x1e8>
 80080ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d2:	f04f 0901 	mov.w	r9, #1
 80080d6:	4623      	mov	r3, r4
 80080d8:	469a      	mov	sl, r3
 80080da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080de:	b10a      	cbz	r2, 80080e4 <_svfiprintf_r+0x5c>
 80080e0:	2a25      	cmp	r2, #37	; 0x25
 80080e2:	d1f9      	bne.n	80080d8 <_svfiprintf_r+0x50>
 80080e4:	ebba 0b04 	subs.w	fp, sl, r4
 80080e8:	d00b      	beq.n	8008102 <_svfiprintf_r+0x7a>
 80080ea:	465b      	mov	r3, fp
 80080ec:	4622      	mov	r2, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff ff6f 	bl	8007fd4 <__ssputs_r>
 80080f6:	3001      	adds	r0, #1
 80080f8:	f000 80a9 	beq.w	800824e <_svfiprintf_r+0x1c6>
 80080fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fe:	445a      	add	r2, fp
 8008100:	9209      	str	r2, [sp, #36]	; 0x24
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a1 	beq.w	800824e <_svfiprintf_r+0x1c6>
 800810c:	2300      	movs	r3, #0
 800810e:	f04f 32ff 	mov.w	r2, #4294967295
 8008112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008116:	f10a 0a01 	add.w	sl, sl, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008122:	931a      	str	r3, [sp, #104]	; 0x68
 8008124:	4654      	mov	r4, sl
 8008126:	2205      	movs	r2, #5
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	4850      	ldr	r0, [pc, #320]	; (8008270 <_svfiprintf_r+0x1e8>)
 800812e:	f7f8 f857 	bl	80001e0 <memchr>
 8008132:	9a04      	ldr	r2, [sp, #16]
 8008134:	b9d8      	cbnz	r0, 800816e <_svfiprintf_r+0xe6>
 8008136:	06d0      	lsls	r0, r2, #27
 8008138:	bf44      	itt	mi
 800813a:	2320      	movmi	r3, #32
 800813c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008140:	0711      	lsls	r1, r2, #28
 8008142:	bf44      	itt	mi
 8008144:	232b      	movmi	r3, #43	; 0x2b
 8008146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b2a      	cmp	r3, #42	; 0x2a
 8008150:	d015      	beq.n	800817e <_svfiprintf_r+0xf6>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	4654      	mov	r4, sl
 8008156:	2000      	movs	r0, #0
 8008158:	f04f 0c0a 	mov.w	ip, #10
 800815c:	4621      	mov	r1, r4
 800815e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008162:	3b30      	subs	r3, #48	; 0x30
 8008164:	2b09      	cmp	r3, #9
 8008166:	d94d      	bls.n	8008204 <_svfiprintf_r+0x17c>
 8008168:	b1b0      	cbz	r0, 8008198 <_svfiprintf_r+0x110>
 800816a:	9207      	str	r2, [sp, #28]
 800816c:	e014      	b.n	8008198 <_svfiprintf_r+0x110>
 800816e:	eba0 0308 	sub.w	r3, r0, r8
 8008172:	fa09 f303 	lsl.w	r3, r9, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	46a2      	mov	sl, r4
 800817c:	e7d2      	b.n	8008124 <_svfiprintf_r+0x9c>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	1d19      	adds	r1, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbb      	ittet	lt
 800818a:	425b      	neglt	r3, r3
 800818c:	f042 0202 	orrlt.w	r2, r2, #2
 8008190:	9307      	strge	r3, [sp, #28]
 8008192:	9307      	strlt	r3, [sp, #28]
 8008194:	bfb8      	it	lt
 8008196:	9204      	strlt	r2, [sp, #16]
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	2b2e      	cmp	r3, #46	; 0x2e
 800819c:	d10c      	bne.n	80081b8 <_svfiprintf_r+0x130>
 800819e:	7863      	ldrb	r3, [r4, #1]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d134      	bne.n	800820e <_svfiprintf_r+0x186>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d1a      	adds	r2, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9203      	str	r2, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfb8      	it	lt
 80081b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b4:	3402      	adds	r4, #2
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008280 <_svfiprintf_r+0x1f8>
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	2203      	movs	r2, #3
 80081c0:	4650      	mov	r0, sl
 80081c2:	f7f8 f80d 	bl	80001e0 <memchr>
 80081c6:	b138      	cbz	r0, 80081d8 <_svfiprintf_r+0x150>
 80081c8:	9b04      	ldr	r3, [sp, #16]
 80081ca:	eba0 000a 	sub.w	r0, r0, sl
 80081ce:	2240      	movs	r2, #64	; 0x40
 80081d0:	4082      	lsls	r2, r0
 80081d2:	4313      	orrs	r3, r2
 80081d4:	3401      	adds	r4, #1
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081dc:	4825      	ldr	r0, [pc, #148]	; (8008274 <_svfiprintf_r+0x1ec>)
 80081de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e2:	2206      	movs	r2, #6
 80081e4:	f7f7 fffc 	bl	80001e0 <memchr>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d038      	beq.n	800825e <_svfiprintf_r+0x1d6>
 80081ec:	4b22      	ldr	r3, [pc, #136]	; (8008278 <_svfiprintf_r+0x1f0>)
 80081ee:	bb1b      	cbnz	r3, 8008238 <_svfiprintf_r+0x1b0>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	3307      	adds	r3, #7
 80081f4:	f023 0307 	bic.w	r3, r3, #7
 80081f8:	3308      	adds	r3, #8
 80081fa:	9303      	str	r3, [sp, #12]
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	4433      	add	r3, r6
 8008200:	9309      	str	r3, [sp, #36]	; 0x24
 8008202:	e768      	b.n	80080d6 <_svfiprintf_r+0x4e>
 8008204:	fb0c 3202 	mla	r2, ip, r2, r3
 8008208:	460c      	mov	r4, r1
 800820a:	2001      	movs	r0, #1
 800820c:	e7a6      	b.n	800815c <_svfiprintf_r+0xd4>
 800820e:	2300      	movs	r3, #0
 8008210:	3401      	adds	r4, #1
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	4619      	mov	r1, r3
 8008216:	f04f 0c0a 	mov.w	ip, #10
 800821a:	4620      	mov	r0, r4
 800821c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008220:	3a30      	subs	r2, #48	; 0x30
 8008222:	2a09      	cmp	r2, #9
 8008224:	d903      	bls.n	800822e <_svfiprintf_r+0x1a6>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0c6      	beq.n	80081b8 <_svfiprintf_r+0x130>
 800822a:	9105      	str	r1, [sp, #20]
 800822c:	e7c4      	b.n	80081b8 <_svfiprintf_r+0x130>
 800822e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008232:	4604      	mov	r4, r0
 8008234:	2301      	movs	r3, #1
 8008236:	e7f0      	b.n	800821a <_svfiprintf_r+0x192>
 8008238:	ab03      	add	r3, sp, #12
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	462a      	mov	r2, r5
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <_svfiprintf_r+0x1f4>)
 8008240:	a904      	add	r1, sp, #16
 8008242:	4638      	mov	r0, r7
 8008244:	f3af 8000 	nop.w
 8008248:	1c42      	adds	r2, r0, #1
 800824a:	4606      	mov	r6, r0
 800824c:	d1d6      	bne.n	80081fc <_svfiprintf_r+0x174>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	065b      	lsls	r3, r3, #25
 8008252:	f53f af2d 	bmi.w	80080b0 <_svfiprintf_r+0x28>
 8008256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008258:	b01d      	add	sp, #116	; 0x74
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	ab03      	add	r3, sp, #12
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	462a      	mov	r2, r5
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <_svfiprintf_r+0x1f4>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	4638      	mov	r0, r7
 800826a:	f000 f879 	bl	8008360 <_printf_i>
 800826e:	e7eb      	b.n	8008248 <_svfiprintf_r+0x1c0>
 8008270:	080093ed 	.word	0x080093ed
 8008274:	080093f7 	.word	0x080093f7
 8008278:	00000000 	.word	0x00000000
 800827c:	08007fd5 	.word	0x08007fd5
 8008280:	080093f3 	.word	0x080093f3

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4616      	mov	r6, r2
 800828a:	4699      	mov	r9, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008294:	4293      	cmp	r3, r2
 8008296:	bfb8      	it	lt
 8008298:	4613      	movlt	r3, r2
 800829a:	6033      	str	r3, [r6, #0]
 800829c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a0:	4607      	mov	r7, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b10a      	cbz	r2, 80082aa <_printf_common+0x26>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	6833      	ldrmi	r3, [r6, #0]
 80082b2:	3302      	addmi	r3, #2
 80082b4:	6033      	strmi	r3, [r6, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	f015 0506 	ands.w	r5, r5, #6
 80082bc:	d106      	bne.n	80082cc <_printf_common+0x48>
 80082be:	f104 0a19 	add.w	sl, r4, #25
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6832      	ldr	r2, [r6, #0]
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc26      	bgt.n	800831a <_printf_common+0x96>
 80082cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d0:	1e13      	subs	r3, r2, #0
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	2301      	movne	r3, #1
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d42b      	bmi.n	8008334 <_printf_common+0xb0>
 80082dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e0:	4649      	mov	r1, r9
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d01e      	beq.n	8008328 <_printf_common+0xa4>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	6922      	ldr	r2, [r4, #16]
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	bf02      	ittt	eq
 80082f6:	68e5      	ldreq	r5, [r4, #12]
 80082f8:	6833      	ldreq	r3, [r6, #0]
 80082fa:	1aed      	subeq	r5, r5, r3
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	bf0c      	ite	eq
 8008300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008304:	2500      	movne	r5, #0
 8008306:	4293      	cmp	r3, r2
 8008308:	bfc4      	itt	gt
 800830a:	1a9b      	subgt	r3, r3, r2
 800830c:	18ed      	addgt	r5, r5, r3
 800830e:	2600      	movs	r6, #0
 8008310:	341a      	adds	r4, #26
 8008312:	42b5      	cmp	r5, r6
 8008314:	d11a      	bne.n	800834c <_printf_common+0xc8>
 8008316:	2000      	movs	r0, #0
 8008318:	e008      	b.n	800832c <_printf_common+0xa8>
 800831a:	2301      	movs	r3, #1
 800831c:	4652      	mov	r2, sl
 800831e:	4649      	mov	r1, r9
 8008320:	4638      	mov	r0, r7
 8008322:	47c0      	blx	r8
 8008324:	3001      	adds	r0, #1
 8008326:	d103      	bne.n	8008330 <_printf_common+0xac>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	3501      	adds	r5, #1
 8008332:	e7c6      	b.n	80082c2 <_printf_common+0x3e>
 8008334:	18e1      	adds	r1, r4, r3
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	2030      	movs	r0, #48	; 0x30
 800833a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800833e:	4422      	add	r2, r4
 8008340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008348:	3302      	adds	r3, #2
 800834a:	e7c7      	b.n	80082dc <_printf_common+0x58>
 800834c:	2301      	movs	r3, #1
 800834e:	4622      	mov	r2, r4
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d0e6      	beq.n	8008328 <_printf_common+0xa4>
 800835a:	3601      	adds	r6, #1
 800835c:	e7d9      	b.n	8008312 <_printf_common+0x8e>
	...

08008360 <_printf_i>:
 8008360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	7e0f      	ldrb	r7, [r1, #24]
 8008366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008368:	2f78      	cmp	r7, #120	; 0x78
 800836a:	4691      	mov	r9, r2
 800836c:	4680      	mov	r8, r0
 800836e:	460c      	mov	r4, r1
 8008370:	469a      	mov	sl, r3
 8008372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008376:	d807      	bhi.n	8008388 <_printf_i+0x28>
 8008378:	2f62      	cmp	r7, #98	; 0x62
 800837a:	d80a      	bhi.n	8008392 <_printf_i+0x32>
 800837c:	2f00      	cmp	r7, #0
 800837e:	f000 80d4 	beq.w	800852a <_printf_i+0x1ca>
 8008382:	2f58      	cmp	r7, #88	; 0x58
 8008384:	f000 80c0 	beq.w	8008508 <_printf_i+0x1a8>
 8008388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800838c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008390:	e03a      	b.n	8008408 <_printf_i+0xa8>
 8008392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008396:	2b15      	cmp	r3, #21
 8008398:	d8f6      	bhi.n	8008388 <_printf_i+0x28>
 800839a:	a101      	add	r1, pc, #4	; (adr r1, 80083a0 <_printf_i+0x40>)
 800839c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083a0:	080083f9 	.word	0x080083f9
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	08008389 	.word	0x08008389
 80083ac:	08008389 	.word	0x08008389
 80083b0:	08008389 	.word	0x08008389
 80083b4:	08008389 	.word	0x08008389
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008389 	.word	0x08008389
 80083c0:	08008389 	.word	0x08008389
 80083c4:	08008389 	.word	0x08008389
 80083c8:	08008389 	.word	0x08008389
 80083cc:	08008511 	.word	0x08008511
 80083d0:	08008439 	.word	0x08008439
 80083d4:	080084cb 	.word	0x080084cb
 80083d8:	08008389 	.word	0x08008389
 80083dc:	08008389 	.word	0x08008389
 80083e0:	08008533 	.word	0x08008533
 80083e4:	08008389 	.word	0x08008389
 80083e8:	08008439 	.word	0x08008439
 80083ec:	08008389 	.word	0x08008389
 80083f0:	08008389 	.word	0x08008389
 80083f4:	080084d3 	.word	0x080084d3
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	602a      	str	r2, [r5, #0]
 8008400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008408:	2301      	movs	r3, #1
 800840a:	e09f      	b.n	800854c <_printf_i+0x1ec>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	0607      	lsls	r7, r0, #24
 8008412:	f103 0104 	add.w	r1, r3, #4
 8008416:	6029      	str	r1, [r5, #0]
 8008418:	d501      	bpl.n	800841e <_printf_i+0xbe>
 800841a:	681e      	ldr	r6, [r3, #0]
 800841c:	e003      	b.n	8008426 <_printf_i+0xc6>
 800841e:	0646      	lsls	r6, r0, #25
 8008420:	d5fb      	bpl.n	800841a <_printf_i+0xba>
 8008422:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008426:	2e00      	cmp	r6, #0
 8008428:	da03      	bge.n	8008432 <_printf_i+0xd2>
 800842a:	232d      	movs	r3, #45	; 0x2d
 800842c:	4276      	negs	r6, r6
 800842e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008432:	485a      	ldr	r0, [pc, #360]	; (800859c <_printf_i+0x23c>)
 8008434:	230a      	movs	r3, #10
 8008436:	e012      	b.n	800845e <_printf_i+0xfe>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	6029      	str	r1, [r5, #0]
 8008440:	0605      	lsls	r5, r0, #24
 8008442:	d501      	bpl.n	8008448 <_printf_i+0xe8>
 8008444:	681e      	ldr	r6, [r3, #0]
 8008446:	e002      	b.n	800844e <_printf_i+0xee>
 8008448:	0641      	lsls	r1, r0, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0xe4>
 800844c:	881e      	ldrh	r6, [r3, #0]
 800844e:	4853      	ldr	r0, [pc, #332]	; (800859c <_printf_i+0x23c>)
 8008450:	2f6f      	cmp	r7, #111	; 0x6f
 8008452:	bf0c      	ite	eq
 8008454:	2308      	moveq	r3, #8
 8008456:	230a      	movne	r3, #10
 8008458:	2100      	movs	r1, #0
 800845a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800845e:	6865      	ldr	r5, [r4, #4]
 8008460:	60a5      	str	r5, [r4, #8]
 8008462:	2d00      	cmp	r5, #0
 8008464:	bfa2      	ittt	ge
 8008466:	6821      	ldrge	r1, [r4, #0]
 8008468:	f021 0104 	bicge.w	r1, r1, #4
 800846c:	6021      	strge	r1, [r4, #0]
 800846e:	b90e      	cbnz	r6, 8008474 <_printf_i+0x114>
 8008470:	2d00      	cmp	r5, #0
 8008472:	d04b      	beq.n	800850c <_printf_i+0x1ac>
 8008474:	4615      	mov	r5, r2
 8008476:	fbb6 f1f3 	udiv	r1, r6, r3
 800847a:	fb03 6711 	mls	r7, r3, r1, r6
 800847e:	5dc7      	ldrb	r7, [r0, r7]
 8008480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008484:	4637      	mov	r7, r6
 8008486:	42bb      	cmp	r3, r7
 8008488:	460e      	mov	r6, r1
 800848a:	d9f4      	bls.n	8008476 <_printf_i+0x116>
 800848c:	2b08      	cmp	r3, #8
 800848e:	d10b      	bne.n	80084a8 <_printf_i+0x148>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07de      	lsls	r6, r3, #31
 8008494:	d508      	bpl.n	80084a8 <_printf_i+0x148>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	6861      	ldr	r1, [r4, #4]
 800849a:	4299      	cmp	r1, r3
 800849c:	bfde      	ittt	le
 800849e:	2330      	movle	r3, #48	; 0x30
 80084a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084a8:	1b52      	subs	r2, r2, r5
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	f8cd a000 	str.w	sl, [sp]
 80084b0:	464b      	mov	r3, r9
 80084b2:	aa03      	add	r2, sp, #12
 80084b4:	4621      	mov	r1, r4
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7ff fee4 	bl	8008284 <_printf_common>
 80084bc:	3001      	adds	r0, #1
 80084be:	d14a      	bne.n	8008556 <_printf_i+0x1f6>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	b004      	add	sp, #16
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	f043 0320 	orr.w	r3, r3, #32
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	4833      	ldr	r0, [pc, #204]	; (80085a0 <_printf_i+0x240>)
 80084d4:	2778      	movs	r7, #120	; 0x78
 80084d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6829      	ldr	r1, [r5, #0]
 80084de:	061f      	lsls	r7, r3, #24
 80084e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80084e4:	d402      	bmi.n	80084ec <_printf_i+0x18c>
 80084e6:	065f      	lsls	r7, r3, #25
 80084e8:	bf48      	it	mi
 80084ea:	b2b6      	uxthmi	r6, r6
 80084ec:	07df      	lsls	r7, r3, #31
 80084ee:	bf48      	it	mi
 80084f0:	f043 0320 	orrmi.w	r3, r3, #32
 80084f4:	6029      	str	r1, [r5, #0]
 80084f6:	bf48      	it	mi
 80084f8:	6023      	strmi	r3, [r4, #0]
 80084fa:	b91e      	cbnz	r6, 8008504 <_printf_i+0x1a4>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	f023 0320 	bic.w	r3, r3, #32
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	2310      	movs	r3, #16
 8008506:	e7a7      	b.n	8008458 <_printf_i+0xf8>
 8008508:	4824      	ldr	r0, [pc, #144]	; (800859c <_printf_i+0x23c>)
 800850a:	e7e4      	b.n	80084d6 <_printf_i+0x176>
 800850c:	4615      	mov	r5, r2
 800850e:	e7bd      	b.n	800848c <_printf_i+0x12c>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	6826      	ldr	r6, [r4, #0]
 8008514:	6961      	ldr	r1, [r4, #20]
 8008516:	1d18      	adds	r0, r3, #4
 8008518:	6028      	str	r0, [r5, #0]
 800851a:	0635      	lsls	r5, r6, #24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	d501      	bpl.n	8008524 <_printf_i+0x1c4>
 8008520:	6019      	str	r1, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0x1ca>
 8008524:	0670      	lsls	r0, r6, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0x1c0>
 8008528:	8019      	strh	r1, [r3, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	4615      	mov	r5, r2
 8008530:	e7bc      	b.n	80084ac <_printf_i+0x14c>
 8008532:	682b      	ldr	r3, [r5, #0]
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	602a      	str	r2, [r5, #0]
 8008538:	681d      	ldr	r5, [r3, #0]
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	2100      	movs	r1, #0
 800853e:	4628      	mov	r0, r5
 8008540:	f7f7 fe4e 	bl	80001e0 <memchr>
 8008544:	b108      	cbz	r0, 800854a <_printf_i+0x1ea>
 8008546:	1b40      	subs	r0, r0, r5
 8008548:	6060      	str	r0, [r4, #4]
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	2300      	movs	r3, #0
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008554:	e7aa      	b.n	80084ac <_printf_i+0x14c>
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	462a      	mov	r2, r5
 800855a:	4649      	mov	r1, r9
 800855c:	4640      	mov	r0, r8
 800855e:	47d0      	blx	sl
 8008560:	3001      	adds	r0, #1
 8008562:	d0ad      	beq.n	80084c0 <_printf_i+0x160>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	079b      	lsls	r3, r3, #30
 8008568:	d413      	bmi.n	8008592 <_printf_i+0x232>
 800856a:	68e0      	ldr	r0, [r4, #12]
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	4298      	cmp	r0, r3
 8008570:	bfb8      	it	lt
 8008572:	4618      	movlt	r0, r3
 8008574:	e7a6      	b.n	80084c4 <_printf_i+0x164>
 8008576:	2301      	movs	r3, #1
 8008578:	4632      	mov	r2, r6
 800857a:	4649      	mov	r1, r9
 800857c:	4640      	mov	r0, r8
 800857e:	47d0      	blx	sl
 8008580:	3001      	adds	r0, #1
 8008582:	d09d      	beq.n	80084c0 <_printf_i+0x160>
 8008584:	3501      	adds	r5, #1
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	9903      	ldr	r1, [sp, #12]
 800858a:	1a5b      	subs	r3, r3, r1
 800858c:	42ab      	cmp	r3, r5
 800858e:	dcf2      	bgt.n	8008576 <_printf_i+0x216>
 8008590:	e7eb      	b.n	800856a <_printf_i+0x20a>
 8008592:	2500      	movs	r5, #0
 8008594:	f104 0619 	add.w	r6, r4, #25
 8008598:	e7f5      	b.n	8008586 <_printf_i+0x226>
 800859a:	bf00      	nop
 800859c:	080093fe 	.word	0x080093fe
 80085a0:	0800940f 	.word	0x0800940f

080085a4 <__sflush_r>:
 80085a4:	898a      	ldrh	r2, [r1, #12]
 80085a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085aa:	4605      	mov	r5, r0
 80085ac:	0710      	lsls	r0, r2, #28
 80085ae:	460c      	mov	r4, r1
 80085b0:	d458      	bmi.n	8008664 <__sflush_r+0xc0>
 80085b2:	684b      	ldr	r3, [r1, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc05      	bgt.n	80085c4 <__sflush_r+0x20>
 80085b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dc02      	bgt.n	80085c4 <__sflush_r+0x20>
 80085be:	2000      	movs	r0, #0
 80085c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d0f9      	beq.n	80085be <__sflush_r+0x1a>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d0:	682f      	ldr	r7, [r5, #0]
 80085d2:	6a21      	ldr	r1, [r4, #32]
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	d032      	beq.n	800863e <__sflush_r+0x9a>
 80085d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	075a      	lsls	r2, r3, #29
 80085de:	d505      	bpl.n	80085ec <__sflush_r+0x48>
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	1ac0      	subs	r0, r0, r3
 80085e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085e6:	b10b      	cbz	r3, 80085ec <__sflush_r+0x48>
 80085e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085ea:	1ac0      	subs	r0, r0, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	4602      	mov	r2, r0
 80085f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f2:	6a21      	ldr	r1, [r4, #32]
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b0      	blx	r6
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	d106      	bne.n	800860c <__sflush_r+0x68>
 80085fe:	6829      	ldr	r1, [r5, #0]
 8008600:	291d      	cmp	r1, #29
 8008602:	d82b      	bhi.n	800865c <__sflush_r+0xb8>
 8008604:	4a29      	ldr	r2, [pc, #164]	; (80086ac <__sflush_r+0x108>)
 8008606:	410a      	asrs	r2, r1
 8008608:	07d6      	lsls	r6, r2, #31
 800860a:	d427      	bmi.n	800865c <__sflush_r+0xb8>
 800860c:	2200      	movs	r2, #0
 800860e:	6062      	str	r2, [r4, #4]
 8008610:	04d9      	lsls	r1, r3, #19
 8008612:	6922      	ldr	r2, [r4, #16]
 8008614:	6022      	str	r2, [r4, #0]
 8008616:	d504      	bpl.n	8008622 <__sflush_r+0x7e>
 8008618:	1c42      	adds	r2, r0, #1
 800861a:	d101      	bne.n	8008620 <__sflush_r+0x7c>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b903      	cbnz	r3, 8008622 <__sflush_r+0x7e>
 8008620:	6560      	str	r0, [r4, #84]	; 0x54
 8008622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008624:	602f      	str	r7, [r5, #0]
 8008626:	2900      	cmp	r1, #0
 8008628:	d0c9      	beq.n	80085be <__sflush_r+0x1a>
 800862a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862e:	4299      	cmp	r1, r3
 8008630:	d002      	beq.n	8008638 <__sflush_r+0x94>
 8008632:	4628      	mov	r0, r5
 8008634:	f7fe fbaa 	bl	8006d8c <_free_r>
 8008638:	2000      	movs	r0, #0
 800863a:	6360      	str	r0, [r4, #52]	; 0x34
 800863c:	e7c0      	b.n	80085c0 <__sflush_r+0x1c>
 800863e:	2301      	movs	r3, #1
 8008640:	4628      	mov	r0, r5
 8008642:	47b0      	blx	r6
 8008644:	1c41      	adds	r1, r0, #1
 8008646:	d1c8      	bne.n	80085da <__sflush_r+0x36>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0c5      	beq.n	80085da <__sflush_r+0x36>
 800864e:	2b1d      	cmp	r3, #29
 8008650:	d001      	beq.n	8008656 <__sflush_r+0xb2>
 8008652:	2b16      	cmp	r3, #22
 8008654:	d101      	bne.n	800865a <__sflush_r+0xb6>
 8008656:	602f      	str	r7, [r5, #0]
 8008658:	e7b1      	b.n	80085be <__sflush_r+0x1a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	e7ad      	b.n	80085c0 <__sflush_r+0x1c>
 8008664:	690f      	ldr	r7, [r1, #16]
 8008666:	2f00      	cmp	r7, #0
 8008668:	d0a9      	beq.n	80085be <__sflush_r+0x1a>
 800866a:	0793      	lsls	r3, r2, #30
 800866c:	680e      	ldr	r6, [r1, #0]
 800866e:	bf08      	it	eq
 8008670:	694b      	ldreq	r3, [r1, #20]
 8008672:	600f      	str	r7, [r1, #0]
 8008674:	bf18      	it	ne
 8008676:	2300      	movne	r3, #0
 8008678:	eba6 0807 	sub.w	r8, r6, r7
 800867c:	608b      	str	r3, [r1, #8]
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	dd9c      	ble.n	80085be <__sflush_r+0x1a>
 8008684:	6a21      	ldr	r1, [r4, #32]
 8008686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008688:	4643      	mov	r3, r8
 800868a:	463a      	mov	r2, r7
 800868c:	4628      	mov	r0, r5
 800868e:	47b0      	blx	r6
 8008690:	2800      	cmp	r0, #0
 8008692:	dc06      	bgt.n	80086a2 <__sflush_r+0xfe>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	f04f 30ff 	mov.w	r0, #4294967295
 80086a0:	e78e      	b.n	80085c0 <__sflush_r+0x1c>
 80086a2:	4407      	add	r7, r0
 80086a4:	eba8 0800 	sub.w	r8, r8, r0
 80086a8:	e7e9      	b.n	800867e <__sflush_r+0xda>
 80086aa:	bf00      	nop
 80086ac:	dfbffffe 	.word	0xdfbffffe

080086b0 <_fflush_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	690b      	ldr	r3, [r1, #16]
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b913      	cbnz	r3, 80086c0 <_fflush_r+0x10>
 80086ba:	2500      	movs	r5, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	b118      	cbz	r0, 80086ca <_fflush_r+0x1a>
 80086c2:	6a03      	ldr	r3, [r0, #32]
 80086c4:	b90b      	cbnz	r3, 80086ca <_fflush_r+0x1a>
 80086c6:	f7fe f985 	bl	80069d4 <__sinit>
 80086ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f3      	beq.n	80086ba <_fflush_r+0xa>
 80086d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086d4:	07d0      	lsls	r0, r2, #31
 80086d6:	d404      	bmi.n	80086e2 <_fflush_r+0x32>
 80086d8:	0599      	lsls	r1, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_fflush_r+0x32>
 80086dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086de:	f7fe fb1d 	bl	8006d1c <__retarget_lock_acquire_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	4621      	mov	r1, r4
 80086e6:	f7ff ff5d 	bl	80085a4 <__sflush_r>
 80086ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ec:	07da      	lsls	r2, r3, #31
 80086ee:	4605      	mov	r5, r0
 80086f0:	d4e4      	bmi.n	80086bc <_fflush_r+0xc>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	059b      	lsls	r3, r3, #22
 80086f6:	d4e1      	bmi.n	80086bc <_fflush_r+0xc>
 80086f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086fa:	f7fe fb10 	bl	8006d1e <__retarget_lock_release_recursive>
 80086fe:	e7dd      	b.n	80086bc <_fflush_r+0xc>

08008700 <fiprintf>:
 8008700:	b40e      	push	{r1, r2, r3}
 8008702:	b503      	push	{r0, r1, lr}
 8008704:	4601      	mov	r1, r0
 8008706:	ab03      	add	r3, sp, #12
 8008708:	4805      	ldr	r0, [pc, #20]	; (8008720 <fiprintf+0x20>)
 800870a:	f853 2b04 	ldr.w	r2, [r3], #4
 800870e:	6800      	ldr	r0, [r0, #0]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f000 f8a7 	bl	8008864 <_vfiprintf_r>
 8008716:	b002      	add	sp, #8
 8008718:	f85d eb04 	ldr.w	lr, [sp], #4
 800871c:	b003      	add	sp, #12
 800871e:	4770      	bx	lr
 8008720:	200002bc 	.word	0x200002bc

08008724 <memmove>:
 8008724:	4288      	cmp	r0, r1
 8008726:	b510      	push	{r4, lr}
 8008728:	eb01 0402 	add.w	r4, r1, r2
 800872c:	d902      	bls.n	8008734 <memmove+0x10>
 800872e:	4284      	cmp	r4, r0
 8008730:	4623      	mov	r3, r4
 8008732:	d807      	bhi.n	8008744 <memmove+0x20>
 8008734:	1e43      	subs	r3, r0, #1
 8008736:	42a1      	cmp	r1, r4
 8008738:	d008      	beq.n	800874c <memmove+0x28>
 800873a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008742:	e7f8      	b.n	8008736 <memmove+0x12>
 8008744:	4402      	add	r2, r0
 8008746:	4601      	mov	r1, r0
 8008748:	428a      	cmp	r2, r1
 800874a:	d100      	bne.n	800874e <memmove+0x2a>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008756:	e7f7      	b.n	8008748 <memmove+0x24>

08008758 <_sbrk_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_sbrk_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f9 fc48 	bl	8001ff8 <_sbrk>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_sbrk_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_sbrk_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	200006d8 	.word	0x200006d8

08008778 <abort>:
 8008778:	b508      	push	{r3, lr}
 800877a:	2006      	movs	r0, #6
 800877c:	f000 fa4a 	bl	8008c14 <raise>
 8008780:	2001      	movs	r0, #1
 8008782:	f7f9 fbc1 	bl	8001f08 <_exit>

08008786 <_calloc_r>:
 8008786:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008788:	fba1 2402 	umull	r2, r4, r1, r2
 800878c:	b94c      	cbnz	r4, 80087a2 <_calloc_r+0x1c>
 800878e:	4611      	mov	r1, r2
 8008790:	9201      	str	r2, [sp, #4]
 8008792:	f7fe fec7 	bl	8007524 <_malloc_r>
 8008796:	9a01      	ldr	r2, [sp, #4]
 8008798:	4605      	mov	r5, r0
 800879a:	b930      	cbnz	r0, 80087aa <_calloc_r+0x24>
 800879c:	4628      	mov	r0, r5
 800879e:	b003      	add	sp, #12
 80087a0:	bd30      	pop	{r4, r5, pc}
 80087a2:	220c      	movs	r2, #12
 80087a4:	6002      	str	r2, [r0, #0]
 80087a6:	2500      	movs	r5, #0
 80087a8:	e7f8      	b.n	800879c <_calloc_r+0x16>
 80087aa:	4621      	mov	r1, r4
 80087ac:	f7fe f9ab 	bl	8006b06 <memset>
 80087b0:	e7f4      	b.n	800879c <_calloc_r+0x16>

080087b2 <_realloc_r>:
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	4680      	mov	r8, r0
 80087b8:	4614      	mov	r4, r2
 80087ba:	460e      	mov	r6, r1
 80087bc:	b921      	cbnz	r1, 80087c8 <_realloc_r+0x16>
 80087be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c2:	4611      	mov	r1, r2
 80087c4:	f7fe beae 	b.w	8007524 <_malloc_r>
 80087c8:	b92a      	cbnz	r2, 80087d6 <_realloc_r+0x24>
 80087ca:	f7fe fadf 	bl	8006d8c <_free_r>
 80087ce:	4625      	mov	r5, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d6:	f000 fa39 	bl	8008c4c <_malloc_usable_size_r>
 80087da:	4284      	cmp	r4, r0
 80087dc:	4607      	mov	r7, r0
 80087de:	d802      	bhi.n	80087e6 <_realloc_r+0x34>
 80087e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087e4:	d812      	bhi.n	800880c <_realloc_r+0x5a>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4640      	mov	r0, r8
 80087ea:	f7fe fe9b 	bl	8007524 <_malloc_r>
 80087ee:	4605      	mov	r5, r0
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d0ed      	beq.n	80087d0 <_realloc_r+0x1e>
 80087f4:	42bc      	cmp	r4, r7
 80087f6:	4622      	mov	r2, r4
 80087f8:	4631      	mov	r1, r6
 80087fa:	bf28      	it	cs
 80087fc:	463a      	movcs	r2, r7
 80087fe:	f7fe fa8f 	bl	8006d20 <memcpy>
 8008802:	4631      	mov	r1, r6
 8008804:	4640      	mov	r0, r8
 8008806:	f7fe fac1 	bl	8006d8c <_free_r>
 800880a:	e7e1      	b.n	80087d0 <_realloc_r+0x1e>
 800880c:	4635      	mov	r5, r6
 800880e:	e7df      	b.n	80087d0 <_realloc_r+0x1e>

08008810 <__sfputc_r>:
 8008810:	6893      	ldr	r3, [r2, #8]
 8008812:	3b01      	subs	r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	b410      	push	{r4}
 8008818:	6093      	str	r3, [r2, #8]
 800881a:	da08      	bge.n	800882e <__sfputc_r+0x1e>
 800881c:	6994      	ldr	r4, [r2, #24]
 800881e:	42a3      	cmp	r3, r4
 8008820:	db01      	blt.n	8008826 <__sfputc_r+0x16>
 8008822:	290a      	cmp	r1, #10
 8008824:	d103      	bne.n	800882e <__sfputc_r+0x1e>
 8008826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800882a:	f000 b935 	b.w	8008a98 <__swbuf_r>
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	1c58      	adds	r0, r3, #1
 8008832:	6010      	str	r0, [r2, #0]
 8008834:	7019      	strb	r1, [r3, #0]
 8008836:	4608      	mov	r0, r1
 8008838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883c:	4770      	bx	lr

0800883e <__sfputs_r>:
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008840:	4606      	mov	r6, r0
 8008842:	460f      	mov	r7, r1
 8008844:	4614      	mov	r4, r2
 8008846:	18d5      	adds	r5, r2, r3
 8008848:	42ac      	cmp	r4, r5
 800884a:	d101      	bne.n	8008850 <__sfputs_r+0x12>
 800884c:	2000      	movs	r0, #0
 800884e:	e007      	b.n	8008860 <__sfputs_r+0x22>
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	463a      	mov	r2, r7
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ffda 	bl	8008810 <__sfputc_r>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d1f3      	bne.n	8008848 <__sfputs_r+0xa>
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008864 <_vfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	460d      	mov	r5, r1
 800886a:	b09d      	sub	sp, #116	; 0x74
 800886c:	4614      	mov	r4, r2
 800886e:	4698      	mov	r8, r3
 8008870:	4606      	mov	r6, r0
 8008872:	b118      	cbz	r0, 800887c <_vfiprintf_r+0x18>
 8008874:	6a03      	ldr	r3, [r0, #32]
 8008876:	b90b      	cbnz	r3, 800887c <_vfiprintf_r+0x18>
 8008878:	f7fe f8ac 	bl	80069d4 <__sinit>
 800887c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800887e:	07d9      	lsls	r1, r3, #31
 8008880:	d405      	bmi.n	800888e <_vfiprintf_r+0x2a>
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	059a      	lsls	r2, r3, #22
 8008886:	d402      	bmi.n	800888e <_vfiprintf_r+0x2a>
 8008888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888a:	f7fe fa47 	bl	8006d1c <__retarget_lock_acquire_recursive>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	071b      	lsls	r3, r3, #28
 8008892:	d501      	bpl.n	8008898 <_vfiprintf_r+0x34>
 8008894:	692b      	ldr	r3, [r5, #16]
 8008896:	b99b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x5c>
 8008898:	4629      	mov	r1, r5
 800889a:	4630      	mov	r0, r6
 800889c:	f000 f93a 	bl	8008b14 <__swsetup_r>
 80088a0:	b170      	cbz	r0, 80088c0 <_vfiprintf_r+0x5c>
 80088a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a4:	07dc      	lsls	r4, r3, #31
 80088a6:	d504      	bpl.n	80088b2 <_vfiprintf_r+0x4e>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b01d      	add	sp, #116	; 0x74
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	0598      	lsls	r0, r3, #22
 80088b6:	d4f7      	bmi.n	80088a8 <_vfiprintf_r+0x44>
 80088b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ba:	f7fe fa30 	bl	8006d1e <__retarget_lock_release_recursive>
 80088be:	e7f3      	b.n	80088a8 <_vfiprintf_r+0x44>
 80088c0:	2300      	movs	r3, #0
 80088c2:	9309      	str	r3, [sp, #36]	; 0x24
 80088c4:	2320      	movs	r3, #32
 80088c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ce:	2330      	movs	r3, #48	; 0x30
 80088d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a84 <_vfiprintf_r+0x220>
 80088d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d8:	f04f 0901 	mov.w	r9, #1
 80088dc:	4623      	mov	r3, r4
 80088de:	469a      	mov	sl, r3
 80088e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e4:	b10a      	cbz	r2, 80088ea <_vfiprintf_r+0x86>
 80088e6:	2a25      	cmp	r2, #37	; 0x25
 80088e8:	d1f9      	bne.n	80088de <_vfiprintf_r+0x7a>
 80088ea:	ebba 0b04 	subs.w	fp, sl, r4
 80088ee:	d00b      	beq.n	8008908 <_vfiprintf_r+0xa4>
 80088f0:	465b      	mov	r3, fp
 80088f2:	4622      	mov	r2, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ffa1 	bl	800883e <__sfputs_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	f000 80a9 	beq.w	8008a54 <_vfiprintf_r+0x1f0>
 8008902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008904:	445a      	add	r2, fp
 8008906:	9209      	str	r2, [sp, #36]	; 0x24
 8008908:	f89a 3000 	ldrb.w	r3, [sl]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80a1 	beq.w	8008a54 <_vfiprintf_r+0x1f0>
 8008912:	2300      	movs	r3, #0
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800891c:	f10a 0a01 	add.w	sl, sl, #1
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9307      	str	r3, [sp, #28]
 8008924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008928:	931a      	str	r3, [sp, #104]	; 0x68
 800892a:	4654      	mov	r4, sl
 800892c:	2205      	movs	r2, #5
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	4854      	ldr	r0, [pc, #336]	; (8008a84 <_vfiprintf_r+0x220>)
 8008934:	f7f7 fc54 	bl	80001e0 <memchr>
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	b9d8      	cbnz	r0, 8008974 <_vfiprintf_r+0x110>
 800893c:	06d1      	lsls	r1, r2, #27
 800893e:	bf44      	itt	mi
 8008940:	2320      	movmi	r3, #32
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008946:	0713      	lsls	r3, r2, #28
 8008948:	bf44      	itt	mi
 800894a:	232b      	movmi	r3, #43	; 0x2b
 800894c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008950:	f89a 3000 	ldrb.w	r3, [sl]
 8008954:	2b2a      	cmp	r3, #42	; 0x2a
 8008956:	d015      	beq.n	8008984 <_vfiprintf_r+0x120>
 8008958:	9a07      	ldr	r2, [sp, #28]
 800895a:	4654      	mov	r4, sl
 800895c:	2000      	movs	r0, #0
 800895e:	f04f 0c0a 	mov.w	ip, #10
 8008962:	4621      	mov	r1, r4
 8008964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008968:	3b30      	subs	r3, #48	; 0x30
 800896a:	2b09      	cmp	r3, #9
 800896c:	d94d      	bls.n	8008a0a <_vfiprintf_r+0x1a6>
 800896e:	b1b0      	cbz	r0, 800899e <_vfiprintf_r+0x13a>
 8008970:	9207      	str	r2, [sp, #28]
 8008972:	e014      	b.n	800899e <_vfiprintf_r+0x13a>
 8008974:	eba0 0308 	sub.w	r3, r0, r8
 8008978:	fa09 f303 	lsl.w	r3, r9, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	46a2      	mov	sl, r4
 8008982:	e7d2      	b.n	800892a <_vfiprintf_r+0xc6>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d19      	adds	r1, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9103      	str	r1, [sp, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfbb      	ittet	lt
 8008990:	425b      	neglt	r3, r3
 8008992:	f042 0202 	orrlt.w	r2, r2, #2
 8008996:	9307      	strge	r3, [sp, #28]
 8008998:	9307      	strlt	r3, [sp, #28]
 800899a:	bfb8      	it	lt
 800899c:	9204      	strlt	r2, [sp, #16]
 800899e:	7823      	ldrb	r3, [r4, #0]
 80089a0:	2b2e      	cmp	r3, #46	; 0x2e
 80089a2:	d10c      	bne.n	80089be <_vfiprintf_r+0x15a>
 80089a4:	7863      	ldrb	r3, [r4, #1]
 80089a6:	2b2a      	cmp	r3, #42	; 0x2a
 80089a8:	d134      	bne.n	8008a14 <_vfiprintf_r+0x1b0>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9203      	str	r2, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfb8      	it	lt
 80089b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ba:	3402      	adds	r4, #2
 80089bc:	9305      	str	r3, [sp, #20]
 80089be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a94 <_vfiprintf_r+0x230>
 80089c2:	7821      	ldrb	r1, [r4, #0]
 80089c4:	2203      	movs	r2, #3
 80089c6:	4650      	mov	r0, sl
 80089c8:	f7f7 fc0a 	bl	80001e0 <memchr>
 80089cc:	b138      	cbz	r0, 80089de <_vfiprintf_r+0x17a>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	eba0 000a 	sub.w	r0, r0, sl
 80089d4:	2240      	movs	r2, #64	; 0x40
 80089d6:	4082      	lsls	r2, r0
 80089d8:	4313      	orrs	r3, r2
 80089da:	3401      	adds	r4, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e2:	4829      	ldr	r0, [pc, #164]	; (8008a88 <_vfiprintf_r+0x224>)
 80089e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e8:	2206      	movs	r2, #6
 80089ea:	f7f7 fbf9 	bl	80001e0 <memchr>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d03f      	beq.n	8008a72 <_vfiprintf_r+0x20e>
 80089f2:	4b26      	ldr	r3, [pc, #152]	; (8008a8c <_vfiprintf_r+0x228>)
 80089f4:	bb1b      	cbnz	r3, 8008a3e <_vfiprintf_r+0x1da>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	3307      	adds	r3, #7
 80089fa:	f023 0307 	bic.w	r3, r3, #7
 80089fe:	3308      	adds	r3, #8
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a04:	443b      	add	r3, r7
 8008a06:	9309      	str	r3, [sp, #36]	; 0x24
 8008a08:	e768      	b.n	80088dc <_vfiprintf_r+0x78>
 8008a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0e:	460c      	mov	r4, r1
 8008a10:	2001      	movs	r0, #1
 8008a12:	e7a6      	b.n	8008962 <_vfiprintf_r+0xfe>
 8008a14:	2300      	movs	r3, #0
 8008a16:	3401      	adds	r4, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f04f 0c0a 	mov.w	ip, #10
 8008a20:	4620      	mov	r0, r4
 8008a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a26:	3a30      	subs	r2, #48	; 0x30
 8008a28:	2a09      	cmp	r2, #9
 8008a2a:	d903      	bls.n	8008a34 <_vfiprintf_r+0x1d0>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0c6      	beq.n	80089be <_vfiprintf_r+0x15a>
 8008a30:	9105      	str	r1, [sp, #20]
 8008a32:	e7c4      	b.n	80089be <_vfiprintf_r+0x15a>
 8008a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a38:	4604      	mov	r4, r0
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e7f0      	b.n	8008a20 <_vfiprintf_r+0x1bc>
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	462a      	mov	r2, r5
 8008a44:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <_vfiprintf_r+0x22c>)
 8008a46:	a904      	add	r1, sp, #16
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f3af 8000 	nop.w
 8008a4e:	4607      	mov	r7, r0
 8008a50:	1c78      	adds	r0, r7, #1
 8008a52:	d1d6      	bne.n	8008a02 <_vfiprintf_r+0x19e>
 8008a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a56:	07d9      	lsls	r1, r3, #31
 8008a58:	d405      	bmi.n	8008a66 <_vfiprintf_r+0x202>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	059a      	lsls	r2, r3, #22
 8008a5e:	d402      	bmi.n	8008a66 <_vfiprintf_r+0x202>
 8008a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a62:	f7fe f95c 	bl	8006d1e <__retarget_lock_release_recursive>
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	065b      	lsls	r3, r3, #25
 8008a6a:	f53f af1d 	bmi.w	80088a8 <_vfiprintf_r+0x44>
 8008a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a70:	e71c      	b.n	80088ac <_vfiprintf_r+0x48>
 8008a72:	ab03      	add	r3, sp, #12
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	462a      	mov	r2, r5
 8008a78:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <_vfiprintf_r+0x22c>)
 8008a7a:	a904      	add	r1, sp, #16
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff fc6f 	bl	8008360 <_printf_i>
 8008a82:	e7e4      	b.n	8008a4e <_vfiprintf_r+0x1ea>
 8008a84:	080093ed 	.word	0x080093ed
 8008a88:	080093f7 	.word	0x080093f7
 8008a8c:	00000000 	.word	0x00000000
 8008a90:	0800883f 	.word	0x0800883f
 8008a94:	080093f3 	.word	0x080093f3

08008a98 <__swbuf_r>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	460e      	mov	r6, r1
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	b118      	cbz	r0, 8008aaa <__swbuf_r+0x12>
 8008aa2:	6a03      	ldr	r3, [r0, #32]
 8008aa4:	b90b      	cbnz	r3, 8008aaa <__swbuf_r+0x12>
 8008aa6:	f7fd ff95 	bl	80069d4 <__sinit>
 8008aaa:	69a3      	ldr	r3, [r4, #24]
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	071a      	lsls	r2, r3, #28
 8008ab2:	d525      	bpl.n	8008b00 <__swbuf_r+0x68>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	b31b      	cbz	r3, 8008b00 <__swbuf_r+0x68>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	6922      	ldr	r2, [r4, #16]
 8008abc:	1a98      	subs	r0, r3, r2
 8008abe:	6963      	ldr	r3, [r4, #20]
 8008ac0:	b2f6      	uxtb	r6, r6
 8008ac2:	4283      	cmp	r3, r0
 8008ac4:	4637      	mov	r7, r6
 8008ac6:	dc04      	bgt.n	8008ad2 <__swbuf_r+0x3a>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7ff fdf0 	bl	80086b0 <_fflush_r>
 8008ad0:	b9e0      	cbnz	r0, 8008b0c <__swbuf_r+0x74>
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	60a3      	str	r3, [r4, #8]
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	701e      	strb	r6, [r3, #0]
 8008ae0:	6962      	ldr	r2, [r4, #20]
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d004      	beq.n	8008af2 <__swbuf_r+0x5a>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d506      	bpl.n	8008afc <__swbuf_r+0x64>
 8008aee:	2e0a      	cmp	r6, #10
 8008af0:	d104      	bne.n	8008afc <__swbuf_r+0x64>
 8008af2:	4621      	mov	r1, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	f7ff fddb 	bl	80086b0 <_fflush_r>
 8008afa:	b938      	cbnz	r0, 8008b0c <__swbuf_r+0x74>
 8008afc:	4638      	mov	r0, r7
 8008afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b00:	4621      	mov	r1, r4
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f806 	bl	8008b14 <__swsetup_r>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d0d5      	beq.n	8008ab8 <__swbuf_r+0x20>
 8008b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b10:	e7f4      	b.n	8008afc <__swbuf_r+0x64>
	...

08008b14 <__swsetup_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <__swsetup_r+0xac>)
 8008b18:	4605      	mov	r5, r0
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	b118      	cbz	r0, 8008b28 <__swsetup_r+0x14>
 8008b20:	6a03      	ldr	r3, [r0, #32]
 8008b22:	b90b      	cbnz	r3, 8008b28 <__swsetup_r+0x14>
 8008b24:	f7fd ff56 	bl	80069d4 <__sinit>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b2e:	0718      	lsls	r0, r3, #28
 8008b30:	d422      	bmi.n	8008b78 <__swsetup_r+0x64>
 8008b32:	06d9      	lsls	r1, r3, #27
 8008b34:	d407      	bmi.n	8008b46 <__swsetup_r+0x32>
 8008b36:	2309      	movs	r3, #9
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e034      	b.n	8008bb0 <__swsetup_r+0x9c>
 8008b46:	0758      	lsls	r0, r3, #29
 8008b48:	d512      	bpl.n	8008b70 <__swsetup_r+0x5c>
 8008b4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b4c:	b141      	cbz	r1, 8008b60 <__swsetup_r+0x4c>
 8008b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d002      	beq.n	8008b5c <__swsetup_r+0x48>
 8008b56:	4628      	mov	r0, r5
 8008b58:	f7fe f918 	bl	8006d8c <_free_r>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6063      	str	r3, [r4, #4]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f043 0308 	orr.w	r3, r3, #8
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	b94b      	cbnz	r3, 8008b90 <__swsetup_r+0x7c>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b86:	d003      	beq.n	8008b90 <__swsetup_r+0x7c>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 f88c 	bl	8008ca8 <__smakebuf_r>
 8008b90:	89a0      	ldrh	r0, [r4, #12]
 8008b92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b96:	f010 0301 	ands.w	r3, r0, #1
 8008b9a:	d00a      	beq.n	8008bb2 <__swsetup_r+0x9e>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	6963      	ldr	r3, [r4, #20]
 8008ba2:	425b      	negs	r3, r3
 8008ba4:	61a3      	str	r3, [r4, #24]
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	b943      	cbnz	r3, 8008bbc <__swsetup_r+0xa8>
 8008baa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bae:	d1c4      	bne.n	8008b3a <__swsetup_r+0x26>
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	0781      	lsls	r1, r0, #30
 8008bb4:	bf58      	it	pl
 8008bb6:	6963      	ldrpl	r3, [r4, #20]
 8008bb8:	60a3      	str	r3, [r4, #8]
 8008bba:	e7f4      	b.n	8008ba6 <__swsetup_r+0x92>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e7f7      	b.n	8008bb0 <__swsetup_r+0x9c>
 8008bc0:	200002bc 	.word	0x200002bc

08008bc4 <_raise_r>:
 8008bc4:	291f      	cmp	r1, #31
 8008bc6:	b538      	push	{r3, r4, r5, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d904      	bls.n	8008bd8 <_raise_r+0x14>
 8008bce:	2316      	movs	r3, #22
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008bda:	b112      	cbz	r2, 8008be2 <_raise_r+0x1e>
 8008bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <_raise_r+0x32>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f830 	bl	8008c48 <_getpid_r>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4601      	mov	r1, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf2:	f000 b817 	b.w	8008c24 <_kill_r>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <_raise_r+0x4c>
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	d103      	bne.n	8008c06 <_raise_r+0x42>
 8008bfe:	2316      	movs	r3, #22
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7e7      	b.n	8008bd6 <_raise_r+0x12>
 8008c06:	2400      	movs	r4, #0
 8008c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	4798      	blx	r3
 8008c10:	2000      	movs	r0, #0
 8008c12:	e7e0      	b.n	8008bd6 <_raise_r+0x12>

08008c14 <raise>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <raise+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfd3 	b.w	8008bc4 <_raise_r>
 8008c1e:	bf00      	nop
 8008c20:	200002bc 	.word	0x200002bc

08008c24 <_kill_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_kill_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f9 f959 	bl	8001ee8 <_kill>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_kill_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_kill_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	200006d8 	.word	0x200006d8

08008c48 <_getpid_r>:
 8008c48:	f7f9 b946 	b.w	8001ed8 <_getpid>

08008c4c <_malloc_usable_size_r>:
 8008c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c50:	1f18      	subs	r0, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfbc      	itt	lt
 8008c56:	580b      	ldrlt	r3, [r1, r0]
 8008c58:	18c0      	addlt	r0, r0, r3
 8008c5a:	4770      	bx	lr

08008c5c <__swhatbuf_r>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	460c      	mov	r4, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	2900      	cmp	r1, #0
 8008c66:	b096      	sub	sp, #88	; 0x58
 8008c68:	4615      	mov	r5, r2
 8008c6a:	461e      	mov	r6, r3
 8008c6c:	da0d      	bge.n	8008c8a <__swhatbuf_r+0x2e>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c74:	f04f 0100 	mov.w	r1, #0
 8008c78:	bf0c      	ite	eq
 8008c7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c7e:	2340      	movne	r3, #64	; 0x40
 8008c80:	2000      	movs	r0, #0
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	b016      	add	sp, #88	; 0x58
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
 8008c8a:	466a      	mov	r2, sp
 8008c8c:	f000 f848 	bl	8008d20 <_fstat_r>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	dbec      	blt.n	8008c6e <__swhatbuf_r+0x12>
 8008c94:	9901      	ldr	r1, [sp, #4]
 8008c96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c9e:	4259      	negs	r1, r3
 8008ca0:	4159      	adcs	r1, r3
 8008ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca6:	e7eb      	b.n	8008c80 <__swhatbuf_r+0x24>

08008ca8 <__smakebuf_r>:
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cac:	079d      	lsls	r5, r3, #30
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d507      	bpl.n	8008cc4 <__smakebuf_r+0x1c>
 8008cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	ab01      	add	r3, sp, #4
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	f7ff ffc8 	bl	8008c5c <__swhatbuf_r>
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7fe fc27 	bl	8007524 <_malloc_r>
 8008cd6:	b948      	cbnz	r0, 8008cec <__smakebuf_r+0x44>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d4ef      	bmi.n	8008cc0 <__smakebuf_r+0x18>
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7e3      	b.n	8008cb4 <__smakebuf_r+0xc>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	6020      	str	r0, [r4, #0]
 8008cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	6163      	str	r3, [r4, #20]
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	6120      	str	r0, [r4, #16]
 8008cfe:	b15b      	cbz	r3, 8008d18 <__smakebuf_r+0x70>
 8008d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d04:	4630      	mov	r0, r6
 8008d06:	f000 f81d 	bl	8008d44 <_isatty_r>
 8008d0a:	b128      	cbz	r0, 8008d18 <__smakebuf_r+0x70>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	431d      	orrs	r5, r3
 8008d1c:	81a5      	strh	r5, [r4, #12]
 8008d1e:	e7cf      	b.n	8008cc0 <__smakebuf_r+0x18>

08008d20 <_fstat_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_fstat_r+0x20>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	f7f9 f93a 	bl	8001fa6 <_fstat>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d102      	bne.n	8008d3c <_fstat_r+0x1c>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b103      	cbz	r3, 8008d3c <_fstat_r+0x1c>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	200006d8 	.word	0x200006d8

08008d44 <_isatty_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_isatty_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f9 f939 	bl	8001fc6 <_isatty>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_isatty_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_isatty_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200006d8 	.word	0x200006d8

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
