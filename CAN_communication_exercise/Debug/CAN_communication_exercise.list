
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d4c  08008d4c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d54  08008d54  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001db0  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001efc  20001efc  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fe12  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003043  00000000  00000000  0002ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce8  00000000  00000000  00033018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000987  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023466  00000000  00000000  00034687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000116b2  00000000  00000000  00057aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c67a4  00000000  00000000  0006919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003878  00000000  00000000  0012f944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001331bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ba8 	.word	0x08008ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008ba8 	.word	0x08008ba8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
//extern CAN_HandleTypeDef hcan2;

uint8_t data[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a2:	f000 ffc9 	bl	8001538 <HAL_CAN_GetRxMessage>
//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	  CDC_Transmit_FS(data, 8);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005aa:	f007 f9eb 	bl	8007984 <CDC_Transmit_FS>
//	  CDC_Transmit_FS(rxPHead.IDE, 4);

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000168 	.word	0x20000168
 80005bc:	20000174 	.word	0x20000174

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b09b      	sub	sp, #108	; 0x6c
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fbdd 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f911 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9c7 	bl	8000960 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f007 f8fb 	bl	80077cc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005d6:	e005      	b.n	80005e4 <main+0x24>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	487b      	ldr	r0, [pc, #492]	; (80007cc <main+0x20c>)
 80005e0:	f001 fdd8 	bl	8002194 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005e4:	2101      	movs	r1, #1
 80005e6:	487a      	ldr	r0, [pc, #488]	; (80007d0 <main+0x210>)
 80005e8:	f001 fdbc 	bl	8002164 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f2      	beq.n	80005d8 <main+0x18>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4874      	ldr	r0, [pc, #464]	; (80007cc <main+0x20c>)
 80005fa:	f001 fdcb 	bl	8002194 <HAL_GPIO_WritePin>

  uint32_t PRE[4] = {42, 210, 84, 21};
 80005fe:	4b75      	ldr	r3, [pc, #468]	; (80007d4 <main+0x214>)
 8000600:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t i;
  for(i = 0; i < 5; i++){
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000610:	e063      	b.n	80006da <main+0x11a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000612:	4b71      	ldr	r3, [pc, #452]	; (80007d8 <main+0x218>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d12b      	bne.n	8000674 <main+0xb4>
 800061c:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <main+0x21c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d126      	bne.n	8000674 <main+0xb4>
		  if(i == 0){
 8000626:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10c      	bne.n	8000648 <main+0x88>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800062e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000630:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f945 	bl	80008c4 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800063a:	4869      	ldr	r0, [pc, #420]	; (80007e0 <main+0x220>)
 800063c:	f000 fe14 	bl	8001268 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f000 fc11 	bl	8000e68 <HAL_Delay>
		  if(i == 0){
 8000646:	e043      	b.n	80006d0 <main+0x110>
		  }else{
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_0);
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_1);
			  HAL_CAN_Stop(&hcan1);
 8000648:	4865      	ldr	r0, [pc, #404]	; (80007e0 <main+0x220>)
 800064a:	f000 fe51 	bl	80012f0 <HAL_CAN_Stop>
//			  HAL_Delay(100);
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800064e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	3368      	adds	r3, #104	; 0x68
 8000656:	443b      	add	r3, r7
 8000658:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800065c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f92f 	bl	80008c4 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000666:	485e      	ldr	r0, [pc, #376]	; (80007e0 <main+0x220>)
 8000668:	f000 fdfe 	bl	8001268 <HAL_CAN_Start>
			  HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f000 fbfb 	bl	8000e68 <HAL_Delay>
		  if(i == 0){
 8000672:	e02d      	b.n	80006d0 <main+0x110>
		  }
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 8000674:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <main+0x218>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b01      	cmp	r3, #1
 800067c:	d004      	beq.n	8000688 <main+0xc8>
 800067e:	4b57      	ldr	r3, [pc, #348]	; (80007dc <main+0x21c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d123      	bne.n	80006d0 <main+0x110>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800068c:	3b01      	subs	r3, #1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	3368      	adds	r3, #104	; 0x68
 8000692:	443b      	add	r3, r7
 8000694:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4952      	ldr	r1, [pc, #328]	; (80007e4 <main+0x224>)
 800069c:	4618      	mov	r0, r3
 800069e:	f007 fddf 	bl	8008260 <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f966 	bl	8007984 <CDC_Transmit_FS>
			  HAL_CAN_Stop(&hcan1);
 80006b8:	4849      	ldr	r0, [pc, #292]	; (80007e0 <main+0x220>)
 80006ba:	f000 fe19 	bl	80012f0 <HAL_CAN_Stop>
//			  MX_CAN1_Init(PRE[i], CAN_MODE_NORMAL);
			  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <main+0x220>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
			  HAL_CAN_Init(&hcan1);
 80006c4:	4846      	ldr	r0, [pc, #280]	; (80007e0 <main+0x220>)
 80006c6:	f000 fbf3 	bl	8000eb0 <HAL_CAN_Init>
			  HAL_CAN_Start(&hcan1);
 80006ca:	4845      	ldr	r0, [pc, #276]	; (80007e0 <main+0x220>)
 80006cc:	f000 fdcc 	bl	8001268 <HAL_CAN_Start>
  for(i = 0; i < 5; i++){
 80006d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006d4:	3301      	adds	r3, #1
 80006d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80006da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d997      	bls.n	8000612 <main+0x52>

		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <main+0x218>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10a      	bne.n	8000702 <main+0x142>
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <main+0x21c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <main+0x142>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80006f6:	2118      	movs	r1, #24
 80006f8:	483b      	ldr	r0, [pc, #236]	; (80007e8 <main+0x228>)
 80006fa:	f007 f943 	bl	8007984 <CDC_Transmit_FS>
	  Error_Handler();
 80006fe:	f000 f98f 	bl	8000a20 <Error_Handler>

//    **Transmit**
//  **PIDs Supported**
  uint32_t mailbox;
  CAN_TxHeaderTypeDef pHead;
  pHead.StdId = 0x7DF;
 8000702:	f240 73df 	movw	r3, #2015	; 0x7df
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  pHead.IDE = CAN_ID_STD;
 8000708:	2300      	movs	r3, #0
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  pHead.RTR = CAN_RTR_DATA;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  pHead.DLC = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t data[] = {0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 8000714:	4a35      	ldr	r2, [pc, #212]	; (80007ec <main+0x22c>)
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071e:	e883 0003 	stmia.w	r3, {r0, r1}

  //  **PIDs supported(01-20)**
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000726:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800072a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800072e:	482c      	ldr	r0, [pc, #176]	; (80007e0 <main+0x220>)
 8000730:	f000 fe27 	bl	8001382 <HAL_CAN_AddTxMessage>
  HAL_Delay(50);
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f000 fb97 	bl	8000e68 <HAL_Delay>

  //  **PIDs supported(21-40)**
  data[2] = 0x20;
 800073a:	2320      	movs	r3, #32
 800073c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000744:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000748:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800074c:	4824      	ldr	r0, [pc, #144]	; (80007e0 <main+0x220>)
 800074e:	f000 fe18 	bl	8001382 <HAL_CAN_AddTxMessage>


  //  **PIDs supported(41-60)**
  data[2] = 0x40;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000758:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800075c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000760:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0x220>)
 8000766:	f000 fe0c 	bl	8001382 <HAL_CAN_AddTxMessage>

  //  **PIDs supported(61-80)**
  data[2] = 0x60;
 800076a:	2360      	movs	r3, #96	; 0x60
 800076c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000770:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000774:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000778:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <main+0x220>)
 800077e:	f000 fe00 	bl	8001382 <HAL_CAN_AddTxMessage>

  //  **PIDs supported(81-A0)**
  data[2] = 0x80;
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000788:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800078c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000790:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <main+0x220>)
 8000796:	f000 fdf4 	bl	8001382 <HAL_CAN_AddTxMessage>

  //  **PIDs supported(A1-C0)**
  data[2] = 0xA0;
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80007a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <main+0x220>)
 80007ae:	f000 fde8 	bl	8001382 <HAL_CAN_AddTxMessage>

  //  **PIDs supported(C1-E0)**
  data[2] = 0xC0;
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80007b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <main+0x220>)
 80007c6:	f000 fddc 	bl	8001382 <HAL_CAN_AddTxMessage>

  while (1)
 80007ca:	e7fe      	b.n	80007ca <main+0x20a>
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020000 	.word	0x40020000
 80007d4:	08008ca8 	.word	0x08008ca8
 80007d8:	20000171 	.word	0x20000171
 80007dc:	20000170 	.word	0x20000170
 80007e0:	20000174 	.word	0x20000174
 80007e4:	08008c60 	.word	0x08008c60
 80007e8:	08008c8c 	.word	0x08008c8c
 80007ec:	08008cb8 	.word	0x08008cb8

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 fd4e 	bl	80082a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xcc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SystemClock_Config+0xcc>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <SystemClock_Config+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd0>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000860:	2308      	movs	r3, #8
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086e:	2307      	movs	r3, #7
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f002 ff22 	bl	80036c0 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000882:	f000 f8cd 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2105      	movs	r1, #5
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 f983 	bl	8003bb0 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b0:	f000 f8b6 	bl	8000a20 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_CAN1_Init+0x94>)
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <MX_CAN1_Init+0x98>)
 80008d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <MX_CAN1_Init+0x94>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_CAN1_Init+0x94>)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_CAN1_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_CAN1_Init+0x94>)
 80008e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_CAN1_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_CAN1_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_CAN1_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_CAN1_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_CAN1_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_CAN1_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_CAN1_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <MX_CAN1_Init+0x94>)
 800091a:	f000 fac9 	bl	8000eb0 <HAL_CAN_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000924:	f000 f87c 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <MX_CAN1_Init+0x94>)
 800092e:	f000 ff15 	bl	800175c <HAL_CAN_ActivateNotification>
  CAN_FilterTypeDef filters = {0};
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2228      	movs	r2, #40	; 0x28
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f007 fcb0 	bl	80082a0 <memset>
  filters.FilterActivation = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
//  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_CAN1_Init+0x94>)
 800094c:	f000 fbac 	bl	80010a8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000174 	.word	0x20000174
 800095c:	40006400 	.word	0x40006400

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0xb4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <MX_GPIO_Init+0xb4>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xb4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_GPIO_Init+0xb4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <MX_GPIO_Init+0xb4>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xb4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_GPIO_Init+0xb4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_GPIO_Init+0xb4>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_GPIO_Init+0xb4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_GPIO_Init+0xb8>)
 80009d2:	f001 fbdf 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d6:	2301      	movs	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_GPIO_Init+0xbc>)
 80009ea:	f001 fa1f 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0xb8>)
 8000a08:	f001 fa10 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020000 	.word	0x40020000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a4e      	ldr	r2, [pc, #312]	; (8000bd4 <HAL_CAN_MspInit+0x158>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d14d      	bne.n	8000b3a <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a9e:	4b4e      	ldr	r3, [pc, #312]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000aa6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10d      	bne.n	8000acc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000af8:	2309      	movs	r3, #9
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4837      	ldr	r0, [pc, #220]	; (8000be0 <HAL_CAN_MspInit+0x164>)
 8000b04:	f001 f992 	bl	8001e2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2013      	movs	r0, #19
 8000b0e:	f001 f956 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b12:	2013      	movs	r0, #19
 8000b14:	f001 f96f 	bl	8001df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2014      	movs	r0, #20
 8000b1e:	f001 f94e 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b22:	2014      	movs	r0, #20
 8000b24:	f001 f967 	bl	8001df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2015      	movs	r0, #21
 8000b2e:	f001 f946 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b32:	2015      	movs	r0, #21
 8000b34:	f001 f95f 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b38:	e048      	b.n	8000bcc <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <HAL_CAN_MspInit+0x168>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d143      	bne.n	8000bcc <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000b68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_CAN_MspInit+0x15c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10d      	bne.n	8000b8e <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_CAN_MspInit+0x160>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000baa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <HAL_CAN_MspInit+0x16c>)
 8000bc8:	f001 f930 	bl	8001e2c <HAL_GPIO_Init>
}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40006400 	.word	0x40006400
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	40006800 	.word	0x40006800
 8000be8:	40020400 	.word	0x40020400

08000bec <NMI_Handler>:
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	f000 f8f6 	bl	8000e28 <HAL_IncTick>
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <CAN1_TX_IRQHandler>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <CAN1_TX_IRQHandler+0x10>)
 8000c46:	f000 fdaf 	bl	80017a8 <HAL_CAN_IRQHandler>
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000174 	.word	0x20000174

08000c54 <CAN1_RX0_IRQHandler>:
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <CAN1_RX0_IRQHandler+0x14>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <CAN1_RX0_IRQHandler+0x18>)
 8000c60:	f000 fda2 	bl	80017a8 <HAL_CAN_IRQHandler>
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000170 	.word	0x20000170
 8000c6c:	20000174 	.word	0x20000174

08000c70 <CAN1_RX1_IRQHandler>:
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <CAN1_RX1_IRQHandler+0x14>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <CAN1_RX1_IRQHandler+0x18>)
 8000c7c:	f000 fd94 	bl	80017a8 <HAL_CAN_IRQHandler>
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000171 	.word	0x20000171
 8000c88:	20000174 	.word	0x20000174

08000c8c <OTG_FS_IRQHandler>:
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <OTG_FS_IRQHandler+0x10>)
 8000c92:	f001 fbe8 	bl	8002466 <HAL_PCD_IRQHandler>
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20001688 	.word	0x20001688

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f007 faee 	bl	80082b0 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200001a0 	.word	0x200001a0
 8000d08:	20001f00 	.word	0x20001f00

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f007 faad 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fc2d 	bl	80005c0 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000d74:	08008d5c 	.word	0x08008d5c
  ldr r2, =_sbss
 8000d78:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d7c:	20001efc 	.word	0x20001efc

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 fffb 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe38 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 f813 	bl	8001e12 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 ffdb 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200001a4 	.word	0x200001a4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001a4 	.word	0x200001a4

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_CAN_Init>:
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_CAN_Init+0x12>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0ed      	b.n	800109e <HAL_CAN_Init+0x1ee>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_CAN_Init+0x24>
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fdd4 	bl	8000a7c <HAL_CAN_MspInit>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	f7ff ffb4 	bl	8000e50 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Init+0x62>
 8000eec:	f7ff ffb0 	bl	8000e50 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d90b      	bls.n	8000f12 <HAL_CAN_Init+0x62>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0c5      	b.n	800109e <HAL_CAN_Init+0x1ee>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0e5      	beq.n	8000eec <HAL_CAN_Init+0x3c>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0202 	bic.w	r2, r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	f7ff ff8e 	bl	8000e50 <HAL_GetTick>
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	e012      	b.n	8000f5e <HAL_CAN_Init+0xae>
 8000f38:	f7ff ff8a 	bl	8000e50 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b0a      	cmp	r3, #10
 8000f44:	d90b      	bls.n	8000f5e <HAL_CAN_Init+0xae>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e09f      	b.n	800109e <HAL_CAN_Init+0x1ee>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e5      	bne.n	8000f38 <HAL_CAN_Init+0x88>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7e1b      	ldrb	r3, [r3, #24]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d108      	bne.n	8000f86 <HAL_CAN_Init+0xd6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_CAN_Init+0xe6>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e5b      	ldrb	r3, [r3, #25]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_CAN_Init+0x100>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_CAN_Init+0x110>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e9b      	ldrb	r3, [r3, #26]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <HAL_CAN_Init+0x12a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0220 	orr.w	r2, r2, #32
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_CAN_Init+0x13a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0220 	bic.w	r2, r2, #32
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7edb      	ldrb	r3, [r3, #27]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d108      	bne.n	8001004 <HAL_CAN_Init+0x154>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0210 	bic.w	r2, r2, #16
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e007      	b.n	8001014 <HAL_CAN_Init+0x164>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0210 	orr.w	r2, r2, #16
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0x17e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0x18e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7f5b      	ldrb	r3, [r3, #29]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x1a8>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0204 	orr.w	r2, r2, #4
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x1b8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	ea42 0103 	orr.w	r1, r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	61da      	str	r2, [r3, #28]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2020 	strb.w	r2, [r3, #32]
 800109c:	2300      	movs	r3, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_CAN_ConfigFilter>:
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	74fb      	strb	r3, [r7, #19]
 80010c0:	7cfb      	ldrb	r3, [r7, #19]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_ConfigFilter+0x26>
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f040 80be 	bne.w	800124a <HAL_CAN_ConfigFilter+0x1a2>
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <HAL_CAN_ConfigFilter+0x1bc>)
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	431a      	orrs	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	2201      	movs	r2, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d123      	bne.n	8001178 <HAL_CAN_ConfigFilter+0xd0>
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	0419      	lsls	r1, r3, #16
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	b29b      	uxth	r3, r3
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	6952      	ldr	r2, [r2, #20]
 8001152:	4319      	orrs	r1, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3248      	adds	r2, #72	; 0x48
 8001158:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	0419      	lsls	r1, r3, #16
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	430a      	orrs	r2, r1
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	3348      	adds	r3, #72	; 0x48
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d122      	bne.n	80011c6 <HAL_CAN_ConfigFilter+0x11e>
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	431a      	orrs	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0419      	lsls	r1, r3, #16
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	b29b      	uxth	r3, r3
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	6952      	ldr	r2, [r2, #20]
 80011a0:	4319      	orrs	r1, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3248      	adds	r2, #72	; 0x48
 80011a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0419      	lsls	r1, r3, #16
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	6979      	ldr	r1, [r7, #20]
 80011be:	3348      	adds	r3, #72	; 0x48
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_CAN_ConfigFilter+0x13a>
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011e0:	e007      	b.n	80011f2 <HAL_CAN_ConfigFilter+0x14a>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_CAN_ConfigFilter+0x166>
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800120c:	e007      	b.n	800121e <HAL_CAN_ConfigFilter+0x176>
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	431a      	orrs	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_CAN_ConfigFilter+0x18e>
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	431a      	orrs	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800123c:	f023 0201 	bic.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_ConfigFilter+0x1b0>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
 8001256:	2301      	movs	r3, #1
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40006400 	.word	0x40006400

08001268 <HAL_CAN_Start>:
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d12e      	bne.n	80012da <HAL_CAN_Start+0x72>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2020 	strb.w	r2, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f7ff fddc 	bl	8000e50 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	e012      	b.n	80012c2 <HAL_CAN_Start+0x5a>
 800129c:	f7ff fdd8 	bl	8000e50 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d90b      	bls.n	80012c2 <HAL_CAN_Start+0x5a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]
 80012be:	2301      	movs	r3, #1
 80012c0:	e012      	b.n	80012e8 <HAL_CAN_Start+0x80>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e5      	bne.n	800129c <HAL_CAN_Start+0x34>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
 80012d6:	2300      	movs	r3, #0
 80012d8:	e006      	b.n	80012e8 <HAL_CAN_Start+0x80>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
 80012e6:	2301      	movs	r3, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_CAN_Stop>:
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d133      	bne.n	800136c <HAL_CAN_Stop+0x7c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f7ff fd9c 	bl	8000e50 <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	e012      	b.n	8001342 <HAL_CAN_Stop+0x52>
 800131c:	f7ff fd98 	bl	8000e50 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d90b      	bls.n	8001342 <HAL_CAN_Stop+0x52>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2205      	movs	r2, #5
 800133a:	f883 2020 	strb.w	r2, [r3, #32]
 800133e:	2301      	movs	r3, #1
 8001340:	e01b      	b.n	800137a <HAL_CAN_Stop+0x8a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0e5      	beq.n	800131c <HAL_CAN_Stop+0x2c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0202 	bic.w	r2, r2, #2
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2020 	strb.w	r2, [r3, #32]
 8001368:	2300      	movs	r3, #0
 800136a:	e006      	b.n	800137a <HAL_CAN_Stop+0x8a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
 8001378:	2301      	movs	r3, #1
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_CAN_AddTxMessage>:
 8001382:	b480      	push	{r7}
 8001384:	b089      	sub	sp, #36	; 0x24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <HAL_CAN_AddTxMessage+0x2c>
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	f040 80b8 	bne.w	800151e <HAL_CAN_AddTxMessage+0x19c>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <HAL_CAN_AddTxMessage+0x4c>
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_CAN_AddTxMessage+0x4c>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a0 	beq.w	800150e <HAL_CAN_AddTxMessage+0x18c>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	0e1b      	lsrs	r3, r3, #24
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d907      	bls.n	80013ee <HAL_CAN_AddTxMessage+0x6c>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
 80013ea:	2301      	movs	r3, #1
 80013ec:	e09e      	b.n	800152c <HAL_CAN_AddTxMessage+0x1aa>
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10d      	bne.n	800141c <HAL_CAN_AddTxMessage+0x9a>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	055a      	lsls	r2, r3, #21
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	6809      	ldr	r1, [r1, #0]
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3318      	adds	r3, #24
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	440b      	add	r3, r1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e00f      	b.n	800143c <HAL_CAN_AddTxMessage+0xba>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	00da      	lsls	r2, r3, #3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	431a      	orrs	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	68f9      	ldr	r1, [r7, #12]
 800142e:	6809      	ldr	r1, [r1, #0]
 8001430:	431a      	orrs	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3318      	adds	r3, #24
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3318      	adds	r3, #24
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	3304      	adds	r3, #4
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	7d1b      	ldrb	r3, [r3, #20]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d111      	bne.n	800147c <HAL_CAN_AddTxMessage+0xfa>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3318      	adds	r3, #24
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	6811      	ldr	r1, [r2, #0]
 800146c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3318      	adds	r3, #24
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	440b      	add	r3, r1
 8001478:	3304      	adds	r3, #4
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3307      	adds	r3, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	061a      	lsls	r2, r3, #24
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3306      	adds	r3, #6
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3305      	adds	r3, #5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	4313      	orrs	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	3204      	adds	r2, #4
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	4610      	mov	r0, r2
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6811      	ldr	r1, [r2, #0]
 80014a4:	ea43 0200 	orr.w	r2, r3, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3303      	adds	r3, #3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	061a      	lsls	r2, r3, #24
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3302      	adds	r3, #2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3301      	adds	r3, #1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	4313      	orrs	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	4610      	mov	r0, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	6811      	ldr	r1, [r2, #0]
 80014da:	ea43 0200 	orr.w	r2, r3, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3318      	adds	r3, #24
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6811      	ldr	r1, [r2, #0]
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3318      	adds	r3, #24
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	440b      	add	r3, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	e00e      	b.n	800152c <HAL_CAN_AddTxMessage+0x1aa>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
 800151a:	2301      	movs	r3, #1
 800151c:	e006      	b.n	800152c <HAL_CAN_AddTxMessage+0x1aa>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
 800152a:	2301      	movs	r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_GetRxMessage>:
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	75fb      	strb	r3, [r7, #23]
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d003      	beq.n	800155c <HAL_CAN_GetRxMessage+0x24>
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b02      	cmp	r3, #2
 8001558:	f040 80f3 	bne.w	8001742 <HAL_CAN_GetRxMessage+0x20a>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10e      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x48>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d116      	bne.n	800159e <HAL_CAN_GetRxMessage+0x66>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
 800157c:	2301      	movs	r3, #1
 800157e:	e0e7      	b.n	8001750 <HAL_CAN_GetRxMessage+0x218>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d107      	bne.n	800159e <HAL_CAN_GetRxMessage+0x66>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
 800159a:	2301      	movs	r3, #1
 800159c:	e0d8      	b.n	8001750 <HAL_CAN_GetRxMessage+0x218>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	331b      	adds	r3, #27
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0204 	and.w	r2, r3, #4
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <HAL_CAN_GetRxMessage+0x9e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	331b      	adds	r3, #27
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e00b      	b.n	80015ee <HAL_CAN_GetRxMessage+0xb6>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	331b      	adds	r3, #27
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	331b      	adds	r3, #27
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0202 	and.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	331b      	adds	r3, #27
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	3304      	adds	r3, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 020f 	and.w	r2, r3, #15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	331b      	adds	r3, #27
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	b2da      	uxtb	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	331b      	adds	r3, #27
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0a1a      	lsrs	r2, r3, #8
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0c1a      	lsrs	r2, r3, #16
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3302      	adds	r3, #2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0e1a      	lsrs	r2, r3, #24
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3303      	adds	r3, #3
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0a1a      	lsrs	r2, r3, #8
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3305      	adds	r3, #5
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0c1a      	lsrs	r2, r3, #16
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3306      	adds	r3, #6
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0e1a      	lsrs	r2, r3, #24
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3307      	adds	r3, #7
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <HAL_CAN_GetRxMessage+0x1f6>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0220 	orr.w	r2, r2, #32
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	e007      	b.n	800173e <HAL_CAN_GetRxMessage+0x206>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	2300      	movs	r3, #0
 8001740:	e006      	b.n	8001750 <HAL_CAN_GetRxMessage+0x218>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
 800174e:	2301      	movs	r3, #1
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_ActivateNotification>:
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_CAN_ActivateNotification+0x1e>
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d109      	bne.n	800178e <HAL_CAN_ActivateNotification+0x32>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6959      	ldr	r1, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	2300      	movs	r3, #0
 800178c:	e006      	b.n	800179c <HAL_CAN_ActivateNotification+0x40>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
 800179a:	2301      	movs	r3, #1
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_CAN_IRQHandler>:
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d07c      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x140>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <HAL_CAN_IRQHandler+0x98>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_CAN_IRQHandler+0x6a>
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f983 	bl	8001b16 <HAL_CAN_TxMailbox0CompleteCallback>
 8001810:	e016      	b.n	8001840 <HAL_CAN_IRQHandler+0x98>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_CAN_IRQHandler+0x7e>
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	e00c      	b.n	8001840 <HAL_CAN_IRQHandler+0x98>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_CAN_IRQHandler+0x92>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	e002      	b.n	8001840 <HAL_CAN_IRQHandler+0x98>
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f989 	bl	8001b52 <HAL_CAN_TxMailbox0AbortCallback>
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d024      	beq.n	8001894 <HAL_CAN_IRQHandler+0xec>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_CAN_IRQHandler+0xbe>
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f963 	bl	8001b2a <HAL_CAN_TxMailbox1CompleteCallback>
 8001864:	e016      	b.n	8001894 <HAL_CAN_IRQHandler+0xec>
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_CAN_IRQHandler+0xd2>
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e00c      	b.n	8001894 <HAL_CAN_IRQHandler+0xec>
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_CAN_IRQHandler+0xe6>
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e002      	b.n	8001894 <HAL_CAN_IRQHandler+0xec>
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f969 	bl	8001b66 <HAL_CAN_TxMailbox1AbortCallback>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d024      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x140>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_CAN_IRQHandler+0x112>
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f943 	bl	8001b3e <HAL_CAN_TxMailbox2CompleteCallback>
 80018b8:	e016      	b.n	80018e8 <HAL_CAN_IRQHandler+0x140>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_CAN_IRQHandler+0x126>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
 80018cc:	e00c      	b.n	80018e8 <HAL_CAN_IRQHandler+0x140>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x13a>
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	e002      	b.n	80018e8 <HAL_CAN_IRQHandler+0x140>
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f949 	bl	8001b7a <HAL_CAN_TxMailbox2AbortCallback>
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <HAL_CAN_IRQHandler+0x164>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <HAL_CAN_IRQHandler+0x164>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_CAN_IRQHandler+0x186>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_CAN_IRQHandler+0x186>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2208      	movs	r2, #8
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f930 	bl	8001b8e <HAL_CAN_RxFifo0FullCallback>
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d009      	beq.n	800194c <HAL_CAN_IRQHandler+0x1a4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_CAN_IRQHandler+0x1a4>
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fe18 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_CAN_IRQHandler+0x1c8>
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_CAN_IRQHandler+0x1c8>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x1ea>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_CAN_IRQHandler+0x1ea>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f912 	bl	8001bb6 <HAL_CAN_RxFifo1FullCallback>
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x208>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x208>
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8f9 	bl	8001ba2 <HAL_CAN_RxFifo1MsgPendingCallback>
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x22a>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x22a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2210      	movs	r2, #16
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f8fc 	bl	8001bca <HAL_CAN_SleepCallback>
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x24c>
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x24c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2208      	movs	r2, #8
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8f5 	bl	8001bde <HAL_CAN_WakeUpFromRxMsgCallback>
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d07b      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x34e>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d072      	beq.n	8001aee <HAL_CAN_IRQHandler+0x346>
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x27c>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x27c>
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x298>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x298>
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x2b4>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x2b4>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d043      	beq.n	8001aee <HAL_CAN_IRQHandler+0x346>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03e      	beq.n	8001aee <HAL_CAN_IRQHandler+0x346>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a76:	2b60      	cmp	r3, #96	; 0x60
 8001a78:	d02b      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x32a>
 8001a7a:	2b60      	cmp	r3, #96	; 0x60
 8001a7c:	d82e      	bhi.n	8001adc <HAL_CAN_IRQHandler+0x334>
 8001a7e:	2b50      	cmp	r3, #80	; 0x50
 8001a80:	d022      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x320>
 8001a82:	2b50      	cmp	r3, #80	; 0x50
 8001a84:	d82a      	bhi.n	8001adc <HAL_CAN_IRQHandler+0x334>
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d019      	beq.n	8001abe <HAL_CAN_IRQHandler+0x316>
 8001a8a:	2b40      	cmp	r3, #64	; 0x40
 8001a8c:	d826      	bhi.n	8001adc <HAL_CAN_IRQHandler+0x334>
 8001a8e:	2b30      	cmp	r3, #48	; 0x30
 8001a90:	d010      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x30c>
 8001a92:	2b30      	cmp	r3, #48	; 0x30
 8001a94:	d822      	bhi.n	8001adc <HAL_CAN_IRQHandler+0x334>
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d002      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x2f8>
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d005      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x302>
 8001a9e:	e01d      	b.n	8001adc <HAL_CAN_IRQHandler+0x334>
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	e019      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e014      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	f043 0320 	orr.w	r3, r3, #32
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	e00f      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	e00a      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	e005      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	e000      	b.n	8001ade <HAL_CAN_IRQHandler+0x336>
 8001adc:	bf00      	nop
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x366>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f872 	bl	8001bf2 <HAL_CAN_ErrorCallback>
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_CAN_TxMailbox1CompleteCallback>:
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_CAN_TxMailbox2CompleteCallback>:
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_CAN_TxMailbox0AbortCallback>:
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_CAN_TxMailbox1AbortCallback>:
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_CAN_TxMailbox2AbortCallback>:
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_CAN_RxFifo0FullCallback>:
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_CAN_RxFifo1FullCallback>:
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_CAN_SleepCallback>:
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_CAN_ErrorCallback>:
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff3e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff31 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffa2 	bl	8001d64 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e16b      	b.n	8002120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 815a 	bne.w	800211a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80b4 	beq.w	800211a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b60      	ldr	r3, [pc, #384]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a5f      	ldr	r2, [pc, #380]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a5b      	ldr	r2, [pc, #364]	; (800213c <HAL_GPIO_Init+0x310>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x314>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x318>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x31c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x320>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x328>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x20a>
 8002032:	2307      	movs	r3, #7
 8002034:	e00e      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002036:	2308      	movs	r3, #8
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203a:	2306      	movs	r3, #6
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4935      	ldr	r1, [pc, #212]	; (800213c <HAL_GPIO_Init+0x310>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_GPIO_Init+0x334>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_GPIO_Init+0x334>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae90 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40021c00 	.word	0x40021c00
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b08f      	sub	sp, #60	; 0x3c
 80021ca:	af0a      	add	r7, sp, #40	; 0x28
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e10f      	b.n	80023f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 fd0e 	bl	8007c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f001 ffd7 	bl	80041ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f001 feae 	bl	8003fa0 <USB_CoreInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0d0      	b.n	80023f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f001 ffc5 	bl	80041ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e04a      	b.n	80022fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333d      	adds	r3, #61	; 0x3d
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b298      	uxth	r0, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3344      	adds	r3, #68	; 0x44
 80022a4:	4602      	mov	r2, r0
 80022a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3340      	adds	r3, #64	; 0x40
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334c      	adds	r3, #76	; 0x4c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3354      	adds	r3, #84	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3af      	bcc.n	8002268 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e044      	b.n	8002398 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3b5      	bcc.n	800230e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	687e      	ldr	r6, [r7, #4]
 80023aa:	466d      	mov	r5, sp
 80023ac:	f106 0410 	add.w	r4, r6, #16
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c0:	1d33      	adds	r3, r6, #4
 80023c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f001 ff5d 	bl	8004284 <USB_DevInit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00d      	b.n	80023f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 f8ac 	bl	800554e <USB_DevDisconnect>

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002400 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_PCD_Start+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e020      	b.n	800245e <HAL_PCD_Start+0x5e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	2b01      	cmp	r3, #1
 800242a:	d109      	bne.n	8002440 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f001 feaf 	bl	80041a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 f85c 	bl	800550c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002466:	b590      	push	{r4, r7, lr}
 8002468:	b08d      	sub	sp, #52	; 0x34
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f91a 	bl	80056b6 <USB_GetMode>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 848a 	bne.w	8002d9e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f87e 	bl	8005590 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8480 	beq.w	8002d9c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 f86b 	bl	8005590 <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d107      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 0202 	and.w	r2, r2, #2
 80024d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f859 	bl	8005590 <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d161      	bne.n	80025ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0210 	bic.w	r2, r2, #16
 80024f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	0c5b      	lsrs	r3, r3, #17
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2b02      	cmp	r3, #2
 8002522:	d124      	bne.n	800256e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d035      	beq.n	800259c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800253a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6a38      	ldr	r0, [r7, #32]
 8002544:	f002 fe90 	bl	8005268 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002554:	441a      	add	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002566:	441a      	add	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	621a      	str	r2, [r3, #32]
 800256c:	e016      	b.n	800259c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	0c5b      	lsrs	r3, r3, #17
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	2b06      	cmp	r3, #6
 8002578:	d110      	bne.n	800259c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002580:	2208      	movs	r2, #8
 8002582:	4619      	mov	r1, r3
 8002584:	6a38      	ldr	r0, [r7, #32]
 8002586:	f002 fe6f 	bl	8005268 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6a1a      	ldr	r2, [r3, #32]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	441a      	add	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0210 	orr.w	r2, r2, #16
 80025aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 ffed 	bl	8005590 <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025c0:	f040 80a7 	bne.w	8002712 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fff2 	bl	80055b6 <USB_ReadDevAllOutEpInterrupt>
 80025d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025d4:	e099      	b.n	800270a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 808e 	beq.w	80026fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 f816 	bl	800561e <USB_ReadDevOutEPInterrupt>
 80025f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	461a      	mov	r2, r3
 800260c:	2301      	movs	r3, #1
 800260e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fec2 	bl	800339c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262e:	461a      	mov	r2, r3
 8002630:	2308      	movs	r3, #8
 8002632:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 ff98 	bl	800356c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002652:	461a      	mov	r2, r3
 8002654:	2310      	movs	r3, #16
 8002656:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d030      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d109      	bne.n	8002682 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002680:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	78db      	ldrb	r3, [r3, #3]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fbc9 	bl	8007e44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	2302      	movs	r3, #2
 80026c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	2320      	movs	r3, #32
 80026de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af62 	bne.w	80025d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 ff3a 	bl	8005590 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002726:	f040 80db 	bne.w	80028e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 ff5b 	bl	80055ea <USB_ReadDevAllInEpInterrupt>
 8002734:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800273a:	e0cd      	b.n	80028d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80c2 	beq.w	80028cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f002 ff81 	bl	800565a <USB_ReadDevInEPInterrupt>
 8002758:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d057      	beq.n	8002814 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	2201      	movs	r2, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	69f9      	ldr	r1, [r7, #28]
 8002780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002784:	4013      	ands	r3, r2
 8002786:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002794:	461a      	mov	r2, r3
 8002796:	2301      	movs	r3, #1
 8002798:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d132      	bne.n	8002808 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334c      	adds	r3, #76	; 0x4c
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	3348      	adds	r3, #72	; 0x48
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4419      	add	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4403      	add	r3, r0
 80027d6:	334c      	adds	r3, #76	; 0x4c
 80027d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <HAL_PCD_IRQHandler+0x3a2>
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3354      	adds	r3, #84	; 0x54
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002800:	461a      	mov	r2, r3
 8002802:	2101      	movs	r1, #1
 8002804:	f002 ff88 	bl	8005718 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f005 fa93 	bl	8007d3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282a:	461a      	mov	r2, r3
 800282c:	2308      	movs	r3, #8
 800282e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	461a      	mov	r2, r3
 8002848:	2310      	movs	r3, #16
 800284a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002862:	461a      	mov	r2, r3
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002874:	6a38      	ldr	r0, [r7, #32]
 8002876:	f001 fe69 	bl	800454c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3338      	adds	r3, #56	; 0x38
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	78db      	ldrb	r3, [r3, #3]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f005 fae0 	bl	8007e68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b4:	461a      	mov	r2, r3
 80028b6:	2302      	movs	r3, #2
 80028b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fcdb 	bl	8003282 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	3301      	adds	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f47f af2e 	bne.w	800273c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fe53 	bl	8005590 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f4:	d122      	bne.n	800293c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002910:	2b01      	cmp	r3, #1
 8002912:	d108      	bne.n	8002926 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800291c:	2100      	movs	r1, #0
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fec2 	bl	80036a8 <HAL_PCDEx_LPM_Callback>
 8002924:	e002      	b.n	800292c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f005 fa7e 	bl	8007e28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fe25 	bl	8005590 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002950:	d112      	bne.n	8002978 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d102      	bne.n	8002968 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f005 fa3a 	bl	8007ddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002976:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fe07 	bl	8005590 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298c:	f040 80b7 	bne.w	8002afe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2110      	movs	r1, #16
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fdce 	bl	800454c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b4:	e046      	b.n	8002a44 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c2:	461a      	mov	r2, r3
 80029c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029da:	0151      	lsls	r1, r2, #5
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	440a      	add	r2, r1
 80029e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a0e:	0151      	lsls	r1, r2, #5
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	440a      	add	r2, r1
 8002a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2e:	0151      	lsls	r1, r2, #5
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	440a      	add	r2, r1
 8002a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	3301      	adds	r3, #1
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3b3      	bcc.n	80029b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7a:	f043 030b 	orr.w	r3, r3, #11
 8002a7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a90:	f043 030b 	orr.w	r3, r3, #11
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	e015      	b.n	8002ac4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002aae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f043 030b 	orr.w	r3, r3, #11
 8002ac2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ad6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f002 fe15 	bl	8005718 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fd44 	bl	8005590 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	d124      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 fdda 	bl	80056d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 fd8f 	bl	8004646 <USB_GetDevSpeed>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681c      	ldr	r4, [r3, #0]
 8002b34:	f001 fa28 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f001 fa8e 	bl	8004064 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 f91e 	bl	8007d8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fd14 	bl	8005590 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d10a      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f005 f8fb 	bl	8007d6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f002 0208 	and.w	r2, r2, #8
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fcff 	bl	8005590 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d122      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e014      	b.n	8002bd8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fb27 	bl	8003220 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3e5      	bcc.n	8002bae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fcd2 	bl	8005590 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf6:	d13b      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	e02b      	b.n	8002c56 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3340      	adds	r3, #64	; 0x40
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d115      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da12      	bge.n	8002c50 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	333f      	adds	r3, #63	; 0x3f
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fae8 	bl	8003220 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3ce      	bcc.n	8002bfe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fc8b 	bl	8005590 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c84:	d155      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c86:	2301      	movs	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	e045      	b.n	8002d18 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d12e      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da2b      	bge.n	8002d12 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002cc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d121      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6053      	str	r3, [r2, #4]
            break;
 8002d10:	e007      	b.n	8002d22 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3b4      	bcc.n	8002c8c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 fc2a 	bl	8005590 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d10a      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f005 f89f 	bl	8007e8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 fc14 	bl	8005590 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d115      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f005 f88f 	bl	8007ea8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e000      	b.n	8002d9e <HAL_PCD_IRQHandler+0x938>
      return;
 8002d9c:	bf00      	nop
    }
  }
}
 8002d9e:	3734      	adds	r7, #52	; 0x34
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}

08002da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_SetAddress+0x1a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e013      	b.n	8002de6 <HAL_PCD_SetAddress+0x42>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fb72 	bl	80054c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	4608      	mov	r0, r1
 8002df8:	4611      	mov	r1, r2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	70fb      	strb	r3, [r7, #3]
 8002e00:	460b      	mov	r3, r1
 8002e02:	803b      	strh	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da0f      	bge.n	8002e34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3338      	adds	r3, #56	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	705a      	strb	r2, [r3, #1]
 8002e32:	e00f      	b.n	8002e54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 020f 	and.w	r2, r3, #15
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e60:	883a      	ldrh	r2, [r7, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	78ba      	ldrb	r2, [r7, #2]
 8002e6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d102      	bne.n	8002e8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_PCD_EP_Open+0xaa>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e00e      	b.n	8002eb6 <HAL_PCD_EP_Open+0xc8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fbf2 	bl	8004690 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0f      	bge.n	8002ef2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3338      	adds	r3, #56	; 0x38
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	705a      	strb	r2, [r3, #1]
 8002ef0:	e00f      	b.n	8002f12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_EP_Close+0x6e>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e00e      	b.n	8002f4a <HAL_PCD_EP_Close+0x8c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fc30 	bl	80047a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fae:	7afb      	ldrb	r3, [r7, #11]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6979      	ldr	r1, [r7, #20]
 8002fc6:	f001 ff0f 	bl	8004de8 <USB_EP0StartXfer>
 8002fca:	e008      	b.n	8002fde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6979      	ldr	r1, [r7, #20]
 8002fda:	f001 fcbd 	bl	8004958 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3338      	adds	r3, #56	; 0x38
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2201      	movs	r2, #1
 8003056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	b2da      	uxtb	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	f001 fead 	bl	8004de8 <USB_EP0StartXfer>
 800308e:	e008      	b.n	80030a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	f001 fc5b 	bl	8004958 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d901      	bls.n	80030ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e050      	b.n	800316c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da0f      	bge.n	80030f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3338      	adds	r3, #56	; 0x38
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	705a      	strb	r2, [r3, #1]
 80030f0:	e00d      	b.n	800310e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_EP_SetStall+0x82>
 800312a:	2302      	movs	r3, #2
 800312c:	e01e      	b.n	800316c <HAL_PCD_EP_SetStall+0xc0>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	4618      	mov	r0, r3
 800313e:	f002 f8eb 	bl	8005318 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	b2d9      	uxtb	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315c:	461a      	mov	r2, r3
 800315e:	f002 fadb 	bl	8005718 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	d901      	bls.n	8003192 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e042      	b.n	8003218 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da0f      	bge.n	80031ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	705a      	strb	r2, [r3, #1]
 80031b8:	e00f      	b.n	80031da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_ClrStall+0x86>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_ClrStall+0xa4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f002 f8f3 	bl	80053f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800322c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da0c      	bge.n	800324e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	3338      	adds	r3, #56	; 0x38
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e00c      	b.n	8003268 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f001 ff12 	bl	8005098 <USB_EPStopXfer>
 8003274:	4603      	mov	r3, r0
 8003276:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003278:	7afb      	ldrb	r3, [r7, #11]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08a      	sub	sp, #40	; 0x28
 8003286:	af02      	add	r7, sp, #8
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d901      	bls.n	80032ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06c      	b.n	8003394 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3303      	adds	r3, #3
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032de:	e02b      	b.n	8003338 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d902      	bls.n	80032fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3303      	adds	r3, #3
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6919      	ldr	r1, [r3, #16]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003314:	b2db      	uxtb	r3, r3
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f001 ff66 	bl	80051ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	441a      	add	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d809      	bhi.n	8003362 <PCD_WriteEmptyTxFifo+0xe0>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1be      	bne.n	80032e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	429a      	cmp	r2, r3
 800336c:	d811      	bhi.n	8003392 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	2201      	movs	r2, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	43db      	mvns	r3, r3
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338e:	4013      	ands	r3, r2
 8003390:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	333c      	adds	r3, #60	; 0x3c
 80033b4:	3304      	adds	r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d17b      	bne.n	80034ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	4a61      	ldr	r2, [pc, #388]	; (8003564 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	f240 80b9 	bls.w	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80b3 	beq.w	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	e0a7      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	461a      	mov	r2, r3
 8003420:	2320      	movs	r3, #32
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	e098      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 8093 	bne.w	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4a4b      	ldr	r2, [pc, #300]	; (8003564 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d90f      	bls.n	800345a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003450:	461a      	mov	r2, r3
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	6093      	str	r3, [r2, #8]
 8003458:	e07e      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	440b      	add	r3, r1
 800347c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d114      	bne.n	80034bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034a4:	461a      	mov	r2, r3
 80034a6:	2101      	movs	r1, #1
 80034a8:	f002 f936 	bl	8005718 <USB_EP0_OutStart>
 80034ac:	e006      	b.n	80034bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	441a      	add	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f004 fc1e 	bl	8007d04 <HAL_PCD_DataOutStageCallback>
 80034c8:	e046      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	4a26      	ldr	r2, [pc, #152]	; (8003568 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d124      	bne.n	800351c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	461a      	mov	r2, r3
 80034ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ee:	6093      	str	r3, [r2, #8]
 80034f0:	e032      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	2320      	movs	r3, #32
 800350c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f004 fbf5 	bl	8007d04 <HAL_PCD_DataOutStageCallback>
 800351a:	e01d      	b.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d114      	bne.n	800354c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d108      	bne.n	800354c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003544:	461a      	mov	r2, r3
 8003546:	2100      	movs	r1, #0
 8003548:	f002 f8e6 	bl	8005718 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f004 fbd6 	bl	8007d04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	4f54300a 	.word	0x4f54300a
 8003568:	4f54310a 	.word	0x4f54310a

0800356c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	333c      	adds	r3, #60	; 0x3c
 8003584:	3304      	adds	r3, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d90e      	bls.n	80035c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b8:	461a      	mov	r2, r3
 80035ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f004 fb8d 	bl	8007ce0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d90c      	bls.n	80035e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e0:	461a      	mov	r2, r3
 80035e2:	2101      	movs	r1, #1
 80035e4:	f002 f898 	bl	8005718 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	4f54300a 	.word	0x4f54300a

080035f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
 8003604:	4613      	mov	r3, r2
 8003606:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003616:	883b      	ldrh	r3, [r7, #0]
 8003618:	0419      	lsls	r1, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	430a      	orrs	r2, r1
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
 8003624:	e028      	b.n	8003678 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e00d      	b.n	8003656 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	3340      	adds	r3, #64	; 0x40
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	3301      	adds	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	3b01      	subs	r3, #1
 800365c:	429a      	cmp	r2, r3
 800365e:	d3ec      	bcc.n	800363a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003660:	883b      	ldrh	r3, [r7, #0]
 8003662:	0418      	lsls	r0, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	3b01      	subs	r3, #1
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	4302      	orrs	r2, r0
 8003670:	3340      	adds	r3, #64	; 0x40
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e267      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d075      	beq.n	80037ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036de:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d00c      	beq.n	8003704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ea:	4b85      	ldr	r3, [pc, #532]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d112      	bne.n	800371c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f6:	4b82      	ldr	r3, [pc, #520]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003702:	d10b      	bne.n	800371c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d05b      	beq.n	80037c8 <HAL_RCC_OscConfig+0x108>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d157      	bne.n	80037c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e242      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d106      	bne.n	8003734 <HAL_RCC_OscConfig+0x74>
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a75      	ldr	r2, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xb0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x98>
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6f      	ldr	r2, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b6d      	ldr	r3, [pc, #436]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6c      	ldr	r2, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xb0>
 8003758:	4b69      	ldr	r3, [pc, #420]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a68      	ldr	r2, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fd fb6a 	bl	8000e50 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fb66 	bl	8000e50 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e207      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b5b      	ldr	r3, [pc, #364]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xc0>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fb56 	bl	8000e50 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fb52 	bl	8000e50 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1f3      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b51      	ldr	r3, [pc, #324]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0xe8>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d6:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ee:	4b44      	ldr	r3, [pc, #272]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x152>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1c7      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4937      	ldr	r1, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e03a      	b.n	800389e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_OscConfig+0x244>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fb0b 	bl	8000e50 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383e:	f7fd fb07 	bl	8000e50 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1a8      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4925      	ldr	r1, [pc, #148]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_OscConfig+0x244>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd faea 	bl	8000e50 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003880:	f7fd fae6 	bl	8000e50 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e187      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d036      	beq.n	8003918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_RCC_OscConfig+0x248>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd faca 	bl	8000e50 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fd fac6 	bl	8000e50 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e167      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x240>)
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x200>
 80038de:	e01b      	b.n	8003918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_OscConfig+0x248>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fd fab3 	bl	8000e50 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e00e      	b.n	800390c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fd faaf 	bl	8000e50 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d907      	bls.n	800390c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e150      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
 8003900:	40023800 	.word	0x40023800
 8003904:	42470000 	.word	0x42470000
 8003908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ea      	bne.n	80038ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8097 	beq.w	8003a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b81      	ldr	r3, [pc, #516]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	4b7d      	ldr	r3, [pc, #500]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a7c      	ldr	r2, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b7a      	ldr	r3, [pc, #488]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b77      	ldr	r3, [pc, #476]	; (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d118      	bne.n	8003994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b74      	ldr	r3, [pc, #464]	; (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a73      	ldr	r2, [pc, #460]	; (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fd fa6f 	bl	8000e50 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fd fa6b 	bl	8000e50 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e10c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b6a      	ldr	r3, [pc, #424]	; (8003b34 <HAL_RCC_OscConfig+0x474>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x2ea>
 800399c:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a63      	ldr	r2, [pc, #396]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	e01c      	b.n	80039e4 <HAL_RCC_OscConfig+0x324>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0x30c>
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
 80039be:	4b5c      	ldr	r3, [pc, #368]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a5b      	ldr	r2, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0x324>
 80039cc:	4b58      	ldr	r3, [pc, #352]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a57      	ldr	r2, [pc, #348]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	4b55      	ldr	r3, [pc, #340]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a54      	ldr	r2, [pc, #336]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039de:	f023 0304 	bic.w	r3, r3, #4
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fd fa30 	bl	8000e50 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fd fa2c 	bl	8000e50 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0cb      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ee      	beq.n	80039f4 <HAL_RCC_OscConfig+0x334>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a18:	f7fd fa1a 	bl	8000e50 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fd fa16 	bl	8000e50 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0b5      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a36:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ee      	bne.n	8003a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	4a38      	ldr	r2, [pc, #224]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a1 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d05c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d141      	bne.n	8003af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fd f9ea 	bl	8000e50 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd f9e6 	bl	8000e50 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e087      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd f9bf 	bl	8000e50 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd f9bb 	bl	8000e50 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e05c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x416>
 8003af4:	e054      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd f9a8 	bl	8000e50 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd f9a4 	bl	8000e50 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e045      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x444>
 8003b22:	e03d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e038      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x4ec>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d028      	beq.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d121      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d11a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d111      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90c      	bls.n	8003bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d044      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e067      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4934      	ldr	r1, [pc, #208]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fd f8d6 	bl	8000e50 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fd f8d2 	bl	8000e50 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20c      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 f821 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490a      	ldr	r1, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f836 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08008d08 	.word	0x08008d08
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d80:	b094      	sub	sp, #80	; 0x50
 8003d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	647b      	str	r3, [r7, #68]	; 0x44
 8003d88:	2300      	movs	r3, #0
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d94:	4b79      	ldr	r3, [pc, #484]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d00d      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x40>
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	f200 80e1 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x34>
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dae:	e0db      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4b73      	ldr	r3, [pc, #460]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003db4:	e0db      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db6:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8003db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dba:	e0d8      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc6:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d063      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	2200      	movs	r2, #0
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dee:	4622      	mov	r2, r4
 8003df0:	462b      	mov	r3, r5
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e00:	0150      	lsls	r0, r2, #5
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4621      	mov	r1, r4
 8003e08:	1a51      	subs	r1, r2, r1
 8003e0a:	6139      	str	r1, [r7, #16]
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e20:	4659      	mov	r1, fp
 8003e22:	018b      	lsls	r3, r1, #6
 8003e24:	4651      	mov	r1, sl
 8003e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	018a      	lsls	r2, r1, #6
 8003e2e:	4651      	mov	r1, sl
 8003e30:	ebb2 0801 	subs.w	r8, r2, r1
 8003e34:	4659      	mov	r1, fp
 8003e36:	eb63 0901 	sbc.w	r9, r3, r1
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4e:	4690      	mov	r8, r2
 8003e50:	4699      	mov	r9, r3
 8003e52:	4623      	mov	r3, r4
 8003e54:	eb18 0303 	adds.w	r3, r8, r3
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	eb49 0303 	adc.w	r3, r9, r3
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e6e:	4629      	mov	r1, r5
 8003e70:	024b      	lsls	r3, r1, #9
 8003e72:	4621      	mov	r1, r4
 8003e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e78:	4621      	mov	r1, r4
 8003e7a:	024a      	lsls	r2, r1, #9
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e82:	2200      	movs	r2, #0
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e8c:	f7fc f9f8 	bl	8000280 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e98:	e058      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	f04f 0000 	mov.w	r0, #0
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	0159      	lsls	r1, r3, #5
 8003ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec6:	0150      	lsls	r0, r2, #5
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4641      	mov	r1, r8
 8003ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	00eb      	lsls	r3, r5, #3
 8003efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	4614      	mov	r4, r2
 8003f06:	461d      	mov	r5, r3
 8003f08:	4643      	mov	r3, r8
 8003f0a:	18e3      	adds	r3, r4, r3
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	464b      	mov	r3, r9
 8003f10:	eb45 0303 	adc.w	r3, r5, r3
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f22:	4629      	mov	r1, r5
 8003f24:	028b      	lsls	r3, r1, #10
 8003f26:	4621      	mov	r1, r4
 8003f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	028a      	lsls	r2, r1, #10
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f36:	2200      	movs	r2, #0
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	61fa      	str	r2, [r7, #28]
 8003f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f40:	f7fc f99e 	bl	8000280 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	3301      	adds	r3, #1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3750      	adds	r7, #80	; 0x50
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200

08003f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 001c 	add.w	r0, r7, #28
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d122      	bne.n	8003ffe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 fbee 	bl	80057d4 <USB_CoreReset>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e01a      	b.n	8004034 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 fbe2 	bl	80057d4 <USB_CoreReset>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
 8004026:	e005      	b.n	8004034 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10b      	bne.n	8004052 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f043 0206 	orr.w	r2, r3, #6
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800405e:	b004      	add	sp, #16
 8004060:	4770      	bx	lr
	...

08004064 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d165      	bne.n	8004144 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a41      	ldr	r2, [pc, #260]	; (8004180 <USB_SetTurnaroundTime+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d906      	bls.n	800408e <USB_SetTurnaroundTime+0x2a>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <USB_SetTurnaroundTime+0x120>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d202      	bcs.n	800408e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004088:	230f      	movs	r3, #15
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e062      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <USB_SetTurnaroundTime+0x120>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d306      	bcc.n	80040a4 <USB_SetTurnaroundTime+0x40>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <USB_SetTurnaroundTime+0x124>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d202      	bcs.n	80040a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800409e:	230e      	movs	r3, #14
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e057      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a38      	ldr	r2, [pc, #224]	; (8004188 <USB_SetTurnaroundTime+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d306      	bcc.n	80040ba <USB_SetTurnaroundTime+0x56>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a37      	ldr	r2, [pc, #220]	; (800418c <USB_SetTurnaroundTime+0x128>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d202      	bcs.n	80040ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040b4:	230d      	movs	r3, #13
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e04c      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a33      	ldr	r2, [pc, #204]	; (800418c <USB_SetTurnaroundTime+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d306      	bcc.n	80040d0 <USB_SetTurnaroundTime+0x6c>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a32      	ldr	r2, [pc, #200]	; (8004190 <USB_SetTurnaroundTime+0x12c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040ca:	230c      	movs	r3, #12
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e041      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <USB_SetTurnaroundTime+0x12c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d906      	bls.n	80040e6 <USB_SetTurnaroundTime+0x82>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a2e      	ldr	r2, [pc, #184]	; (8004194 <USB_SetTurnaroundTime+0x130>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d802      	bhi.n	80040e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040e0:	230b      	movs	r3, #11
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e036      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <USB_SetTurnaroundTime+0x130>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d906      	bls.n	80040fc <USB_SetTurnaroundTime+0x98>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4a29      	ldr	r2, [pc, #164]	; (8004198 <USB_SetTurnaroundTime+0x134>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040f6:	230a      	movs	r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e02b      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a26      	ldr	r2, [pc, #152]	; (8004198 <USB_SetTurnaroundTime+0x134>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d906      	bls.n	8004112 <USB_SetTurnaroundTime+0xae>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <USB_SetTurnaroundTime+0x138>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d202      	bcs.n	8004112 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800410c:	2309      	movs	r3, #9
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e020      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4a21      	ldr	r2, [pc, #132]	; (800419c <USB_SetTurnaroundTime+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d306      	bcc.n	8004128 <USB_SetTurnaroundTime+0xc4>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4a20      	ldr	r2, [pc, #128]	; (80041a0 <USB_SetTurnaroundTime+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d802      	bhi.n	8004128 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004122:	2308      	movs	r3, #8
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e015      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <USB_SetTurnaroundTime+0x13c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d906      	bls.n	800413e <USB_SetTurnaroundTime+0xda>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <USB_SetTurnaroundTime+0x140>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d202      	bcs.n	800413e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004138:	2307      	movs	r3, #7
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e00a      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800413e:	2306      	movs	r3, #6
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e007      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800414a:	2309      	movs	r3, #9
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e001      	b.n	8004154 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004150:	2309      	movs	r3, #9
 8004152:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	00d8acbf 	.word	0x00d8acbf
 8004184:	00e4e1c0 	.word	0x00e4e1c0
 8004188:	00f42400 	.word	0x00f42400
 800418c:	01067380 	.word	0x01067380
 8004190:	011a499f 	.word	0x011a499f
 8004194:	01312cff 	.word	0x01312cff
 8004198:	014ca43f 	.word	0x014ca43f
 800419c:	016e3600 	.word	0x016e3600
 80041a0:	01a6ab1f 	.word	0x01a6ab1f
 80041a4:	01e84800 	.word	0x01e84800

080041a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d115      	bne.n	800423a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800421a:	2001      	movs	r0, #1
 800421c:	f7fc fe24 	bl	8000e68 <HAL_Delay>
      ms++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3301      	adds	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f001 fa45 	bl	80056b6 <USB_GetMode>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d01e      	beq.n	8004270 <USB_SetCurrentMode+0x84>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b31      	cmp	r3, #49	; 0x31
 8004236:	d9f0      	bls.n	800421a <USB_SetCurrentMode+0x2e>
 8004238:	e01a      	b.n	8004270 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d115      	bne.n	800426c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800424c:	2001      	movs	r0, #1
 800424e:	f7fc fe0b 	bl	8000e68 <HAL_Delay>
      ms++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fa2c 	bl	80056b6 <USB_GetMode>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <USB_SetCurrentMode+0x84>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b31      	cmp	r3, #49	; 0x31
 8004268:	d9f0      	bls.n	800424c <USB_SetCurrentMode+0x60>
 800426a:	e001      	b.n	8004270 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e005      	b.n	800427c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b32      	cmp	r3, #50	; 0x32
 8004274:	d101      	bne.n	800427a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004284:	b084      	sub	sp, #16
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e009      	b.n	80042b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3340      	adds	r3, #64	; 0x40
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	3301      	adds	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0e      	cmp	r3, #14
 80042bc:	d9f2      	bls.n	80042a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11c      	bne.n	80042fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
 80042fc:	e00b      	b.n	8004316 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800431c:	461a      	mov	r2, r3
 800431e:	2300      	movs	r3, #0
 8004320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	4619      	mov	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	461a      	mov	r2, r3
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10c      	bne.n	8004356 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f965 	bl	8004614 <USB_SetDevSpeed>
 800434a:	e008      	b.n	800435e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800434c:	2101      	movs	r1, #1
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f960 	bl	8004614 <USB_SetDevSpeed>
 8004354:	e003      	b.n	800435e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004356:	2103      	movs	r1, #3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f95b 	bl	8004614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800435e:	2110      	movs	r1, #16
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f3 	bl	800454c <USB_FlushTxFifo>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f91f 	bl	80045b4 <USB_FlushRxFifo>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e043      	b.n	8004432 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c0:	d118      	bne.n	80043f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e013      	b.n	8004406 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e008      	b.n	8004406 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	461a      	mov	r2, r3
 8004402:	2300      	movs	r3, #0
 8004404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	461a      	mov	r2, r3
 8004426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800442a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3b7      	bcc.n	80043aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e043      	b.n	80044c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004456:	d118      	bne.n	800448a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e013      	b.n	800449c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e008      	b.n	800449c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3b7      	bcc.n	8004440 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <USB_DevInit+0x2c4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004544:	b004      	add	sp, #16
 8004546:	4770      	bx	lr
 8004548:	803c3800 	.word	0x803c3800

0800454c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <USB_FlushTxFifo+0x64>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e01b      	b.n	80045a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	daf2      	bge.n	800455a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	019b      	lsls	r3, r3, #6
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <USB_FlushTxFifo+0x64>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e006      	b.n	80045a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d0f0      	beq.n	8004584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <USB_FlushRxFifo+0x5c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e018      	b.n	8004604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	daf2      	bge.n	80045c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2210      	movs	r2, #16
 80045e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <USB_FlushRxFifo+0x5c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e006      	b.n	8004604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d0f0      	beq.n	80045e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	00030d40 	.word	0x00030d40

08004614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
 800466a:	e00a      	b.n	8004682 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d002      	beq.n	8004678 <USB_GetDevSpeed+0x32>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d102      	bne.n	800467e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004678:	2302      	movs	r3, #2
 800467a:	75fb      	strb	r3, [r7, #23]
 800467c:	e001      	b.n	8004682 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800467e:	230f      	movs	r3, #15
 8004680:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004682:	7dfb      	ldrb	r3, [r7, #23]
}
 8004684:	4618      	mov	r0, r3
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d13a      	bne.n	8004722 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d155      	bne.n	8004790 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	791b      	ldrb	r3, [r3, #4]
 80046fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004700:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	059b      	lsls	r3, r3, #22
 8004706:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004708:	4313      	orrs	r3, r2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e036      	b.n	8004790 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004740:	4313      	orrs	r3, r2
 8004742:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11a      	bne.n	8004790 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004776:	430b      	orrs	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d161      	bne.n	8004880 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d2:	d11f      	bne.n	8004814 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004834:	4013      	ands	r3, r2
 8004836:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0159      	lsls	r1, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	440b      	add	r3, r1
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	4619      	mov	r1, r3
 8004878:	4b35      	ldr	r3, [pc, #212]	; (8004950 <USB_DeactivateEndpoint+0x1b0>)
 800487a:	4013      	ands	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
 800487e:	e060      	b.n	8004942 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004896:	d11f      	bne.n	80048d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	43db      	mvns	r3, r3
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f8:	4013      	ands	r3, r2
 80048fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	43db      	mvns	r3, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491c:	4013      	ands	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0159      	lsls	r1, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	440b      	add	r3, r1
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	4619      	mov	r1, r3
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <USB_DeactivateEndpoint+0x1b4>)
 800493e:	4013      	ands	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	ec337800 	.word	0xec337800
 8004954:	eff37800 	.word	0xeff37800

08004958 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	; 0x28
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 815c 	bne.w	8004c32 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d132      	bne.n	80049e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	0cdb      	lsrs	r3, r3, #19
 80049e2:	04db      	lsls	r3, r3, #19
 80049e4:	6113      	str	r3, [r2, #16]
 80049e6:	e074      	b.n	8004ad2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a02:	0cdb      	lsrs	r3, r3, #19
 8004a04:	04db      	lsls	r3, r3, #19
 8004a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	440b      	add	r3, r1
 8004a44:	1e59      	subs	r1, r3, #1
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a50:	4b9d      	ldr	r3, [pc, #628]	; (8004cc8 <USB_EPStartXfer+0x370>)
 8004a52:	400b      	ands	r3, r1
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	0148      	lsls	r0, r1, #5
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	4401      	add	r1, r0
 8004a5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	0148      	lsls	r0, r1, #5
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	4401      	add	r1, r0
 8004a82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d11f      	bne.n	8004ad2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ab0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ad0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d14b      	bne.n	8004b70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d128      	bne.n	8004b4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d110      	bne.n	8004b2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e00f      	b.n	8004b4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e133      	b.n	8004dd8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	791b      	ldrb	r3, [r3, #4]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d015      	beq.n	8004bc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 811b 	beq.w	8004dd8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bc2:	e109      	b.n	8004dd8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d110      	bne.n	8004bf6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e00f      	b.n	8004c16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6919      	ldr	r1, [r3, #16]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	b298      	uxth	r0, r3
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	4603      	mov	r3, r0
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fade 	bl	80051ec <USB_WritePacket>
 8004c30:	e0d2      	b.n	8004dd8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4c:	0cdb      	lsrs	r3, r3, #19
 8004c4e:	04db      	lsls	r3, r3, #19
 8004c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d126      	bne.n	8004ccc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	0148      	lsls	r0, r1, #5
 8004c98:	69f9      	ldr	r1, [r7, #28]
 8004c9a:	4401      	add	r1, r0
 8004c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc2:	6113      	str	r3, [r2, #16]
 8004cc4:	e03a      	b.n	8004d3c <USB_EPStartXfer+0x3e4>
 8004cc6:	bf00      	nop
 8004cc8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	8afa      	ldrh	r2, [r7, #22]
 8004ce8:	fb03 f202 	mul.w	r2, r3, r2
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	8afb      	ldrh	r3, [r7, #22]
 8004d00:	04d9      	lsls	r1, r3, #19
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <USB_EPStartXfer+0x48c>)
 8004d04:	400b      	ands	r3, r1
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	0148      	lsls	r0, r1, #5
 8004d0a:	69f9      	ldr	r1, [r7, #28]
 8004d0c:	4401      	add	r1, r0
 8004d0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	0148      	lsls	r0, r1, #5
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	4401      	add	r1, r0
 8004d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d10d      	bne.n	8004d5e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6919      	ldr	r1, [r3, #16]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	791b      	ldrb	r3, [r3, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d128      	bne.n	8004db8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d110      	bne.n	8004d98 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00f      	b.n	8004db8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	1ff80000 	.word	0x1ff80000

08004de8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 80ce 	bne.w	8004fa6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d132      	bne.n	8004e78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	0cdb      	lsrs	r3, r3, #19
 8004e72:	04db      	lsls	r3, r3, #19
 8004e74:	6113      	str	r3, [r2, #16]
 8004e76:	e04e      	b.n	8004f16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	0cdb      	lsrs	r3, r3, #19
 8004e94:	04db      	lsls	r3, r3, #19
 8004e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d903      	bls.n	8004ed0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	0148      	lsls	r0, r1, #5
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	4401      	add	r1, r0
 8004f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d11e      	bne.n	8004f5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e097      	b.n	800508a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8083 	beq.w	800508a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	2101      	movs	r1, #1
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	6979      	ldr	r1, [r7, #20]
 8004f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	634b      	str	r3, [r1, #52]	; 0x34
 8004fa4:	e071      	b.n	800508a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	0cdb      	lsrs	r3, r3, #19
 8004fc2:	04db      	lsls	r3, r3, #19
 8004fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	6939      	ldr	r1, [r7, #16]
 800503a:	0148      	lsls	r0, r1, #5
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	4401      	add	r1, r0
 8005040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005044:	4313      	orrs	r3, r2
 8005046:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10d      	bne.n	800506a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6919      	ldr	r1, [r3, #16]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	460a      	mov	r2, r1
 8005068:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005088:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d14a      	bne.n	800514c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ce:	f040 8086 	bne.w	80051de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	7812      	ldrb	r2, [r2, #0]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005118:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f242 7210 	movw	r2, #10000	; 0x2710
 8005126:	4293      	cmp	r3, r2
 8005128:	d902      	bls.n	8005130 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
          break;
 800512e:	e056      	b.n	80051de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005148:	d0e7      	beq.n	800511a <USB_EPStopXfer+0x82>
 800514a:	e048      	b.n	80051de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005164:	d13b      	bne.n	80051de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005188:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d902      	bls.n	80051c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
          break;
 80051c2:	e00c      	b.n	80051de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051dc:	d0e7      	beq.n	80051ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	460b      	mov	r3, r1
 80051fc:	71fb      	strb	r3, [r7, #7]
 80051fe:	4613      	mov	r3, r2
 8005200:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800520a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d123      	bne.n	800525a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005212:	88bb      	ldrh	r3, [r7, #4]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e018      	b.n	8005252 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	031a      	lsls	r2, r3, #12
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	461a      	mov	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	3301      	adds	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3e2      	bcc.n	8005220 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3724      	adds	r7, #36	; 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005268:	b480      	push	{r7}
 800526a:	b08b      	sub	sp, #44	; 0x2c
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	b29b      	uxth	r3, r3
 8005284:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e014      	b.n	80052be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	601a      	str	r2, [r3, #0]
    pDest++;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	3301      	adds	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	3301      	adds	r3, #1
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	3301      	adds	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	3301      	adds	r3, #1
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3e6      	bcc.n	8005294 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052c6:	8bfb      	ldrh	r3, [r7, #30]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01e      	beq.n	800530a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	461a      	mov	r2, r3
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	701a      	strb	r2, [r3, #0]
      i++;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	3301      	adds	r3, #1
 80052f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	3b01      	subs	r3, #1
 8005302:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ea      	bne.n	80052e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800530c:	4618      	mov	r0, r3
 800530e:	372c      	adds	r7, #44	; 0x2c
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d12c      	bne.n	800538e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	db12      	blt.n	800536c <USB_EPSetStall+0x54>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00f      	beq.n	800536c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800536a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e02b      	b.n	80053e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db12      	blt.n	80053c6 <USB_EPSetStall+0xae>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00f      	beq.n	80053c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d128      	bne.n	8005462 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	791b      	ldrb	r3, [r3, #4]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d003      	beq.n	8005440 <USB_EPClearStall+0x4c>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d138      	bne.n	80054b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e027      	b.n	80054b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005480:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d003      	beq.n	8005492 <USB_EPClearStall+0x9e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	791b      	ldrb	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d10f      	bne.n	80054b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054f4:	68f9      	ldr	r1, [r7, #12]
 80054f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553a:	f023 0302 	bic.w	r3, r3, #2
 800553e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005568:	f023 0303 	bic.w	r3, r3, #3
 800556c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4013      	ands	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0c1b      	lsrs	r3, r3, #16
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	b29b      	uxth	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800564c:	68bb      	ldr	r3, [r7, #8]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800565a:	b480      	push	{r7}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	b2db      	uxtb	r3, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4013      	ands	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056a8:	68bb      	ldr	r3, [r7, #8]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0301 	and.w	r3, r3, #1
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	460b      	mov	r3, r1
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	333c      	adds	r3, #60	; 0x3c
 800572e:	3304      	adds	r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <USB_EP0_OutStart+0xb8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d90a      	bls.n	8005752 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574c:	d101      	bne.n	8005752 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e037      	b.n	80057c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	461a      	mov	r2, r3
 800575a:	2300      	movs	r3, #0
 800575c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005780:	f043 0318 	orr.w	r3, r3, #24
 8005784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005794:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005798:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10f      	bne.n	80057c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	4f54300a 	.word	0x4f54300a

080057d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_CoreReset+0x64>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e01b      	b.n	800582a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	daf2      	bge.n	80057e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f043 0201 	orr.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <USB_CoreReset+0x64>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d0f0      	beq.n	800580a <USB_CoreReset+0x36>

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	00030d40 	.word	0x00030d40

0800583c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005848:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800584c:	f002 fcc4 	bl	80081d8 <USBD_static_malloc>
 8005850:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	32b0      	adds	r2, #176	; 0xb0
 8005862:	2100      	movs	r1, #0
 8005864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005868:	2302      	movs	r3, #2
 800586a:	e0d4      	b.n	8005a16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800586c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005870:	2100      	movs	r1, #0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f002 fd14 	bl	80082a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	32b0      	adds	r2, #176	; 0xb0
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	32b0      	adds	r2, #176	; 0xb0
 8005892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	7c1b      	ldrb	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d138      	bne.n	8005916 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <USBD_CDC_Init+0x1e4>)
 80058a6:	7819      	ldrb	r1, [r3, #0]
 80058a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ac:	2202      	movs	r2, #2
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f002 fb6f 	bl	8007f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058b4:	4b5a      	ldr	r3, [pc, #360]	; (8005a20 <USBD_CDC_Init+0x1e4>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3324      	adds	r3, #36	; 0x24
 80058ca:	2201      	movs	r2, #1
 80058cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058ce:	4b55      	ldr	r3, [pc, #340]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 80058d0:	7819      	ldrb	r1, [r3, #0]
 80058d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d6:	2202      	movs	r2, #2
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 fb5a 	bl	8007f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058de:	4b51      	ldr	r3, [pc, #324]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058f6:	2201      	movs	r2, #1
 80058f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80058fa:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <USBD_CDC_Init+0x1ec>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	3326      	adds	r3, #38	; 0x26
 8005910:	2210      	movs	r2, #16
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e035      	b.n	8005982 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005916:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <USBD_CDC_Init+0x1e4>)
 8005918:	7819      	ldrb	r1, [r3, #0]
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	2202      	movs	r2, #2
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f002 fb37 	bl	8007f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <USBD_CDC_Init+0x1e4>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3324      	adds	r3, #36	; 0x24
 800593a:	2201      	movs	r2, #1
 800593c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800593e:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 8005940:	7819      	ldrb	r1, [r3, #0]
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	2202      	movs	r2, #2
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f002 fb23 	bl	8007f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800594c:	4b35      	ldr	r3, [pc, #212]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 020f 	and.w	r2, r3, #15
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005964:	2201      	movs	r2, #1
 8005966:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005968:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <USBD_CDC_Init+0x1ec>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	3326      	adds	r3, #38	; 0x26
 800597e:	2210      	movs	r2, #16
 8005980:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <USBD_CDC_Init+0x1ec>)
 8005984:	7819      	ldrb	r1, [r3, #0]
 8005986:	2308      	movs	r3, #8
 8005988:	2203      	movs	r2, #3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f002 fb01 	bl	8007f92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <USBD_CDC_Init+0x1ec>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3324      	adds	r3, #36	; 0x24
 80059a6:	2201      	movs	r2, #1
 80059a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	33b0      	adds	r3, #176	; 0xb0
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80059e0:	2302      	movs	r3, #2
 80059e2:	e018      	b.n	8005a16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7c1b      	ldrb	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 80059ee:	7819      	ldrb	r1, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f002 fbb8 	bl	8008170 <USBD_LL_PrepareReceive>
 8005a00:	e008      	b.n	8005a14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <USBD_CDC_Init+0x1e8>)
 8005a04:	7819      	ldrb	r1, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f002 fbae 	bl	8008170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000093 	.word	0x20000093
 8005a24:	20000094 	.word	0x20000094
 8005a28:	20000095 	.word	0x20000095

08005a2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a38:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <USBD_CDC_DeInit+0xf8>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f002 facd 	bl	8007fde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a44:	4b37      	ldr	r3, [pc, #220]	; (8005b24 <USBD_CDC_DeInit+0xf8>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 020f 	and.w	r2, r3, #15
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3324      	adds	r3, #36	; 0x24
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a5e:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <USBD_CDC_DeInit+0xfc>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 faba 	bl	8007fde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	; (8005b28 <USBD_CDC_DeInit+0xfc>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a82:	2200      	movs	r2, #0
 8005a84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <USBD_CDC_DeInit+0x100>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 faa6 	bl	8007fde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <USBD_CDC_DeInit+0x100>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f003 020f 	and.w	r2, r3, #15
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <USBD_CDC_DeInit+0x100>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3326      	adds	r3, #38	; 0x26
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32b0      	adds	r2, #176	; 0xb0
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01f      	beq.n	8005b18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	33b0      	adds	r3, #176	; 0xb0
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	32b0      	adds	r2, #176	; 0xb0
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f002 fb7a 	bl	80081f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32b0      	adds	r2, #176	; 0xb0
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000093 	.word	0x20000093
 8005b28:	20000094 	.word	0x20000094
 8005b2c:	20000095 	.word	0x20000095

08005b30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	32b0      	adds	r2, #176	; 0xb0
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e0bf      	b.n	8005ce0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d050      	beq.n	8005c0e <USBD_CDC_Setup+0xde>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	f040 80af 	bne.w	8005cd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	88db      	ldrh	r3, [r3, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03a      	beq.n	8005bf0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b25b      	sxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da1b      	bge.n	8005bbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	33b0      	adds	r3, #176	; 0xb0
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	88d2      	ldrh	r2, [r2, #6]
 8005ba0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	88db      	ldrh	r3, [r3, #6]
 8005ba6:	2b07      	cmp	r3, #7
 8005ba8:	bf28      	it	cs
 8005baa:	2307      	movcs	r3, #7
 8005bac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	89fa      	ldrh	r2, [r7, #14]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fd89 	bl	80076cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bba:	e090      	b.n	8005cde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	785a      	ldrb	r2, [r3, #1]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b3f      	cmp	r3, #63	; 0x3f
 8005bcc:	d803      	bhi.n	8005bd6 <USBD_CDC_Setup+0xa6>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	88db      	ldrh	r3, [r3, #6]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	e000      	b.n	8005bd8 <USBD_CDC_Setup+0xa8>
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005bde:	6939      	ldr	r1, [r7, #16]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005be6:	461a      	mov	r2, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fd9b 	bl	8007724 <USBD_CtlPrepareRx>
      break;
 8005bee:	e076      	b.n	8005cde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	33b0      	adds	r3, #176	; 0xb0
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	7850      	ldrb	r0, [r2, #1]
 8005c06:	2200      	movs	r2, #0
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	4798      	blx	r3
      break;
 8005c0c:	e067      	b.n	8005cde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b0b      	cmp	r3, #11
 8005c14:	d851      	bhi.n	8005cba <USBD_CDC_Setup+0x18a>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <USBD_CDC_Setup+0xec>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c4d 	.word	0x08005c4d
 8005c20:	08005cc9 	.word	0x08005cc9
 8005c24:	08005cbb 	.word	0x08005cbb
 8005c28:	08005cbb 	.word	0x08005cbb
 8005c2c:	08005cbb 	.word	0x08005cbb
 8005c30:	08005cbb 	.word	0x08005cbb
 8005c34:	08005cbb 	.word	0x08005cbb
 8005c38:	08005cbb 	.word	0x08005cbb
 8005c3c:	08005cbb 	.word	0x08005cbb
 8005c40:	08005cbb 	.word	0x08005cbb
 8005c44:	08005c77 	.word	0x08005c77
 8005c48:	08005ca1 	.word	0x08005ca1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d107      	bne.n	8005c68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c58:	f107 030a 	add.w	r3, r7, #10
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fd33 	bl	80076cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c66:	e032      	b.n	8005cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fcbd 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005c70:	2303      	movs	r3, #3
 8005c72:	75fb      	strb	r3, [r7, #23]
          break;
 8005c74:	e02b      	b.n	8005cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d107      	bne.n	8005c92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c82:	f107 030d 	add.w	r3, r7, #13
 8005c86:	2201      	movs	r2, #1
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fd1e 	bl	80076cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c90:	e01d      	b.n	8005cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 fca8 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c9e:	e016      	b.n	8005cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d00f      	beq.n	8005ccc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fc9b 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cb8:	e008      	b.n	8005ccc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fc94 	bl	80075ea <USBD_CtlError>
          ret = USBD_FAIL;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc6:	e002      	b.n	8005cce <USBD_CDC_Setup+0x19e>
          break;
 8005cc8:	bf00      	nop
 8005cca:	e008      	b.n	8005cde <USBD_CDC_Setup+0x1ae>
          break;
 8005ccc:	bf00      	nop
      }
      break;
 8005cce:	e006      	b.n	8005cde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fc89 	bl	80075ea <USBD_CtlError>
      ret = USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	75fb      	strb	r3, [r7, #23]
      break;
 8005cdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005cfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	32b0      	adds	r2, #176	; 0xb0
 8005d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e065      	b.n	8005dde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	32b0      	adds	r2, #176	; 0xb0
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3318      	adds	r3, #24
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d02f      	beq.n	8005d9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3318      	adds	r3, #24
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 010f 	and.w	r1, r3, #15
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	440b      	add	r3, r1
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4403      	add	r3, r0
 8005d64:	3348      	adds	r3, #72	; 0x48
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d112      	bne.n	8005d9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	3318      	adds	r3, #24
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d8e:	78f9      	ldrb	r1, [r7, #3]
 8005d90:	2300      	movs	r3, #0
 8005d92:	2200      	movs	r2, #0
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f002 f9ca 	bl	800812e <USBD_LL_Transmit>
 8005d9a:	e01f      	b.n	8005ddc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	33b0      	adds	r3, #176	; 0xb0
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	33b0      	adds	r3, #176	; 0xb0
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	32b0      	adds	r2, #176	; 0xb0
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32b0      	adds	r2, #176	; 0xb0
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e01a      	b.n	8005e4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 f9c8 	bl	80081b2 <USBD_LL_GetRxDataSize>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	33b0      	adds	r3, #176	; 0xb0
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	32b0      	adds	r2, #176	; 0xb0
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e025      	b.n	8005ec4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	33b0      	adds	r3, #176	; 0xb0
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01a      	beq.n	8005ec2 <USBD_CDC_EP0_RxReady+0x6c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e92:	2bff      	cmp	r3, #255	; 0xff
 8005e94:	d015      	beq.n	8005ec2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	33b0      	adds	r3, #176	; 0xb0
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005eae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	22ff      	movs	r2, #255	; 0xff
 8005ebe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ed4:	2182      	movs	r1, #130	; 0x82
 8005ed6:	4818      	ldr	r0, [pc, #96]	; (8005f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ed8:	f000 fd4f 	bl	800697a <USBD_GetEpDesc>
 8005edc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4815      	ldr	r0, [pc, #84]	; (8005f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ee2:	f000 fd4a 	bl	800697a <USBD_GetEpDesc>
 8005ee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ee8:	2181      	movs	r1, #129	; 0x81
 8005eea:	4813      	ldr	r0, [pc, #76]	; (8005f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005eec:	f000 fd45 	bl	800697a <USBD_GetEpDesc>
 8005ef0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2210      	movs	r2, #16
 8005efc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0c:	711a      	strb	r2, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d006      	beq.n	8005f26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f20:	711a      	strb	r2, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2243      	movs	r2, #67	; 0x43
 8005f2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000050 	.word	0x20000050

08005f3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f44:	2182      	movs	r1, #130	; 0x82
 8005f46:	4818      	ldr	r0, [pc, #96]	; (8005fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f48:	f000 fd17 	bl	800697a <USBD_GetEpDesc>
 8005f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f4e:	2101      	movs	r1, #1
 8005f50:	4815      	ldr	r0, [pc, #84]	; (8005fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f52:	f000 fd12 	bl	800697a <USBD_GetEpDesc>
 8005f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f58:	2181      	movs	r1, #129	; 0x81
 8005f5a:	4813      	ldr	r0, [pc, #76]	; (8005fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f5c:	f000 fd0d 	bl	800697a <USBD_GetEpDesc>
 8005f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2200      	movs	r2, #0
 8005f78:	711a      	strb	r2, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f042 0202 	orr.w	r2, r2, #2
 8005f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	711a      	strb	r2, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f042 0202 	orr.w	r2, r2, #2
 8005f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2243      	movs	r2, #67	; 0x43
 8005f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000050 	.word	0x20000050

08005fac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fb4:	2182      	movs	r1, #130	; 0x82
 8005fb6:	4818      	ldr	r0, [pc, #96]	; (8006018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fb8:	f000 fcdf 	bl	800697a <USBD_GetEpDesc>
 8005fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4815      	ldr	r0, [pc, #84]	; (8006018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fc2:	f000 fcda 	bl	800697a <USBD_GetEpDesc>
 8005fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fc8:	2181      	movs	r1, #129	; 0x81
 8005fca:	4813      	ldr	r0, [pc, #76]	; (8006018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fcc:	f000 fcd5 	bl	800697a <USBD_GetEpDesc>
 8005fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2210      	movs	r2, #16
 8005fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fec:	711a      	strb	r2, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006000:	711a      	strb	r2, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2243      	movs	r2, #67	; 0x43
 800600a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800600c:	4b02      	ldr	r3, [pc, #8]	; (8006018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000050 	.word	0x20000050

0800601c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	220a      	movs	r2, #10
 8006028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800602a:	4b03      	ldr	r3, [pc, #12]	; (8006038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	2000000c 	.word	0x2000000c

0800603c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800604c:	2303      	movs	r3, #3
 800604e:	e009      	b.n	8006064 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	33b0      	adds	r3, #176	; 0xb0
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	32b0      	adds	r2, #176	; 0xb0
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	e008      	b.n	80060a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	32b0      	adds	r2, #176	; 0xb0
 80060c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e004      	b.n	80060e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32b0      	adds	r2, #176	; 0xb0
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	32b0      	adds	r2, #176	; 0xb0
 8006116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e025      	b.n	800616e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11f      	bne.n	800616c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2201      	movs	r2, #1
 8006130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006134:	4b10      	ldr	r3, [pc, #64]	; (8006178 <USBD_CDC_TransmitPacket+0x88>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f003 020f 	and.w	r2, r3, #15
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4403      	add	r3, r0
 800614e:	3318      	adds	r3, #24
 8006150:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <USBD_CDC_TransmitPacket+0x88>)
 8006154:	7819      	ldrb	r1, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 ffe3 	bl	800812e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000093 	.word	0x20000093

0800617c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	32b0      	adds	r2, #176	; 0xb0
 800618e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006192:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32b0      	adds	r2, #176	; 0xb0
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e018      	b.n	80061dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7c1b      	ldrb	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <USBD_CDC_ReceivePacket+0x68>)
 80061b4:	7819      	ldrb	r1, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 ffd5 	bl	8008170 <USBD_LL_PrepareReceive>
 80061c6:	e008      	b.n	80061da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <USBD_CDC_ReceivePacket+0x68>)
 80061ca:	7819      	ldrb	r1, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 ffcb 	bl	8008170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000094 	.word	0x20000094

080061e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e01f      	b.n	8006240 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	79fa      	ldrb	r2, [r7, #7]
 8006232:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f001 fe45 	bl	8007ec4 <USBD_LL_Init>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	e025      	b.n	80062ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	32ae      	adds	r2, #174	; 0xae
 8006272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00f      	beq.n	800629c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	; 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f107 020e 	add.w	r2, r7, #14
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
 8006294:	4602      	mov	r2, r0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fe4d 	bl	8007f5c <USBD_LL_Start>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	4611      	mov	r1, r2
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	4611      	mov	r1, r2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006340:	2303      	movs	r3, #3
 8006342:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f908 	bl	8007576 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006374:	461a      	mov	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2b02      	cmp	r3, #2
 8006388:	d01a      	beq.n	80063c0 <USBD_LL_SetupStage+0x72>
 800638a:	2b02      	cmp	r3, #2
 800638c:	d822      	bhi.n	80063d4 <USBD_LL_SetupStage+0x86>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <USBD_LL_SetupStage+0x4a>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00a      	beq.n	80063ac <USBD_LL_SetupStage+0x5e>
 8006396:	e01d      	b.n	80063d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fb5f 	bl	8006a64 <USBD_StdDevReq>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
      break;
 80063aa:	e020      	b.n	80063ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fbc7 	bl	8006b48 <USBD_StdItfReq>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
      break;
 80063be:	e016      	b.n	80063ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fc29 	bl	8006c20 <USBD_StdEPReq>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
      break;
 80063d2:	e00c      	b.n	80063ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fe1a 	bl	800801c <USBD_LL_StallEP>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	bf00      	nop
  }

  return ret;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	460b      	mov	r3, r1
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d16e      	bne.n	80064ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006416:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800641e:	2b03      	cmp	r3, #3
 8006420:	f040 8098 	bne.w	8006554 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	429a      	cmp	r2, r3
 800642e:	d913      	bls.n	8006458 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4293      	cmp	r3, r2
 8006448:	bf28      	it	cs
 800644a:	4613      	movcs	r3, r2
 800644c:	461a      	mov	r2, r3
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 f984 	bl	800775e <USBD_CtlContinueRx>
 8006456:	e07d      	b.n	8006554 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2b02      	cmp	r3, #2
 8006464:	d014      	beq.n	8006490 <USBD_LL_DataOutStage+0x98>
 8006466:	2b02      	cmp	r3, #2
 8006468:	d81d      	bhi.n	80064a6 <USBD_LL_DataOutStage+0xae>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <USBD_LL_DataOutStage+0x7c>
 800646e:	2b01      	cmp	r3, #1
 8006470:	d003      	beq.n	800647a <USBD_LL_DataOutStage+0x82>
 8006472:	e018      	b.n	80064a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	75bb      	strb	r3, [r7, #22]
            break;
 8006478:	e018      	b.n	80064ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006480:	b2db      	uxtb	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa5e 	bl	8006946 <USBD_CoreFindIF>
 800648a:	4603      	mov	r3, r0
 800648c:	75bb      	strb	r3, [r7, #22]
            break;
 800648e:	e00d      	b.n	80064ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006496:	b2db      	uxtb	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fa60 	bl	8006960 <USBD_CoreFindEP>
 80064a0:	4603      	mov	r3, r0
 80064a2:	75bb      	strb	r3, [r7, #22]
            break;
 80064a4:	e002      	b.n	80064ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75bb      	strb	r3, [r7, #22]
            break;
 80064aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064ac:	7dbb      	ldrb	r3, [r7, #22]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d119      	bne.n	80064e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d113      	bne.n	80064e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	32ae      	adds	r2, #174	; 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80064ce:	7dba      	ldrb	r2, [r7, #22]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80064d6:	7dba      	ldrb	r2, [r7, #22]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	32ae      	adds	r2, #174	; 0xae
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f001 f94a 	bl	8007780 <USBD_CtlSendStatus>
 80064ec:	e032      	b.n	8006554 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fa31 	bl	8006960 <USBD_CoreFindEP>
 80064fe:	4603      	mov	r3, r0
 8006500:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006502:	7dbb      	ldrb	r3, [r7, #22]
 8006504:	2bff      	cmp	r3, #255	; 0xff
 8006506:	d025      	beq.n	8006554 <USBD_LL_DataOutStage+0x15c>
 8006508:	7dbb      	ldrb	r3, [r7, #22]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d122      	bne.n	8006554 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b03      	cmp	r3, #3
 8006518:	d117      	bne.n	800654a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800651a:	7dba      	ldrb	r2, [r7, #22]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	32ae      	adds	r2, #174	; 0xae
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800652a:	7dba      	ldrb	r2, [r7, #22]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006532:	7dba      	ldrb	r2, [r7, #22]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	32ae      	adds	r2, #174	; 0xae
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	7afa      	ldrb	r2, [r7, #11]
 8006540:	4611      	mov	r1, r2
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	e000      	b.n	8006556 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	460b      	mov	r3, r1
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d16f      	bne.n	8006652 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3314      	adds	r3, #20
 8006576:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800657e:	2b02      	cmp	r3, #2
 8006580:	d15a      	bne.n	8006638 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d914      	bls.n	80065b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f001 f8ac 	bl	8007702 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065aa:	2300      	movs	r3, #0
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 fddd 	bl	8008170 <USBD_LL_PrepareReceive>
 80065b6:	e03f      	b.n	8006638 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d11c      	bne.n	80065fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d316      	bcc.n	80065fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065da:	429a      	cmp	r2, r3
 80065dc:	d20f      	bcs.n	80065fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f001 f88d 	bl	8007702 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065f0:	2300      	movs	r3, #0
 80065f2:	2200      	movs	r2, #0
 80065f4:	2100      	movs	r1, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 fdba 	bl	8008170 <USBD_LL_PrepareReceive>
 80065fc:	e01c      	b.n	8006638 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d10f      	bne.n	800662a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f001 fcf5 	bl	800801c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 f8b7 	bl	80077a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d03a      	beq.n	80066b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fe42 	bl	80062cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006650:	e032      	b.n	80066b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006658:	b2db      	uxtb	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f97f 	bl	8006960 <USBD_CoreFindEP>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2bff      	cmp	r3, #255	; 0xff
 800666a:	d025      	beq.n	80066b8 <USBD_LL_DataInStage+0x15a>
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d122      	bne.n	80066b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b03      	cmp	r3, #3
 800667c:	d11c      	bne.n	80066b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800667e:	7dfa      	ldrb	r2, [r7, #23]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	32ae      	adds	r2, #174	; 0xae
 8006684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d014      	beq.n	80066b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800668e:	7dfa      	ldrb	r2, [r7, #23]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006696:	7dfa      	ldrb	r2, [r7, #23]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	32ae      	adds	r2, #174	; 0xae
 800669c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	7afa      	ldrb	r2, [r7, #11]
 80066a4:	4611      	mov	r1, r2
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066ae:	7dbb      	ldrb	r3, [r7, #22]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80066b4:	7dbb      	ldrb	r3, [r7, #22]
 80066b6:	e000      	b.n	80066ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d014      	beq.n	8006728 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6852      	ldr	r2, [r2, #4]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	4611      	mov	r1, r2
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fc2f 	bl	8007f92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	2200      	movs	r2, #0
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fc21 	bl	8007f92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2240      	movs	r2, #64	; 0x40
 800675a:	621a      	str	r2, [r3, #32]

  return ret;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006794:	b2da      	uxtb	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2204      	movs	r2, #4
 80067a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d106      	bne.n	80067d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d110      	bne.n	8006818 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	32ae      	adds	r2, #174	; 0xae
 8006838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	e01c      	b.n	800687e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b03      	cmp	r3, #3
 800684e:	d115      	bne.n	800687c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32ae      	adds	r2, #174	; 0xae
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	4611      	mov	r1, r2
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	32ae      	adds	r2, #174	; 0xae
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e01c      	b.n	80068e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d115      	bne.n	80068e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32ae      	adds	r2, #174	; 0xae
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32ae      	adds	r2, #174	; 0xae
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	4611      	mov	r1, r2
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6852      	ldr	r2, [r2, #4]
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	4611      	mov	r1, r2
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006938:	2303      	movs	r3, #3
 800693a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006952:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800696c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b086      	sub	sp, #24
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	885b      	ldrh	r3, [r3, #2]
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	429a      	cmp	r2, r3
 80069a0:	d920      	bls.n	80069e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069aa:	e013      	b.n	80069d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069ac:	f107 030a 	add.w	r3, r7, #10
 80069b0:	4619      	mov	r1, r3
 80069b2:	6978      	ldr	r0, [r7, #20]
 80069b4:	f000 f81b 	bl	80069ee <USBD_GetNextDesc>
 80069b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d108      	bne.n	80069d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	789b      	ldrb	r3, [r3, #2]
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d008      	beq.n	80069e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	885b      	ldrh	r3, [r3, #2]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	897b      	ldrh	r3, [r7, #10]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d8e5      	bhi.n	80069ac <USBD_GetEpDesc+0x32>
 80069e0:	e000      	b.n	80069e4 <USBD_GetEpDesc+0x6a>
          break;
 80069e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80069e4:	693b      	ldr	r3, [r7, #16]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4413      	add	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a46:	8a3b      	ldrh	r3, [r7, #16]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	b21a      	sxth	r2, r3
 8006a4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a56:	89fb      	ldrh	r3, [r7, #14]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d005      	beq.n	8006a8a <USBD_StdDevReq+0x26>
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d857      	bhi.n	8006b32 <USBD_StdDevReq+0xce>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00f      	beq.n	8006aa6 <USBD_StdDevReq+0x42>
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d153      	bne.n	8006b32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	32ae      	adds	r2, #174	; 0xae
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	e04a      	b.n	8006b3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d83b      	bhi.n	8006b26 <USBD_StdDevReq+0xc2>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <USBD_StdDevReq+0x50>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006b1d 	.word	0x08006b1d
 8006abc:	08006b27 	.word	0x08006b27
 8006ac0:	08006b13 	.word	0x08006b13
 8006ac4:	08006b27 	.word	0x08006b27
 8006ac8:	08006ae7 	.word	0x08006ae7
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006b27 	.word	0x08006b27
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006af1 	.word	0x08006af1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa3c 	bl	8006f5c <USBD_GetDescriptor>
          break;
 8006ae4:	e024      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fba1 	bl	8007230 <USBD_SetAddress>
          break;
 8006aee:	e01f      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fbe0 	bl	80072b8 <USBD_SetConfig>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
          break;
 8006afc:	e018      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fc83 	bl	800740c <USBD_GetConfig>
          break;
 8006b06:	e013      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fcb4 	bl	8007478 <USBD_GetStatus>
          break;
 8006b10:	e00e      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fce3 	bl	80074e0 <USBD_SetFeature>
          break;
 8006b1a:	e009      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fd07 	bl	8007532 <USBD_ClrFeature>
          break;
 8006b24:	e004      	b.n	8006b30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fd5e 	bl	80075ea <USBD_CtlError>
          break;
 8006b2e:	bf00      	nop
      }
      break;
 8006b30:	e004      	b.n	8006b3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fd58 	bl	80075ea <USBD_CtlError>
      break;
 8006b3a:	bf00      	nop
  }

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop

08006b48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d005      	beq.n	8006b6e <USBD_StdItfReq+0x26>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d852      	bhi.n	8006c0c <USBD_StdItfReq+0xc4>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <USBD_StdItfReq+0x26>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d14e      	bne.n	8006c0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d840      	bhi.n	8006bfe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	889b      	ldrh	r3, [r3, #4]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d836      	bhi.n	8006bf4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	889b      	ldrh	r3, [r3, #4]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fed9 	bl	8006946 <USBD_CoreFindIF>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d01d      	beq.n	8006bda <USBD_StdItfReq+0x92>
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11a      	bne.n	8006bda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ba4:	7bba      	ldrb	r2, [r7, #14]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32ae      	adds	r2, #174	; 0xae
 8006baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006bb4:	7bba      	ldrb	r2, [r7, #14]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bbc:	7bba      	ldrb	r2, [r7, #14]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bd2:	e004      	b.n	8006bde <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bd8:	e001      	b.n	8006bde <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d110      	bne.n	8006c08 <USBD_StdItfReq+0xc0>
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fdc7 	bl	8007780 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bf2:	e009      	b.n	8006c08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fcf7 	bl	80075ea <USBD_CtlError>
          break;
 8006bfc:	e004      	b.n	8006c08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fcf2 	bl	80075ea <USBD_CtlError>
          break;
 8006c06:	e000      	b.n	8006c0a <USBD_StdItfReq+0xc2>
          break;
 8006c08:	bf00      	nop
      }
      break;
 8006c0a:	e004      	b.n	8006c16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fceb 	bl	80075ea <USBD_CtlError>
      break;
 8006c14:	bf00      	nop
  }

  return ret;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	889b      	ldrh	r3, [r3, #4]
 8006c32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d007      	beq.n	8006c50 <USBD_StdEPReq+0x30>
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	f200 817f 	bhi.w	8006f44 <USBD_StdEPReq+0x324>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02a      	beq.n	8006ca0 <USBD_StdEPReq+0x80>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	f040 817a 	bne.w	8006f44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fe83 	bl	8006960 <USBD_CoreFindEP>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c5e:	7b7b      	ldrb	r3, [r7, #13]
 8006c60:	2bff      	cmp	r3, #255	; 0xff
 8006c62:	f000 8174 	beq.w	8006f4e <USBD_StdEPReq+0x32e>
 8006c66:	7b7b      	ldrb	r3, [r7, #13]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 8170 	bne.w	8006f4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c6e:	7b7a      	ldrb	r2, [r7, #13]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c76:	7b7a      	ldrb	r2, [r7, #13]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32ae      	adds	r2, #174	; 0xae
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8163 	beq.w	8006f4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c88:	7b7a      	ldrb	r2, [r7, #13]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	32ae      	adds	r2, #174	; 0xae
 8006c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c9e:	e156      	b.n	8006f4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d008      	beq.n	8006cba <USBD_StdEPReq+0x9a>
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	f300 8145 	bgt.w	8006f38 <USBD_StdEPReq+0x318>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 809b 	beq.w	8006dea <USBD_StdEPReq+0x1ca>
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d03c      	beq.n	8006d32 <USBD_StdEPReq+0x112>
 8006cb8:	e13e      	b.n	8006f38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d002      	beq.n	8006ccc <USBD_StdEPReq+0xac>
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d016      	beq.n	8006cf8 <USBD_StdEPReq+0xd8>
 8006cca:	e02c      	b.n	8006d26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <USBD_StdEPReq+0xce>
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b80      	cmp	r3, #128	; 0x80
 8006cd6:	d00a      	beq.n	8006cee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f99d 	bl	800801c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ce2:	2180      	movs	r1, #128	; 0x80
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f999 	bl	800801c <USBD_LL_StallEP>
 8006cea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cec:	e020      	b.n	8006d30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc7a 	bl	80075ea <USBD_CtlError>
              break;
 8006cf6:	e01b      	b.n	8006d30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	885b      	ldrh	r3, [r3, #2]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10e      	bne.n	8006d1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <USBD_StdEPReq+0xfe>
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b80      	cmp	r3, #128	; 0x80
 8006d0a:	d008      	beq.n	8006d1e <USBD_StdEPReq+0xfe>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	88db      	ldrh	r3, [r3, #6]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f97f 	bl	800801c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fd2e 	bl	8007780 <USBD_CtlSendStatus>

              break;
 8006d24:	e004      	b.n	8006d30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fc5e 	bl	80075ea <USBD_CtlError>
              break;
 8006d2e:	bf00      	nop
          }
          break;
 8006d30:	e107      	b.n	8006f42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d002      	beq.n	8006d44 <USBD_StdEPReq+0x124>
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d016      	beq.n	8006d70 <USBD_StdEPReq+0x150>
 8006d42:	e04b      	b.n	8006ddc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <USBD_StdEPReq+0x146>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d00a      	beq.n	8006d66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f961 	bl	800801c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f95d 	bl	800801c <USBD_LL_StallEP>
 8006d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d64:	e040      	b.n	8006de8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc3e 	bl	80075ea <USBD_CtlError>
              break;
 8006d6e:	e03b      	b.n	8006de8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d136      	bne.n	8006de6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f967 	bl	800805a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fcf7 	bl	8007780 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fde2 	bl	8006960 <USBD_CoreFindEP>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006da0:	7b7b      	ldrb	r3, [r7, #13]
 8006da2:	2bff      	cmp	r3, #255	; 0xff
 8006da4:	d01f      	beq.n	8006de6 <USBD_StdEPReq+0x1c6>
 8006da6:	7b7b      	ldrb	r3, [r7, #13]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11c      	bne.n	8006de6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dac:	7b7a      	ldrb	r2, [r7, #13]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006db4:	7b7a      	ldrb	r2, [r7, #13]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d010      	beq.n	8006de6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006dc4:	7b7a      	ldrb	r2, [r7, #13]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	32ae      	adds	r2, #174	; 0xae
 8006dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006dda:	e004      	b.n	8006de6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc03 	bl	80075ea <USBD_CtlError>
              break;
 8006de4:	e000      	b.n	8006de8 <USBD_StdEPReq+0x1c8>
              break;
 8006de6:	bf00      	nop
          }
          break;
 8006de8:	e0ab      	b.n	8006f42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d002      	beq.n	8006dfc <USBD_StdEPReq+0x1dc>
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d032      	beq.n	8006e60 <USBD_StdEPReq+0x240>
 8006dfa:	e097      	b.n	8006f2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <USBD_StdEPReq+0x1f2>
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d004      	beq.n	8006e12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fbed 	bl	80075ea <USBD_CtlError>
                break;
 8006e10:	e091      	b.n	8006f36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da0b      	bge.n	8006e32 <USBD_StdEPReq+0x212>
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	3310      	adds	r3, #16
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	e00b      	b.n	8006e4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4413      	add	r3, r2
 8006e48:	3304      	adds	r3, #4
 8006e4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2202      	movs	r2, #2
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc37 	bl	80076cc <USBD_CtlSendData>
              break;
 8006e5e:	e06a      	b.n	8006f36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da11      	bge.n	8006e8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d117      	bne.n	8006eb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fbb0 	bl	80075ea <USBD_CtlError>
                  break;
 8006e8a:	e054      	b.n	8006f36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	f003 020f 	and.w	r2, r3, #15
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d104      	bne.n	8006eb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb9d 	bl	80075ea <USBD_CtlError>
                  break;
 8006eb0:	e041      	b.n	8006f36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da0b      	bge.n	8006ed2 <USBD_StdEPReq+0x2b2>
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	3310      	adds	r3, #16
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	3304      	adds	r3, #4
 8006ed0:	e00b      	b.n	8006eea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <USBD_StdEPReq+0x2d8>
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d103      	bne.n	8006f00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e00e      	b.n	8006f1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f8c7 	bl	8008098 <USBD_LL_IsStallEP>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2202      	movs	r2, #2
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fbd1 	bl	80076cc <USBD_CtlSendData>
              break;
 8006f2a:	e004      	b.n	8006f36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fb5b 	bl	80075ea <USBD_CtlError>
              break;
 8006f34:	bf00      	nop
          }
          break;
 8006f36:	e004      	b.n	8006f42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb55 	bl	80075ea <USBD_CtlError>
          break;
 8006f40:	bf00      	nop
      }
      break;
 8006f42:	e005      	b.n	8006f50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb4f 	bl	80075ea <USBD_CtlError>
      break;
 8006f4c:	e000      	b.n	8006f50 <USBD_StdEPReq+0x330>
      break;
 8006f4e:	bf00      	nop
  }

  return ret;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	885b      	ldrh	r3, [r3, #2]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	f200 8128 	bhi.w	80071d2 <USBD_GetDescriptor+0x276>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <USBD_GetDescriptor+0x2c>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fa5 	.word	0x08006fa5
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006ffd 	.word	0x08006ffd
 8006f94:	080071d3 	.word	0x080071d3
 8006f98:	080071d3 	.word	0x080071d3
 8006f9c:	08007173 	.word	0x08007173
 8006fa0:	0800719f 	.word	0x0800719f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
      break;
 8006fba:	e112      	b.n	80071e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7c1b      	ldrb	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10d      	bne.n	8006fe0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f107 0208 	add.w	r2, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	2202      	movs	r2, #2
 8006fdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fde:	e100      	b.n	80071e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f107 0208 	add.w	r2, r7, #8
 8006fec:	4610      	mov	r0, r2
 8006fee:	4798      	blx	r3
 8006ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
      break;
 8006ffa:	e0f2      	b.n	80071e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b05      	cmp	r3, #5
 8007004:	f200 80ac 	bhi.w	8007160 <USBD_GetDescriptor+0x204>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <USBD_GetDescriptor+0xb4>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007029 	.word	0x08007029
 8007014:	0800705d 	.word	0x0800705d
 8007018:	08007091 	.word	0x08007091
 800701c:	080070c5 	.word	0x080070c5
 8007020:	080070f9 	.word	0x080070f9
 8007024:	0800712d 	.word	0x0800712d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	f107 0108 	add.w	r1, r7, #8
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800704a:	e091      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 facb 	bl	80075ea <USBD_CtlError>
            err++;
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	3301      	adds	r3, #1
 8007058:	72fb      	strb	r3, [r7, #11]
          break;
 800705a:	e089      	b.n	8007170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7c12      	ldrb	r2, [r2, #16]
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707e:	e077      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fab1 	bl	80075ea <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
          break;
 800708e:	e06f      	b.n	8007170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b2:	e05d      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa97 	bl	80075ea <USBD_CtlError>
            err++;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	3301      	adds	r3, #1
 80070c0:	72fb      	strb	r3, [r7, #11]
          break;
 80070c2:	e055      	b.n	8007170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7c12      	ldrb	r2, [r2, #16]
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e6:	e043      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa7d 	bl	80075ea <USBD_CtlError>
            err++;
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	3301      	adds	r3, #1
 80070f4:	72fb      	strb	r3, [r7, #11]
          break;
 80070f6:	e03b      	b.n	8007170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711a:	e029      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa63 	bl	80075ea <USBD_CtlError>
            err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
          break;
 800712a:	e021      	b.n	8007170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714e:	e00f      	b.n	8007170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa49 	bl	80075ea <USBD_CtlError>
            err++;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	3301      	adds	r3, #1
 800715c:	72fb      	strb	r3, [r7, #11]
          break;
 800715e:	e007      	b.n	8007170 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa41 	bl	80075ea <USBD_CtlError>
          err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800716e:	bf00      	nop
      }
      break;
 8007170:	e037      	b.n	80071e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	7c1b      	ldrb	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f107 0208 	add.w	r2, r7, #8
 8007186:	4610      	mov	r0, r2
 8007188:	4798      	blx	r3
 800718a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800718c:	e029      	b.n	80071e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa2a 	bl	80075ea <USBD_CtlError>
        err++;
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	3301      	adds	r3, #1
 800719a:	72fb      	strb	r3, [r7, #11]
      break;
 800719c:	e021      	b.n	80071e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7c1b      	ldrb	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f107 0208 	add.w	r2, r7, #8
 80071b2:	4610      	mov	r0, r2
 80071b4:	4798      	blx	r3
 80071b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	2207      	movs	r2, #7
 80071be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071c0:	e00f      	b.n	80071e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa10 	bl	80075ea <USBD_CtlError>
        err++;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	3301      	adds	r3, #1
 80071ce:	72fb      	strb	r3, [r7, #11]
      break;
 80071d0:	e007      	b.n	80071e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa08 	bl	80075ea <USBD_CtlError>
      err++;
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	3301      	adds	r3, #1
 80071de:	72fb      	strb	r3, [r7, #11]
      break;
 80071e0:	bf00      	nop
  }

  if (err != 0U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11e      	bne.n	8007226 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	88db      	ldrh	r3, [r3, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d016      	beq.n	800721e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88da      	ldrh	r2, [r3, #6]
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bf28      	it	cs
 8007200:	4613      	movcs	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	461a      	mov	r2, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa5d 	bl	80076cc <USBD_CtlSendData>
 8007212:	e009      	b.n	8007228 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9e7 	bl	80075ea <USBD_CtlError>
 800721c:	e004      	b.n	8007228 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 faae 	bl	8007780 <USBD_CtlSendStatus>
 8007224:	e000      	b.n	8007228 <USBD_GetDescriptor+0x2cc>
    return;
 8007226:	bf00      	nop
  }
}
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop

08007230 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	889b      	ldrh	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d131      	bne.n	80072a6 <USBD_SetAddress+0x76>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d12d      	bne.n	80072a6 <USBD_SetAddress+0x76>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d829      	bhi.n	80072a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d104      	bne.n	8007274 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9bc 	bl	80075ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	e01d      	b.n	80072b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ff35 	bl	80080f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa7a 	bl	8007780 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	e009      	b.n	80072b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	e004      	b.n	80072b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f99e 	bl	80075ea <USBD_CtlError>
  }
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	4b4e      	ldr	r3, [pc, #312]	; (8007408 <USBD_SetConfig+0x150>)
 80072ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072d0:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <USBD_SetConfig+0x150>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d905      	bls.n	80072e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f985 	bl	80075ea <USBD_CtlError>
    return USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e08c      	b.n	80073fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d002      	beq.n	80072f6 <USBD_SetConfig+0x3e>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d029      	beq.n	8007348 <USBD_SetConfig+0x90>
 80072f4:	e075      	b.n	80073e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072f6:	4b44      	ldr	r3, [pc, #272]	; (8007408 <USBD_SetConfig+0x150>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d020      	beq.n	8007340 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80072fe:	4b42      	ldr	r3, [pc, #264]	; (8007408 <USBD_SetConfig+0x150>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <USBD_SetConfig+0x150>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe ffe7 	bl	80062e2 <USBD_SetClassConfig>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d008      	beq.n	8007330 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f962 	bl	80075ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800732e:	e065      	b.n	80073fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa25 	bl	8007780 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2203      	movs	r2, #3
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800733e:	e05d      	b.n	80073fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa1d 	bl	8007780 <USBD_CtlSendStatus>
      break;
 8007346:	e059      	b.n	80073fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007348:	4b2f      	ldr	r3, [pc, #188]	; (8007408 <USBD_SetConfig+0x150>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d112      	bne.n	8007376 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <USBD_SetConfig+0x150>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007362:	4b29      	ldr	r3, [pc, #164]	; (8007408 <USBD_SetConfig+0x150>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe ffd6 	bl	800631a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa06 	bl	8007780 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007374:	e042      	b.n	80073fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007376:	4b24      	ldr	r3, [pc, #144]	; (8007408 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d02a      	beq.n	80073da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fe ffc4 	bl	800631a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007392:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <USBD_SetConfig+0x150>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <USBD_SetConfig+0x150>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fe ff9d 	bl	80062e2 <USBD_SetClassConfig>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00f      	beq.n	80073d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f918 	bl	80075ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe ffa9 	bl	800631a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073d0:	e014      	b.n	80073fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9d4 	bl	8007780 <USBD_CtlSendStatus>
      break;
 80073d8:	e010      	b.n	80073fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9d0 	bl	8007780 <USBD_CtlSendStatus>
      break;
 80073e0:	e00c      	b.n	80073fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f900 	bl	80075ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <USBD_SetConfig+0x150>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fe ff92 	bl	800631a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073f6:	2303      	movs	r3, #3
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	bf00      	nop
  }

  return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200001a8 	.word	0x200001a8

0800740c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88db      	ldrh	r3, [r3, #6]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d004      	beq.n	8007428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8e2 	bl	80075ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007426:	e023      	b.n	8007470 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	dc02      	bgt.n	800743a <USBD_GetConfig+0x2e>
 8007434:	2b00      	cmp	r3, #0
 8007436:	dc03      	bgt.n	8007440 <USBD_GetConfig+0x34>
 8007438:	e015      	b.n	8007466 <USBD_GetConfig+0x5a>
 800743a:	2b03      	cmp	r3, #3
 800743c:	d00b      	beq.n	8007456 <USBD_GetConfig+0x4a>
 800743e:	e012      	b.n	8007466 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3308      	adds	r3, #8
 800744a:	2201      	movs	r2, #1
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f93c 	bl	80076cc <USBD_CtlSendData>
        break;
 8007454:	e00c      	b.n	8007470 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2201      	movs	r2, #1
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f934 	bl	80076cc <USBD_CtlSendData>
        break;
 8007464:	e004      	b.n	8007470 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8be 	bl	80075ea <USBD_CtlError>
        break;
 800746e:	bf00      	nop
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	2b02      	cmp	r3, #2
 800748e:	d81e      	bhi.n	80074ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	88db      	ldrh	r3, [r3, #6]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d004      	beq.n	80074a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8a5 	bl	80075ea <USBD_CtlError>
        break;
 80074a0:	e01a      	b.n	80074d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f043 0202 	orr.w	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	330c      	adds	r3, #12
 80074c2:	2202      	movs	r2, #2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f900 	bl	80076cc <USBD_CtlSendData>
      break;
 80074cc:	e004      	b.n	80074d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f88a 	bl	80075ea <USBD_CtlError>
      break;
 80074d6:	bf00      	nop
  }
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d107      	bne.n	8007502 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f940 	bl	8007780 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007500:	e013      	b.n	800752a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	885b      	ldrh	r3, [r3, #2]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d10b      	bne.n	8007522 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	889b      	ldrh	r3, [r3, #4]
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f930 	bl	8007780 <USBD_CtlSendStatus>
}
 8007520:	e003      	b.n	800752a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f860 	bl	80075ea <USBD_CtlError>
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	2b02      	cmp	r3, #2
 8007548:	d80b      	bhi.n	8007562 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	885b      	ldrh	r3, [r3, #2]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d10c      	bne.n	800756c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f910 	bl	8007780 <USBD_CtlSendStatus>
      }
      break;
 8007560:	e004      	b.n	800756c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f840 	bl	80075ea <USBD_CtlError>
      break;
 800756a:	e000      	b.n	800756e <USBD_ClrFeature+0x3c>
      break;
 800756c:	bf00      	nop
  }
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f7ff fa41 	bl	8006a28 <SWAPBYTE>
 80075a6:	4603      	mov	r3, r0
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3301      	adds	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7ff fa34 	bl	8006a28 <SWAPBYTE>
 80075c0:	4603      	mov	r3, r0
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff fa27 	bl	8006a28 <SWAPBYTE>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	80da      	strh	r2, [r3, #6]
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fd10 	bl	800801c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fd0c 	bl	800801c <USBD_LL_StallEP>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d036      	beq.n	8007690 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007626:	6938      	ldr	r0, [r7, #16]
 8007628:	f000 f836 	bl	8007698 <USBD_GetLen>
 800762c:	4603      	mov	r3, r0
 800762e:	3301      	adds	r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4413      	add	r3, r2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	701a      	strb	r2, [r3, #0]
  idx++;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	3301      	adds	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	4413      	add	r3, r2
 8007652:	2203      	movs	r2, #3
 8007654:	701a      	strb	r2, [r3, #0]
  idx++;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	3301      	adds	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800765c:	e013      	b.n	8007686 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	4413      	add	r3, r2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3301      	adds	r3, #1
 800766e:	613b      	str	r3, [r7, #16]
    idx++;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	3301      	adds	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4413      	add	r3, r2
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	3301      	adds	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e7      	bne.n	800765e <USBD_GetString+0x52>
 800768e:	e000      	b.n	8007692 <USBD_GetString+0x86>
    return;
 8007690:	bf00      	nop
  }
}
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076a8:	e005      	b.n	80076b6 <USBD_GetLen+0x1e>
  {
    len++;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	3301      	adds	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3301      	adds	r3, #1
 80076b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f5      	bne.n	80076aa <USBD_GetLen+0x12>
  }

  return len;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2202      	movs	r2, #2
 80076dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	2100      	movs	r1, #0
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fd1b 	bl	800812e <USBD_LL_Transmit>

  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	2100      	movs	r1, #0
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fd0a 	bl	800812e <USBD_LL_Transmit>

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2203      	movs	r2, #3
 8007734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fd0e 	bl	8008170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	2100      	movs	r1, #0
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fcfd 	bl	8008170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2204      	movs	r2, #4
 800778c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007790:	2300      	movs	r3, #0
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fcc9 	bl	800812e <USBD_LL_Transmit>

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2205      	movs	r2, #5
 80077b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077b6:	2300      	movs	r3, #0
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fcd7 	bl	8008170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077d0:	2200      	movs	r2, #0
 80077d2:	4912      	ldr	r1, [pc, #72]	; (800781c <MX_USB_DEVICE_Init+0x50>)
 80077d4:	4812      	ldr	r0, [pc, #72]	; (8007820 <MX_USB_DEVICE_Init+0x54>)
 80077d6:	f7fe fd07 	bl	80061e8 <USBD_Init>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077e0:	f7f9 f91e 	bl	8000a20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077e4:	490f      	ldr	r1, [pc, #60]	; (8007824 <MX_USB_DEVICE_Init+0x58>)
 80077e6:	480e      	ldr	r0, [pc, #56]	; (8007820 <MX_USB_DEVICE_Init+0x54>)
 80077e8:	f7fe fd2e 	bl	8006248 <USBD_RegisterClass>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077f2:	f7f9 f915 	bl	8000a20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077f6:	490c      	ldr	r1, [pc, #48]	; (8007828 <MX_USB_DEVICE_Init+0x5c>)
 80077f8:	4809      	ldr	r0, [pc, #36]	; (8007820 <MX_USB_DEVICE_Init+0x54>)
 80077fa:	f7fe fc1f 	bl	800603c <USBD_CDC_RegisterInterface>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007804:	f7f9 f90c 	bl	8000a20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007808:	4805      	ldr	r0, [pc, #20]	; (8007820 <MX_USB_DEVICE_Init+0x54>)
 800780a:	f7fe fd53 	bl	80062b4 <USBD_Start>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007814:	f7f9 f904 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007818:	bf00      	nop
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200000ac 	.word	0x200000ac
 8007820:	200001ac 	.word	0x200001ac
 8007824:	20000018 	.word	0x20000018
 8007828:	20000098 	.word	0x20000098

0800782c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007830:	2200      	movs	r2, #0
 8007832:	4905      	ldr	r1, [pc, #20]	; (8007848 <CDC_Init_FS+0x1c>)
 8007834:	4805      	ldr	r0, [pc, #20]	; (800784c <CDC_Init_FS+0x20>)
 8007836:	f7fe fc1b 	bl	8006070 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800783a:	4905      	ldr	r1, [pc, #20]	; (8007850 <CDC_Init_FS+0x24>)
 800783c:	4803      	ldr	r0, [pc, #12]	; (800784c <CDC_Init_FS+0x20>)
 800783e:	f7fe fc39 	bl	80060b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007842:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007844:	4618      	mov	r0, r3
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000c88 	.word	0x20000c88
 800784c:	200001ac 	.word	0x200001ac
 8007850:	20000488 	.word	0x20000488

08007854 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
 8007870:	4613      	mov	r3, r2
 8007872:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	2b23      	cmp	r3, #35	; 0x23
 8007878:	d84a      	bhi.n	8007910 <CDC_Control_FS+0xac>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <CDC_Control_FS+0x1c>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007911 	.word	0x08007911
 8007884:	08007911 	.word	0x08007911
 8007888:	08007911 	.word	0x08007911
 800788c:	08007911 	.word	0x08007911
 8007890:	08007911 	.word	0x08007911
 8007894:	08007911 	.word	0x08007911
 8007898:	08007911 	.word	0x08007911
 800789c:	08007911 	.word	0x08007911
 80078a0:	08007911 	.word	0x08007911
 80078a4:	08007911 	.word	0x08007911
 80078a8:	08007911 	.word	0x08007911
 80078ac:	08007911 	.word	0x08007911
 80078b0:	08007911 	.word	0x08007911
 80078b4:	08007911 	.word	0x08007911
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007911 	.word	0x08007911
 80078c0:	08007911 	.word	0x08007911
 80078c4:	08007911 	.word	0x08007911
 80078c8:	08007911 	.word	0x08007911
 80078cc:	08007911 	.word	0x08007911
 80078d0:	08007911 	.word	0x08007911
 80078d4:	08007911 	.word	0x08007911
 80078d8:	08007911 	.word	0x08007911
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007911 	.word	0x08007911
 80078e4:	08007911 	.word	0x08007911
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007911 	.word	0x08007911
 80078f4:	08007911 	.word	0x08007911
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007911 	.word	0x08007911
 8007900:	08007911 	.word	0x08007911
 8007904:	08007911 	.word	0x08007911
 8007908:	08007911 	.word	0x08007911
 800790c:	08007911 	.word	0x08007911
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007910:	bf00      	nop
  }

  return (USBD_OK);
 8007912:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4813      	ldr	r0, [pc, #76]	; (800797c <CDC_Receive_FS+0x5c>)
 800792e:	f7fe fbc1 	bl	80060b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007932:	4812      	ldr	r0, [pc, #72]	; (800797c <CDC_Receive_FS+0x5c>)
 8007934:	f7fe fc22 	bl	800617c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f81f 	bl	8007984 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b31      	cmp	r3, #49	; 0x31
 800794c:	d106      	bne.n	800795c <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800794e:	2201      	movs	r2, #1
 8007950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007954:	480a      	ldr	r0, [pc, #40]	; (8007980 <CDC_Receive_FS+0x60>)
 8007956:	f7fa fc1d 	bl	8002194 <HAL_GPIO_WritePin>
 800795a:	e009      	b.n	8007970 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b30      	cmp	r3, #48	; 0x30
 8007962:	d105      	bne.n	8007970 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007964:	2200      	movs	r2, #0
 8007966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800796a:	4805      	ldr	r0, [pc, #20]	; (8007980 <CDC_Receive_FS+0x60>)
 800796c:	f7fa fc12 	bl	8002194 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8007970:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200001ac 	.word	0x200001ac
 8007980:	40020c00 	.word	0x40020c00

08007984 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007994:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <CDC_Transmit_FS+0x48>)
 8007996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800799a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e00b      	b.n	80079c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079aa:	887b      	ldrh	r3, [r7, #2]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4806      	ldr	r0, [pc, #24]	; (80079cc <CDC_Transmit_FS+0x48>)
 80079b2:	f7fe fb5d 	bl	8006070 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <CDC_Transmit_FS+0x48>)
 80079b8:	f7fe fb9a 	bl	80060f0 <USBD_CDC_TransmitPacket>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200001ac 	.word	0x200001ac

080079d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
	...

080079f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2212      	movs	r2, #18
 8007a04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	200000c8 	.word	0x200000c8

08007a18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2204      	movs	r2, #4
 8007a28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	200000dc 	.word	0x200000dc

08007a3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	4907      	ldr	r1, [pc, #28]	; (8007a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a52:	4808      	ldr	r0, [pc, #32]	; (8007a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a54:	f7ff fdda 	bl	800760c <USBD_GetString>
 8007a58:	e004      	b.n	8007a64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4904      	ldr	r1, [pc, #16]	; (8007a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a5e:	4805      	ldr	r0, [pc, #20]	; (8007a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a60:	f7ff fdd4 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a64:	4b02      	ldr	r3, [pc, #8]	; (8007a70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20001488 	.word	0x20001488
 8007a74:	08008cc0 	.word	0x08008cc0

08007a78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	4904      	ldr	r1, [pc, #16]	; (8007a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a8a:	f7ff fdbf 	bl	800760c <USBD_GetString>
  return USBD_StrDesc;
 8007a8e:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20001488 	.word	0x20001488
 8007a9c:	08008cd8 	.word	0x08008cd8

08007aa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	221a      	movs	r2, #26
 8007ab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ab2:	f000 f843 	bl	8007b3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ab6:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	200000e0 	.word	0x200000e0

08007ac4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d105      	bne.n	8007ae2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ada:	4808      	ldr	r0, [pc, #32]	; (8007afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007adc:	f7ff fd96 	bl	800760c <USBD_GetString>
 8007ae0:	e004      	b.n	8007aec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4904      	ldr	r1, [pc, #16]	; (8007af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ae6:	4805      	ldr	r0, [pc, #20]	; (8007afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ae8:	f7ff fd90 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20001488 	.word	0x20001488
 8007afc:	08008cec 	.word	0x08008cec

08007b00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d105      	bne.n	8007b1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	4907      	ldr	r1, [pc, #28]	; (8007b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b16:	4808      	ldr	r0, [pc, #32]	; (8007b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b18:	f7ff fd78 	bl	800760c <USBD_GetString>
 8007b1c:	e004      	b.n	8007b28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	4904      	ldr	r1, [pc, #16]	; (8007b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b22:	4805      	ldr	r0, [pc, #20]	; (8007b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b24:	f7ff fd72 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20001488 	.word	0x20001488
 8007b38:	08008cf8 	.word	0x08008cf8

08007b3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <Get_SerialNum+0x44>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b48:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <Get_SerialNum+0x48>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <Get_SerialNum+0x4c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b62:	2208      	movs	r2, #8
 8007b64:	4909      	ldr	r1, [pc, #36]	; (8007b8c <Get_SerialNum+0x50>)
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f814 	bl	8007b94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	4908      	ldr	r1, [pc, #32]	; (8007b90 <Get_SerialNum+0x54>)
 8007b70:	68b8      	ldr	r0, [r7, #8]
 8007b72:	f000 f80f 	bl	8007b94 <IntToUnicode>
  }
}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	1fff7a10 	.word	0x1fff7a10
 8007b84:	1fff7a14 	.word	0x1fff7a14
 8007b88:	1fff7a18 	.word	0x1fff7a18
 8007b8c:	200000e2 	.word	0x200000e2
 8007b90:	200000f2 	.word	0x200000f2

08007b94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]
 8007baa:	e027      	b.n	8007bfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	0f1b      	lsrs	r3, r3, #28
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d80b      	bhi.n	8007bcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	0f1b      	lsrs	r3, r3, #28
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3230      	adds	r2, #48	; 0x30
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e00a      	b.n	8007be2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	0f1b      	lsrs	r3, r3, #28
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	440b      	add	r3, r1
 8007bdc:	3237      	adds	r2, #55	; 0x37
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	3301      	adds	r3, #1
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
 8007bfc:	7dfa      	ldrb	r2, [r7, #23]
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d3d3      	bcc.n	8007bac <IntToUnicode+0x18>
  }
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c1c:	f107 0314 	add.w	r3, r7, #20
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	609a      	str	r2, [r3, #8]
 8007c28:	60da      	str	r2, [r3, #12]
 8007c2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c34:	d14b      	bne.n	8007cce <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c36:	2300      	movs	r3, #0
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007c40:	f043 0301 	orr.w	r3, r3, #1
 8007c44:	6313      	str	r3, [r2, #48]	; 0x30
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c60:	2300      	movs	r3, #0
 8007c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c64:	230a      	movs	r3, #10
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c68:	f107 0314 	add.w	r3, r7, #20
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	481b      	ldr	r0, [pc, #108]	; (8007cdc <HAL_PCD_MspInit+0xc8>)
 8007c70:	f7fa f8dc 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c82:	2300      	movs	r3, #0
 8007c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c86:	230a      	movs	r3, #10
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4812      	ldr	r0, [pc, #72]	; (8007cdc <HAL_PCD_MspInit+0xc8>)
 8007c92:	f7fa f8cb 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	4a0f      	ldr	r2, [pc, #60]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca0:	6353      	str	r3, [r2, #52]	; 0x34
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	4a0b      	ldr	r2, [pc, #44]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_PCD_MspInit+0xc4>)
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2043      	movs	r0, #67	; 0x43
 8007cc4:	f7fa f87b 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007cc8:	2043      	movs	r0, #67	; 0x43
 8007cca:	f7fa f894 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cce:	bf00      	nop
 8007cd0:	3728      	adds	r7, #40	; 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	40020000 	.word	0x40020000

08007ce0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fb29 	bl	800634e <USBD_LL_SetupStage>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f7fe fb63 	bl	80063f8 <USBD_LL_DataOutStage>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	334c      	adds	r3, #76	; 0x4c
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7fe fbfc 	bl	800655e <USBD_LL_DataInStage>
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fd30 	bl	80067e2 <USBD_LL_SOF>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d92:	2301      	movs	r3, #1
 8007d94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]
 8007da2:	e008      	b.n	8007db6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d102      	bne.n	8007db2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007dac:	2301      	movs	r3, #1
 8007dae:	73fb      	strb	r3, [r7, #15]
 8007db0:	e001      	b.n	8007db6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007db2:	f7f8 fe35 	bl	8000a20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dbc:	7bfa      	ldrb	r2, [r7, #15]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fcd0 	bl	8006766 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fc78 	bl	80066c2 <USBD_LL_Reset>
}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fccb 	bl	8006786 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e10:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <HAL_PCD_SuspendCallback+0x48>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	4a03      	ldr	r2, [pc, #12]	; (8007e24 <HAL_PCD_SuspendCallback+0x48>)
 8007e16:	f043 0306 	orr.w	r3, r3, #6
 8007e1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fcbb 	bl	80067b2 <USBD_LL_Resume>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e56:	78fa      	ldrb	r2, [r7, #3]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fd13 	bl	8006886 <USBD_LL_IsoOUTIncomplete>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fccf 	bl	8006822 <USBD_LL_IsoINIncomplete>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd25 	bl	80068ea <USBD_LL_DevConnected>
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd22 	bl	8006900 <USBD_LL_DevDisconnected>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d13c      	bne.n	8007f4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ed4:	4a20      	ldr	r2, [pc, #128]	; (8007f58 <USBD_LL_Init+0x94>)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <USBD_LL_Init+0x94>)
 8007ee0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <USBD_LL_Init+0x94>)
 8007ee6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007eea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <USBD_LL_Init+0x94>)
 8007eee:	2204      	movs	r2, #4
 8007ef0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ef2:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <USBD_LL_Init+0x94>)
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ef8:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <USBD_LL_Init+0x94>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f00:	2202      	movs	r2, #2
 8007f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f04:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f10:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f22:	480d      	ldr	r0, [pc, #52]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f24:	f7fa f94f 	bl	80021c6 <HAL_PCD_Init>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f2e:	f7f8 fd77 	bl	8000a20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f32:	2180      	movs	r1, #128	; 0x80
 8007f34:	4808      	ldr	r0, [pc, #32]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f36:	f7fb fba6 	bl	8003686 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f3a:	2240      	movs	r2, #64	; 0x40
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4806      	ldr	r0, [pc, #24]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f40:	f7fb fb5a 	bl	80035f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f44:	2280      	movs	r2, #128	; 0x80
 8007f46:	2101      	movs	r1, #1
 8007f48:	4803      	ldr	r0, [pc, #12]	; (8007f58 <USBD_LL_Init+0x94>)
 8007f4a:	f7fb fb55 	bl	80035f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20001688 	.word	0x20001688

08007f5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fa fa44 	bl	8002400 <HAL_PCD_Start>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f942 	bl	8008208 <USBD_Get_USB_Status>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	70fb      	strb	r3, [r7, #3]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70bb      	strb	r3, [r7, #2]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fba:	78bb      	ldrb	r3, [r7, #2]
 8007fbc:	883a      	ldrh	r2, [r7, #0]
 8007fbe:	78f9      	ldrb	r1, [r7, #3]
 8007fc0:	f7fa ff15 	bl	8002dee <HAL_PCD_EP_Open>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f91c 	bl	8008208 <USBD_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fa ff5e 	bl	8002ebe <HAL_PCD_EP_Close>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f8fd 	bl	8008208 <USBD_Get_USB_Status>
 800800e:	4603      	mov	r3, r0
 8008010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008012:	7bbb      	ldrb	r3, [r7, #14]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7fb f836 	bl	80030ac <HAL_PCD_EP_SetStall>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f8de 	bl	8008208 <USBD_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7fb f87b 	bl	8003174 <HAL_PCD_EP_ClrStall>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f8bf 	bl	8008208 <USBD_Get_USB_Status>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	da0b      	bge.n	80080cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	333e      	adds	r3, #62	; 0x3e
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	e00b      	b.n	80080e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	4613      	mov	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80080e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7fa fe48 	bl	8002da4 <HAL_PCD_SetAddress>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f874 	bl	8008208 <USBD_Get_USB_Status>
 8008120:	4603      	mov	r3, r0
 8008122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008124:	7bbb      	ldrb	r3, [r7, #14]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	460b      	mov	r3, r1
 800813c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800814c:	7af9      	ldrb	r1, [r7, #11]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	f7fa ff61 	bl	8003018 <HAL_PCD_EP_Transmit>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f853 	bl	8008208 <USBD_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008166:	7dbb      	ldrb	r3, [r7, #22]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	460b      	mov	r3, r1
 800817e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800818e:	7af9      	ldrb	r1, [r7, #11]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f7fa fedd 	bl	8002f52 <HAL_PCD_EP_Receive>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f832 	bl	8008208 <USBD_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fa ff0d 	bl	8002fe8 <HAL_PCD_EP_GetRxCount>
 80081ce:	4603      	mov	r3, r0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <USBD_static_malloc+0x18>)
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20001b94 	.word	0x20001b94

080081f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	2b03      	cmp	r3, #3
 800821a:	d817      	bhi.n	800824c <USBD_Get_USB_Status+0x44>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <USBD_Get_USB_Status+0x1c>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008235 	.word	0x08008235
 8008228:	0800823b 	.word	0x0800823b
 800822c:	08008241 	.word	0x08008241
 8008230:	08008247 	.word	0x08008247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	e00b      	b.n	8008252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800823a:	2303      	movs	r3, #3
 800823c:	73fb      	strb	r3, [r7, #15]
    break;
 800823e:	e008      	b.n	8008252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	e005      	b.n	8008252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008246:	2303      	movs	r3, #3
 8008248:	73fb      	strb	r3, [r7, #15]
    break;
 800824a:	e002      	b.n	8008252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	bf00      	nop
  }
  return usb_status;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <siprintf>:
 8008260:	b40e      	push	{r1, r2, r3}
 8008262:	b500      	push	{lr}
 8008264:	b09c      	sub	sp, #112	; 0x70
 8008266:	ab1d      	add	r3, sp, #116	; 0x74
 8008268:	9002      	str	r0, [sp, #8]
 800826a:	9006      	str	r0, [sp, #24]
 800826c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <siprintf+0x38>)
 8008272:	9107      	str	r1, [sp, #28]
 8008274:	9104      	str	r1, [sp, #16]
 8008276:	4909      	ldr	r1, [pc, #36]	; (800829c <siprintf+0x3c>)
 8008278:	f853 2b04 	ldr.w	r2, [r3], #4
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	a902      	add	r1, sp, #8
 8008284:	f000 f992 	bl	80085ac <_svfiprintf_r>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	b01c      	add	sp, #112	; 0x70
 8008290:	f85d eb04 	ldr.w	lr, [sp], #4
 8008294:	b003      	add	sp, #12
 8008296:	4770      	bx	lr
 8008298:	20000148 	.word	0x20000148
 800829c:	ffff0208 	.word	0xffff0208

080082a0 <memset>:
 80082a0:	4402      	add	r2, r0
 80082a2:	4603      	mov	r3, r0
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d100      	bne.n	80082aa <memset+0xa>
 80082a8:	4770      	bx	lr
 80082aa:	f803 1b01 	strb.w	r1, [r3], #1
 80082ae:	e7f9      	b.n	80082a4 <memset+0x4>

080082b0 <__errno>:
 80082b0:	4b01      	ldr	r3, [pc, #4]	; (80082b8 <__errno+0x8>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000148 	.word	0x20000148

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4d0d      	ldr	r5, [pc, #52]	; (80082f4 <__libc_init_array+0x38>)
 80082c0:	4c0d      	ldr	r4, [pc, #52]	; (80082f8 <__libc_init_array+0x3c>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	2600      	movs	r6, #0
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	4d0b      	ldr	r5, [pc, #44]	; (80082fc <__libc_init_array+0x40>)
 80082ce:	4c0c      	ldr	r4, [pc, #48]	; (8008300 <__libc_init_array+0x44>)
 80082d0:	f000 fc6a 	bl	8008ba8 <_init>
 80082d4:	1b64      	subs	r4, r4, r5
 80082d6:	10a4      	asrs	r4, r4, #2
 80082d8:	2600      	movs	r6, #0
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	08008d54 	.word	0x08008d54
 80082f8:	08008d54 	.word	0x08008d54
 80082fc:	08008d54 	.word	0x08008d54
 8008300:	08008d58 	.word	0x08008d58

08008304 <__retarget_lock_acquire_recursive>:
 8008304:	4770      	bx	lr

08008306 <__retarget_lock_release_recursive>:
 8008306:	4770      	bx	lr

08008308 <_free_r>:
 8008308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800830a:	2900      	cmp	r1, #0
 800830c:	d044      	beq.n	8008398 <_free_r+0x90>
 800830e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008312:	9001      	str	r0, [sp, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f1a1 0404 	sub.w	r4, r1, #4
 800831a:	bfb8      	it	lt
 800831c:	18e4      	addlt	r4, r4, r3
 800831e:	f000 f8df 	bl	80084e0 <__malloc_lock>
 8008322:	4a1e      	ldr	r2, [pc, #120]	; (800839c <_free_r+0x94>)
 8008324:	9801      	ldr	r0, [sp, #4]
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	b933      	cbnz	r3, 8008338 <_free_r+0x30>
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	6014      	str	r4, [r2, #0]
 800832e:	b003      	add	sp, #12
 8008330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008334:	f000 b8da 	b.w	80084ec <__malloc_unlock>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d908      	bls.n	800834e <_free_r+0x46>
 800833c:	6825      	ldr	r5, [r4, #0]
 800833e:	1961      	adds	r1, r4, r5
 8008340:	428b      	cmp	r3, r1
 8008342:	bf01      	itttt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	1949      	addeq	r1, r1, r5
 800834a:	6021      	streq	r1, [r4, #0]
 800834c:	e7ed      	b.n	800832a <_free_r+0x22>
 800834e:	461a      	mov	r2, r3
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	b10b      	cbz	r3, 8008358 <_free_r+0x50>
 8008354:	42a3      	cmp	r3, r4
 8008356:	d9fa      	bls.n	800834e <_free_r+0x46>
 8008358:	6811      	ldr	r1, [r2, #0]
 800835a:	1855      	adds	r5, r2, r1
 800835c:	42a5      	cmp	r5, r4
 800835e:	d10b      	bne.n	8008378 <_free_r+0x70>
 8008360:	6824      	ldr	r4, [r4, #0]
 8008362:	4421      	add	r1, r4
 8008364:	1854      	adds	r4, r2, r1
 8008366:	42a3      	cmp	r3, r4
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	d1e0      	bne.n	800832e <_free_r+0x26>
 800836c:	681c      	ldr	r4, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	6053      	str	r3, [r2, #4]
 8008372:	440c      	add	r4, r1
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	e7da      	b.n	800832e <_free_r+0x26>
 8008378:	d902      	bls.n	8008380 <_free_r+0x78>
 800837a:	230c      	movs	r3, #12
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	e7d6      	b.n	800832e <_free_r+0x26>
 8008380:	6825      	ldr	r5, [r4, #0]
 8008382:	1961      	adds	r1, r4, r5
 8008384:	428b      	cmp	r3, r1
 8008386:	bf04      	itt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	bf04      	itt	eq
 8008390:	1949      	addeq	r1, r1, r5
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	6054      	str	r4, [r2, #4]
 8008396:	e7ca      	b.n	800832e <_free_r+0x26>
 8008398:	b003      	add	sp, #12
 800839a:	bd30      	pop	{r4, r5, pc}
 800839c:	20001ef4 	.word	0x20001ef4

080083a0 <sbrk_aligned>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4e0e      	ldr	r6, [pc, #56]	; (80083dc <sbrk_aligned+0x3c>)
 80083a4:	460c      	mov	r4, r1
 80083a6:	6831      	ldr	r1, [r6, #0]
 80083a8:	4605      	mov	r5, r0
 80083aa:	b911      	cbnz	r1, 80083b2 <sbrk_aligned+0x12>
 80083ac:	f000 fba6 	bl	8008afc <_sbrk_r>
 80083b0:	6030      	str	r0, [r6, #0]
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 fba1 	bl	8008afc <_sbrk_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d00a      	beq.n	80083d4 <sbrk_aligned+0x34>
 80083be:	1cc4      	adds	r4, r0, #3
 80083c0:	f024 0403 	bic.w	r4, r4, #3
 80083c4:	42a0      	cmp	r0, r4
 80083c6:	d007      	beq.n	80083d8 <sbrk_aligned+0x38>
 80083c8:	1a21      	subs	r1, r4, r0
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fb96 	bl	8008afc <_sbrk_r>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d101      	bne.n	80083d8 <sbrk_aligned+0x38>
 80083d4:	f04f 34ff 	mov.w	r4, #4294967295
 80083d8:	4620      	mov	r0, r4
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	20001ef8 	.word	0x20001ef8

080083e0 <_malloc_r>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	1ccd      	adds	r5, r1, #3
 80083e6:	f025 0503 	bic.w	r5, r5, #3
 80083ea:	3508      	adds	r5, #8
 80083ec:	2d0c      	cmp	r5, #12
 80083ee:	bf38      	it	cc
 80083f0:	250c      	movcc	r5, #12
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	4607      	mov	r7, r0
 80083f6:	db01      	blt.n	80083fc <_malloc_r+0x1c>
 80083f8:	42a9      	cmp	r1, r5
 80083fa:	d905      	bls.n	8008408 <_malloc_r+0x28>
 80083fc:	230c      	movs	r3, #12
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	2600      	movs	r6, #0
 8008402:	4630      	mov	r0, r6
 8008404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084dc <_malloc_r+0xfc>
 800840c:	f000 f868 	bl	80084e0 <__malloc_lock>
 8008410:	f8d8 3000 	ldr.w	r3, [r8]
 8008414:	461c      	mov	r4, r3
 8008416:	bb5c      	cbnz	r4, 8008470 <_malloc_r+0x90>
 8008418:	4629      	mov	r1, r5
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ffc0 	bl	80083a0 <sbrk_aligned>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	4604      	mov	r4, r0
 8008424:	d155      	bne.n	80084d2 <_malloc_r+0xf2>
 8008426:	f8d8 4000 	ldr.w	r4, [r8]
 800842a:	4626      	mov	r6, r4
 800842c:	2e00      	cmp	r6, #0
 800842e:	d145      	bne.n	80084bc <_malloc_r+0xdc>
 8008430:	2c00      	cmp	r4, #0
 8008432:	d048      	beq.n	80084c6 <_malloc_r+0xe6>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	4631      	mov	r1, r6
 8008438:	4638      	mov	r0, r7
 800843a:	eb04 0903 	add.w	r9, r4, r3
 800843e:	f000 fb5d 	bl	8008afc <_sbrk_r>
 8008442:	4581      	cmp	r9, r0
 8008444:	d13f      	bne.n	80084c6 <_malloc_r+0xe6>
 8008446:	6821      	ldr	r1, [r4, #0]
 8008448:	1a6d      	subs	r5, r5, r1
 800844a:	4629      	mov	r1, r5
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff ffa7 	bl	80083a0 <sbrk_aligned>
 8008452:	3001      	adds	r0, #1
 8008454:	d037      	beq.n	80084c6 <_malloc_r+0xe6>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	442b      	add	r3, r5
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	f8d8 3000 	ldr.w	r3, [r8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d038      	beq.n	80084d6 <_malloc_r+0xf6>
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	42a2      	cmp	r2, r4
 8008468:	d12b      	bne.n	80084c2 <_malloc_r+0xe2>
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	e00f      	b.n	8008490 <_malloc_r+0xb0>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	1b52      	subs	r2, r2, r5
 8008474:	d41f      	bmi.n	80084b6 <_malloc_r+0xd6>
 8008476:	2a0b      	cmp	r2, #11
 8008478:	d917      	bls.n	80084aa <_malloc_r+0xca>
 800847a:	1961      	adds	r1, r4, r5
 800847c:	42a3      	cmp	r3, r4
 800847e:	6025      	str	r5, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	6059      	strne	r1, [r3, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	bf08      	it	eq
 8008488:	f8c8 1000 	streq.w	r1, [r8]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4638      	mov	r0, r7
 8008492:	f104 060b 	add.w	r6, r4, #11
 8008496:	f000 f829 	bl	80084ec <__malloc_unlock>
 800849a:	f026 0607 	bic.w	r6, r6, #7
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	1af2      	subs	r2, r6, r3
 80084a2:	d0ae      	beq.n	8008402 <_malloc_r+0x22>
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	e7ab      	b.n	8008402 <_malloc_r+0x22>
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	d1dd      	bne.n	800846c <_malloc_r+0x8c>
 80084b0:	f8c8 2000 	str.w	r2, [r8]
 80084b4:	e7ec      	b.n	8008490 <_malloc_r+0xb0>
 80084b6:	4623      	mov	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7ac      	b.n	8008416 <_malloc_r+0x36>
 80084bc:	4634      	mov	r4, r6
 80084be:	6876      	ldr	r6, [r6, #4]
 80084c0:	e7b4      	b.n	800842c <_malloc_r+0x4c>
 80084c2:	4613      	mov	r3, r2
 80084c4:	e7cc      	b.n	8008460 <_malloc_r+0x80>
 80084c6:	230c      	movs	r3, #12
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	4638      	mov	r0, r7
 80084cc:	f000 f80e 	bl	80084ec <__malloc_unlock>
 80084d0:	e797      	b.n	8008402 <_malloc_r+0x22>
 80084d2:	6025      	str	r5, [r4, #0]
 80084d4:	e7dc      	b.n	8008490 <_malloc_r+0xb0>
 80084d6:	605b      	str	r3, [r3, #4]
 80084d8:	deff      	udf	#255	; 0xff
 80084da:	bf00      	nop
 80084dc:	20001ef4 	.word	0x20001ef4

080084e0 <__malloc_lock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__malloc_lock+0x8>)
 80084e2:	f7ff bf0f 	b.w	8008304 <__retarget_lock_acquire_recursive>
 80084e6:	bf00      	nop
 80084e8:	20001ef0 	.word	0x20001ef0

080084ec <__malloc_unlock>:
 80084ec:	4801      	ldr	r0, [pc, #4]	; (80084f4 <__malloc_unlock+0x8>)
 80084ee:	f7ff bf0a 	b.w	8008306 <__retarget_lock_release_recursive>
 80084f2:	bf00      	nop
 80084f4:	20001ef0 	.word	0x20001ef0

080084f8 <__ssputs_r>:
 80084f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	688e      	ldr	r6, [r1, #8]
 80084fe:	461f      	mov	r7, r3
 8008500:	42be      	cmp	r6, r7
 8008502:	680b      	ldr	r3, [r1, #0]
 8008504:	4682      	mov	sl, r0
 8008506:	460c      	mov	r4, r1
 8008508:	4690      	mov	r8, r2
 800850a:	d82c      	bhi.n	8008566 <__ssputs_r+0x6e>
 800850c:	898a      	ldrh	r2, [r1, #12]
 800850e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008512:	d026      	beq.n	8008562 <__ssputs_r+0x6a>
 8008514:	6965      	ldr	r5, [r4, #20]
 8008516:	6909      	ldr	r1, [r1, #16]
 8008518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800851c:	eba3 0901 	sub.w	r9, r3, r1
 8008520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008524:	1c7b      	adds	r3, r7, #1
 8008526:	444b      	add	r3, r9
 8008528:	106d      	asrs	r5, r5, #1
 800852a:	429d      	cmp	r5, r3
 800852c:	bf38      	it	cc
 800852e:	461d      	movcc	r5, r3
 8008530:	0553      	lsls	r3, r2, #21
 8008532:	d527      	bpl.n	8008584 <__ssputs_r+0x8c>
 8008534:	4629      	mov	r1, r5
 8008536:	f7ff ff53 	bl	80083e0 <_malloc_r>
 800853a:	4606      	mov	r6, r0
 800853c:	b360      	cbz	r0, 8008598 <__ssputs_r+0xa0>
 800853e:	6921      	ldr	r1, [r4, #16]
 8008540:	464a      	mov	r2, r9
 8008542:	f000 faeb 	bl	8008b1c <memcpy>
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	6126      	str	r6, [r4, #16]
 8008554:	6165      	str	r5, [r4, #20]
 8008556:	444e      	add	r6, r9
 8008558:	eba5 0509 	sub.w	r5, r5, r9
 800855c:	6026      	str	r6, [r4, #0]
 800855e:	60a5      	str	r5, [r4, #8]
 8008560:	463e      	mov	r6, r7
 8008562:	42be      	cmp	r6, r7
 8008564:	d900      	bls.n	8008568 <__ssputs_r+0x70>
 8008566:	463e      	mov	r6, r7
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	4632      	mov	r2, r6
 800856c:	4641      	mov	r1, r8
 800856e:	f000 faab 	bl	8008ac8 <memmove>
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	1b9b      	subs	r3, r3, r6
 8008576:	60a3      	str	r3, [r4, #8]
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	4433      	add	r3, r6
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	2000      	movs	r0, #0
 8008580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008584:	462a      	mov	r2, r5
 8008586:	f000 fad7 	bl	8008b38 <_realloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	2800      	cmp	r0, #0
 800858e:	d1e0      	bne.n	8008552 <__ssputs_r+0x5a>
 8008590:	6921      	ldr	r1, [r4, #16]
 8008592:	4650      	mov	r0, sl
 8008594:	f7ff feb8 	bl	8008308 <_free_r>
 8008598:	230c      	movs	r3, #12
 800859a:	f8ca 3000 	str.w	r3, [sl]
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295
 80085aa:	e7e9      	b.n	8008580 <__ssputs_r+0x88>

080085ac <_svfiprintf_r>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	4698      	mov	r8, r3
 80085b2:	898b      	ldrh	r3, [r1, #12]
 80085b4:	061b      	lsls	r3, r3, #24
 80085b6:	b09d      	sub	sp, #116	; 0x74
 80085b8:	4607      	mov	r7, r0
 80085ba:	460d      	mov	r5, r1
 80085bc:	4614      	mov	r4, r2
 80085be:	d50e      	bpl.n	80085de <_svfiprintf_r+0x32>
 80085c0:	690b      	ldr	r3, [r1, #16]
 80085c2:	b963      	cbnz	r3, 80085de <_svfiprintf_r+0x32>
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	f7ff ff0b 	bl	80083e0 <_malloc_r>
 80085ca:	6028      	str	r0, [r5, #0]
 80085cc:	6128      	str	r0, [r5, #16]
 80085ce:	b920      	cbnz	r0, 80085da <_svfiprintf_r+0x2e>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e0d0      	b.n	800877c <_svfiprintf_r+0x1d0>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	616b      	str	r3, [r5, #20]
 80085de:	2300      	movs	r3, #0
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
 80085e2:	2320      	movs	r3, #32
 80085e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ec:	2330      	movs	r3, #48	; 0x30
 80085ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008794 <_svfiprintf_r+0x1e8>
 80085f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085f6:	f04f 0901 	mov.w	r9, #1
 80085fa:	4623      	mov	r3, r4
 80085fc:	469a      	mov	sl, r3
 80085fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008602:	b10a      	cbz	r2, 8008608 <_svfiprintf_r+0x5c>
 8008604:	2a25      	cmp	r2, #37	; 0x25
 8008606:	d1f9      	bne.n	80085fc <_svfiprintf_r+0x50>
 8008608:	ebba 0b04 	subs.w	fp, sl, r4
 800860c:	d00b      	beq.n	8008626 <_svfiprintf_r+0x7a>
 800860e:	465b      	mov	r3, fp
 8008610:	4622      	mov	r2, r4
 8008612:	4629      	mov	r1, r5
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff6f 	bl	80084f8 <__ssputs_r>
 800861a:	3001      	adds	r0, #1
 800861c:	f000 80a9 	beq.w	8008772 <_svfiprintf_r+0x1c6>
 8008620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008622:	445a      	add	r2, fp
 8008624:	9209      	str	r2, [sp, #36]	; 0x24
 8008626:	f89a 3000 	ldrb.w	r3, [sl]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80a1 	beq.w	8008772 <_svfiprintf_r+0x1c6>
 8008630:	2300      	movs	r3, #0
 8008632:	f04f 32ff 	mov.w	r2, #4294967295
 8008636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800863a:	f10a 0a01 	add.w	sl, sl, #1
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008646:	931a      	str	r3, [sp, #104]	; 0x68
 8008648:	4654      	mov	r4, sl
 800864a:	2205      	movs	r2, #5
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4850      	ldr	r0, [pc, #320]	; (8008794 <_svfiprintf_r+0x1e8>)
 8008652:	f7f7 fdc5 	bl	80001e0 <memchr>
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	b9d8      	cbnz	r0, 8008692 <_svfiprintf_r+0xe6>
 800865a:	06d0      	lsls	r0, r2, #27
 800865c:	bf44      	itt	mi
 800865e:	2320      	movmi	r3, #32
 8008660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008664:	0711      	lsls	r1, r2, #28
 8008666:	bf44      	itt	mi
 8008668:	232b      	movmi	r3, #43	; 0x2b
 800866a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866e:	f89a 3000 	ldrb.w	r3, [sl]
 8008672:	2b2a      	cmp	r3, #42	; 0x2a
 8008674:	d015      	beq.n	80086a2 <_svfiprintf_r+0xf6>
 8008676:	9a07      	ldr	r2, [sp, #28]
 8008678:	4654      	mov	r4, sl
 800867a:	2000      	movs	r0, #0
 800867c:	f04f 0c0a 	mov.w	ip, #10
 8008680:	4621      	mov	r1, r4
 8008682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008686:	3b30      	subs	r3, #48	; 0x30
 8008688:	2b09      	cmp	r3, #9
 800868a:	d94d      	bls.n	8008728 <_svfiprintf_r+0x17c>
 800868c:	b1b0      	cbz	r0, 80086bc <_svfiprintf_r+0x110>
 800868e:	9207      	str	r2, [sp, #28]
 8008690:	e014      	b.n	80086bc <_svfiprintf_r+0x110>
 8008692:	eba0 0308 	sub.w	r3, r0, r8
 8008696:	fa09 f303 	lsl.w	r3, r9, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	46a2      	mov	sl, r4
 80086a0:	e7d2      	b.n	8008648 <_svfiprintf_r+0x9c>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	1d19      	adds	r1, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9103      	str	r1, [sp, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbb      	ittet	lt
 80086ae:	425b      	neglt	r3, r3
 80086b0:	f042 0202 	orrlt.w	r2, r2, #2
 80086b4:	9307      	strge	r3, [sp, #28]
 80086b6:	9307      	strlt	r3, [sp, #28]
 80086b8:	bfb8      	it	lt
 80086ba:	9204      	strlt	r2, [sp, #16]
 80086bc:	7823      	ldrb	r3, [r4, #0]
 80086be:	2b2e      	cmp	r3, #46	; 0x2e
 80086c0:	d10c      	bne.n	80086dc <_svfiprintf_r+0x130>
 80086c2:	7863      	ldrb	r3, [r4, #1]
 80086c4:	2b2a      	cmp	r3, #42	; 0x2a
 80086c6:	d134      	bne.n	8008732 <_svfiprintf_r+0x186>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	1d1a      	adds	r2, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	9203      	str	r2, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bfb8      	it	lt
 80086d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80086d8:	3402      	adds	r4, #2
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80087a4 <_svfiprintf_r+0x1f8>
 80086e0:	7821      	ldrb	r1, [r4, #0]
 80086e2:	2203      	movs	r2, #3
 80086e4:	4650      	mov	r0, sl
 80086e6:	f7f7 fd7b 	bl	80001e0 <memchr>
 80086ea:	b138      	cbz	r0, 80086fc <_svfiprintf_r+0x150>
 80086ec:	9b04      	ldr	r3, [sp, #16]
 80086ee:	eba0 000a 	sub.w	r0, r0, sl
 80086f2:	2240      	movs	r2, #64	; 0x40
 80086f4:	4082      	lsls	r2, r0
 80086f6:	4313      	orrs	r3, r2
 80086f8:	3401      	adds	r4, #1
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008700:	4825      	ldr	r0, [pc, #148]	; (8008798 <_svfiprintf_r+0x1ec>)
 8008702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008706:	2206      	movs	r2, #6
 8008708:	f7f7 fd6a 	bl	80001e0 <memchr>
 800870c:	2800      	cmp	r0, #0
 800870e:	d038      	beq.n	8008782 <_svfiprintf_r+0x1d6>
 8008710:	4b22      	ldr	r3, [pc, #136]	; (800879c <_svfiprintf_r+0x1f0>)
 8008712:	bb1b      	cbnz	r3, 800875c <_svfiprintf_r+0x1b0>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	3307      	adds	r3, #7
 8008718:	f023 0307 	bic.w	r3, r3, #7
 800871c:	3308      	adds	r3, #8
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008722:	4433      	add	r3, r6
 8008724:	9309      	str	r3, [sp, #36]	; 0x24
 8008726:	e768      	b.n	80085fa <_svfiprintf_r+0x4e>
 8008728:	fb0c 3202 	mla	r2, ip, r2, r3
 800872c:	460c      	mov	r4, r1
 800872e:	2001      	movs	r0, #1
 8008730:	e7a6      	b.n	8008680 <_svfiprintf_r+0xd4>
 8008732:	2300      	movs	r3, #0
 8008734:	3401      	adds	r4, #1
 8008736:	9305      	str	r3, [sp, #20]
 8008738:	4619      	mov	r1, r3
 800873a:	f04f 0c0a 	mov.w	ip, #10
 800873e:	4620      	mov	r0, r4
 8008740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008744:	3a30      	subs	r2, #48	; 0x30
 8008746:	2a09      	cmp	r2, #9
 8008748:	d903      	bls.n	8008752 <_svfiprintf_r+0x1a6>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0c6      	beq.n	80086dc <_svfiprintf_r+0x130>
 800874e:	9105      	str	r1, [sp, #20]
 8008750:	e7c4      	b.n	80086dc <_svfiprintf_r+0x130>
 8008752:	fb0c 2101 	mla	r1, ip, r1, r2
 8008756:	4604      	mov	r4, r0
 8008758:	2301      	movs	r3, #1
 800875a:	e7f0      	b.n	800873e <_svfiprintf_r+0x192>
 800875c:	ab03      	add	r3, sp, #12
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	462a      	mov	r2, r5
 8008762:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <_svfiprintf_r+0x1f4>)
 8008764:	a904      	add	r1, sp, #16
 8008766:	4638      	mov	r0, r7
 8008768:	f3af 8000 	nop.w
 800876c:	1c42      	adds	r2, r0, #1
 800876e:	4606      	mov	r6, r0
 8008770:	d1d6      	bne.n	8008720 <_svfiprintf_r+0x174>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	065b      	lsls	r3, r3, #25
 8008776:	f53f af2d 	bmi.w	80085d4 <_svfiprintf_r+0x28>
 800877a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877c:	b01d      	add	sp, #116	; 0x74
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008782:	ab03      	add	r3, sp, #12
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	462a      	mov	r2, r5
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <_svfiprintf_r+0x1f4>)
 800878a:	a904      	add	r1, sp, #16
 800878c:	4638      	mov	r0, r7
 800878e:	f000 f879 	bl	8008884 <_printf_i>
 8008792:	e7eb      	b.n	800876c <_svfiprintf_r+0x1c0>
 8008794:	08008d18 	.word	0x08008d18
 8008798:	08008d22 	.word	0x08008d22
 800879c:	00000000 	.word	0x00000000
 80087a0:	080084f9 	.word	0x080084f9
 80087a4:	08008d1e 	.word	0x08008d1e

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	6922      	ldr	r2, [r4, #16]
 8008812:	f003 0306 	and.w	r3, r3, #6
 8008816:	2b04      	cmp	r3, #4
 8008818:	bf02      	ittt	eq
 800881a:	68e5      	ldreq	r5, [r4, #12]
 800881c:	6833      	ldreq	r3, [r6, #0]
 800881e:	1aed      	subeq	r5, r5, r3
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	7e0f      	ldrb	r7, [r1, #24]
 800888a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800888c:	2f78      	cmp	r7, #120	; 0x78
 800888e:	4691      	mov	r9, r2
 8008890:	4680      	mov	r8, r0
 8008892:	460c      	mov	r4, r1
 8008894:	469a      	mov	sl, r3
 8008896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d4 	beq.w	8008a4e <_printf_i+0x1ca>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80c0 	beq.w	8008a2c <_printf_i+0x1a8>
 80088ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a101      	add	r1, pc, #4	; (adr r1, 80088c4 <_printf_i+0x40>)
 80088c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a35 	.word	0x08008a35
 80088f4:	0800895d 	.word	0x0800895d
 80088f8:	080089ef 	.word	0x080089ef
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a57 	.word	0x08008a57
 8008908:	080088ad 	.word	0x080088ad
 800890c:	0800895d 	.word	0x0800895d
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	080089f7 	.word	0x080089f7
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	602a      	str	r2, [r5, #0]
 8008924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e09f      	b.n	8008a70 <_printf_i+0x1ec>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	0607      	lsls	r7, r0, #24
 8008936:	f103 0104 	add.w	r1, r3, #4
 800893a:	6029      	str	r1, [r5, #0]
 800893c:	d501      	bpl.n	8008942 <_printf_i+0xbe>
 800893e:	681e      	ldr	r6, [r3, #0]
 8008940:	e003      	b.n	800894a <_printf_i+0xc6>
 8008942:	0646      	lsls	r6, r0, #25
 8008944:	d5fb      	bpl.n	800893e <_printf_i+0xba>
 8008946:	f9b3 6000 	ldrsh.w	r6, [r3]
 800894a:	2e00      	cmp	r6, #0
 800894c:	da03      	bge.n	8008956 <_printf_i+0xd2>
 800894e:	232d      	movs	r3, #45	; 0x2d
 8008950:	4276      	negs	r6, r6
 8008952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008956:	485a      	ldr	r0, [pc, #360]	; (8008ac0 <_printf_i+0x23c>)
 8008958:	230a      	movs	r3, #10
 800895a:	e012      	b.n	8008982 <_printf_i+0xfe>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	6029      	str	r1, [r5, #0]
 8008964:	0605      	lsls	r5, r0, #24
 8008966:	d501      	bpl.n	800896c <_printf_i+0xe8>
 8008968:	681e      	ldr	r6, [r3, #0]
 800896a:	e002      	b.n	8008972 <_printf_i+0xee>
 800896c:	0641      	lsls	r1, r0, #25
 800896e:	d5fb      	bpl.n	8008968 <_printf_i+0xe4>
 8008970:	881e      	ldrh	r6, [r3, #0]
 8008972:	4853      	ldr	r0, [pc, #332]	; (8008ac0 <_printf_i+0x23c>)
 8008974:	2f6f      	cmp	r7, #111	; 0x6f
 8008976:	bf0c      	ite	eq
 8008978:	2308      	moveq	r3, #8
 800897a:	230a      	movne	r3, #10
 800897c:	2100      	movs	r1, #0
 800897e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008982:	6865      	ldr	r5, [r4, #4]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	2d00      	cmp	r5, #0
 8008988:	bfa2      	ittt	ge
 800898a:	6821      	ldrge	r1, [r4, #0]
 800898c:	f021 0104 	bicge.w	r1, r1, #4
 8008990:	6021      	strge	r1, [r4, #0]
 8008992:	b90e      	cbnz	r6, 8008998 <_printf_i+0x114>
 8008994:	2d00      	cmp	r5, #0
 8008996:	d04b      	beq.n	8008a30 <_printf_i+0x1ac>
 8008998:	4615      	mov	r5, r2
 800899a:	fbb6 f1f3 	udiv	r1, r6, r3
 800899e:	fb03 6711 	mls	r7, r3, r1, r6
 80089a2:	5dc7      	ldrb	r7, [r0, r7]
 80089a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089a8:	4637      	mov	r7, r6
 80089aa:	42bb      	cmp	r3, r7
 80089ac:	460e      	mov	r6, r1
 80089ae:	d9f4      	bls.n	800899a <_printf_i+0x116>
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d10b      	bne.n	80089cc <_printf_i+0x148>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	07de      	lsls	r6, r3, #31
 80089b8:	d508      	bpl.n	80089cc <_printf_i+0x148>
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	4299      	cmp	r1, r3
 80089c0:	bfde      	ittt	le
 80089c2:	2330      	movle	r3, #48	; 0x30
 80089c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089cc:	1b52      	subs	r2, r2, r5
 80089ce:	6122      	str	r2, [r4, #16]
 80089d0:	f8cd a000 	str.w	sl, [sp]
 80089d4:	464b      	mov	r3, r9
 80089d6:	aa03      	add	r2, sp, #12
 80089d8:	4621      	mov	r1, r4
 80089da:	4640      	mov	r0, r8
 80089dc:	f7ff fee4 	bl	80087a8 <_printf_common>
 80089e0:	3001      	adds	r0, #1
 80089e2:	d14a      	bne.n	8008a7a <_printf_i+0x1f6>
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	b004      	add	sp, #16
 80089ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f043 0320 	orr.w	r3, r3, #32
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	4833      	ldr	r0, [pc, #204]	; (8008ac4 <_printf_i+0x240>)
 80089f8:	2778      	movs	r7, #120	; 0x78
 80089fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	6829      	ldr	r1, [r5, #0]
 8008a02:	061f      	lsls	r7, r3, #24
 8008a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a08:	d402      	bmi.n	8008a10 <_printf_i+0x18c>
 8008a0a:	065f      	lsls	r7, r3, #25
 8008a0c:	bf48      	it	mi
 8008a0e:	b2b6      	uxthmi	r6, r6
 8008a10:	07df      	lsls	r7, r3, #31
 8008a12:	bf48      	it	mi
 8008a14:	f043 0320 	orrmi.w	r3, r3, #32
 8008a18:	6029      	str	r1, [r5, #0]
 8008a1a:	bf48      	it	mi
 8008a1c:	6023      	strmi	r3, [r4, #0]
 8008a1e:	b91e      	cbnz	r6, 8008a28 <_printf_i+0x1a4>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	f023 0320 	bic.w	r3, r3, #32
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	2310      	movs	r3, #16
 8008a2a:	e7a7      	b.n	800897c <_printf_i+0xf8>
 8008a2c:	4824      	ldr	r0, [pc, #144]	; (8008ac0 <_printf_i+0x23c>)
 8008a2e:	e7e4      	b.n	80089fa <_printf_i+0x176>
 8008a30:	4615      	mov	r5, r2
 8008a32:	e7bd      	b.n	80089b0 <_printf_i+0x12c>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	6826      	ldr	r6, [r4, #0]
 8008a38:	6961      	ldr	r1, [r4, #20]
 8008a3a:	1d18      	adds	r0, r3, #4
 8008a3c:	6028      	str	r0, [r5, #0]
 8008a3e:	0635      	lsls	r5, r6, #24
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	d501      	bpl.n	8008a48 <_printf_i+0x1c4>
 8008a44:	6019      	str	r1, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <_printf_i+0x1ca>
 8008a48:	0670      	lsls	r0, r6, #25
 8008a4a:	d5fb      	bpl.n	8008a44 <_printf_i+0x1c0>
 8008a4c:	8019      	strh	r1, [r3, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	4615      	mov	r5, r2
 8008a54:	e7bc      	b.n	80089d0 <_printf_i+0x14c>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	1d1a      	adds	r2, r3, #4
 8008a5a:	602a      	str	r2, [r5, #0]
 8008a5c:	681d      	ldr	r5, [r3, #0]
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	2100      	movs	r1, #0
 8008a62:	4628      	mov	r0, r5
 8008a64:	f7f7 fbbc 	bl	80001e0 <memchr>
 8008a68:	b108      	cbz	r0, 8008a6e <_printf_i+0x1ea>
 8008a6a:	1b40      	subs	r0, r0, r5
 8008a6c:	6060      	str	r0, [r4, #4]
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	2300      	movs	r3, #0
 8008a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a78:	e7aa      	b.n	80089d0 <_printf_i+0x14c>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	47d0      	blx	sl
 8008a84:	3001      	adds	r0, #1
 8008a86:	d0ad      	beq.n	80089e4 <_printf_i+0x160>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	079b      	lsls	r3, r3, #30
 8008a8c:	d413      	bmi.n	8008ab6 <_printf_i+0x232>
 8008a8e:	68e0      	ldr	r0, [r4, #12]
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	4298      	cmp	r0, r3
 8008a94:	bfb8      	it	lt
 8008a96:	4618      	movlt	r0, r3
 8008a98:	e7a6      	b.n	80089e8 <_printf_i+0x164>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	47d0      	blx	sl
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d09d      	beq.n	80089e4 <_printf_i+0x160>
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	9903      	ldr	r1, [sp, #12]
 8008aae:	1a5b      	subs	r3, r3, r1
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dcf2      	bgt.n	8008a9a <_printf_i+0x216>
 8008ab4:	e7eb      	b.n	8008a8e <_printf_i+0x20a>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	f104 0619 	add.w	r6, r4, #25
 8008abc:	e7f5      	b.n	8008aaa <_printf_i+0x226>
 8008abe:	bf00      	nop
 8008ac0:	08008d29 	.word	0x08008d29
 8008ac4:	08008d3a 	.word	0x08008d3a

08008ac8 <memmove>:
 8008ac8:	4288      	cmp	r0, r1
 8008aca:	b510      	push	{r4, lr}
 8008acc:	eb01 0402 	add.w	r4, r1, r2
 8008ad0:	d902      	bls.n	8008ad8 <memmove+0x10>
 8008ad2:	4284      	cmp	r4, r0
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	d807      	bhi.n	8008ae8 <memmove+0x20>
 8008ad8:	1e43      	subs	r3, r0, #1
 8008ada:	42a1      	cmp	r1, r4
 8008adc:	d008      	beq.n	8008af0 <memmove+0x28>
 8008ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae6:	e7f8      	b.n	8008ada <memmove+0x12>
 8008ae8:	4402      	add	r2, r0
 8008aea:	4601      	mov	r1, r0
 8008aec:	428a      	cmp	r2, r1
 8008aee:	d100      	bne.n	8008af2 <memmove+0x2a>
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008afa:	e7f7      	b.n	8008aec <memmove+0x24>

08008afc <_sbrk_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4d06      	ldr	r5, [pc, #24]	; (8008b18 <_sbrk_r+0x1c>)
 8008b00:	2300      	movs	r3, #0
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	f7f8 f8ca 	bl	8000ca0 <_sbrk>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_sbrk_r+0x1a>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_sbrk_r+0x1a>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20001eec 	.word	0x20001eec

08008b1c <memcpy>:
 8008b1c:	440a      	add	r2, r1
 8008b1e:	4291      	cmp	r1, r2
 8008b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b24:	d100      	bne.n	8008b28 <memcpy+0xc>
 8008b26:	4770      	bx	lr
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b32:	4291      	cmp	r1, r2
 8008b34:	d1f9      	bne.n	8008b2a <memcpy+0xe>
 8008b36:	bd10      	pop	{r4, pc}

08008b38 <_realloc_r>:
 8008b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	4614      	mov	r4, r2
 8008b40:	460e      	mov	r6, r1
 8008b42:	b921      	cbnz	r1, 8008b4e <_realloc_r+0x16>
 8008b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	4611      	mov	r1, r2
 8008b4a:	f7ff bc49 	b.w	80083e0 <_malloc_r>
 8008b4e:	b92a      	cbnz	r2, 8008b5c <_realloc_r+0x24>
 8008b50:	f7ff fbda 	bl	8008308 <_free_r>
 8008b54:	4625      	mov	r5, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5c:	f000 f81b 	bl	8008b96 <_malloc_usable_size_r>
 8008b60:	4284      	cmp	r4, r0
 8008b62:	4607      	mov	r7, r0
 8008b64:	d802      	bhi.n	8008b6c <_realloc_r+0x34>
 8008b66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b6a:	d812      	bhi.n	8008b92 <_realloc_r+0x5a>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff fc36 	bl	80083e0 <_malloc_r>
 8008b74:	4605      	mov	r5, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d0ed      	beq.n	8008b56 <_realloc_r+0x1e>
 8008b7a:	42bc      	cmp	r4, r7
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	4631      	mov	r1, r6
 8008b80:	bf28      	it	cs
 8008b82:	463a      	movcs	r2, r7
 8008b84:	f7ff ffca 	bl	8008b1c <memcpy>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fbbc 	bl	8008308 <_free_r>
 8008b90:	e7e1      	b.n	8008b56 <_realloc_r+0x1e>
 8008b92:	4635      	mov	r5, r6
 8008b94:	e7df      	b.n	8008b56 <_realloc_r+0x1e>

08008b96 <_malloc_usable_size_r>:
 8008b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9a:	1f18      	subs	r0, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfbc      	itt	lt
 8008ba0:	580b      	ldrlt	r3, [r1, r0]
 8008ba2:	18c0      	addlt	r0, r0, r3
 8008ba4:	4770      	bx	lr
	...

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
