
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf0  08008bf0  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001dac  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001ef8  20001ef8  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fdad  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003040  00000000  00000000  0002ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce8  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000986  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023466  00000000  00000000  0003461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001162d  00000000  00000000  00057a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6795  00000000  00000000  000690b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003878  00000000  00000000  0012f848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001330c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a44 	.word	0x08008a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008a44 	.word	0x08008a44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_HandleTypeDef hcan1;

uint8_t data[9];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80005a2:	f000 ff17 	bl	80013d4 <HAL_CAN_GetRxMessage>
	  data[8] = (uint8_t)rxPHead.StdId;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80005ac:	721a      	strb	r2, [r3, #8]
	  CDC_Transmit_FS(data, 9);
 80005ae:	2109      	movs	r1, #9
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80005b2:	f007 f935 	bl	8007820 <CDC_Transmit_FS>

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000168 	.word	0x20000168
 80005c4:	20000174 	.word	0x20000174

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b09b      	sub	sp, #108	; 0x6c
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fb27 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f8b3 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f969 	bl	80008ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005da:	f007 f845 	bl	8007668 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005de:	e005      	b.n	80005ec <main+0x24>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	484c      	ldr	r0, [pc, #304]	; (8000718 <main+0x150>)
 80005e8:	f001 fd22 	bl	8002030 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005ec:	2101      	movs	r1, #1
 80005ee:	484b      	ldr	r0, [pc, #300]	; (800071c <main+0x154>)
 80005f0:	f001 fd06 	bl	8002000 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f2      	beq.n	80005e0 <main+0x18>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	4845      	ldr	r0, [pc, #276]	; (8000718 <main+0x150>)
 8000602:	f001 fd15 	bl	8002030 <HAL_GPIO_WritePin>

  uint32_t PRE[4] = {42, 210, 84, 21};
 8000606:	4b46      	ldr	r3, [pc, #280]	; (8000720 <main+0x158>)
 8000608:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800060c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(uint8_t i = 0; i < 5; i++){
 8000612:	2300      	movs	r3, #0
 8000614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000618:	e044      	b.n	80006a4 <main+0xdc>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x15c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d118      	bne.n	8000656 <main+0x8e>
 8000624:	4b40      	ldr	r3, [pc, #256]	; (8000728 <main+0x160>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d113      	bne.n	8000656 <main+0x8e>
		  HAL_CAN_Stop(&hcan1);
 800062e:	483f      	ldr	r0, [pc, #252]	; (800072c <main+0x164>)
 8000630:	f000 fdac 	bl	800118c <HAL_CAN_Stop>
		  MX_CAN1_Init(PRE[i]);
 8000634:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	3368      	adds	r3, #104	; 0x68
 800063c:	443b      	add	r3, r7
 800063e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8e4 	bl	8000810 <MX_CAN1_Init>
		  HAL_CAN_Start(&hcan1);
 8000648:	4838      	ldr	r0, [pc, #224]	; (800072c <main+0x164>)
 800064a:	f000 fd5b 	bl	8001104 <HAL_CAN_Start>
		  HAL_Delay(100);
 800064e:	2064      	movs	r0, #100	; 0x64
 8000650:	f000 fb58 	bl	8000d04 <HAL_Delay>
 8000654:	e021      	b.n	800069a <main+0xd2>
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <main+0x15c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b01      	cmp	r3, #1
 800065e:	d004      	beq.n	800066a <main+0xa2>
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <main+0x160>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b01      	cmp	r3, #1
 8000668:	d117      	bne.n	800069a <main+0xd2>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 800066a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800066e:	3b01      	subs	r3, #1
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	3368      	adds	r3, #104	; 0x68
 8000674:	443b      	add	r3, r7
 8000676:	f853 2c14 	ldr.w	r2, [r3, #-20]
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	492c      	ldr	r1, [pc, #176]	; (8000730 <main+0x168>)
 800067e:	4618      	mov	r0, r3
 8000680:	f007 fd3c 	bl	80080fc <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f007 f8c3 	bl	8007820 <CDC_Transmit_FS>
  for(uint8_t i = 0; i < 5; i++){
 800069a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800069e:	3301      	adds	r3, #1
 80006a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80006a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d9b6      	bls.n	800061a <main+0x52>
		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <main+0x15c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10a      	bne.n	80006cc <main+0x104>
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <main+0x160>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d105      	bne.n	80006cc <main+0x104>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80006c0:	2118      	movs	r1, #24
 80006c2:	481c      	ldr	r0, [pc, #112]	; (8000734 <main+0x16c>)
 80006c4:	f007 f8ac 	bl	8007820 <CDC_Transmit_FS>
	  Error_Handler();
 80006c8:	f000 f950 	bl	800096c <Error_Handler>

//    **Transmit**
//  **PIDs Supported**
  uint32_t mailbox;
  CAN_TxHeaderTypeDef pHead;
  pHead.StdId = 0x7DF;
 80006cc:	f240 73df 	movw	r3, #2015	; 0x7df
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  pHead.IDE = CAN_ID_STD;
 80006d2:	2300      	movs	r3, #0
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
  pHead.RTR = CAN_RTR_DATA;
 80006d6:	2300      	movs	r3, #0
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  pHead.DLC = 8;
 80006da:	2308      	movs	r3, #8
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t data[] = {0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <main+0x170>)
 80006e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e8:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80006ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <main+0x164>)
 80006fa:	f000 fd90 	bl	800121e <HAL_CAN_AddTxMessage>
//  uint8_t smth[6] = "sniff ";
//  uint16_t smth_len = 6;

  while (1)
  {
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80006fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000702:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000706:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <main+0x164>)
 800070c:	f000 fd87 	bl	800121e <HAL_CAN_AddTxMessage>
	  HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f000 faf7 	bl	8000d04 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 8000716:	e7f2      	b.n	80006fe <main+0x136>
 8000718:	40020c00 	.word	0x40020c00
 800071c:	40020000 	.word	0x40020000
 8000720:	08008b44 	.word	0x08008b44
 8000724:	20000172 	.word	0x20000172
 8000728:	20000171 	.word	0x20000171
 800072c:	20000174 	.word	0x20000174
 8000730:	08008afc 	.word	0x08008afc
 8000734:	08008b28 	.word	0x08008b28
 8000738:	08008b54 	.word	0x08008b54

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fcf6 	bl	800813c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	; (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ac:	2308      	movs	r3, #8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 feca 	bl	800355c <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ce:	f000 f8cd 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2105      	movs	r1, #5
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 f92b 	bl	8003a4c <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f000 f8b6 	bl	800096c <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	; 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(uint32_t Prescaler)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_CAN1_Init+0x94>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_CAN1_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_CAN1_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000836:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_CAN1_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_CAN1_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_CAN1_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000864:	f000 fa72 	bl	8000d4c <HAL_CAN_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800086e:	f000 f87d 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000872:	f04f 31ff 	mov.w	r1, #4294967295
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000878:	f000 febe 	bl	80015f8 <HAL_CAN_ActivateNotification>
  CAN_FilterTypeDef filters = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2228      	movs	r2, #40	; 0x28
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f007 fc59 	bl	800813c <memset>
  filters.FilterActivation = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
//  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_CAN1_Init+0x94>)
 8000896:	f000 fb55 	bl	8000f44 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	; 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000174 	.word	0x20000174
 80008a8:	40006400 	.word	0x40006400

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_GPIO_Init+0xb4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_GPIO_Init+0xb4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_GPIO_Init+0xb4>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_GPIO_Init+0xb4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_GPIO_Init+0xb8>)
 800091e:	f001 fb87 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_GPIO_Init+0xbc>)
 8000936:	f001 f9c7 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800093a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0xb8>)
 8000954:	f001 f9b8 	bl	8001cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <HAL_CAN_MspInit+0xb4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d143      	bne.n	8000a72 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 80009f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_CAN_MspInit+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a32:	2309      	movs	r3, #9
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <HAL_CAN_MspInit+0xbc>)
 8000a3e:	f001 f943 	bl	8001cc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2013      	movs	r0, #19
 8000a48:	f001 f907 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a4c:	2013      	movs	r0, #19
 8000a4e:	f001 f920 	bl	8001c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2014      	movs	r0, #20
 8000a58:	f001 f8ff 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a5c:	2014      	movs	r0, #20
 8000a5e:	f001 f918 	bl	8001c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2015      	movs	r0, #21
 8000a68:	f001 f8f7 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a6c:	2015      	movs	r0, #21
 8000a6e:	f001 f910 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40006400 	.word	0x40006400
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f8f6 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <CAN1_TX_IRQHandler+0x10>)
 8000ae2:	f000 fdaf 	bl	8001644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000174 	.word	0x20000174

08000af0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <CAN1_RX0_IRQHandler+0x14>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <CAN1_RX0_IRQHandler+0x18>)
 8000afc:	f000 fda2 	bl	8001644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000171 	.word	0x20000171
 8000b08:	20000174 	.word	0x20000174

08000b0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <CAN1_RX1_IRQHandler+0x14>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <CAN1_RX1_IRQHandler+0x18>)
 8000b18:	f000 fd94 	bl	8001644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000172 	.word	0x20000172
 8000b24:	20000174 	.word	0x20000174

08000b28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <OTG_FS_IRQHandler+0x10>)
 8000b2e:	f001 fbe8 	bl	8002302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20001684 	.word	0x20001684

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f007 faee 	bl	800814c <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	2000019c 	.word	0x2000019c
 8000ba4:	20001ef8 	.word	0x20001ef8

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f007 faad 	bl	8008158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fce3 	bl	80005c8 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000c10:	08008bf8 	.word	0x08008bf8
  ldr r2, =_sbss
 8000c14:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000c18:	20001ef8 	.word	0x20001ef8

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 fffb 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe90 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 f813 	bl	8001cae <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 ffdb 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200001a0 	.word	0x200001a0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200001a0 	.word	0x200001a0

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0ed      	b.n	8000f3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fe2c 	bl	80009c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d80:	f7ff ffb4 	bl	8000cec <HAL_GetTick>
 8000d84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d86:	e012      	b.n	8000dae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d88:	f7ff ffb0 	bl	8000cec <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d90b      	bls.n	8000dae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2205      	movs	r2, #5
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e0c5      	b.n	8000f3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0e5      	beq.n	8000d88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0202 	bic.w	r2, r2, #2
 8000dca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dcc:	f7ff ff8e 	bl	8000cec <HAL_GetTick>
 8000dd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd2:	e012      	b.n	8000dfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd4:	f7ff ff8a 	bl	8000cec <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b0a      	cmp	r3, #10
 8000de0:	d90b      	bls.n	8000dfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2205      	movs	r2, #5
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e09f      	b.n	8000f3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e5      	bne.n	8000dd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7e1b      	ldrb	r3, [r3, #24]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7e5b      	ldrb	r3, [r3, #25]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d108      	bne.n	8000e4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7e9b      	ldrb	r3, [r3, #26]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d108      	bne.n	8000e76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0220 	bic.w	r2, r2, #32
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7edb      	ldrb	r3, [r3, #27]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d108      	bne.n	8000ea0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0210 	bic.w	r2, r2, #16
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e007      	b.n	8000eb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0210 	orr.w	r2, r2, #16
 8000eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7f1b      	ldrb	r3, [r3, #28]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0208 	orr.w	r2, r2, #8
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0208 	bic.w	r2, r2, #8
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7f5b      	ldrb	r3, [r3, #29]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0204 	orr.w	r2, r2, #4
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	ea42 0103 	orr.w	r1, r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f5c:	7cfb      	ldrb	r3, [r7, #19]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d003      	beq.n	8000f6a <HAL_CAN_ConfigFilter+0x26>
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	f040 80be 	bne.w	80010e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	2201      	movs	r2, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d123      	bne.n	8001014 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3248      	adds	r2, #72	; 0x48
 8000ff4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001008:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100a:	6979      	ldr	r1, [r7, #20]
 800100c:	3348      	adds	r3, #72	; 0x48
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d122      	bne.n	8001062 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800103c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3248      	adds	r2, #72	; 0x48
 8001042:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001056:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001058:	6979      	ldr	r1, [r7, #20]
 800105a:	3348      	adds	r3, #72	; 0x48
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d109      	bne.n	800107e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800107c:	e007      	b.n	800108e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	431a      	orrs	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	401a      	ands	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010a8:	e007      	b.n	80010ba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d8:	f023 0201 	bic.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e006      	b.n	80010f4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
  }
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40006400 	.word	0x40006400

08001104 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b01      	cmp	r3, #1
 8001116:	d12e      	bne.n	8001176 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001130:	f7ff fddc 	bl	8000cec <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001136:	e012      	b.n	800115e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001138:	f7ff fdd8 	bl	8000cec <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90b      	bls.n	800115e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2205      	movs	r2, #5
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e012      	b.n	8001184 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e5      	bne.n	8001138 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e006      	b.n	8001184 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
  }
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d133      	bne.n	8001208 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fd9c 	bl	8000cec <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011b6:	e012      	b.n	80011de <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b8:	f7ff fd98 	bl	8000cec <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d90b      	bls.n	80011de <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e01b      	b.n	8001216 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0e5      	beq.n	80011b8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0202 	bic.w	r2, r2, #2
 80011fa:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e006      	b.n	8001216 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800121e:	b480      	push	{r7}
 8001220:	b089      	sub	sp, #36	; 0x24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001232:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d003      	beq.n	800124a <HAL_CAN_AddTxMessage+0x2c>
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	2b02      	cmp	r3, #2
 8001246:	f040 80b8 	bne.w	80013ba <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10a      	bne.n	800126a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a0 	beq.w	80013aa <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	0e1b      	lsrs	r3, r3, #24
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d907      	bls.n	800128a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e09e      	b.n	80013c8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800128a:	2201      	movs	r2, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10d      	bne.n	80012b8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	6809      	ldr	r1, [r1, #0]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3318      	adds	r3, #24
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	440b      	add	r3, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e00f      	b.n	80012d8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c8:	68f9      	ldr	r1, [r7, #12]
 80012ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3318      	adds	r3, #24
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3318      	adds	r3, #24
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	7d1b      	ldrb	r3, [r3, #20]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d111      	bne.n	8001318 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3318      	adds	r3, #24
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	3304      	adds	r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3318      	adds	r3, #24
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	440b      	add	r3, r1
 8001314:	3304      	adds	r3, #4
 8001316:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3307      	adds	r3, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	061a      	lsls	r2, r3, #24
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3306      	adds	r3, #6
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3305      	adds	r3, #5
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	4313      	orrs	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3204      	adds	r2, #4
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	4610      	mov	r0, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6811      	ldr	r1, [r2, #0]
 8001340:	ea43 0200 	orr.w	r2, r3, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	440b      	add	r3, r1
 800134a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800134e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	061a      	lsls	r2, r3, #24
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3302      	adds	r3, #2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4313      	orrs	r3, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	4610      	mov	r0, r2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	ea43 0200 	orr.w	r2, r3, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	440b      	add	r3, r1
 8001380:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001384:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3318      	adds	r3, #24
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3318      	adds	r3, #24
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	440b      	add	r3, r1
 80013a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e00e      	b.n	80013c8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e006      	b.n	80013c8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3724      	adds	r7, #36	; 0x24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d003      	beq.n	80013f8 <HAL_CAN_GetRxMessage+0x24>
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	f040 80f3 	bne.w	80015de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10e      	bne.n	800141c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d116      	bne.n	800143a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0e7      	b.n	80015ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d107      	bne.n	800143a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0d8      	b.n	80015ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	331b      	adds	r3, #27
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0204 	and.w	r2, r3, #4
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10c      	bne.n	8001472 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	331b      	adds	r3, #27
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0d5b      	lsrs	r3, r3, #21
 8001468:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e00b      	b.n	800148a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	331b      	adds	r3, #27
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	331b      	adds	r3, #27
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0202 	and.w	r2, r3, #2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	331b      	adds	r3, #27
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	3304      	adds	r3, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	331b      	adds	r3, #27
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	331b      	adds	r3, #27
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0c1b      	lsrs	r3, r3, #16
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0a1a      	lsrs	r2, r3, #8
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0c1a      	lsrs	r2, r3, #16
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3302      	adds	r3, #2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0e1a      	lsrs	r2, r3, #24
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3303      	adds	r3, #3
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3304      	adds	r3, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0a1a      	lsrs	r2, r3, #8
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3305      	adds	r3, #5
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0c1a      	lsrs	r2, r3, #16
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3306      	adds	r3, #6
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0e1a      	lsrs	r2, r3, #24
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3307      	adds	r3, #7
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	e007      	b.n	80015da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e006      	b.n	80015ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d002      	beq.n	8001616 <HAL_CAN_ActivateNotification+0x1e>
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d109      	bne.n	800162a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e006      	b.n	8001638 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d07c      	beq.n	8001784 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f983 	bl	80019b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80016ac:	e016      	b.n	80016dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
 80016c0:	e00c      	b.n	80016dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	e002      	b.n	80016dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f989 	bl	80019ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d024      	beq.n	8001730 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f963 	bl	80019c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001700:	e016      	b.n	8001730 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e00c      	b.n	8001730 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e002      	b.n	8001730 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f969 	bl	8001a02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f943 	bl	80019da <HAL_CAN_TxMailbox2CompleteCallback>
 8001754:	e016      	b.n	8001784 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e00c      	b.n	8001784 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	e002      	b.n	8001784 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f949 	bl	8001a16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00c      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2210      	movs	r2, #16
 80017a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2208      	movs	r2, #8
 80017c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f930 	bl	8001a2a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d009      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe feca 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2208      	movs	r2, #8
 8001826:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f912 	bl	8001a52 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8f9 	bl	8001a3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f8fc 	bl	8001a66 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2208      	movs	r2, #8
 8001888:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f8f5 	bl	8001a7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d07b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d072      	beq.n	800198a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d043      	beq.n	800198a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03e      	beq.n	800198a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001912:	2b60      	cmp	r3, #96	; 0x60
 8001914:	d02b      	beq.n	800196e <HAL_CAN_IRQHandler+0x32a>
 8001916:	2b60      	cmp	r3, #96	; 0x60
 8001918:	d82e      	bhi.n	8001978 <HAL_CAN_IRQHandler+0x334>
 800191a:	2b50      	cmp	r3, #80	; 0x50
 800191c:	d022      	beq.n	8001964 <HAL_CAN_IRQHandler+0x320>
 800191e:	2b50      	cmp	r3, #80	; 0x50
 8001920:	d82a      	bhi.n	8001978 <HAL_CAN_IRQHandler+0x334>
 8001922:	2b40      	cmp	r3, #64	; 0x40
 8001924:	d019      	beq.n	800195a <HAL_CAN_IRQHandler+0x316>
 8001926:	2b40      	cmp	r3, #64	; 0x40
 8001928:	d826      	bhi.n	8001978 <HAL_CAN_IRQHandler+0x334>
 800192a:	2b30      	cmp	r3, #48	; 0x30
 800192c:	d010      	beq.n	8001950 <HAL_CAN_IRQHandler+0x30c>
 800192e:	2b30      	cmp	r3, #48	; 0x30
 8001930:	d822      	bhi.n	8001978 <HAL_CAN_IRQHandler+0x334>
 8001932:	2b10      	cmp	r3, #16
 8001934:	d002      	beq.n	800193c <HAL_CAN_IRQHandler+0x2f8>
 8001936:	2b20      	cmp	r3, #32
 8001938:	d005      	beq.n	8001946 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800193a:	e01d      	b.n	8001978 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001944:	e019      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194e:	e014      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001958:	e00f      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001962:	e00a      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196c:	e005      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001976:	e000      	b.n	800197a <HAL_CAN_IRQHandler+0x336>
            break;
 8001978:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001988:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f872 	bl	8001a8e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e16b      	b.n	8001fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 815a 	bne.w	8001fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d005      	beq.n	8001d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d130      	bne.n	8001d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d017      	beq.n	8001db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d123      	bne.n	8001e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80b4 	beq.w	8001fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_GPIO_Init+0x30c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a5f      	ldr	r2, [pc, #380]	; (8001fd4 <HAL_GPIO_Init+0x30c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_GPIO_Init+0x30c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6a:	4a5b      	ldr	r2, [pc, #364]	; (8001fd8 <HAL_GPIO_Init+0x310>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_GPIO_Init+0x314>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_GPIO_Init+0x318>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d025      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a50      	ldr	r2, [pc, #320]	; (8001fe4 <HAL_GPIO_Init+0x31c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_GPIO_Init+0x320>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x216>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x212>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x20e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x330>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x20a>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00e      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x228>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x310>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a32      	ldr	r2, [pc, #200]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae90 	bls.w	8001ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40021c00 	.word	0x40021c00
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002064:	b08f      	sub	sp, #60	; 0x3c
 8002066:	af0a      	add	r7, sp, #40	; 0x28
 8002068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e10f      	b.n	8002294 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f005 fd0e 	bl	8007ab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2203      	movs	r2, #3
 8002098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 ffd7 	bl	8004066 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	687e      	ldr	r6, [r7, #4]
 80020c0:	466d      	mov	r5, sp
 80020c2:	f106 0410 	add.w	r4, r6, #16
 80020c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d6:	1d33      	adds	r3, r6, #4
 80020d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f001 feae 	bl	8003e3c <USB_CoreInit>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0d0      	b.n	8002294 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 ffc5 	bl	8004088 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e04a      	b.n	800219a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	333d      	adds	r3, #61	; 0x3d
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	333c      	adds	r3, #60	; 0x3c
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	b298      	uxth	r0, r3
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3344      	adds	r3, #68	; 0x44
 8002140:	4602      	mov	r2, r0
 8002142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3340      	adds	r3, #64	; 0x40
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3348      	adds	r3, #72	; 0x48
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	334c      	adds	r3, #76	; 0x4c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3354      	adds	r3, #84	; 0x54
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3301      	adds	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3af      	bcc.n	8002104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e044      	b.n	8002234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3301      	adds	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3b5      	bcc.n	80021aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	687e      	ldr	r6, [r7, #4]
 8002246:	466d      	mov	r5, sp
 8002248:	f106 0410 	add.w	r4, r6, #16
 800224c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002258:	e885 0003 	stmia.w	r5, {r0, r1}
 800225c:	1d33      	adds	r3, r6, #4
 800225e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002260:	6838      	ldr	r0, [r7, #0]
 8002262:	f001 ff5d 	bl	8004120 <USB_DevInit>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00d      	b.n	8002294 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 f8ac 	bl	80053ea <USB_DevDisconnect>

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_Start+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e020      	b.n	80022fa <HAL_PCD_Start+0x5e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d109      	bne.n	80022dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d005      	beq.n	80022dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 feaf 	bl	8004044 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f85c 	bl	80053a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002302:	b590      	push	{r4, r7, lr}
 8002304:	b08d      	sub	sp, #52	; 0x34
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 f91a 	bl	8005552 <USB_GetMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 848a 	bne.w	8002c3a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f87e 	bl	800542c <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8480 	beq.w	8002c38 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f003 f86b 	bl	800542c <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f002 0202 	and.w	r2, r2, #2
 800236e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 f859 	bl	800542c <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b10      	cmp	r3, #16
 8002382:	d161      	bne.n	8002448 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0210 	bic.w	r2, r2, #16
 8002392:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	0c5b      	lsrs	r3, r3, #17
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d124      	bne.n	800240a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d035      	beq.n	8002438 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6a38      	ldr	r0, [r7, #32]
 80023e0:	f002 fe90 	bl	8005104 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f0:	441a      	add	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002402:	441a      	add	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	e016      	b.n	8002438 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	0c5b      	lsrs	r3, r3, #17
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2b06      	cmp	r3, #6
 8002414:	d110      	bne.n	8002438 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800241c:	2208      	movs	r2, #8
 800241e:	4619      	mov	r1, r3
 8002420:	6a38      	ldr	r0, [r7, #32]
 8002422:	f002 fe6f 	bl	8005104 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002432:	441a      	add	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0210 	orr.w	r2, r2, #16
 8002446:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f002 ffed 	bl	800542c <USB_ReadInterrupts>
 8002452:	4603      	mov	r3, r0
 8002454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800245c:	f040 80a7 	bne.w	80025ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fff2 	bl	8005452 <USB_ReadDevAllOutEpInterrupt>
 800246e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002470:	e099      	b.n	80025a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808e 	beq.w	800259a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f003 f816 	bl	80054ba <USB_ReadDevOutEPInterrupt>
 800248e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fec2 	bl	8003238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	2308      	movs	r3, #8
 80024ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 ff98 	bl	8003408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	2310      	movs	r3, #16
 80024f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d030      	beq.n	8002560 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d109      	bne.n	800251e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	78db      	ldrb	r3, [r3, #3]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2200      	movs	r2, #0
 8002540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f005 fbc9 	bl	8007ce0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255a:	461a      	mov	r2, r3
 800255c:	2302      	movs	r3, #2
 800255e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002576:	461a      	mov	r2, r3
 8002578:	2320      	movs	r3, #32
 800257a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002592:	461a      	mov	r2, r3
 8002594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002598:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3301      	adds	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f af62 	bne.w	8002472 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 ff3a 	bl	800542c <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025c2:	f040 80db 	bne.w	800277c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 ff5b 	bl	8005486 <USB_ReadDevAllInEpInterrupt>
 80025d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025d6:	e0cd      	b.n	8002774 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80c2 	beq.w	8002768 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 ff81 	bl	80054f6 <USB_ReadDevInEPInterrupt>
 80025f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d057      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	69f9      	ldr	r1, [r7, #28]
 800261c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002620:	4013      	ands	r3, r2
 8002622:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002630:	461a      	mov	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d132      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	334c      	adds	r3, #76	; 0x4c
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4403      	add	r3, r0
 800265e:	3348      	adds	r3, #72	; 0x48
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4419      	add	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4403      	add	r3, r0
 8002672:	334c      	adds	r3, #76	; 0x4c
 8002674:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d113      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x3a2>
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3354      	adds	r3, #84	; 0x54
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d108      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	f002 ff88 	bl	80055b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f005 fa93 	bl	8007bd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c6:	461a      	mov	r2, r3
 80026c8:	2308      	movs	r3, #8
 80026ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e2:	461a      	mov	r2, r3
 80026e4:	2310      	movs	r3, #16
 80026e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fe:	461a      	mov	r2, r3
 8002700:	2340      	movs	r3, #64	; 0x40
 8002702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800270e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002710:	6a38      	ldr	r0, [r7, #32]
 8002712:	f001 fe69 	bl	80043e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3338      	adds	r3, #56	; 0x38
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	3304      	adds	r3, #4
 8002728:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d108      	bne.n	8002744 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f005 fae0 	bl	8007d04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002750:	461a      	mov	r2, r3
 8002752:	2302      	movs	r3, #2
 8002754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fcdb 	bl	800311e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	3301      	adds	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af2e 	bne.w	80025d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fe53 	bl	800542c <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800278c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002790:	d122      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d108      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027b8:	2100      	movs	r1, #0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fec2 	bl	8003544 <HAL_PCDEx_LPM_Callback>
 80027c0:	e002      	b.n	80027c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f005 fa7e 	bl	8007cc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fe25 	bl	800542c <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ec:	d112      	bne.n	8002814 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 fa3a 	bl	8007c78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002812:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fe07 	bl	800542c <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	f040 80b7 	bne.w	800299a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2110      	movs	r1, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fdce 	bl	80043e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002850:	e046      	b.n	80028e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285e:	461a      	mov	r2, r3
 8002860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002864:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	0151      	lsls	r1, r2, #5
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	440a      	add	r2, r1
 800287c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002892:	461a      	mov	r2, r3
 8002894:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002898:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028aa:	0151      	lsls	r1, r2, #5
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	440a      	add	r2, r1
 80028b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	3301      	adds	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3b3      	bcc.n	8002852 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f043 030b 	orr.w	r3, r3, #11
 800291a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292c:	f043 030b 	orr.w	r3, r3, #11
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	e015      	b.n	8002960 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002946:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800294a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f043 030b 	orr.w	r3, r3, #11
 800295e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002972:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002984:	461a      	mov	r2, r3
 8002986:	f002 fe15 	bl	80055b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fd44 	bl	800542c <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d124      	bne.n	80029fa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fdda 	bl	800556e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fd8f 	bl	80044e2 <USB_GetDevSpeed>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681c      	ldr	r4, [r3, #0]
 80029d0:	f001 fa28 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 80029d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4620      	mov	r0, r4
 80029e0:	f001 fa8e 	bl	8003f00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f005 f91e 	bl	8007c26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fd14 	bl	800542c <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d10a      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f005 f8fb 	bl	8007c0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f002 0208 	and.w	r2, r2, #8
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fcff 	bl	800542c <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d122      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a44:	2301      	movs	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	e014      	b.n	8002a74 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fb27 	bl	80030bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	3301      	adds	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3e5      	bcc.n	8002a4a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fcd2 	bl	800542c <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d13b      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a94:	2301      	movs	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	e02b      	b.n	8002af2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3340      	adds	r3, #64	; 0x40
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d115      	bne.n	8002aec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ac0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da12      	bge.n	8002aec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333f      	adds	r3, #63	; 0x3f
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fae8 	bl	80030bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	3301      	adds	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3ce      	bcc.n	8002a9a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fc8b 	bl	800542c <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b20:	d155      	bne.n	8002bce <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b22:	2301      	movs	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e045      	b.n	8002bb4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d12e      	bne.n	8002bae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da2b      	bge.n	8002bae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b62:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d121      	bne.n	8002bae <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002baa:	6053      	str	r3, [r2, #4]
            break;
 8002bac:	e007      	b.n	8002bbe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3b4      	bcc.n	8002b28 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fc2a 	bl	800542c <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d10a      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f005 f89f 	bl	8007d28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fc14 	bl	800542c <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d115      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 f88f 	bl	8007d44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e000      	b.n	8002c3a <HAL_PCD_IRQHandler+0x938>
      return;
 8002c38:	bf00      	nop
    }
  }
}
 8002c3a:	3734      	adds	r7, #52	; 0x34
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_SetAddress+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e013      	b.n	8002c82 <HAL_PCD_SetAddress+0x42>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fb72 	bl	800535c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	461a      	mov	r2, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	70fb      	strb	r3, [r7, #3]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	803b      	strh	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0f      	bge.n	8002cd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00f      	b.n	8002cf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 020f 	and.w	r2, r3, #15
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cfc:	883a      	ldrh	r2, [r7, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	78ba      	ldrb	r2, [r7, #2]
 8002d06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d1a:	78bb      	ldrb	r3, [r7, #2]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d102      	bne.n	8002d26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_EP_Open+0xaa>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e00e      	b.n	8002d52 <HAL_PCD_EP_Open+0xc8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fbf2 	bl	800452c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d50:	7afb      	ldrb	r3, [r7, #11]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da0f      	bge.n	8002d8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 020f 	and.w	r2, r3, #15
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3338      	adds	r3, #56	; 0x38
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	705a      	strb	r2, [r3, #1]
 8002d8c:	e00f      	b.n	8002dae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_EP_Close+0x6e>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e00e      	b.n	8002de6 <HAL_PCD_EP_Close+0x8c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fc30 	bl	800463c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	f001 ff0f 	bl	8004c84 <USB_EP0StartXfer>
 8002e66:	e008      	b.n	8002e7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f001 fcbd 	bl	80047f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3338      	adds	r3, #56	; 0x38
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	6979      	ldr	r1, [r7, #20]
 8002f26:	f001 fead 	bl	8004c84 <USB_EP0StartXfer>
 8002f2a:	e008      	b.n	8002f3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	f001 fc5b 	bl	80047f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d901      	bls.n	8002f66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e050      	b.n	8003008 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da0f      	bge.n	8002f8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	3338      	adds	r3, #56	; 0x38
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	3304      	adds	r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	705a      	strb	r2, [r3, #1]
 8002f8c:	e00d      	b.n	8002faa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_EP_SetStall+0x82>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e01e      	b.n	8003008 <HAL_PCD_EP_SetStall+0xc0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 f8eb 	bl	80051b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	b2d9      	uxtb	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f002 fadb 	bl	80055b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	f003 020f 	and.w	r2, r3, #15
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d901      	bls.n	800302e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e042      	b.n	80030b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0f      	bge.n	8003056 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	705a      	strb	r2, [r3, #1]
 8003054:	e00f      	b.n	8003076 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_PCD_EP_ClrStall+0x86>
 8003092:	2302      	movs	r3, #2
 8003094:	e00e      	b.n	80030b4 <HAL_PCD_EP_ClrStall+0xa4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 f8f3 	bl	8005290 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da0c      	bge.n	80030ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	3338      	adds	r3, #56	; 0x38
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e00c      	b.n	8003104 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	f003 020f 	and.w	r2, r3, #15
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	f001 ff12 	bl	8004f34 <USB_EPStopXfer>
 8003110:	4603      	mov	r3, r0
 8003112:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003114:	7afb      	ldrb	r3, [r7, #11]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b08a      	sub	sp, #40	; 0x28
 8003122:	af02      	add	r7, sp, #8
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	429a      	cmp	r2, r3
 8003150:	d901      	bls.n	8003156 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06c      	b.n	8003230 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	429a      	cmp	r2, r3
 800316a:	d902      	bls.n	8003172 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3303      	adds	r3, #3
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317a:	e02b      	b.n	80031d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3303      	adds	r3, #3
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6919      	ldr	r1, [r3, #16]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	4603      	mov	r3, r0
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f001 ff66 	bl	8005088 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	441a      	add	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d809      	bhi.n	80031fe <PCD_WriteEmptyTxFifo+0xe0>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d203      	bcs.n	80031fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1be      	bne.n	800317c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	429a      	cmp	r2, r3
 8003208:	d811      	bhi.n	800322e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	2201      	movs	r2, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	43db      	mvns	r3, r3
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800322a:	4013      	ands	r3, r2
 800322c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	333c      	adds	r3, #60	; 0x3c
 8003250:	3304      	adds	r3, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d17b      	bne.n	8003366 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4a61      	ldr	r2, [pc, #388]	; (8003400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f240 80b9 	bls.w	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80b3 	beq.w	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	461a      	mov	r2, r3
 800329c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a0:	6093      	str	r3, [r2, #8]
 80032a2:	e0a7      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2320      	movs	r3, #32
 80032be:	6093      	str	r3, [r2, #8]
 80032c0:	e098      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 8093 	bne.w	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4a4b      	ldr	r2, [pc, #300]	; (8003400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d90f      	bls.n	80032f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f2:	6093      	str	r3, [r2, #8]
 80032f4:	e07e      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	440b      	add	r3, r1
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	1ad2      	subs	r2, r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d114      	bne.n	8003358 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003340:	461a      	mov	r2, r3
 8003342:	2101      	movs	r1, #1
 8003344:	f002 f936 	bl	80055b4 <USB_EP0_OutStart>
 8003348:	e006      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	441a      	add	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f004 fc1e 	bl	8007ba0 <HAL_PCD_DataOutStageCallback>
 8003364:	e046      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d124      	bne.n	80033b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	e032      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	2320      	movs	r3, #32
 80033a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f004 fbf5 	bl	8007ba0 <HAL_PCD_DataOutStageCallback>
 80033b6:	e01d      	b.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d114      	bne.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e0:	461a      	mov	r2, r3
 80033e2:	2100      	movs	r1, #0
 80033e4:	f002 f8e6 	bl	80055b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f004 fbd6 	bl	8007ba0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	4f54300a 	.word	0x4f54300a
 8003404:	4f54310a 	.word	0x4f54310a

08003408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <PCD_EP_OutSetupPacket_int+0x88>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d90e      	bls.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f004 fb8d 	bl	8007b7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <PCD_EP_OutSetupPacket_int+0x88>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d90c      	bls.n	8003484 <PCD_EP_OutSetupPacket_int+0x7c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800347c:	461a      	mov	r2, r3
 800347e:	2101      	movs	r1, #1
 8003480:	f002 f898 	bl	80055b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	4f54300a 	.word	0x4f54300a

08003494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034b2:	883b      	ldrh	r3, [r7, #0]
 80034b4:	0419      	lsls	r1, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	430a      	orrs	r2, r1
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	e028      	b.n	8003514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4413      	add	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e00d      	b.n	80034f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	3301      	adds	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d3ec      	bcc.n	80034d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034fc:	883b      	ldrh	r3, [r7, #0]
 80034fe:	0418      	lsls	r0, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	3b01      	subs	r3, #1
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4302      	orrs	r2, r0
 800350c:	3340      	adds	r3, #64	; 0x40
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e267      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e242      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6f      	ldr	r2, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fb6a 	bl	8000cec <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fd fb66 	bl	8000cec <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e207      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fb56 	bl	8000cec <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fb52 	bl	8000cec <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f3      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fb0b 	bl	8000cec <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7fd fb07 	bl	8000cec <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a8      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd faea 	bl	8000cec <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7fd fae6 	bl	8000cec <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e187      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd faca 	bl	8000cec <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7fd fac6 	bl	8000cec <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e167      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd fab3 	bl	8000cec <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7fd faaf 	bl	8000cec <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e150      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b74      	ldr	r3, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fd fa6f 	bl	8000cec <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fd fa6b 	bl	8000cec <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e10c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x2ea>
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fd fa30 	bl	8000cec <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fd fa2c 	bl	8000cec <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0cb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b49      	ldr	r3, [pc, #292]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x334>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fd fa1a 	bl	8000cec <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fd fa16 	bl	8000cec <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0b5      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a38      	ldr	r2, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a1 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d05c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d141      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fd f9ea 	bl	8000cec <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd f9e6 	bl	8000cec <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e087      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fd f9bf 	bl	8000cec <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fd f9bb 	bl	8000cec <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x416>
 8003990:	e054      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fd f9a8 	bl	8000cec <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd f9a4 	bl	8000cec <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x444>
 80039be:	e03d      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e038      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d11a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd f8d6 	bl	8000cec <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd f8d2 	bl	8000cec <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd f836 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08008ba4 	.word	0x08008ba4
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b094      	sub	sp, #80	; 0x50
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
 8003c24:	2300      	movs	r3, #0
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80e1 	bhi.w	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e0db      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c50:	e0db      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c56:	e0d8      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	2200      	movs	r2, #0
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
 8003c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	0159      	lsls	r1, r3, #5
 8003c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9c:	0150      	lsls	r0, r2, #5
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	6139      	str	r1, [r7, #16]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	018a      	lsls	r2, r1, #6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cea:	4690      	mov	r8, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb18 0303 	adds.w	r3, r8, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb49 0303 	adc.w	r3, r9, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	024b      	lsls	r3, r1, #9
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d14:	4621      	mov	r1, r4
 8003d16:	024a      	lsls	r2, r1, #9
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d28:	f7fc faaa 	bl	8000280 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	e058      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4611      	mov	r1, r2
 8003d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	0159      	lsls	r1, r3, #5
 8003d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d62:	0150      	lsls	r0, r2, #5
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d88:	ebb2 040a 	subs.w	r4, r2, sl
 8003d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	00eb      	lsls	r3, r5, #3
 8003d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9e:	00e2      	lsls	r2, r4, #3
 8003da0:	4614      	mov	r4, r2
 8003da2:	461d      	mov	r5, r3
 8003da4:	4643      	mov	r3, r8
 8003da6:	18e3      	adds	r3, r4, r3
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	464b      	mov	r3, r9
 8003dac:	eb45 0303 	adc.w	r3, r5, r3
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	028b      	lsls	r3, r1, #10
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc8:	4621      	mov	r1, r4
 8003dca:	028a      	lsls	r2, r1, #10
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	61fa      	str	r2, [r7, #28]
 8003dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ddc:	f7fc fa50 	bl	8000280 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3750      	adds	r7, #80	; 0x50
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	f107 001c 	add.w	r0, r7, #28
 8003e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d122      	bne.n	8003e9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 fbee 	bl	8005670 <USB_CoreReset>
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e01a      	b.n	8003ed0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 fbe2 	bl	8005670 <USB_CoreReset>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec2:	e005      	b.n	8003ed0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10b      	bne.n	8003eee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f043 0206 	orr.w	r2, r3, #6
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003efa:	b004      	add	sp, #16
 8003efc:	4770      	bx	lr
	...

08003f00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d165      	bne.n	8003fe0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a41      	ldr	r2, [pc, #260]	; (800401c <USB_SetTurnaroundTime+0x11c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d906      	bls.n	8003f2a <USB_SetTurnaroundTime+0x2a>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4a40      	ldr	r2, [pc, #256]	; (8004020 <USB_SetTurnaroundTime+0x120>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d202      	bcs.n	8003f2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f24:	230f      	movs	r3, #15
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e062      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <USB_SetTurnaroundTime+0x120>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d306      	bcc.n	8003f40 <USB_SetTurnaroundTime+0x40>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <USB_SetTurnaroundTime+0x124>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d202      	bcs.n	8003f40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f3a:	230e      	movs	r3, #14
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e057      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a38      	ldr	r2, [pc, #224]	; (8004024 <USB_SetTurnaroundTime+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d306      	bcc.n	8003f56 <USB_SetTurnaroundTime+0x56>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a37      	ldr	r2, [pc, #220]	; (8004028 <USB_SetTurnaroundTime+0x128>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d202      	bcs.n	8003f56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f50:	230d      	movs	r3, #13
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e04c      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a33      	ldr	r2, [pc, #204]	; (8004028 <USB_SetTurnaroundTime+0x128>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d306      	bcc.n	8003f6c <USB_SetTurnaroundTime+0x6c>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a32      	ldr	r2, [pc, #200]	; (800402c <USB_SetTurnaroundTime+0x12c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d802      	bhi.n	8003f6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f66:	230c      	movs	r3, #12
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e041      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	; (800402c <USB_SetTurnaroundTime+0x12c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d906      	bls.n	8003f82 <USB_SetTurnaroundTime+0x82>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <USB_SetTurnaroundTime+0x130>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d802      	bhi.n	8003f82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f7c:	230b      	movs	r3, #11
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e036      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <USB_SetTurnaroundTime+0x130>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d906      	bls.n	8003f98 <USB_SetTurnaroundTime+0x98>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <USB_SetTurnaroundTime+0x134>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d802      	bhi.n	8003f98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f92:	230a      	movs	r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e02b      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a26      	ldr	r2, [pc, #152]	; (8004034 <USB_SetTurnaroundTime+0x134>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d906      	bls.n	8003fae <USB_SetTurnaroundTime+0xae>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a25      	ldr	r2, [pc, #148]	; (8004038 <USB_SetTurnaroundTime+0x138>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d202      	bcs.n	8003fae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fa8:	2309      	movs	r3, #9
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e020      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <USB_SetTurnaroundTime+0x138>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d306      	bcc.n	8003fc4 <USB_SetTurnaroundTime+0xc4>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <USB_SetTurnaroundTime+0x13c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d802      	bhi.n	8003fc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e015      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <USB_SetTurnaroundTime+0x13c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d906      	bls.n	8003fda <USB_SetTurnaroundTime+0xda>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <USB_SetTurnaroundTime+0x140>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d202      	bcs.n	8003fda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e00a      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fda:	2306      	movs	r3, #6
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e007      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fe6:	2309      	movs	r3, #9
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e001      	b.n	8003ff0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fec:	2309      	movs	r3, #9
 8003fee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	00d8acbf 	.word	0x00d8acbf
 8004020:	00e4e1c0 	.word	0x00e4e1c0
 8004024:	00f42400 	.word	0x00f42400
 8004028:	01067380 	.word	0x01067380
 800402c:	011a499f 	.word	0x011a499f
 8004030:	01312cff 	.word	0x01312cff
 8004034:	014ca43f 	.word	0x014ca43f
 8004038:	016e3600 	.word	0x016e3600
 800403c:	01a6ab1f 	.word	0x01a6ab1f
 8004040:	01e84800 	.word	0x01e84800

08004044 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 0201 	bic.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d115      	bne.n	80040d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040b6:	2001      	movs	r0, #1
 80040b8:	f7fc fe24 	bl	8000d04 <HAL_Delay>
      ms++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f001 fa45 	bl	8005552 <USB_GetMode>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d01e      	beq.n	800410c <USB_SetCurrentMode+0x84>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b31      	cmp	r3, #49	; 0x31
 80040d2:	d9f0      	bls.n	80040b6 <USB_SetCurrentMode+0x2e>
 80040d4:	e01a      	b.n	800410c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d115      	bne.n	8004108 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7fc fe0b 	bl	8000d04 <HAL_Delay>
      ms++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f001 fa2c 	bl	8005552 <USB_GetMode>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <USB_SetCurrentMode+0x84>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b31      	cmp	r3, #49	; 0x31
 8004104:	d9f0      	bls.n	80040e8 <USB_SetCurrentMode+0x60>
 8004106:	e001      	b.n	800410c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e005      	b.n	8004118 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b32      	cmp	r3, #50	; 0x32
 8004110:	d101      	bne.n	8004116 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004120:	b084      	sub	sp, #16
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800412e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e009      	b.n	8004154 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3340      	adds	r3, #64	; 0x40
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b0e      	cmp	r3, #14
 8004158:	d9f2      	bls.n	8004140 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800415a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d11c      	bne.n	800419a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
 8004198:	e00b      	b.n	80041b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b8:	461a      	mov	r2, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c4:	4619      	mov	r1, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	461a      	mov	r2, r3
 80041ce:	680b      	ldr	r3, [r1, #0]
 80041d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10c      	bne.n	80041f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041de:	2100      	movs	r1, #0
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f965 	bl	80044b0 <USB_SetDevSpeed>
 80041e6:	e008      	b.n	80041fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041e8:	2101      	movs	r1, #1
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f960 	bl	80044b0 <USB_SetDevSpeed>
 80041f0:	e003      	b.n	80041fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041f2:	2103      	movs	r1, #3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f95b 	bl	80044b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041fa:	2110      	movs	r1, #16
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8f3 	bl	80043e8 <USB_FlushTxFifo>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f91f 	bl	8004450 <USB_FlushRxFifo>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	461a      	mov	r2, r3
 8004224:	2300      	movs	r3, #0
 8004226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	461a      	mov	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e043      	b.n	80042ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425c:	d118      	bne.n	8004290 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e013      	b.n	80042a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	461a      	mov	r2, r3
 8004288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e008      	b.n	80042a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3301      	adds	r3, #1
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d3b7      	bcc.n	8004246 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e043      	b.n	8004364 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f2:	d118      	bne.n	8004326 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e013      	b.n	8004338 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e008      	b.n	8004338 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800435c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d3b7      	bcc.n	80042dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800438c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f043 0210 	orr.w	r2, r3, #16
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <USB_DevInit+0x2c4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f043 0208 	orr.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e0:	b004      	add	sp, #16
 80043e2:	4770      	bx	lr
 80043e4:	803c3800 	.word	0x803c3800

080043e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <USB_FlushTxFifo+0x64>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e01b      	b.n	8004440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	daf2      	bge.n	80043f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	019b      	lsls	r3, r3, #6
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <USB_FlushTxFifo+0x64>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e006      	b.n	8004440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d0f0      	beq.n	8004420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	00030d40 	.word	0x00030d40

08004450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <USB_FlushRxFifo+0x5c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e018      	b.n	80044a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	daf2      	bge.n	800445c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2210      	movs	r2, #16
 800447e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a08      	ldr	r2, [pc, #32]	; (80044ac <USB_FlushRxFifo+0x5c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e006      	b.n	80044a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d0f0      	beq.n	8004480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	00030d40 	.word	0x00030d40

080044b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b087      	sub	sp, #28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0306 	and.w	r3, r3, #6
 80044fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
 8004506:	e00a      	b.n	800451e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d002      	beq.n	8004514 <USB_GetDevSpeed+0x32>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b06      	cmp	r3, #6
 8004512:	d102      	bne.n	800451a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004514:	2302      	movs	r3, #2
 8004516:	75fb      	strb	r3, [r7, #23]
 8004518:	e001      	b.n	800451e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800451a:	230f      	movs	r3, #15
 800451c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d13a      	bne.n	80045be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	2101      	movs	r1, #1
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	b29b      	uxth	r3, r3
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004566:	4313      	orrs	r3, r2
 8004568:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d155      	bne.n	800462c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	791b      	ldrb	r3, [r3, #4]
 800459a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800459c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	059b      	lsls	r3, r3, #22
 80045a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045a4:	4313      	orrs	r3, r2
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e036      	b.n	800462c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045dc:	4313      	orrs	r3, r2
 80045de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11a      	bne.n	800462c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	791b      	ldrb	r3, [r3, #4]
 8004610:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004612:	430b      	orrs	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d161      	bne.n	800471c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800466e:	d11f      	bne.n	80046b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800468e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d0:	4013      	ands	r3, r2
 80046d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4013      	ands	r3, r2
 80046f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	0159      	lsls	r1, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	440b      	add	r3, r1
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	4619      	mov	r1, r3
 8004714:	4b35      	ldr	r3, [pc, #212]	; (80047ec <USB_DeactivateEndpoint+0x1b0>)
 8004716:	4013      	ands	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
 800471a:	e060      	b.n	80047de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004732:	d11f      	bne.n	8004774 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004752:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	43db      	mvns	r3, r3
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004794:	4013      	ands	r3, r2
 8004796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	43db      	mvns	r3, r3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b8:	4013      	ands	r3, r2
 80047ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	0159      	lsls	r1, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	4619      	mov	r1, r3
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <USB_DeactivateEndpoint+0x1b4>)
 80047da:	4013      	ands	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	ec337800 	.word	0xec337800
 80047f0:	eff37800 	.word	0xeff37800

080047f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b01      	cmp	r3, #1
 8004812:	f040 815c 	bne.w	8004ace <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d132      	bne.n	8004884 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800483c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004860:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	0cdb      	lsrs	r3, r3, #19
 800487e:	04db      	lsls	r3, r3, #19
 8004880:	6113      	str	r3, [r2, #16]
 8004882:	e074      	b.n	800496e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	0cdb      	lsrs	r3, r3, #19
 80048a0:	04db      	lsls	r3, r3, #19
 80048a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	440b      	add	r3, r1
 80048e0:	1e59      	subs	r1, r3, #1
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048ec:	4b9d      	ldr	r3, [pc, #628]	; (8004b64 <USB_EPStartXfer+0x370>)
 80048ee:	400b      	ands	r3, r1
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	0148      	lsls	r0, r1, #5
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	4401      	add	r1, r0
 80048f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048fc:	4313      	orrs	r3, r2
 80048fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	0148      	lsls	r0, r1, #5
 800491a:	69f9      	ldr	r1, [r7, #28]
 800491c:	4401      	add	r1, r0
 800491e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	791b      	ldrb	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d11f      	bne.n	800496e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004948:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800494c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800496c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d14b      	bne.n	8004a0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	791b      	ldrb	r3, [r3, #4]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d128      	bne.n	80049ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d110      	bne.n	80049ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e00f      	b.n	80049ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e133      	b.n	8004c74 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d015      	beq.n	8004a60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 811b 	beq.w	8004c74 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004a5e:	e109      	b.n	8004c74 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e00f      	b.n	8004ab2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6919      	ldr	r1, [r3, #16]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	b298      	uxth	r0, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fade 	bl	8005088 <USB_WritePacket>
 8004acc:	e0d2      	b.n	8004c74 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	0cdb      	lsrs	r3, r3, #19
 8004aea:	04db      	lsls	r3, r3, #19
 8004aec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d126      	bne.n	8004b68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5e:	6113      	str	r3, [r2, #16]
 8004b60:	e03a      	b.n	8004bd8 <USB_EPStartXfer+0x3e4>
 8004b62:	bf00      	nop
 8004b64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	1e5a      	subs	r2, r3, #1
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	8afa      	ldrh	r2, [r7, #22]
 8004b84:	fb03 f202 	mul.w	r2, r3, r2
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	8afb      	ldrh	r3, [r7, #22]
 8004b9c:	04d9      	lsls	r1, r3, #19
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <USB_EPStartXfer+0x48c>)
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	0148      	lsls	r0, r1, #5
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	4401      	add	r1, r0
 8004baa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	0148      	lsls	r0, r1, #5
 8004bcc:	69f9      	ldr	r1, [r7, #28]
 8004bce:	4401      	add	r1, r0
 8004bd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10d      	bne.n	8004bfa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	791b      	ldrb	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d128      	bne.n	8004c54 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d110      	bne.n	8004c34 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e00f      	b.n	8004c54 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	1ff80000 	.word	0x1ff80000

08004c84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f040 80ce 	bne.w	8004e42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d132      	bne.n	8004d14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ccc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0c:	0cdb      	lsrs	r3, r3, #19
 8004d0e:	04db      	lsls	r3, r3, #19
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	e04e      	b.n	8004db2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	0cdb      	lsrs	r3, r3, #19
 8004d30:	04db      	lsls	r3, r3, #19
 8004d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d903      	bls.n	8004d6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da2:	6939      	ldr	r1, [r7, #16]
 8004da4:	0148      	lsls	r0, r1, #5
 8004da6:	6979      	ldr	r1, [r7, #20]
 8004da8:	4401      	add	r1, r0
 8004daa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d11e      	bne.n	8004df6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e097      	b.n	8004f26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8083 	beq.w	8004f26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	634b      	str	r3, [r1, #52]	; 0x34
 8004e40:	e071      	b.n	8004f26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	0cdb      	lsrs	r3, r3, #19
 8004e5e:	04db      	lsls	r3, r3, #19
 8004e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	0148      	lsls	r0, r1, #5
 8004ed8:	6979      	ldr	r1, [r7, #20]
 8004eda:	4401      	add	r1, r0
 8004edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10d      	bne.n	8004f06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6919      	ldr	r1, [r3, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	460a      	mov	r2, r1
 8004f04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d14a      	bne.n	8004fe8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f6a:	f040 8086 	bne.w	800507a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	7812      	ldrb	r2, [r2, #0]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d902      	bls.n	8004fcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fca:	e056      	b.n	800507a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe4:	d0e7      	beq.n	8004fb6 <USB_EPStopXfer+0x82>
 8004fe6:	e048      	b.n	800507a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005000:	d13b      	bne.n	800507a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005024:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005048:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f242 7210 	movw	r2, #10000	; 0x2710
 8005056:	4293      	cmp	r3, r2
 8005058:	d902      	bls.n	8005060 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
          break;
 800505e:	e00c      	b.n	800507a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005078:	d0e7      	beq.n	800504a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	460b      	mov	r3, r1
 8005098:	71fb      	strb	r3, [r7, #7]
 800509a:	4613      	mov	r3, r2
 800509c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d123      	bne.n	80050f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ae:	88bb      	ldrh	r3, [r7, #4]
 80050b0:	3303      	adds	r3, #3
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e018      	b.n	80050ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	031a      	lsls	r2, r3, #12
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c8:	461a      	mov	r2, r3
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	3301      	adds	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3e2      	bcc.n	80050bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3724      	adds	r7, #36	; 0x24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005104:	b480      	push	{r7}
 8005106:	b08b      	sub	sp, #44	; 0x2c
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	b29b      	uxth	r3, r3
 8005120:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	e014      	b.n	800515a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	601a      	str	r2, [r3, #0]
    pDest++;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	3301      	adds	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	3301      	adds	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	3301      	adds	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	3301      	adds	r3, #1
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	429a      	cmp	r2, r3
 8005160:	d3e6      	bcc.n	8005130 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005162:	8bfb      	ldrh	r3, [r7, #30]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005172:	461a      	mov	r2, r3
 8005174:	f107 0310 	add.w	r3, r7, #16
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	701a      	strb	r2, [r3, #0]
      i++;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	3301      	adds	r3, #1
 8005192:	623b      	str	r3, [r7, #32]
      pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	3b01      	subs	r3, #1
 800519e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051a0:	8bfb      	ldrh	r3, [r7, #30]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ea      	bne.n	800517c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	372c      	adds	r7, #44	; 0x2c
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d12c      	bne.n	800522a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db12      	blt.n	8005208 <USB_EPSetStall+0x54>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00f      	beq.n	8005208 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005206:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e02b      	b.n	8005282 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	db12      	blt.n	8005262 <USB_EPSetStall+0xae>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005260:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005280:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d128      	bne.n	80052fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d003      	beq.n	80052dc <USB_EPClearStall+0x4c>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d138      	bne.n	800534e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	e027      	b.n	800534e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800531c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d003      	beq.n	800532e <USB_EPClearStall+0x9e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	791b      	ldrb	r3, [r3, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d10f      	bne.n	800534e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800537e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d6:	f023 0302 	bic.w	r3, r3, #2
 80053da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005444:	68fb      	ldr	r3, [r7, #12]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	0c1b      	lsrs	r3, r3, #16
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	b29b      	uxth	r3, r3
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054e8:	68bb      	ldr	r3, [r7, #8]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	01db      	lsls	r3, r3, #7
 8005528:	b2db      	uxtb	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005544:	68bb      	ldr	r3, [r7, #8]
}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0301 	and.w	r3, r3, #1
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800558c:	f023 0307 	bic.w	r3, r3, #7
 8005590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	460b      	mov	r3, r1
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	333c      	adds	r3, #60	; 0x3c
 80055ca:	3304      	adds	r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4a26      	ldr	r2, [pc, #152]	; (800566c <USB_EP0_OutStart+0xb8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d90a      	bls.n	80055ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d101      	bne.n	80055ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e037      	b.n	800565e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	2300      	movs	r3, #0
 80055f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800560c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f043 0318 	orr.w	r3, r3, #24
 8005620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005634:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d10f      	bne.n	800565c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005656:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800565a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	4f54300a 	.word	0x4f54300a

08005670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <USB_CoreReset+0x64>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e01b      	b.n	80056c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	daf2      	bge.n	800567c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <USB_CoreReset+0x64>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d0f0      	beq.n	80056a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	00030d40 	.word	0x00030d40

080056d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056e8:	f002 fcc4 	bl	8008074 <USBD_static_malloc>
 80056ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	2100      	movs	r1, #0
 8005700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005704:	2302      	movs	r3, #2
 8005706:	e0d4      	b.n	80058b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005708:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800570c:	2100      	movs	r1, #0
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f002 fd14 	bl	800813c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	32b0      	adds	r2, #176	; 0xb0
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	32b0      	adds	r2, #176	; 0xb0
 800572e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7c1b      	ldrb	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d138      	bne.n	80057b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005740:	4b5e      	ldr	r3, [pc, #376]	; (80058bc <USBD_CDC_Init+0x1e4>)
 8005742:	7819      	ldrb	r1, [r3, #0]
 8005744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005748:	2202      	movs	r2, #2
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f002 fb6f 	bl	8007e2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005750:	4b5a      	ldr	r3, [pc, #360]	; (80058bc <USBD_CDC_Init+0x1e4>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	2201      	movs	r2, #1
 8005768:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800576a:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 800576c:	7819      	ldrb	r1, [r3, #0]
 800576e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005772:	2202      	movs	r2, #2
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f002 fb5a 	bl	8007e2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800577a:	4b51      	ldr	r3, [pc, #324]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005792:	2201      	movs	r2, #1
 8005794:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005796:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <USBD_CDC_Init+0x1ec>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f003 020f 	and.w	r2, r3, #15
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3326      	adds	r3, #38	; 0x26
 80057ac:	2210      	movs	r2, #16
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e035      	b.n	800581e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057b2:	4b42      	ldr	r3, [pc, #264]	; (80058bc <USBD_CDC_Init+0x1e4>)
 80057b4:	7819      	ldrb	r1, [r3, #0]
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	2202      	movs	r2, #2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f002 fb37 	bl	8007e2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057c0:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <USBD_CDC_Init+0x1e4>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	2201      	movs	r2, #1
 80057d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057da:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 80057dc:	7819      	ldrb	r1, [r3, #0]
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	2202      	movs	r2, #2
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f002 fb23 	bl	8007e2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005800:	2201      	movs	r2, #1
 8005802:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005804:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <USBD_CDC_Init+0x1ec>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3326      	adds	r3, #38	; 0x26
 800581a:	2210      	movs	r2, #16
 800581c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800581e:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <USBD_CDC_Init+0x1ec>)
 8005820:	7819      	ldrb	r1, [r3, #0]
 8005822:	2308      	movs	r3, #8
 8005824:	2203      	movs	r2, #3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 fb01 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800582c:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <USBD_CDC_Init+0x1ec>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3324      	adds	r3, #36	; 0x24
 8005842:	2201      	movs	r2, #1
 8005844:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	33b0      	adds	r3, #176	; 0xb0
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800587c:	2302      	movs	r3, #2
 800587e:	e018      	b.n	80058b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7c1b      	ldrb	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 800588a:	7819      	ldrb	r1, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f002 fbb8 	bl	800800c <USBD_LL_PrepareReceive>
 800589c:	e008      	b.n	80058b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <USBD_CDC_Init+0x1e8>)
 80058a0:	7819      	ldrb	r1, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f002 fbae 	bl	800800c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000093 	.word	0x20000093
 80058c0:	20000094 	.word	0x20000094
 80058c4:	20000095 	.word	0x20000095

080058c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <USBD_CDC_DeInit+0xf8>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f002 facd 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058e0:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <USBD_CDC_DeInit+0xf8>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	3324      	adds	r3, #36	; 0x24
 80058f6:	2200      	movs	r2, #0
 80058f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058fa:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <USBD_CDC_DeInit+0xfc>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f002 faba 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <USBD_CDC_DeInit+0xfc>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 020f 	and.w	r2, r3, #15
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800591e:	2200      	movs	r2, #0
 8005920:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <USBD_CDC_DeInit+0x100>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f002 faa6 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <USBD_CDC_DeInit+0x100>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	2200      	movs	r2, #0
 8005946:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <USBD_CDC_DeInit+0x100>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f003 020f 	and.w	r2, r3, #15
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	3326      	adds	r3, #38	; 0x26
 800595e:	2200      	movs	r2, #0
 8005960:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	32b0      	adds	r2, #176	; 0xb0
 800596c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01f      	beq.n	80059b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	33b0      	adds	r3, #176	; 0xb0
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	32b0      	adds	r2, #176	; 0xb0
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	4618      	mov	r0, r3
 8005998:	f002 fb7a 	bl	8008090 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32b0      	adds	r2, #176	; 0xb0
 80059a6:	2100      	movs	r1, #0
 80059a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000093 	.word	0x20000093
 80059c4:	20000094 	.word	0x20000094
 80059c8:	20000095 	.word	0x20000095

080059cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	32b0      	adds	r2, #176	; 0xb0
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e0bf      	b.n	8005b7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d050      	beq.n	8005aaa <USBD_CDC_Setup+0xde>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	f040 80af 	bne.w	8005b6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	88db      	ldrh	r3, [r3, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03a      	beq.n	8005a8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b25b      	sxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da1b      	bge.n	8005a58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	33b0      	adds	r3, #176	; 0xb0
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	88d2      	ldrh	r2, [r2, #6]
 8005a3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	88db      	ldrh	r3, [r3, #6]
 8005a42:	2b07      	cmp	r3, #7
 8005a44:	bf28      	it	cs
 8005a46:	2307      	movcs	r3, #7
 8005a48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	89fa      	ldrh	r2, [r7, #14]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fd89 	bl	8007568 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a56:	e090      	b.n	8005b7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785a      	ldrb	r2, [r3, #1]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	2b3f      	cmp	r3, #63	; 0x3f
 8005a68:	d803      	bhi.n	8005a72 <USBD_CDC_Setup+0xa6>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	88db      	ldrh	r3, [r3, #6]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	e000      	b.n	8005a74 <USBD_CDC_Setup+0xa8>
 8005a72:	2240      	movs	r2, #64	; 0x40
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a7a:	6939      	ldr	r1, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a82:	461a      	mov	r2, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 fd9b 	bl	80075c0 <USBD_CtlPrepareRx>
      break;
 8005a8a:	e076      	b.n	8005b7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	33b0      	adds	r3, #176	; 0xb0
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	7850      	ldrb	r0, [r2, #1]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	4798      	blx	r3
      break;
 8005aa8:	e067      	b.n	8005b7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b0b      	cmp	r3, #11
 8005ab0:	d851      	bhi.n	8005b56 <USBD_CDC_Setup+0x18a>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <USBD_CDC_Setup+0xec>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ae9 	.word	0x08005ae9
 8005abc:	08005b65 	.word	0x08005b65
 8005ac0:	08005b57 	.word	0x08005b57
 8005ac4:	08005b57 	.word	0x08005b57
 8005ac8:	08005b57 	.word	0x08005b57
 8005acc:	08005b57 	.word	0x08005b57
 8005ad0:	08005b57 	.word	0x08005b57
 8005ad4:	08005b57 	.word	0x08005b57
 8005ad8:	08005b57 	.word	0x08005b57
 8005adc:	08005b57 	.word	0x08005b57
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b3d 	.word	0x08005b3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d107      	bne.n	8005b04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005af4:	f107 030a 	add.w	r3, r7, #10
 8005af8:	2202      	movs	r2, #2
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fd33 	bl	8007568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b02:	e032      	b.n	8005b6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fcbd 	bl	8007486 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b10:	e02b      	b.n	8005b6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d107      	bne.n	8005b2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b1e:	f107 030d 	add.w	r3, r7, #13
 8005b22:	2201      	movs	r2, #1
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fd1e 	bl	8007568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b2c:	e01d      	b.n	8005b6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 fca8 	bl	8007486 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	75fb      	strb	r3, [r7, #23]
          break;
 8005b3a:	e016      	b.n	8005b6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d00f      	beq.n	8005b68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fc9b 	bl	8007486 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b50:	2303      	movs	r3, #3
 8005b52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b54:	e008      	b.n	8005b68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fc94 	bl	8007486 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	75fb      	strb	r3, [r7, #23]
          break;
 8005b62:	e002      	b.n	8005b6a <USBD_CDC_Setup+0x19e>
          break;
 8005b64:	bf00      	nop
 8005b66:	e008      	b.n	8005b7a <USBD_CDC_Setup+0x1ae>
          break;
 8005b68:	bf00      	nop
      }
      break;
 8005b6a:	e006      	b.n	8005b7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fc89 	bl	8007486 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	32b0      	adds	r2, #176	; 0xb0
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e065      	b.n	8005c7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32b0      	adds	r2, #176	; 0xb0
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3318      	adds	r3, #24
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02f      	beq.n	8005c38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	3318      	adds	r3, #24
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 010f 	and.w	r1, r3, #15
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	440b      	add	r3, r1
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4403      	add	r3, r0
 8005c00:	3348      	adds	r3, #72	; 0x48
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d112      	bne.n	8005c38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3318      	adds	r3, #24
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c2a:	78f9      	ldrb	r1, [r7, #3]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f002 f9ca 	bl	8007fca <USBD_LL_Transmit>
 8005c36:	e01f      	b.n	8005c78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	33b0      	adds	r3, #176	; 0xb0
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d010      	beq.n	8005c78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	33b0      	adds	r3, #176	; 0xb0
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	32b0      	adds	r2, #176	; 0xb0
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	32b0      	adds	r2, #176	; 0xb0
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e01a      	b.n	8005cea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f9c8 	bl	800804e <USBD_LL_GetRxDataSize>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	33b0      	adds	r3, #176	; 0xb0
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	32b0      	adds	r2, #176	; 0xb0
 8005d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e025      	b.n	8005d60 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	33b0      	adds	r3, #176	; 0xb0
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <USBD_CDC_EP0_RxReady+0x6c>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d2e:	2bff      	cmp	r3, #255	; 0xff
 8005d30:	d015      	beq.n	8005d5e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	33b0      	adds	r3, #176	; 0xb0
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d52:	b292      	uxth	r2, r2
 8005d54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d70:	2182      	movs	r1, #130	; 0x82
 8005d72:	4818      	ldr	r0, [pc, #96]	; (8005dd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d74:	f000 fd4f 	bl	8006816 <USBD_GetEpDesc>
 8005d78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4815      	ldr	r0, [pc, #84]	; (8005dd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d7e:	f000 fd4a 	bl	8006816 <USBD_GetEpDesc>
 8005d82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d84:	2181      	movs	r1, #129	; 0x81
 8005d86:	4813      	ldr	r0, [pc, #76]	; (8005dd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d88:	f000 fd45 	bl	8006816 <USBD_GetEpDesc>
 8005d8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2210      	movs	r2, #16
 8005d98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da8:	711a      	strb	r2, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d006      	beq.n	8005dc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dbc:	711a      	strb	r2, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2243      	movs	r2, #67	; 0x43
 8005dc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000050 	.word	0x20000050

08005dd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005de0:	2182      	movs	r1, #130	; 0x82
 8005de2:	4818      	ldr	r0, [pc, #96]	; (8005e44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005de4:	f000 fd17 	bl	8006816 <USBD_GetEpDesc>
 8005de8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dea:	2101      	movs	r1, #1
 8005dec:	4815      	ldr	r0, [pc, #84]	; (8005e44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dee:	f000 fd12 	bl	8006816 <USBD_GetEpDesc>
 8005df2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005df4:	2181      	movs	r1, #129	; 0x81
 8005df6:	4813      	ldr	r0, [pc, #76]	; (8005e44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005df8:	f000 fd0d 	bl	8006816 <USBD_GetEpDesc>
 8005dfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2210      	movs	r2, #16
 8005e08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d006      	beq.n	8005e1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2200      	movs	r2, #0
 8005e14:	711a      	strb	r2, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f042 0202 	orr.w	r2, r2, #2
 8005e1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d006      	beq.n	8005e32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	711a      	strb	r2, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f042 0202 	orr.w	r2, r2, #2
 8005e30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2243      	movs	r2, #67	; 0x43
 8005e36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000050 	.word	0x20000050

08005e48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e50:	2182      	movs	r1, #130	; 0x82
 8005e52:	4818      	ldr	r0, [pc, #96]	; (8005eb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e54:	f000 fcdf 	bl	8006816 <USBD_GetEpDesc>
 8005e58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4815      	ldr	r0, [pc, #84]	; (8005eb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e5e:	f000 fcda 	bl	8006816 <USBD_GetEpDesc>
 8005e62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e64:	2181      	movs	r1, #129	; 0x81
 8005e66:	4813      	ldr	r0, [pc, #76]	; (8005eb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e68:	f000 fcd5 	bl	8006816 <USBD_GetEpDesc>
 8005e6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2210      	movs	r2, #16
 8005e78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d006      	beq.n	8005e8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e88:	711a      	strb	r2, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9c:	711a      	strb	r2, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2243      	movs	r2, #67	; 0x43
 8005ea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000050 	.word	0x20000050

08005eb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	2000000c 	.word	0x2000000c

08005ed8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e009      	b.n	8005f00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	33b0      	adds	r3, #176	; 0xb0
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	32b0      	adds	r2, #176	; 0xb0
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e008      	b.n	8005f44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	32b0      	adds	r2, #176	; 0xb0
 8005f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e004      	b.n	8005f7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	32b0      	adds	r2, #176	; 0xb0
 8005f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32b0      	adds	r2, #176	; 0xb0
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e025      	b.n	800600a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11f      	bne.n	8006008 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <USBD_CDC_TransmitPacket+0x88>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4403      	add	r3, r0
 8005fea:	3318      	adds	r3, #24
 8005fec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <USBD_CDC_TransmitPacket+0x88>)
 8005ff0:	7819      	ldrb	r1, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 ffe3 	bl	8007fca <USBD_LL_Transmit>

    ret = USBD_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000093 	.word	0x20000093

08006018 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32b0      	adds	r2, #176	; 0xb0
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	32b0      	adds	r2, #176	; 0xb0
 800603a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006042:	2303      	movs	r3, #3
 8006044:	e018      	b.n	8006078 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	7c1b      	ldrb	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <USBD_CDC_ReceivePacket+0x68>)
 8006050:	7819      	ldrb	r1, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 ffd5 	bl	800800c <USBD_LL_PrepareReceive>
 8006062:	e008      	b.n	8006076 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <USBD_CDC_ReceivePacket+0x68>)
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 ffcb 	bl	800800c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000094 	.word	0x20000094

08006084 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	e01f      	b.n	80060dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	79fa      	ldrb	r2, [r7, #7]
 80060ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 fe45 	bl	8007d60 <USBD_LL_Init>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e025      	b.n	8006148 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	; 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00f      	beq.n	8006138 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32ae      	adds	r2, #174	; 0xae
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f107 020e 	add.w	r2, r7, #14
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fe4d 	bl	8007df8 <USBD_LL_Start>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	4611      	mov	r1, r2
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	4611      	mov	r1, r2
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f908 	bl	8007412 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006210:	461a      	mov	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b02      	cmp	r3, #2
 8006224:	d01a      	beq.n	800625c <USBD_LL_SetupStage+0x72>
 8006226:	2b02      	cmp	r3, #2
 8006228:	d822      	bhi.n	8006270 <USBD_LL_SetupStage+0x86>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <USBD_LL_SetupStage+0x4a>
 800622e:	2b01      	cmp	r3, #1
 8006230:	d00a      	beq.n	8006248 <USBD_LL_SetupStage+0x5e>
 8006232:	e01d      	b.n	8006270 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb5f 	bl	8006900 <USBD_StdDevReq>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e020      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fbc7 	bl	80069e4 <USBD_StdItfReq>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
      break;
 800625a:	e016      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc29 	bl	8006abc <USBD_StdEPReq>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
      break;
 800626e:	e00c      	b.n	800628a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800627a:	b2db      	uxtb	r3, r3
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fe1a 	bl	8007eb8 <USBD_LL_StallEP>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
      break;
 8006288:	bf00      	nop
  }

  return ret;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	460b      	mov	r3, r1
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d16e      	bne.n	800638a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	f040 8098 	bne.w	80063f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d913      	bls.n	80062f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	bf28      	it	cs
 80062e6:	4613      	movcs	r3, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 f984 	bl	80075fa <USBD_CtlContinueRx>
 80062f2:	e07d      	b.n	80063f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d014      	beq.n	800632c <USBD_LL_DataOutStage+0x98>
 8006302:	2b02      	cmp	r3, #2
 8006304:	d81d      	bhi.n	8006342 <USBD_LL_DataOutStage+0xae>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <USBD_LL_DataOutStage+0x7c>
 800630a:	2b01      	cmp	r3, #1
 800630c:	d003      	beq.n	8006316 <USBD_LL_DataOutStage+0x82>
 800630e:	e018      	b.n	8006342 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	75bb      	strb	r3, [r7, #22]
            break;
 8006314:	e018      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800631c:	b2db      	uxtb	r3, r3
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fa5e 	bl	80067e2 <USBD_CoreFindIF>
 8006326:	4603      	mov	r3, r0
 8006328:	75bb      	strb	r3, [r7, #22]
            break;
 800632a:	e00d      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006332:	b2db      	uxtb	r3, r3
 8006334:	4619      	mov	r1, r3
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fa60 	bl	80067fc <USBD_CoreFindEP>
 800633c:	4603      	mov	r3, r0
 800633e:	75bb      	strb	r3, [r7, #22]
            break;
 8006340:	e002      	b.n	8006348 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	75bb      	strb	r3, [r7, #22]
            break;
 8006346:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006348:	7dbb      	ldrb	r3, [r7, #22]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d119      	bne.n	8006382 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b03      	cmp	r3, #3
 8006358:	d113      	bne.n	8006382 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800635a:	7dba      	ldrb	r2, [r7, #22]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	32ae      	adds	r2, #174	; 0xae
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800636a:	7dba      	ldrb	r2, [r7, #22]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006372:	7dba      	ldrb	r2, [r7, #22]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	32ae      	adds	r2, #174	; 0xae
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 f94a 	bl	800761c <USBD_CtlSendStatus>
 8006388:	e032      	b.n	80063f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fa31 	bl	80067fc <USBD_CoreFindEP>
 800639a:	4603      	mov	r3, r0
 800639c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800639e:	7dbb      	ldrb	r3, [r7, #22]
 80063a0:	2bff      	cmp	r3, #255	; 0xff
 80063a2:	d025      	beq.n	80063f0 <USBD_LL_DataOutStage+0x15c>
 80063a4:	7dbb      	ldrb	r3, [r7, #22]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d122      	bne.n	80063f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d117      	bne.n	80063e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063b6:	7dba      	ldrb	r2, [r7, #22]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	32ae      	adds	r2, #174	; 0xae
 80063bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00f      	beq.n	80063e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063c6:	7dba      	ldrb	r2, [r7, #22]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ce:	7dba      	ldrb	r2, [r7, #22]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	32ae      	adds	r2, #174	; 0xae
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	7afa      	ldrb	r2, [r7, #11]
 80063dc:	4611      	mov	r1, r2
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	4798      	blx	r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	e000      	b.n	80063f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	460b      	mov	r3, r1
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d16f      	bne.n	80064ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3314      	adds	r3, #20
 8006412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800641a:	2b02      	cmp	r3, #2
 800641c:	d15a      	bne.n	80064d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	d914      	bls.n	8006454 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	461a      	mov	r2, r3
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f001 f8ac 	bl	800759e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	2100      	movs	r1, #0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f001 fddd 	bl	800800c <USBD_LL_PrepareReceive>
 8006452:	e03f      	b.n	80064d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d11c      	bne.n	800649a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006468:	429a      	cmp	r2, r3
 800646a:	d316      	bcc.n	800649a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006476:	429a      	cmp	r2, r3
 8006478:	d20f      	bcs.n	800649a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f001 f88d 	bl	800759e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800648c:	2300      	movs	r3, #0
 800648e:	2200      	movs	r2, #0
 8006490:	2100      	movs	r1, #0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 fdba 	bl	800800c <USBD_LL_PrepareReceive>
 8006498:	e01c      	b.n	80064d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d10f      	bne.n	80064c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fcf5 	bl	8007eb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f001 f8b7 	bl	8007642 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03a      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff fe42 	bl	8006168 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064ec:	e032      	b.n	8006554 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f97f 	bl	80067fc <USBD_CoreFindEP>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2bff      	cmp	r3, #255	; 0xff
 8006506:	d025      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d122      	bne.n	8006554 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b03      	cmp	r3, #3
 8006518:	d11c      	bne.n	8006554 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800651a:	7dfa      	ldrb	r2, [r7, #23]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	32ae      	adds	r2, #174	; 0xae
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d014      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800652a:	7dfa      	ldrb	r2, [r7, #23]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006532:	7dfa      	ldrb	r2, [r7, #23]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	32ae      	adds	r2, #174	; 0xae
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	7afa      	ldrb	r2, [r7, #11]
 8006540:	4611      	mov	r1, r2
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	4798      	blx	r3
 8006546:	4603      	mov	r3, r0
 8006548:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800654a:	7dbb      	ldrb	r3, [r7, #22]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006550:	7dbb      	ldrb	r3, [r7, #22]
 8006552:	e000      	b.n	8006556 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6852      	ldr	r2, [r2, #4]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	4611      	mov	r1, r2
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fc2f 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fc21 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2240      	movs	r2, #64	; 0x40
 80065f6:	621a      	str	r2, [r3, #32]

  return ret;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b04      	cmp	r3, #4
 8006660:	d106      	bne.n	8006670 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d110      	bne.n	80066b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e01c      	b.n	800671a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d115      	bne.n	8006718 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	32ae      	adds	r2, #174	; 0xae
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	78fa      	ldrb	r2, [r7, #3]
 8006712:	4611      	mov	r1, r2
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32ae      	adds	r2, #174	; 0xae
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e01c      	b.n	800677e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d115      	bne.n	800677c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32ae      	adds	r2, #174	; 0xae
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32ae      	adds	r2, #174	; 0xae
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	4611      	mov	r1, r2
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6852      	ldr	r2, [r2, #4]
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	4611      	mov	r1, r2
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006808:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b086      	sub	sp, #24
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	885b      	ldrh	r3, [r3, #2]
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	429a      	cmp	r2, r3
 800683c:	d920      	bls.n	8006880 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006846:	e013      	b.n	8006870 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006848:	f107 030a 	add.w	r3, r7, #10
 800684c:	4619      	mov	r1, r3
 800684e:	6978      	ldr	r0, [r7, #20]
 8006850:	f000 f81b 	bl	800688a <USBD_GetNextDesc>
 8006854:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b05      	cmp	r3, #5
 800685c:	d108      	bne.n	8006870 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	789b      	ldrb	r3, [r3, #2]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	429a      	cmp	r2, r3
 800686a:	d008      	beq.n	800687e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	885b      	ldrh	r3, [r3, #2]
 8006874:	b29a      	uxth	r2, r3
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	429a      	cmp	r2, r3
 800687a:	d8e5      	bhi.n	8006848 <USBD_GetEpDesc+0x32>
 800687c:	e000      	b.n	8006880 <USBD_GetEpDesc+0x6a>
          break;
 800687e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006880:	693b      	ldr	r3, [r7, #16]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	3301      	adds	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068e2:	8a3b      	ldrh	r3, [r7, #16]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	b21a      	sxth	r2, r3
 80068e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b21b      	sxth	r3, r3
 80068f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068f2:	89fb      	ldrh	r3, [r7, #14]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006916:	2b40      	cmp	r3, #64	; 0x40
 8006918:	d005      	beq.n	8006926 <USBD_StdDevReq+0x26>
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d857      	bhi.n	80069ce <USBD_StdDevReq+0xce>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00f      	beq.n	8006942 <USBD_StdDevReq+0x42>
 8006922:	2b20      	cmp	r3, #32
 8006924:	d153      	bne.n	80069ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	32ae      	adds	r2, #174	; 0xae
 8006930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e04a      	b.n	80069d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b09      	cmp	r3, #9
 8006948:	d83b      	bhi.n	80069c2 <USBD_StdDevReq+0xc2>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_StdDevReq+0x50>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	080069a5 	.word	0x080069a5
 8006954:	080069b9 	.word	0x080069b9
 8006958:	080069c3 	.word	0x080069c3
 800695c:	080069af 	.word	0x080069af
 8006960:	080069c3 	.word	0x080069c3
 8006964:	08006983 	.word	0x08006983
 8006968:	08006979 	.word	0x08006979
 800696c:	080069c3 	.word	0x080069c3
 8006970:	0800699b 	.word	0x0800699b
 8006974:	0800698d 	.word	0x0800698d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa3c 	bl	8006df8 <USBD_GetDescriptor>
          break;
 8006980:	e024      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fba1 	bl	80070cc <USBD_SetAddress>
          break;
 800698a:	e01f      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fbe0 	bl	8007154 <USBD_SetConfig>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
          break;
 8006998:	e018      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc83 	bl	80072a8 <USBD_GetConfig>
          break;
 80069a2:	e013      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fcb4 	bl	8007314 <USBD_GetStatus>
          break;
 80069ac:	e00e      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fce3 	bl	800737c <USBD_SetFeature>
          break;
 80069b6:	e009      	b.n	80069cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fd07 	bl	80073ce <USBD_ClrFeature>
          break;
 80069c0:	e004      	b.n	80069cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fd5e 	bl	8007486 <USBD_CtlError>
          break;
 80069ca:	bf00      	nop
      }
      break;
 80069cc:	e004      	b.n	80069d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fd58 	bl	8007486 <USBD_CtlError>
      break;
 80069d6:	bf00      	nop
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d005      	beq.n	8006a0a <USBD_StdItfReq+0x26>
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d852      	bhi.n	8006aa8 <USBD_StdItfReq+0xc4>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USBD_StdItfReq+0x26>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d14e      	bne.n	8006aa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d840      	bhi.n	8006a9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	889b      	ldrh	r3, [r3, #4]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d836      	bhi.n	8006a90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	889b      	ldrh	r3, [r3, #4]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fed9 	bl	80067e2 <USBD_CoreFindIF>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2bff      	cmp	r3, #255	; 0xff
 8006a38:	d01d      	beq.n	8006a76 <USBD_StdItfReq+0x92>
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11a      	bne.n	8006a76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a40:	7bba      	ldrb	r2, [r7, #14]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	32ae      	adds	r2, #174	; 0xae
 8006a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a50:	7bba      	ldrb	r2, [r7, #14]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a58:	7bba      	ldrb	r2, [r7, #14]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32ae      	adds	r2, #174	; 0xae
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a6e:	e004      	b.n	8006a7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a74:	e001      	b.n	8006a7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d110      	bne.n	8006aa4 <USBD_StdItfReq+0xc0>
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fdc7 	bl	800761c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fcf7 	bl	8007486 <USBD_CtlError>
          break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fcf2 	bl	8007486 <USBD_CtlError>
          break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_StdItfReq+0xc2>
          break;
 8006aa4:	bf00      	nop
      }
      break;
 8006aa6:	e004      	b.n	8006ab2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fceb 	bl	8007486 <USBD_CtlError>
      break;
 8006ab0:	bf00      	nop
  }

  return ret;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d007      	beq.n	8006aec <USBD_StdEPReq+0x30>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	f200 817f 	bhi.w	8006de0 <USBD_StdEPReq+0x324>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02a      	beq.n	8006b3c <USBD_StdEPReq+0x80>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	f040 817a 	bne.w	8006de0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff fe83 	bl	80067fc <USBD_CoreFindEP>
 8006af6:	4603      	mov	r3, r0
 8006af8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006afa:	7b7b      	ldrb	r3, [r7, #13]
 8006afc:	2bff      	cmp	r3, #255	; 0xff
 8006afe:	f000 8174 	beq.w	8006dea <USBD_StdEPReq+0x32e>
 8006b02:	7b7b      	ldrb	r3, [r7, #13]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 8170 	bne.w	8006dea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b0a:	7b7a      	ldrb	r2, [r7, #13]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b12:	7b7a      	ldrb	r2, [r7, #13]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	32ae      	adds	r2, #174	; 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8163 	beq.w	8006dea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b24:	7b7a      	ldrb	r2, [r7, #13]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32ae      	adds	r2, #174	; 0xae
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b3a:	e156      	b.n	8006dea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d008      	beq.n	8006b56 <USBD_StdEPReq+0x9a>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	f300 8145 	bgt.w	8006dd4 <USBD_StdEPReq+0x318>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 809b 	beq.w	8006c86 <USBD_StdEPReq+0x1ca>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d03c      	beq.n	8006bce <USBD_StdEPReq+0x112>
 8006b54:	e13e      	b.n	8006dd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d002      	beq.n	8006b68 <USBD_StdEPReq+0xac>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d016      	beq.n	8006b94 <USBD_StdEPReq+0xd8>
 8006b66:	e02c      	b.n	8006bc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <USBD_StdEPReq+0xce>
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d00a      	beq.n	8006b8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f99d 	bl	8007eb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f999 	bl	8007eb8 <USBD_LL_StallEP>
 8006b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b88:	e020      	b.n	8006bcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc7a 	bl	8007486 <USBD_CtlError>
              break;
 8006b92:	e01b      	b.n	8006bcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <USBD_StdEPReq+0xfe>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d008      	beq.n	8006bba <USBD_StdEPReq+0xfe>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f97f 	bl	8007eb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fd2e 	bl	800761c <USBD_CtlSendStatus>

              break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc5e 	bl	8007486 <USBD_CtlError>
              break;
 8006bca:	bf00      	nop
          }
          break;
 8006bcc:	e107      	b.n	8006dde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d002      	beq.n	8006be0 <USBD_StdEPReq+0x124>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d016      	beq.n	8006c0c <USBD_StdEPReq+0x150>
 8006bde:	e04b      	b.n	8006c78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <USBD_StdEPReq+0x146>
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d00a      	beq.n	8006c02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f961 	bl	8007eb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf6:	2180      	movs	r1, #128	; 0x80
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f95d 	bl	8007eb8 <USBD_LL_StallEP>
 8006bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c00:	e040      	b.n	8006c84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc3e 	bl	8007486 <USBD_CtlError>
              break;
 8006c0a:	e03b      	b.n	8006c84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d136      	bne.n	8006c82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f967 	bl	8007ef6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fcf7 	bl	800761c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fde2 	bl	80067fc <USBD_CoreFindEP>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c3c:	7b7b      	ldrb	r3, [r7, #13]
 8006c3e:	2bff      	cmp	r3, #255	; 0xff
 8006c40:	d01f      	beq.n	8006c82 <USBD_StdEPReq+0x1c6>
 8006c42:	7b7b      	ldrb	r3, [r7, #13]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11c      	bne.n	8006c82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c48:	7b7a      	ldrb	r2, [r7, #13]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c50:	7b7a      	ldrb	r2, [r7, #13]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	32ae      	adds	r2, #174	; 0xae
 8006c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c60:	7b7a      	ldrb	r2, [r7, #13]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32ae      	adds	r2, #174	; 0xae
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c76:	e004      	b.n	8006c82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fc03 	bl	8007486 <USBD_CtlError>
              break;
 8006c80:	e000      	b.n	8006c84 <USBD_StdEPReq+0x1c8>
              break;
 8006c82:	bf00      	nop
          }
          break;
 8006c84:	e0ab      	b.n	8006dde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d002      	beq.n	8006c98 <USBD_StdEPReq+0x1dc>
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d032      	beq.n	8006cfc <USBD_StdEPReq+0x240>
 8006c96:	e097      	b.n	8006dc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <USBD_StdEPReq+0x1f2>
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d004      	beq.n	8006cae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fbed 	bl	8007486 <USBD_CtlError>
                break;
 8006cac:	e091      	b.n	8006dd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da0b      	bge.n	8006cce <USBD_StdEPReq+0x212>
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3304      	adds	r3, #4
 8006ccc:	e00b      	b.n	8006ce6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc37 	bl	8007568 <USBD_CtlSendData>
              break;
 8006cfa:	e06a      	b.n	8006dd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da11      	bge.n	8006d28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3324      	adds	r3, #36	; 0x24
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d117      	bne.n	8006d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fbb0 	bl	8007486 <USBD_CtlError>
                  break;
 8006d26:	e054      	b.n	8006dd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 020f 	and.w	r2, r3, #15
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fb9d 	bl	8007486 <USBD_CtlError>
                  break;
 8006d4c:	e041      	b.n	8006dd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da0b      	bge.n	8006d6e <USBD_StdEPReq+0x2b2>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	3310      	adds	r3, #16
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	e00b      	b.n	8006d86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <USBD_StdEPReq+0x2d8>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d103      	bne.n	8006d9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e00e      	b.n	8006dba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f8c7 	bl	8007f34 <USBD_LL_IsStallEP>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e002      	b.n	8006dba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fbd1 	bl	8007568 <USBD_CtlSendData>
              break;
 8006dc6:	e004      	b.n	8006dd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb5b 	bl	8007486 <USBD_CtlError>
              break;
 8006dd0:	bf00      	nop
          }
          break;
 8006dd2:	e004      	b.n	8006dde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb55 	bl	8007486 <USBD_CtlError>
          break;
 8006ddc:	bf00      	nop
      }
      break;
 8006dde:	e005      	b.n	8006dec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fb4f 	bl	8007486 <USBD_CtlError>
      break;
 8006de8:	e000      	b.n	8006dec <USBD_StdEPReq+0x330>
      break;
 8006dea:	bf00      	nop
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	f200 8128 	bhi.w	800706e <USBD_GetDescriptor+0x276>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_GetDescriptor+0x2c>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e99 	.word	0x08006e99
 8006e30:	0800706f 	.word	0x0800706f
 8006e34:	0800706f 	.word	0x0800706f
 8006e38:	0800700f 	.word	0x0800700f
 8006e3c:	0800703b 	.word	0x0800703b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
      break;
 8006e56:	e112      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7c1b      	ldrb	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10d      	bne.n	8006e7c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f107 0208 	add.w	r2, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	2202      	movs	r2, #2
 8006e78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e7a:	e100      	b.n	800707e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
      break;
 8006e96:	e0f2      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	885b      	ldrh	r3, [r3, #2]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	f200 80ac 	bhi.w	8006ffc <USBD_GetDescriptor+0x204>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_GetDescriptor+0xb4>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ec5 	.word	0x08006ec5
 8006eb0:	08006ef9 	.word	0x08006ef9
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f61 	.word	0x08006f61
 8006ebc:	08006f95 	.word	0x08006f95
 8006ec0:	08006fc9 	.word	0x08006fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7c12      	ldrb	r2, [r2, #16]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee6:	e091      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 facb 	bl	8007486 <USBD_CtlError>
            err++;
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef6:	e089      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	f107 0108 	add.w	r1, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1a:	e077      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fab1 	bl	8007486 <USBD_CtlError>
            err++;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	3301      	adds	r3, #1
 8006f28:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2a:	e06f      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	7c12      	ldrb	r2, [r2, #16]
 8006f44:	f107 0108 	add.w	r1, r7, #8
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f4e:	e05d      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa97 	bl	8007486 <USBD_CtlError>
            err++;
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f5e:	e055      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7c12      	ldrb	r2, [r2, #16]
 8006f78:	f107 0108 	add.w	r1, r7, #8
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f82:	e043      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa7d 	bl	8007486 <USBD_CtlError>
            err++;
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	72fb      	strb	r3, [r7, #11]
          break;
 8006f92:	e03b      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7c12      	ldrb	r2, [r2, #16]
 8006fac:	f107 0108 	add.w	r1, r7, #8
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb6:	e029      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa63 	bl	8007486 <USBD_CtlError>
            err++;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fc6:	e021      	b.n	800700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7c12      	ldrb	r2, [r2, #16]
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fea:	e00f      	b.n	800700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa49 	bl	8007486 <USBD_CtlError>
            err++;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffa:	e007      	b.n	800700c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa41 	bl	8007486 <USBD_CtlError>
          err++;
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	3301      	adds	r3, #1
 8007008:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800700a:	bf00      	nop
      }
      break;
 800700c:	e037      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7c1b      	ldrb	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	f107 0208 	add.w	r2, r7, #8
 8007022:	4610      	mov	r0, r2
 8007024:	4798      	blx	r3
 8007026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007028:	e029      	b.n	800707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fa2a 	bl	8007486 <USBD_CtlError>
        err++;
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	3301      	adds	r3, #1
 8007036:	72fb      	strb	r3, [r7, #11]
      break;
 8007038:	e021      	b.n	800707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f107 0208 	add.w	r2, r7, #8
 800704e:	4610      	mov	r0, r2
 8007050:	4798      	blx	r3
 8007052:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	2207      	movs	r2, #7
 800705a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800705c:	e00f      	b.n	800707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa10 	bl	8007486 <USBD_CtlError>
        err++;
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	3301      	adds	r3, #1
 800706a:	72fb      	strb	r3, [r7, #11]
      break;
 800706c:	e007      	b.n	800707e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa08 	bl	8007486 <USBD_CtlError>
      err++;
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	3301      	adds	r3, #1
 800707a:	72fb      	strb	r3, [r7, #11]
      break;
 800707c:	bf00      	nop
  }

  if (err != 0U)
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11e      	bne.n	80070c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	88db      	ldrh	r3, [r3, #6]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d016      	beq.n	80070ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88da      	ldrh	r2, [r3, #6]
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	4293      	cmp	r3, r2
 800709a:	bf28      	it	cs
 800709c:	4613      	movcs	r3, r2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	461a      	mov	r2, r3
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa5d 	bl	8007568 <USBD_CtlSendData>
 80070ae:	e009      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9e7 	bl	8007486 <USBD_CtlError>
 80070b8:	e004      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 faae 	bl	800761c <USBD_CtlSendStatus>
 80070c0:	e000      	b.n	80070c4 <USBD_GetDescriptor+0x2cc>
    return;
 80070c2:	bf00      	nop
  }
}
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop

080070cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	889b      	ldrh	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d131      	bne.n	8007142 <USBD_SetAddress+0x76>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d12d      	bne.n	8007142 <USBD_SetAddress+0x76>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	2b7f      	cmp	r3, #127	; 0x7f
 80070ec:	d829      	bhi.n	8007142 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b03      	cmp	r3, #3
 8007104:	d104      	bne.n	8007110 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9bc 	bl	8007486 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	e01d      	b.n	800714c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7bfa      	ldrb	r2, [r7, #15]
 8007114:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 ff35 	bl	8007f8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa7a 	bl	800761c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007136:	e009      	b.n	800714c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007140:	e004      	b.n	800714c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f99e 	bl	8007486 <USBD_CtlError>
  }
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	4b4e      	ldr	r3, [pc, #312]	; (80072a4 <USBD_SetConfig+0x150>)
 800716a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800716c:	4b4d      	ldr	r3, [pc, #308]	; (80072a4 <USBD_SetConfig+0x150>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d905      	bls.n	8007180 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f985 	bl	8007486 <USBD_CtlError>
    return USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e08c      	b.n	800729a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d002      	beq.n	8007192 <USBD_SetConfig+0x3e>
 800718c:	2b03      	cmp	r3, #3
 800718e:	d029      	beq.n	80071e4 <USBD_SetConfig+0x90>
 8007190:	e075      	b.n	800727e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007192:	4b44      	ldr	r3, [pc, #272]	; (80072a4 <USBD_SetConfig+0x150>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800719a:	4b42      	ldr	r3, [pc, #264]	; (80072a4 <USBD_SetConfig+0x150>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071a4:	4b3f      	ldr	r3, [pc, #252]	; (80072a4 <USBD_SetConfig+0x150>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fe ffe7 	bl	800617e <USBD_SetClassConfig>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f962 	bl	8007486 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2202      	movs	r2, #2
 80071c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071ca:	e065      	b.n	8007298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa25 	bl	800761c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071da:	e05d      	b.n	8007298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa1d 	bl	800761c <USBD_CtlSendStatus>
      break;
 80071e2:	e059      	b.n	8007298 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071e4:	4b2f      	ldr	r3, [pc, #188]	; (80072a4 <USBD_SetConfig+0x150>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d112      	bne.n	8007212 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071f4:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <USBD_SetConfig+0x150>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071fe:	4b29      	ldr	r3, [pc, #164]	; (80072a4 <USBD_SetConfig+0x150>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fe ffd6 	bl	80061b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa06 	bl	800761c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007210:	e042      	b.n	8007298 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007212:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <USBD_SetConfig+0x150>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d02a      	beq.n	8007276 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fe ffc4 	bl	80061b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800722e:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <USBD_SetConfig+0x150>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007238:	4b1a      	ldr	r3, [pc, #104]	; (80072a4 <USBD_SetConfig+0x150>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fe ff9d 	bl	800617e <USBD_SetClassConfig>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00f      	beq.n	800726e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f918 	bl	8007486 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fe ffa9 	bl	80061b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800726c:	e014      	b.n	8007298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9d4 	bl	800761c <USBD_CtlSendStatus>
      break;
 8007274:	e010      	b.n	8007298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9d0 	bl	800761c <USBD_CtlSendStatus>
      break;
 800727c:	e00c      	b.n	8007298 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f900 	bl	8007486 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <USBD_SetConfig+0x150>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fe ff92 	bl	80061b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	73fb      	strb	r3, [r7, #15]
      break;
 8007296:	bf00      	nop
  }

  return ret;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200001a4 	.word	0x200001a4

080072a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	88db      	ldrh	r3, [r3, #6]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d004      	beq.n	80072c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8e2 	bl	8007486 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072c2:	e023      	b.n	800730c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	dc02      	bgt.n	80072d6 <USBD_GetConfig+0x2e>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dc03      	bgt.n	80072dc <USBD_GetConfig+0x34>
 80072d4:	e015      	b.n	8007302 <USBD_GetConfig+0x5a>
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d00b      	beq.n	80072f2 <USBD_GetConfig+0x4a>
 80072da:	e012      	b.n	8007302 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3308      	adds	r3, #8
 80072e6:	2201      	movs	r2, #1
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f93c 	bl	8007568 <USBD_CtlSendData>
        break;
 80072f0:	e00c      	b.n	800730c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	2201      	movs	r2, #1
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f934 	bl	8007568 <USBD_CtlSendData>
        break;
 8007300:	e004      	b.n	800730c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8be 	bl	8007486 <USBD_CtlError>
        break;
 800730a:	bf00      	nop
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	2b02      	cmp	r3, #2
 800732a:	d81e      	bhi.n	800736a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	88db      	ldrh	r3, [r3, #6]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d004      	beq.n	800733e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8a5 	bl	8007486 <USBD_CtlError>
        break;
 800733c:	e01a      	b.n	8007374 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	330c      	adds	r3, #12
 800735e:	2202      	movs	r2, #2
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f900 	bl	8007568 <USBD_CtlSendData>
      break;
 8007368:	e004      	b.n	8007374 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f88a 	bl	8007486 <USBD_CtlError>
      break;
 8007372:	bf00      	nop
  }
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	885b      	ldrh	r3, [r3, #2]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d107      	bne.n	800739e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f940 	bl	800761c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800739c:	e013      	b.n	80073c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d10b      	bne.n	80073be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	889b      	ldrh	r3, [r3, #4]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f930 	bl	800761c <USBD_CtlSendStatus>
}
 80073bc:	e003      	b.n	80073c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f860 	bl	8007486 <USBD_CtlError>
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d80b      	bhi.n	80073fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	885b      	ldrh	r3, [r3, #2]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10c      	bne.n	8007408 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f910 	bl	800761c <USBD_CtlSendStatus>
      }
      break;
 80073fc:	e004      	b.n	8007408 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f840 	bl	8007486 <USBD_CtlError>
      break;
 8007406:	e000      	b.n	800740a <USBD_ClrFeature+0x3c>
      break;
 8007408:	bf00      	nop
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fa41 	bl	80068c4 <SWAPBYTE>
 8007442:	4603      	mov	r3, r0
 8007444:	461a      	mov	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff fa34 	bl	80068c4 <SWAPBYTE>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff fa27 	bl	80068c4 <SWAPBYTE>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	80da      	strh	r2, [r3, #6]
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd10 	bl	8007eb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fd0c 	bl	8007eb8 <USBD_LL_StallEP>
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d036      	beq.n	800752c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074c2:	6938      	ldr	r0, [r7, #16]
 80074c4:	f000 f836 	bl	8007534 <USBD_GetLen>
 80074c8:	4603      	mov	r3, r0
 80074ca:	3301      	adds	r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	3301      	adds	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4413      	add	r3, r2
 80074ee:	2203      	movs	r2, #3
 80074f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	3301      	adds	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074f8:	e013      	b.n	8007522 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4413      	add	r3, r2
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	7812      	ldrb	r2, [r2, #0]
 8007504:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]
    idx++;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	3301      	adds	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	4413      	add	r3, r2
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
    idx++;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	3301      	adds	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e7      	bne.n	80074fa <USBD_GetString+0x52>
 800752a:	e000      	b.n	800752e <USBD_GetString+0x86>
    return;
 800752c:	bf00      	nop
  }
}
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007544:	e005      	b.n	8007552 <USBD_GetLen+0x1e>
  {
    len++;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	3301      	adds	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	3301      	adds	r3, #1
 8007550:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f5      	bne.n	8007546 <USBD_GetLen+0x12>
  }

  return len;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	2100      	movs	r1, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fd1b 	bl	8007fca <USBD_LL_Transmit>

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	2100      	movs	r1, #0
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fd0a 	bl	8007fca <USBD_LL_Transmit>

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2203      	movs	r2, #3
 80075d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fd0e 	bl	800800c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	2100      	movs	r1, #0
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fcfd 	bl	800800c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2204      	movs	r2, #4
 8007628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fcc9 	bl	8007fca <USBD_LL_Transmit>

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2205      	movs	r2, #5
 800764e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fcd7 	bl	800800c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800766c:	2200      	movs	r2, #0
 800766e:	4912      	ldr	r1, [pc, #72]	; (80076b8 <MX_USB_DEVICE_Init+0x50>)
 8007670:	4812      	ldr	r0, [pc, #72]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007672:	f7fe fd07 	bl	8006084 <USBD_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800767c:	f7f9 f976 	bl	800096c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007680:	490f      	ldr	r1, [pc, #60]	; (80076c0 <MX_USB_DEVICE_Init+0x58>)
 8007682:	480e      	ldr	r0, [pc, #56]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007684:	f7fe fd2e 	bl	80060e4 <USBD_RegisterClass>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800768e:	f7f9 f96d 	bl	800096c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007692:	490c      	ldr	r1, [pc, #48]	; (80076c4 <MX_USB_DEVICE_Init+0x5c>)
 8007694:	4809      	ldr	r0, [pc, #36]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 8007696:	f7fe fc1f 	bl	8005ed8 <USBD_CDC_RegisterInterface>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076a0:	f7f9 f964 	bl	800096c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076a4:	4805      	ldr	r0, [pc, #20]	; (80076bc <MX_USB_DEVICE_Init+0x54>)
 80076a6:	f7fe fd53 	bl	8006150 <USBD_Start>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076b0:	f7f9 f95c 	bl	800096c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076b4:	bf00      	nop
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200000ac 	.word	0x200000ac
 80076bc:	200001a8 	.word	0x200001a8
 80076c0:	20000018 	.word	0x20000018
 80076c4:	20000098 	.word	0x20000098

080076c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076cc:	2200      	movs	r2, #0
 80076ce:	4905      	ldr	r1, [pc, #20]	; (80076e4 <CDC_Init_FS+0x1c>)
 80076d0:	4805      	ldr	r0, [pc, #20]	; (80076e8 <CDC_Init_FS+0x20>)
 80076d2:	f7fe fc1b 	bl	8005f0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076d6:	4905      	ldr	r1, [pc, #20]	; (80076ec <CDC_Init_FS+0x24>)
 80076d8:	4803      	ldr	r0, [pc, #12]	; (80076e8 <CDC_Init_FS+0x20>)
 80076da:	f7fe fc39 	bl	8005f50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000c84 	.word	0x20000c84
 80076e8:	200001a8 	.word	0x200001a8
 80076ec:	20000484 	.word	0x20000484

080076f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
 800770c:	4613      	mov	r3, r2
 800770e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b23      	cmp	r3, #35	; 0x23
 8007714:	d84a      	bhi.n	80077ac <CDC_Control_FS+0xac>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <CDC_Control_FS+0x1c>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077ad 	.word	0x080077ad
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080077ad 	.word	0x080077ad
 8007734:	080077ad 	.word	0x080077ad
 8007738:	080077ad 	.word	0x080077ad
 800773c:	080077ad 	.word	0x080077ad
 8007740:	080077ad 	.word	0x080077ad
 8007744:	080077ad 	.word	0x080077ad
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077ad 	.word	0x080077ad
 8007754:	080077ad 	.word	0x080077ad
 8007758:	080077ad 	.word	0x080077ad
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077ad 	.word	0x080077ad
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	080077ad 	.word	0x080077ad
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080077ad 	.word	0x080077ad
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077ad 	.word	0x080077ad
 8007790:	080077ad 	.word	0x080077ad
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077ad 	.word	0x080077ad
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077ad 	.word	0x080077ad
 80077a4:	080077ad 	.word	0x080077ad
 80077a8:	080077ad 	.word	0x080077ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077ac:	bf00      	nop
  }

  return (USBD_OK);
 80077ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4813      	ldr	r0, [pc, #76]	; (8007818 <CDC_Receive_FS+0x5c>)
 80077ca:	f7fe fbc1 	bl	8005f50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077ce:	4812      	ldr	r0, [pc, #72]	; (8007818 <CDC_Receive_FS+0x5c>)
 80077d0:	f7fe fc22 	bl	8006018 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f81f 	bl	8007820 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b31      	cmp	r3, #49	; 0x31
 80077e8:	d106      	bne.n	80077f8 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80077ea:	2201      	movs	r2, #1
 80077ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077f0:	480a      	ldr	r0, [pc, #40]	; (800781c <CDC_Receive_FS+0x60>)
 80077f2:	f7fa fc1d 	bl	8002030 <HAL_GPIO_WritePin>
 80077f6:	e009      	b.n	800780c <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d105      	bne.n	800780c <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007800:	2200      	movs	r2, #0
 8007802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007806:	4805      	ldr	r0, [pc, #20]	; (800781c <CDC_Receive_FS+0x60>)
 8007808:	f7fa fc12 	bl	8002030 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 800780c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200001a8 	.word	0x200001a8
 800781c:	40020c00 	.word	0x40020c00

08007820 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <CDC_Transmit_FS+0x48>)
 8007832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007836:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007842:	2301      	movs	r3, #1
 8007844:	e00b      	b.n	800785e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4806      	ldr	r0, [pc, #24]	; (8007868 <CDC_Transmit_FS+0x48>)
 800784e:	f7fe fb5d 	bl	8005f0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007852:	4805      	ldr	r0, [pc, #20]	; (8007868 <CDC_Transmit_FS+0x48>)
 8007854:	f7fe fb9a 	bl	8005f8c <USBD_CDC_TransmitPacket>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200001a8 	.word	0x200001a8

0800786c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800787e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
	...

08007890 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2212      	movs	r2, #18
 80078a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	200000c8 	.word	0x200000c8

080078b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2204      	movs	r2, #4
 80078c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078c6:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	200000dc 	.word	0x200000dc

080078d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <USBD_FS_ProductStrDescriptor+0x34>)
 80078ee:	4808      	ldr	r0, [pc, #32]	; (8007910 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f0:	f7ff fdda 	bl	80074a8 <USBD_GetString>
 80078f4:	e004      	b.n	8007900 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4904      	ldr	r1, [pc, #16]	; (800790c <USBD_FS_ProductStrDescriptor+0x34>)
 80078fa:	4805      	ldr	r0, [pc, #20]	; (8007910 <USBD_FS_ProductStrDescriptor+0x38>)
 80078fc:	f7ff fdd4 	bl	80074a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20001484 	.word	0x20001484
 8007910:	08008b5c 	.word	0x08008b5c

08007914 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	4904      	ldr	r1, [pc, #16]	; (8007934 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007926:	f7ff fdbf 	bl	80074a8 <USBD_GetString>
  return USBD_StrDesc;
 800792a:	4b02      	ldr	r3, [pc, #8]	; (8007934 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20001484 	.word	0x20001484
 8007938:	08008b74 	.word	0x08008b74

0800793c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	221a      	movs	r2, #26
 800794c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800794e:	f000 f843 	bl	80079d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007952:	4b02      	ldr	r3, [pc, #8]	; (800795c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	200000e0 	.word	0x200000e0

08007960 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d105      	bne.n	800797e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007976:	4808      	ldr	r0, [pc, #32]	; (8007998 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007978:	f7ff fd96 	bl	80074a8 <USBD_GetString>
 800797c:	e004      	b.n	8007988 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007982:	4805      	ldr	r0, [pc, #20]	; (8007998 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007984:	f7ff fd90 	bl	80074a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007988:	4b02      	ldr	r3, [pc, #8]	; (8007994 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20001484 	.word	0x20001484
 8007998:	08008b88 	.word	0x08008b88

0800799c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4907      	ldr	r1, [pc, #28]	; (80079d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079b2:	4808      	ldr	r0, [pc, #32]	; (80079d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b4:	f7ff fd78 	bl	80074a8 <USBD_GetString>
 80079b8:	e004      	b.n	80079c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079be:	4805      	ldr	r0, [pc, #20]	; (80079d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c0:	f7ff fd72 	bl	80074a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079c4:	4b02      	ldr	r3, [pc, #8]	; (80079d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20001484 	.word	0x20001484
 80079d4:	08008b94 	.word	0x08008b94

080079d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <Get_SerialNum+0x44>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <Get_SerialNum+0x48>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <Get_SerialNum+0x4c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079fe:	2208      	movs	r2, #8
 8007a00:	4909      	ldr	r1, [pc, #36]	; (8007a28 <Get_SerialNum+0x50>)
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f814 	bl	8007a30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a08:	2204      	movs	r2, #4
 8007a0a:	4908      	ldr	r1, [pc, #32]	; (8007a2c <Get_SerialNum+0x54>)
 8007a0c:	68b8      	ldr	r0, [r7, #8]
 8007a0e:	f000 f80f 	bl	8007a30 <IntToUnicode>
  }
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	1fff7a10 	.word	0x1fff7a10
 8007a20:	1fff7a14 	.word	0x1fff7a14
 8007a24:	1fff7a18 	.word	0x1fff7a18
 8007a28:	200000e2 	.word	0x200000e2
 8007a2c:	200000f2 	.word	0x200000f2

08007a30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]
 8007a46:	e027      	b.n	8007a98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	2b09      	cmp	r3, #9
 8007a4e:	d80b      	bhi.n	8007a68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	0f1b      	lsrs	r3, r3, #28
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	440b      	add	r3, r1
 8007a60:	3230      	adds	r2, #48	; 0x30
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e00a      	b.n	8007a7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0f1b      	lsrs	r3, r3, #28
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	440b      	add	r3, r1
 8007a78:	3237      	adds	r2, #55	; 0x37
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	3301      	adds	r3, #1
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	3301      	adds	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
 8007a98:	7dfa      	ldrb	r2, [r7, #23]
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d3d3      	bcc.n	8007a48 <IntToUnicode+0x18>
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ad0:	d14b      	bne.n	8007b6a <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	4a26      	ldr	r2, [pc, #152]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ae2:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af4:	2302      	movs	r3, #2
 8007af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007afc:	2300      	movs	r3, #0
 8007afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b00:	230a      	movs	r3, #10
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4619      	mov	r1, r3
 8007b0a:	481b      	ldr	r0, [pc, #108]	; (8007b78 <HAL_PCD_MspInit+0xc8>)
 8007b0c:	f7fa f8dc 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b16:	2302      	movs	r3, #2
 8007b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b22:	230a      	movs	r3, #10
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4812      	ldr	r0, [pc, #72]	; (8007b78 <HAL_PCD_MspInit+0xc8>)
 8007b2e:	f7fa f8cb 	bl	8001cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	4a0f      	ldr	r2, [pc, #60]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3c:	6353      	str	r3, [r2, #52]	; 0x34
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	4a0b      	ldr	r2, [pc, #44]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <HAL_PCD_MspInit+0xc4>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	2043      	movs	r0, #67	; 0x43
 8007b60:	f7fa f87b 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b64:	2043      	movs	r0, #67	; 0x43
 8007b66:	f7fa f894 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b6a:	bf00      	nop
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40023800 	.word	0x40023800
 8007b78:	40020000 	.word	0x40020000

08007b7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe fb29 	bl	80061ea <USBD_LL_SetupStage>
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f7fe fb63 	bl	8006294 <USBD_LL_DataOutStage>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	334c      	adds	r3, #76	; 0x4c
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f7fe fbfc 	bl	80063fa <USBD_LL_DataInStage>
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fd30 	bl	800667e <USBD_LL_SOF>
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	e008      	b.n	8007c52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d102      	bne.n	8007c4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e001      	b.n	8007c52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c4e:	f7f8 fe8d 	bl	800096c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c58:	7bfa      	ldrb	r2, [r7, #15]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fcd0 	bl	8006602 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fc78 	bl	800655e <USBD_LL_Reset>
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fccb 	bl	8006622 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <HAL_PCD_SuspendCallback+0x48>)
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	4a03      	ldr	r2, [pc, #12]	; (8007cc0 <HAL_PCD_SuspendCallback+0x48>)
 8007cb2:	f043 0306 	orr.w	r3, r3, #6
 8007cb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	e000ed00 	.word	0xe000ed00

08007cc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fcbb 	bl	800664e <USBD_LL_Resume>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fd13 	bl	8006722 <USBD_LL_IsoOUTIncomplete>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fccf 	bl	80066be <USBD_LL_IsoINIncomplete>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fd25 	bl	8006786 <USBD_LL_DevConnected>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fd22 	bl	800679c <USBD_LL_DevDisconnected>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d13c      	bne.n	8007dea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d70:	4a20      	ldr	r2, [pc, #128]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d80:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d88:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d8e:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d90:	2202      	movs	r2, #2
 8007d92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d94:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d9a:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <USBD_LL_Init+0x94>)
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007da0:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <USBD_LL_Init+0x94>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007da6:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <USBD_LL_Init+0x94>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <USBD_LL_Init+0x94>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007db2:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <USBD_LL_Init+0x94>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <USBD_LL_Init+0x94>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dbe:	480d      	ldr	r0, [pc, #52]	; (8007df4 <USBD_LL_Init+0x94>)
 8007dc0:	f7fa f94f 	bl	8002062 <HAL_PCD_Init>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dca:	f7f8 fdcf 	bl	800096c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dce:	2180      	movs	r1, #128	; 0x80
 8007dd0:	4808      	ldr	r0, [pc, #32]	; (8007df4 <USBD_LL_Init+0x94>)
 8007dd2:	f7fb fba6 	bl	8003522 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dd6:	2240      	movs	r2, #64	; 0x40
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4806      	ldr	r0, [pc, #24]	; (8007df4 <USBD_LL_Init+0x94>)
 8007ddc:	f7fb fb5a 	bl	8003494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007de0:	2280      	movs	r2, #128	; 0x80
 8007de2:	2101      	movs	r1, #1
 8007de4:	4803      	ldr	r0, [pc, #12]	; (8007df4 <USBD_LL_Init+0x94>)
 8007de6:	f7fb fb55 	bl	8003494 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20001684 	.word	0x20001684

08007df8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fa fa44 	bl	800229c <HAL_PCD_Start>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f942 	bl	80080a4 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	70fb      	strb	r3, [r7, #3]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70bb      	strb	r3, [r7, #2]
 8007e44:	4613      	mov	r3, r2
 8007e46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e56:	78bb      	ldrb	r3, [r7, #2]
 8007e58:	883a      	ldrh	r2, [r7, #0]
 8007e5a:	78f9      	ldrb	r1, [r7, #3]
 8007e5c:	f7fa ff15 	bl	8002c8a <HAL_PCD_EP_Open>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f91c 	bl	80080a4 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fa ff5e 	bl	8002d5a <HAL_PCD_EP_Close>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 f8fd 	bl	80080a4 <USBD_Get_USB_Status>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fb f836 	bl	8002f48 <HAL_PCD_EP_SetStall>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f8de 	bl	80080a4 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fb f87b 	bl	8003010 <HAL_PCD_EP_ClrStall>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f8bf 	bl	80080a4 <USBD_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da0b      	bge.n	8007f68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	333e      	adds	r3, #62	; 0x3e
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	e00b      	b.n	8007f80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	4613      	mov	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fa fe48 	bl	8002c40 <HAL_PCD_SetAddress>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f874 	bl	80080a4 <USBD_Get_USB_Status>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fe8:	7af9      	ldrb	r1, [r7, #11]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f7fa ff61 	bl	8002eb4 <HAL_PCD_EP_Transmit>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f853 	bl	80080a4 <USBD_Get_USB_Status>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008002:	7dbb      	ldrb	r3, [r7, #22]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	460b      	mov	r3, r1
 800801a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800802a:	7af9      	ldrb	r1, [r7, #11]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	f7fa fedd 	bl	8002dee <HAL_PCD_EP_Receive>
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f832 	bl	80080a4 <USBD_Get_USB_Status>
 8008040:	4603      	mov	r3, r0
 8008042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008044:	7dbb      	ldrb	r3, [r7, #22]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f7fa ff0d 	bl	8002e84 <HAL_PCD_EP_GetRxCount>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800807c:	4b03      	ldr	r3, [pc, #12]	; (800808c <USBD_static_malloc+0x18>)
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20001b90 	.word	0x20001b90

08008090 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d817      	bhi.n	80080e8 <USBD_Get_USB_Status+0x44>
 80080b8:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <USBD_Get_USB_Status+0x1c>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080d7 	.word	0x080080d7
 80080c8:	080080dd 	.word	0x080080dd
 80080cc:	080080e3 	.word	0x080080e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
    break;
 80080d4:	e00b      	b.n	80080ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080d6:	2303      	movs	r3, #3
 80080d8:	73fb      	strb	r3, [r7, #15]
    break;
 80080da:	e008      	b.n	80080ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e005      	b.n	80080ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	73fb      	strb	r3, [r7, #15]
    break;
 80080e6:	e002      	b.n	80080ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	73fb      	strb	r3, [r7, #15]
    break;
 80080ec:	bf00      	nop
  }
  return usb_status;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <siprintf>:
 80080fc:	b40e      	push	{r1, r2, r3}
 80080fe:	b500      	push	{lr}
 8008100:	b09c      	sub	sp, #112	; 0x70
 8008102:	ab1d      	add	r3, sp, #116	; 0x74
 8008104:	9002      	str	r0, [sp, #8]
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800810c:	4809      	ldr	r0, [pc, #36]	; (8008134 <siprintf+0x38>)
 800810e:	9107      	str	r1, [sp, #28]
 8008110:	9104      	str	r1, [sp, #16]
 8008112:	4909      	ldr	r1, [pc, #36]	; (8008138 <siprintf+0x3c>)
 8008114:	f853 2b04 	ldr.w	r2, [r3], #4
 8008118:	9105      	str	r1, [sp, #20]
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	a902      	add	r1, sp, #8
 8008120:	f000 f992 	bl	8008448 <_svfiprintf_r>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	b01c      	add	sp, #112	; 0x70
 800812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008130:	b003      	add	sp, #12
 8008132:	4770      	bx	lr
 8008134:	20000148 	.word	0x20000148
 8008138:	ffff0208 	.word	0xffff0208

0800813c <memset>:
 800813c:	4402      	add	r2, r0
 800813e:	4603      	mov	r3, r0
 8008140:	4293      	cmp	r3, r2
 8008142:	d100      	bne.n	8008146 <memset+0xa>
 8008144:	4770      	bx	lr
 8008146:	f803 1b01 	strb.w	r1, [r3], #1
 800814a:	e7f9      	b.n	8008140 <memset+0x4>

0800814c <__errno>:
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <__errno+0x8>)
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000148 	.word	0x20000148

08008158 <__libc_init_array>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	4d0d      	ldr	r5, [pc, #52]	; (8008190 <__libc_init_array+0x38>)
 800815c:	4c0d      	ldr	r4, [pc, #52]	; (8008194 <__libc_init_array+0x3c>)
 800815e:	1b64      	subs	r4, r4, r5
 8008160:	10a4      	asrs	r4, r4, #2
 8008162:	2600      	movs	r6, #0
 8008164:	42a6      	cmp	r6, r4
 8008166:	d109      	bne.n	800817c <__libc_init_array+0x24>
 8008168:	4d0b      	ldr	r5, [pc, #44]	; (8008198 <__libc_init_array+0x40>)
 800816a:	4c0c      	ldr	r4, [pc, #48]	; (800819c <__libc_init_array+0x44>)
 800816c:	f000 fc6a 	bl	8008a44 <_init>
 8008170:	1b64      	subs	r4, r4, r5
 8008172:	10a4      	asrs	r4, r4, #2
 8008174:	2600      	movs	r6, #0
 8008176:	42a6      	cmp	r6, r4
 8008178:	d105      	bne.n	8008186 <__libc_init_array+0x2e>
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008180:	4798      	blx	r3
 8008182:	3601      	adds	r6, #1
 8008184:	e7ee      	b.n	8008164 <__libc_init_array+0xc>
 8008186:	f855 3b04 	ldr.w	r3, [r5], #4
 800818a:	4798      	blx	r3
 800818c:	3601      	adds	r6, #1
 800818e:	e7f2      	b.n	8008176 <__libc_init_array+0x1e>
 8008190:	08008bf0 	.word	0x08008bf0
 8008194:	08008bf0 	.word	0x08008bf0
 8008198:	08008bf0 	.word	0x08008bf0
 800819c:	08008bf4 	.word	0x08008bf4

080081a0 <__retarget_lock_acquire_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_release_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <_free_r>:
 80081a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d044      	beq.n	8008234 <_free_r+0x90>
 80081aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ae:	9001      	str	r0, [sp, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f1a1 0404 	sub.w	r4, r1, #4
 80081b6:	bfb8      	it	lt
 80081b8:	18e4      	addlt	r4, r4, r3
 80081ba:	f000 f8df 	bl	800837c <__malloc_lock>
 80081be:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <_free_r+0x94>)
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	b933      	cbnz	r3, 80081d4 <_free_r+0x30>
 80081c6:	6063      	str	r3, [r4, #4]
 80081c8:	6014      	str	r4, [r2, #0]
 80081ca:	b003      	add	sp, #12
 80081cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081d0:	f000 b8da 	b.w	8008388 <__malloc_unlock>
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d908      	bls.n	80081ea <_free_r+0x46>
 80081d8:	6825      	ldr	r5, [r4, #0]
 80081da:	1961      	adds	r1, r4, r5
 80081dc:	428b      	cmp	r3, r1
 80081de:	bf01      	itttt	eq
 80081e0:	6819      	ldreq	r1, [r3, #0]
 80081e2:	685b      	ldreq	r3, [r3, #4]
 80081e4:	1949      	addeq	r1, r1, r5
 80081e6:	6021      	streq	r1, [r4, #0]
 80081e8:	e7ed      	b.n	80081c6 <_free_r+0x22>
 80081ea:	461a      	mov	r2, r3
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b10b      	cbz	r3, 80081f4 <_free_r+0x50>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d9fa      	bls.n	80081ea <_free_r+0x46>
 80081f4:	6811      	ldr	r1, [r2, #0]
 80081f6:	1855      	adds	r5, r2, r1
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	d10b      	bne.n	8008214 <_free_r+0x70>
 80081fc:	6824      	ldr	r4, [r4, #0]
 80081fe:	4421      	add	r1, r4
 8008200:	1854      	adds	r4, r2, r1
 8008202:	42a3      	cmp	r3, r4
 8008204:	6011      	str	r1, [r2, #0]
 8008206:	d1e0      	bne.n	80081ca <_free_r+0x26>
 8008208:	681c      	ldr	r4, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	6053      	str	r3, [r2, #4]
 800820e:	440c      	add	r4, r1
 8008210:	6014      	str	r4, [r2, #0]
 8008212:	e7da      	b.n	80081ca <_free_r+0x26>
 8008214:	d902      	bls.n	800821c <_free_r+0x78>
 8008216:	230c      	movs	r3, #12
 8008218:	6003      	str	r3, [r0, #0]
 800821a:	e7d6      	b.n	80081ca <_free_r+0x26>
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	1961      	adds	r1, r4, r5
 8008220:	428b      	cmp	r3, r1
 8008222:	bf04      	itt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	bf04      	itt	eq
 800822c:	1949      	addeq	r1, r1, r5
 800822e:	6021      	streq	r1, [r4, #0]
 8008230:	6054      	str	r4, [r2, #4]
 8008232:	e7ca      	b.n	80081ca <_free_r+0x26>
 8008234:	b003      	add	sp, #12
 8008236:	bd30      	pop	{r4, r5, pc}
 8008238:	20001ef0 	.word	0x20001ef0

0800823c <sbrk_aligned>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4e0e      	ldr	r6, [pc, #56]	; (8008278 <sbrk_aligned+0x3c>)
 8008240:	460c      	mov	r4, r1
 8008242:	6831      	ldr	r1, [r6, #0]
 8008244:	4605      	mov	r5, r0
 8008246:	b911      	cbnz	r1, 800824e <sbrk_aligned+0x12>
 8008248:	f000 fba6 	bl	8008998 <_sbrk_r>
 800824c:	6030      	str	r0, [r6, #0]
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f000 fba1 	bl	8008998 <_sbrk_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d00a      	beq.n	8008270 <sbrk_aligned+0x34>
 800825a:	1cc4      	adds	r4, r0, #3
 800825c:	f024 0403 	bic.w	r4, r4, #3
 8008260:	42a0      	cmp	r0, r4
 8008262:	d007      	beq.n	8008274 <sbrk_aligned+0x38>
 8008264:	1a21      	subs	r1, r4, r0
 8008266:	4628      	mov	r0, r5
 8008268:	f000 fb96 	bl	8008998 <_sbrk_r>
 800826c:	3001      	adds	r0, #1
 800826e:	d101      	bne.n	8008274 <sbrk_aligned+0x38>
 8008270:	f04f 34ff 	mov.w	r4, #4294967295
 8008274:	4620      	mov	r0, r4
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	20001ef4 	.word	0x20001ef4

0800827c <_malloc_r>:
 800827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008280:	1ccd      	adds	r5, r1, #3
 8008282:	f025 0503 	bic.w	r5, r5, #3
 8008286:	3508      	adds	r5, #8
 8008288:	2d0c      	cmp	r5, #12
 800828a:	bf38      	it	cc
 800828c:	250c      	movcc	r5, #12
 800828e:	2d00      	cmp	r5, #0
 8008290:	4607      	mov	r7, r0
 8008292:	db01      	blt.n	8008298 <_malloc_r+0x1c>
 8008294:	42a9      	cmp	r1, r5
 8008296:	d905      	bls.n	80082a4 <_malloc_r+0x28>
 8008298:	230c      	movs	r3, #12
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	2600      	movs	r6, #0
 800829e:	4630      	mov	r0, r6
 80082a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008378 <_malloc_r+0xfc>
 80082a8:	f000 f868 	bl	800837c <__malloc_lock>
 80082ac:	f8d8 3000 	ldr.w	r3, [r8]
 80082b0:	461c      	mov	r4, r3
 80082b2:	bb5c      	cbnz	r4, 800830c <_malloc_r+0x90>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ffc0 	bl	800823c <sbrk_aligned>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	4604      	mov	r4, r0
 80082c0:	d155      	bne.n	800836e <_malloc_r+0xf2>
 80082c2:	f8d8 4000 	ldr.w	r4, [r8]
 80082c6:	4626      	mov	r6, r4
 80082c8:	2e00      	cmp	r6, #0
 80082ca:	d145      	bne.n	8008358 <_malloc_r+0xdc>
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	d048      	beq.n	8008362 <_malloc_r+0xe6>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	4631      	mov	r1, r6
 80082d4:	4638      	mov	r0, r7
 80082d6:	eb04 0903 	add.w	r9, r4, r3
 80082da:	f000 fb5d 	bl	8008998 <_sbrk_r>
 80082de:	4581      	cmp	r9, r0
 80082e0:	d13f      	bne.n	8008362 <_malloc_r+0xe6>
 80082e2:	6821      	ldr	r1, [r4, #0]
 80082e4:	1a6d      	subs	r5, r5, r1
 80082e6:	4629      	mov	r1, r5
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff ffa7 	bl	800823c <sbrk_aligned>
 80082ee:	3001      	adds	r0, #1
 80082f0:	d037      	beq.n	8008362 <_malloc_r+0xe6>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	442b      	add	r3, r5
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	f8d8 3000 	ldr.w	r3, [r8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d038      	beq.n	8008372 <_malloc_r+0xf6>
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	42a2      	cmp	r2, r4
 8008304:	d12b      	bne.n	800835e <_malloc_r+0xe2>
 8008306:	2200      	movs	r2, #0
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	e00f      	b.n	800832c <_malloc_r+0xb0>
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	1b52      	subs	r2, r2, r5
 8008310:	d41f      	bmi.n	8008352 <_malloc_r+0xd6>
 8008312:	2a0b      	cmp	r2, #11
 8008314:	d917      	bls.n	8008346 <_malloc_r+0xca>
 8008316:	1961      	adds	r1, r4, r5
 8008318:	42a3      	cmp	r3, r4
 800831a:	6025      	str	r5, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	6059      	strne	r1, [r3, #4]
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	bf08      	it	eq
 8008324:	f8c8 1000 	streq.w	r1, [r8]
 8008328:	5162      	str	r2, [r4, r5]
 800832a:	604b      	str	r3, [r1, #4]
 800832c:	4638      	mov	r0, r7
 800832e:	f104 060b 	add.w	r6, r4, #11
 8008332:	f000 f829 	bl	8008388 <__malloc_unlock>
 8008336:	f026 0607 	bic.w	r6, r6, #7
 800833a:	1d23      	adds	r3, r4, #4
 800833c:	1af2      	subs	r2, r6, r3
 800833e:	d0ae      	beq.n	800829e <_malloc_r+0x22>
 8008340:	1b9b      	subs	r3, r3, r6
 8008342:	50a3      	str	r3, [r4, r2]
 8008344:	e7ab      	b.n	800829e <_malloc_r+0x22>
 8008346:	42a3      	cmp	r3, r4
 8008348:	6862      	ldr	r2, [r4, #4]
 800834a:	d1dd      	bne.n	8008308 <_malloc_r+0x8c>
 800834c:	f8c8 2000 	str.w	r2, [r8]
 8008350:	e7ec      	b.n	800832c <_malloc_r+0xb0>
 8008352:	4623      	mov	r3, r4
 8008354:	6864      	ldr	r4, [r4, #4]
 8008356:	e7ac      	b.n	80082b2 <_malloc_r+0x36>
 8008358:	4634      	mov	r4, r6
 800835a:	6876      	ldr	r6, [r6, #4]
 800835c:	e7b4      	b.n	80082c8 <_malloc_r+0x4c>
 800835e:	4613      	mov	r3, r2
 8008360:	e7cc      	b.n	80082fc <_malloc_r+0x80>
 8008362:	230c      	movs	r3, #12
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4638      	mov	r0, r7
 8008368:	f000 f80e 	bl	8008388 <__malloc_unlock>
 800836c:	e797      	b.n	800829e <_malloc_r+0x22>
 800836e:	6025      	str	r5, [r4, #0]
 8008370:	e7dc      	b.n	800832c <_malloc_r+0xb0>
 8008372:	605b      	str	r3, [r3, #4]
 8008374:	deff      	udf	#255	; 0xff
 8008376:	bf00      	nop
 8008378:	20001ef0 	.word	0x20001ef0

0800837c <__malloc_lock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_lock+0x8>)
 800837e:	f7ff bf0f 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	20001eec 	.word	0x20001eec

08008388 <__malloc_unlock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_unlock+0x8>)
 800838a:	f7ff bf0a 	b.w	80081a2 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	20001eec 	.word	0x20001eec

08008394 <__ssputs_r>:
 8008394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	688e      	ldr	r6, [r1, #8]
 800839a:	461f      	mov	r7, r3
 800839c:	42be      	cmp	r6, r7
 800839e:	680b      	ldr	r3, [r1, #0]
 80083a0:	4682      	mov	sl, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	4690      	mov	r8, r2
 80083a6:	d82c      	bhi.n	8008402 <__ssputs_r+0x6e>
 80083a8:	898a      	ldrh	r2, [r1, #12]
 80083aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083ae:	d026      	beq.n	80083fe <__ssputs_r+0x6a>
 80083b0:	6965      	ldr	r5, [r4, #20]
 80083b2:	6909      	ldr	r1, [r1, #16]
 80083b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b8:	eba3 0901 	sub.w	r9, r3, r1
 80083bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083c0:	1c7b      	adds	r3, r7, #1
 80083c2:	444b      	add	r3, r9
 80083c4:	106d      	asrs	r5, r5, #1
 80083c6:	429d      	cmp	r5, r3
 80083c8:	bf38      	it	cc
 80083ca:	461d      	movcc	r5, r3
 80083cc:	0553      	lsls	r3, r2, #21
 80083ce:	d527      	bpl.n	8008420 <__ssputs_r+0x8c>
 80083d0:	4629      	mov	r1, r5
 80083d2:	f7ff ff53 	bl	800827c <_malloc_r>
 80083d6:	4606      	mov	r6, r0
 80083d8:	b360      	cbz	r0, 8008434 <__ssputs_r+0xa0>
 80083da:	6921      	ldr	r1, [r4, #16]
 80083dc:	464a      	mov	r2, r9
 80083de:	f000 faeb 	bl	80089b8 <memcpy>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	6126      	str	r6, [r4, #16]
 80083f0:	6165      	str	r5, [r4, #20]
 80083f2:	444e      	add	r6, r9
 80083f4:	eba5 0509 	sub.w	r5, r5, r9
 80083f8:	6026      	str	r6, [r4, #0]
 80083fa:	60a5      	str	r5, [r4, #8]
 80083fc:	463e      	mov	r6, r7
 80083fe:	42be      	cmp	r6, r7
 8008400:	d900      	bls.n	8008404 <__ssputs_r+0x70>
 8008402:	463e      	mov	r6, r7
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	4632      	mov	r2, r6
 8008408:	4641      	mov	r1, r8
 800840a:	f000 faab 	bl	8008964 <memmove>
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	1b9b      	subs	r3, r3, r6
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	4433      	add	r3, r6
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	2000      	movs	r0, #0
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	462a      	mov	r2, r5
 8008422:	f000 fad7 	bl	80089d4 <_realloc_r>
 8008426:	4606      	mov	r6, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	d1e0      	bne.n	80083ee <__ssputs_r+0x5a>
 800842c:	6921      	ldr	r1, [r4, #16]
 800842e:	4650      	mov	r0, sl
 8008430:	f7ff feb8 	bl	80081a4 <_free_r>
 8008434:	230c      	movs	r3, #12
 8008436:	f8ca 3000 	str.w	r3, [sl]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	e7e9      	b.n	800841c <__ssputs_r+0x88>

08008448 <_svfiprintf_r>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	4698      	mov	r8, r3
 800844e:	898b      	ldrh	r3, [r1, #12]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	b09d      	sub	sp, #116	; 0x74
 8008454:	4607      	mov	r7, r0
 8008456:	460d      	mov	r5, r1
 8008458:	4614      	mov	r4, r2
 800845a:	d50e      	bpl.n	800847a <_svfiprintf_r+0x32>
 800845c:	690b      	ldr	r3, [r1, #16]
 800845e:	b963      	cbnz	r3, 800847a <_svfiprintf_r+0x32>
 8008460:	2140      	movs	r1, #64	; 0x40
 8008462:	f7ff ff0b 	bl	800827c <_malloc_r>
 8008466:	6028      	str	r0, [r5, #0]
 8008468:	6128      	str	r0, [r5, #16]
 800846a:	b920      	cbnz	r0, 8008476 <_svfiprintf_r+0x2e>
 800846c:	230c      	movs	r3, #12
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e0d0      	b.n	8008618 <_svfiprintf_r+0x1d0>
 8008476:	2340      	movs	r3, #64	; 0x40
 8008478:	616b      	str	r3, [r5, #20]
 800847a:	2300      	movs	r3, #0
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	2320      	movs	r3, #32
 8008480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008484:	f8cd 800c 	str.w	r8, [sp, #12]
 8008488:	2330      	movs	r3, #48	; 0x30
 800848a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008630 <_svfiprintf_r+0x1e8>
 800848e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008492:	f04f 0901 	mov.w	r9, #1
 8008496:	4623      	mov	r3, r4
 8008498:	469a      	mov	sl, r3
 800849a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849e:	b10a      	cbz	r2, 80084a4 <_svfiprintf_r+0x5c>
 80084a0:	2a25      	cmp	r2, #37	; 0x25
 80084a2:	d1f9      	bne.n	8008498 <_svfiprintf_r+0x50>
 80084a4:	ebba 0b04 	subs.w	fp, sl, r4
 80084a8:	d00b      	beq.n	80084c2 <_svfiprintf_r+0x7a>
 80084aa:	465b      	mov	r3, fp
 80084ac:	4622      	mov	r2, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7ff ff6f 	bl	8008394 <__ssputs_r>
 80084b6:	3001      	adds	r0, #1
 80084b8:	f000 80a9 	beq.w	800860e <_svfiprintf_r+0x1c6>
 80084bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084be:	445a      	add	r2, fp
 80084c0:	9209      	str	r2, [sp, #36]	; 0x24
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 80a1 	beq.w	800860e <_svfiprintf_r+0x1c6>
 80084cc:	2300      	movs	r3, #0
 80084ce:	f04f 32ff 	mov.w	r2, #4294967295
 80084d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d6:	f10a 0a01 	add.w	sl, sl, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	9307      	str	r3, [sp, #28]
 80084de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e2:	931a      	str	r3, [sp, #104]	; 0x68
 80084e4:	4654      	mov	r4, sl
 80084e6:	2205      	movs	r2, #5
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	4850      	ldr	r0, [pc, #320]	; (8008630 <_svfiprintf_r+0x1e8>)
 80084ee:	f7f7 fe77 	bl	80001e0 <memchr>
 80084f2:	9a04      	ldr	r2, [sp, #16]
 80084f4:	b9d8      	cbnz	r0, 800852e <_svfiprintf_r+0xe6>
 80084f6:	06d0      	lsls	r0, r2, #27
 80084f8:	bf44      	itt	mi
 80084fa:	2320      	movmi	r3, #32
 80084fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008500:	0711      	lsls	r1, r2, #28
 8008502:	bf44      	itt	mi
 8008504:	232b      	movmi	r3, #43	; 0x2b
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800850a:	f89a 3000 	ldrb.w	r3, [sl]
 800850e:	2b2a      	cmp	r3, #42	; 0x2a
 8008510:	d015      	beq.n	800853e <_svfiprintf_r+0xf6>
 8008512:	9a07      	ldr	r2, [sp, #28]
 8008514:	4654      	mov	r4, sl
 8008516:	2000      	movs	r0, #0
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4621      	mov	r1, r4
 800851e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008522:	3b30      	subs	r3, #48	; 0x30
 8008524:	2b09      	cmp	r3, #9
 8008526:	d94d      	bls.n	80085c4 <_svfiprintf_r+0x17c>
 8008528:	b1b0      	cbz	r0, 8008558 <_svfiprintf_r+0x110>
 800852a:	9207      	str	r2, [sp, #28]
 800852c:	e014      	b.n	8008558 <_svfiprintf_r+0x110>
 800852e:	eba0 0308 	sub.w	r3, r0, r8
 8008532:	fa09 f303 	lsl.w	r3, r9, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	46a2      	mov	sl, r4
 800853c:	e7d2      	b.n	80084e4 <_svfiprintf_r+0x9c>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	9103      	str	r1, [sp, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfbb      	ittet	lt
 800854a:	425b      	neglt	r3, r3
 800854c:	f042 0202 	orrlt.w	r2, r2, #2
 8008550:	9307      	strge	r3, [sp, #28]
 8008552:	9307      	strlt	r3, [sp, #28]
 8008554:	bfb8      	it	lt
 8008556:	9204      	strlt	r2, [sp, #16]
 8008558:	7823      	ldrb	r3, [r4, #0]
 800855a:	2b2e      	cmp	r3, #46	; 0x2e
 800855c:	d10c      	bne.n	8008578 <_svfiprintf_r+0x130>
 800855e:	7863      	ldrb	r3, [r4, #1]
 8008560:	2b2a      	cmp	r3, #42	; 0x2a
 8008562:	d134      	bne.n	80085ce <_svfiprintf_r+0x186>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	9203      	str	r2, [sp, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb8      	it	lt
 8008570:	f04f 33ff 	movlt.w	r3, #4294967295
 8008574:	3402      	adds	r4, #2
 8008576:	9305      	str	r3, [sp, #20]
 8008578:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008640 <_svfiprintf_r+0x1f8>
 800857c:	7821      	ldrb	r1, [r4, #0]
 800857e:	2203      	movs	r2, #3
 8008580:	4650      	mov	r0, sl
 8008582:	f7f7 fe2d 	bl	80001e0 <memchr>
 8008586:	b138      	cbz	r0, 8008598 <_svfiprintf_r+0x150>
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	eba0 000a 	sub.w	r0, r0, sl
 800858e:	2240      	movs	r2, #64	; 0x40
 8008590:	4082      	lsls	r2, r0
 8008592:	4313      	orrs	r3, r2
 8008594:	3401      	adds	r4, #1
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859c:	4825      	ldr	r0, [pc, #148]	; (8008634 <_svfiprintf_r+0x1ec>)
 800859e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a2:	2206      	movs	r2, #6
 80085a4:	f7f7 fe1c 	bl	80001e0 <memchr>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d038      	beq.n	800861e <_svfiprintf_r+0x1d6>
 80085ac:	4b22      	ldr	r3, [pc, #136]	; (8008638 <_svfiprintf_r+0x1f0>)
 80085ae:	bb1b      	cbnz	r3, 80085f8 <_svfiprintf_r+0x1b0>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	3307      	adds	r3, #7
 80085b4:	f023 0307 	bic.w	r3, r3, #7
 80085b8:	3308      	adds	r3, #8
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	4433      	add	r3, r6
 80085c0:	9309      	str	r3, [sp, #36]	; 0x24
 80085c2:	e768      	b.n	8008496 <_svfiprintf_r+0x4e>
 80085c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c8:	460c      	mov	r4, r1
 80085ca:	2001      	movs	r0, #1
 80085cc:	e7a6      	b.n	800851c <_svfiprintf_r+0xd4>
 80085ce:	2300      	movs	r3, #0
 80085d0:	3401      	adds	r4, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	4619      	mov	r1, r3
 80085d6:	f04f 0c0a 	mov.w	ip, #10
 80085da:	4620      	mov	r0, r4
 80085dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e0:	3a30      	subs	r2, #48	; 0x30
 80085e2:	2a09      	cmp	r2, #9
 80085e4:	d903      	bls.n	80085ee <_svfiprintf_r+0x1a6>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0c6      	beq.n	8008578 <_svfiprintf_r+0x130>
 80085ea:	9105      	str	r1, [sp, #20]
 80085ec:	e7c4      	b.n	8008578 <_svfiprintf_r+0x130>
 80085ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f2:	4604      	mov	r4, r0
 80085f4:	2301      	movs	r3, #1
 80085f6:	e7f0      	b.n	80085da <_svfiprintf_r+0x192>
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	462a      	mov	r2, r5
 80085fe:	4b0f      	ldr	r3, [pc, #60]	; (800863c <_svfiprintf_r+0x1f4>)
 8008600:	a904      	add	r1, sp, #16
 8008602:	4638      	mov	r0, r7
 8008604:	f3af 8000 	nop.w
 8008608:	1c42      	adds	r2, r0, #1
 800860a:	4606      	mov	r6, r0
 800860c:	d1d6      	bne.n	80085bc <_svfiprintf_r+0x174>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	065b      	lsls	r3, r3, #25
 8008612:	f53f af2d 	bmi.w	8008470 <_svfiprintf_r+0x28>
 8008616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008618:	b01d      	add	sp, #116	; 0x74
 800861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861e:	ab03      	add	r3, sp, #12
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	462a      	mov	r2, r5
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <_svfiprintf_r+0x1f4>)
 8008626:	a904      	add	r1, sp, #16
 8008628:	4638      	mov	r0, r7
 800862a:	f000 f879 	bl	8008720 <_printf_i>
 800862e:	e7eb      	b.n	8008608 <_svfiprintf_r+0x1c0>
 8008630:	08008bb4 	.word	0x08008bb4
 8008634:	08008bbe 	.word	0x08008bbe
 8008638:	00000000 	.word	0x00000000
 800863c:	08008395 	.word	0x08008395
 8008640:	08008bba 	.word	0x08008bba

08008644 <_printf_common>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	4616      	mov	r6, r2
 800864a:	4699      	mov	r9, r3
 800864c:	688a      	ldr	r2, [r1, #8]
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008654:	4293      	cmp	r3, r2
 8008656:	bfb8      	it	lt
 8008658:	4613      	movlt	r3, r2
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008660:	4607      	mov	r7, r0
 8008662:	460c      	mov	r4, r1
 8008664:	b10a      	cbz	r2, 800866a <_printf_common+0x26>
 8008666:	3301      	adds	r3, #1
 8008668:	6033      	str	r3, [r6, #0]
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	0699      	lsls	r1, r3, #26
 800866e:	bf42      	ittt	mi
 8008670:	6833      	ldrmi	r3, [r6, #0]
 8008672:	3302      	addmi	r3, #2
 8008674:	6033      	strmi	r3, [r6, #0]
 8008676:	6825      	ldr	r5, [r4, #0]
 8008678:	f015 0506 	ands.w	r5, r5, #6
 800867c:	d106      	bne.n	800868c <_printf_common+0x48>
 800867e:	f104 0a19 	add.w	sl, r4, #25
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	6832      	ldr	r2, [r6, #0]
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	42ab      	cmp	r3, r5
 800868a:	dc26      	bgt.n	80086da <_printf_common+0x96>
 800868c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008690:	1e13      	subs	r3, r2, #0
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	bf18      	it	ne
 8008696:	2301      	movne	r3, #1
 8008698:	0692      	lsls	r2, r2, #26
 800869a:	d42b      	bmi.n	80086f4 <_printf_common+0xb0>
 800869c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086a0:	4649      	mov	r1, r9
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d01e      	beq.n	80086e8 <_printf_common+0xa4>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	6922      	ldr	r2, [r4, #16]
 80086ae:	f003 0306 	and.w	r3, r3, #6
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	bf02      	ittt	eq
 80086b6:	68e5      	ldreq	r5, [r4, #12]
 80086b8:	6833      	ldreq	r3, [r6, #0]
 80086ba:	1aed      	subeq	r5, r5, r3
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	bf0c      	ite	eq
 80086c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c4:	2500      	movne	r5, #0
 80086c6:	4293      	cmp	r3, r2
 80086c8:	bfc4      	itt	gt
 80086ca:	1a9b      	subgt	r3, r3, r2
 80086cc:	18ed      	addgt	r5, r5, r3
 80086ce:	2600      	movs	r6, #0
 80086d0:	341a      	adds	r4, #26
 80086d2:	42b5      	cmp	r5, r6
 80086d4:	d11a      	bne.n	800870c <_printf_common+0xc8>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e008      	b.n	80086ec <_printf_common+0xa8>
 80086da:	2301      	movs	r3, #1
 80086dc:	4652      	mov	r2, sl
 80086de:	4649      	mov	r1, r9
 80086e0:	4638      	mov	r0, r7
 80086e2:	47c0      	blx	r8
 80086e4:	3001      	adds	r0, #1
 80086e6:	d103      	bne.n	80086f0 <_printf_common+0xac>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	3501      	adds	r5, #1
 80086f2:	e7c6      	b.n	8008682 <_printf_common+0x3e>
 80086f4:	18e1      	adds	r1, r4, r3
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	2030      	movs	r0, #48	; 0x30
 80086fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fe:	4422      	add	r2, r4
 8008700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008708:	3302      	adds	r3, #2
 800870a:	e7c7      	b.n	800869c <_printf_common+0x58>
 800870c:	2301      	movs	r3, #1
 800870e:	4622      	mov	r2, r4
 8008710:	4649      	mov	r1, r9
 8008712:	4638      	mov	r0, r7
 8008714:	47c0      	blx	r8
 8008716:	3001      	adds	r0, #1
 8008718:	d0e6      	beq.n	80086e8 <_printf_common+0xa4>
 800871a:	3601      	adds	r6, #1
 800871c:	e7d9      	b.n	80086d2 <_printf_common+0x8e>
	...

08008720 <_printf_i>:
 8008720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	7e0f      	ldrb	r7, [r1, #24]
 8008726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008728:	2f78      	cmp	r7, #120	; 0x78
 800872a:	4691      	mov	r9, r2
 800872c:	4680      	mov	r8, r0
 800872e:	460c      	mov	r4, r1
 8008730:	469a      	mov	sl, r3
 8008732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008736:	d807      	bhi.n	8008748 <_printf_i+0x28>
 8008738:	2f62      	cmp	r7, #98	; 0x62
 800873a:	d80a      	bhi.n	8008752 <_printf_i+0x32>
 800873c:	2f00      	cmp	r7, #0
 800873e:	f000 80d4 	beq.w	80088ea <_printf_i+0x1ca>
 8008742:	2f58      	cmp	r7, #88	; 0x58
 8008744:	f000 80c0 	beq.w	80088c8 <_printf_i+0x1a8>
 8008748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800874c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008750:	e03a      	b.n	80087c8 <_printf_i+0xa8>
 8008752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008756:	2b15      	cmp	r3, #21
 8008758:	d8f6      	bhi.n	8008748 <_printf_i+0x28>
 800875a:	a101      	add	r1, pc, #4	; (adr r1, 8008760 <_printf_i+0x40>)
 800875c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008760:	080087b9 	.word	0x080087b9
 8008764:	080087cd 	.word	0x080087cd
 8008768:	08008749 	.word	0x08008749
 800876c:	08008749 	.word	0x08008749
 8008770:	08008749 	.word	0x08008749
 8008774:	08008749 	.word	0x08008749
 8008778:	080087cd 	.word	0x080087cd
 800877c:	08008749 	.word	0x08008749
 8008780:	08008749 	.word	0x08008749
 8008784:	08008749 	.word	0x08008749
 8008788:	08008749 	.word	0x08008749
 800878c:	080088d1 	.word	0x080088d1
 8008790:	080087f9 	.word	0x080087f9
 8008794:	0800888b 	.word	0x0800888b
 8008798:	08008749 	.word	0x08008749
 800879c:	08008749 	.word	0x08008749
 80087a0:	080088f3 	.word	0x080088f3
 80087a4:	08008749 	.word	0x08008749
 80087a8:	080087f9 	.word	0x080087f9
 80087ac:	08008749 	.word	0x08008749
 80087b0:	08008749 	.word	0x08008749
 80087b4:	08008893 	.word	0x08008893
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	1d1a      	adds	r2, r3, #4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	602a      	str	r2, [r5, #0]
 80087c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c8:	2301      	movs	r3, #1
 80087ca:	e09f      	b.n	800890c <_printf_i+0x1ec>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	682b      	ldr	r3, [r5, #0]
 80087d0:	0607      	lsls	r7, r0, #24
 80087d2:	f103 0104 	add.w	r1, r3, #4
 80087d6:	6029      	str	r1, [r5, #0]
 80087d8:	d501      	bpl.n	80087de <_printf_i+0xbe>
 80087da:	681e      	ldr	r6, [r3, #0]
 80087dc:	e003      	b.n	80087e6 <_printf_i+0xc6>
 80087de:	0646      	lsls	r6, r0, #25
 80087e0:	d5fb      	bpl.n	80087da <_printf_i+0xba>
 80087e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	da03      	bge.n	80087f2 <_printf_i+0xd2>
 80087ea:	232d      	movs	r3, #45	; 0x2d
 80087ec:	4276      	negs	r6, r6
 80087ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f2:	485a      	ldr	r0, [pc, #360]	; (800895c <_printf_i+0x23c>)
 80087f4:	230a      	movs	r3, #10
 80087f6:	e012      	b.n	800881e <_printf_i+0xfe>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	1d19      	adds	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	0605      	lsls	r5, r0, #24
 8008802:	d501      	bpl.n	8008808 <_printf_i+0xe8>
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0xee>
 8008808:	0641      	lsls	r1, r0, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0xe4>
 800880c:	881e      	ldrh	r6, [r3, #0]
 800880e:	4853      	ldr	r0, [pc, #332]	; (800895c <_printf_i+0x23c>)
 8008810:	2f6f      	cmp	r7, #111	; 0x6f
 8008812:	bf0c      	ite	eq
 8008814:	2308      	moveq	r3, #8
 8008816:	230a      	movne	r3, #10
 8008818:	2100      	movs	r1, #0
 800881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881e:	6865      	ldr	r5, [r4, #4]
 8008820:	60a5      	str	r5, [r4, #8]
 8008822:	2d00      	cmp	r5, #0
 8008824:	bfa2      	ittt	ge
 8008826:	6821      	ldrge	r1, [r4, #0]
 8008828:	f021 0104 	bicge.w	r1, r1, #4
 800882c:	6021      	strge	r1, [r4, #0]
 800882e:	b90e      	cbnz	r6, 8008834 <_printf_i+0x114>
 8008830:	2d00      	cmp	r5, #0
 8008832:	d04b      	beq.n	80088cc <_printf_i+0x1ac>
 8008834:	4615      	mov	r5, r2
 8008836:	fbb6 f1f3 	udiv	r1, r6, r3
 800883a:	fb03 6711 	mls	r7, r3, r1, r6
 800883e:	5dc7      	ldrb	r7, [r0, r7]
 8008840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008844:	4637      	mov	r7, r6
 8008846:	42bb      	cmp	r3, r7
 8008848:	460e      	mov	r6, r1
 800884a:	d9f4      	bls.n	8008836 <_printf_i+0x116>
 800884c:	2b08      	cmp	r3, #8
 800884e:	d10b      	bne.n	8008868 <_printf_i+0x148>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07de      	lsls	r6, r3, #31
 8008854:	d508      	bpl.n	8008868 <_printf_i+0x148>
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4299      	cmp	r1, r3
 800885c:	bfde      	ittt	le
 800885e:	2330      	movle	r3, #48	; 0x30
 8008860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008868:	1b52      	subs	r2, r2, r5
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	f8cd a000 	str.w	sl, [sp]
 8008870:	464b      	mov	r3, r9
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff fee4 	bl	8008644 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14a      	bne.n	8008916 <_printf_i+0x1f6>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b004      	add	sp, #16
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f043 0320 	orr.w	r3, r3, #32
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	4833      	ldr	r0, [pc, #204]	; (8008960 <_printf_i+0x240>)
 8008894:	2778      	movs	r7, #120	; 0x78
 8008896:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	6829      	ldr	r1, [r5, #0]
 800889e:	061f      	lsls	r7, r3, #24
 80088a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088a4:	d402      	bmi.n	80088ac <_printf_i+0x18c>
 80088a6:	065f      	lsls	r7, r3, #25
 80088a8:	bf48      	it	mi
 80088aa:	b2b6      	uxthmi	r6, r6
 80088ac:	07df      	lsls	r7, r3, #31
 80088ae:	bf48      	it	mi
 80088b0:	f043 0320 	orrmi.w	r3, r3, #32
 80088b4:	6029      	str	r1, [r5, #0]
 80088b6:	bf48      	it	mi
 80088b8:	6023      	strmi	r3, [r4, #0]
 80088ba:	b91e      	cbnz	r6, 80088c4 <_printf_i+0x1a4>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	f023 0320 	bic.w	r3, r3, #32
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	2310      	movs	r3, #16
 80088c6:	e7a7      	b.n	8008818 <_printf_i+0xf8>
 80088c8:	4824      	ldr	r0, [pc, #144]	; (800895c <_printf_i+0x23c>)
 80088ca:	e7e4      	b.n	8008896 <_printf_i+0x176>
 80088cc:	4615      	mov	r5, r2
 80088ce:	e7bd      	b.n	800884c <_printf_i+0x12c>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	6826      	ldr	r6, [r4, #0]
 80088d4:	6961      	ldr	r1, [r4, #20]
 80088d6:	1d18      	adds	r0, r3, #4
 80088d8:	6028      	str	r0, [r5, #0]
 80088da:	0635      	lsls	r5, r6, #24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	d501      	bpl.n	80088e4 <_printf_i+0x1c4>
 80088e0:	6019      	str	r1, [r3, #0]
 80088e2:	e002      	b.n	80088ea <_printf_i+0x1ca>
 80088e4:	0670      	lsls	r0, r6, #25
 80088e6:	d5fb      	bpl.n	80088e0 <_printf_i+0x1c0>
 80088e8:	8019      	strh	r1, [r3, #0]
 80088ea:	2300      	movs	r3, #0
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	4615      	mov	r5, r2
 80088f0:	e7bc      	b.n	800886c <_printf_i+0x14c>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	1d1a      	adds	r2, r3, #4
 80088f6:	602a      	str	r2, [r5, #0]
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	6862      	ldr	r2, [r4, #4]
 80088fc:	2100      	movs	r1, #0
 80088fe:	4628      	mov	r0, r5
 8008900:	f7f7 fc6e 	bl	80001e0 <memchr>
 8008904:	b108      	cbz	r0, 800890a <_printf_i+0x1ea>
 8008906:	1b40      	subs	r0, r0, r5
 8008908:	6060      	str	r0, [r4, #4]
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	2300      	movs	r3, #0
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008914:	e7aa      	b.n	800886c <_printf_i+0x14c>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	462a      	mov	r2, r5
 800891a:	4649      	mov	r1, r9
 800891c:	4640      	mov	r0, r8
 800891e:	47d0      	blx	sl
 8008920:	3001      	adds	r0, #1
 8008922:	d0ad      	beq.n	8008880 <_printf_i+0x160>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	079b      	lsls	r3, r3, #30
 8008928:	d413      	bmi.n	8008952 <_printf_i+0x232>
 800892a:	68e0      	ldr	r0, [r4, #12]
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	4298      	cmp	r0, r3
 8008930:	bfb8      	it	lt
 8008932:	4618      	movlt	r0, r3
 8008934:	e7a6      	b.n	8008884 <_printf_i+0x164>
 8008936:	2301      	movs	r3, #1
 8008938:	4632      	mov	r2, r6
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	47d0      	blx	sl
 8008940:	3001      	adds	r0, #1
 8008942:	d09d      	beq.n	8008880 <_printf_i+0x160>
 8008944:	3501      	adds	r5, #1
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	9903      	ldr	r1, [sp, #12]
 800894a:	1a5b      	subs	r3, r3, r1
 800894c:	42ab      	cmp	r3, r5
 800894e:	dcf2      	bgt.n	8008936 <_printf_i+0x216>
 8008950:	e7eb      	b.n	800892a <_printf_i+0x20a>
 8008952:	2500      	movs	r5, #0
 8008954:	f104 0619 	add.w	r6, r4, #25
 8008958:	e7f5      	b.n	8008946 <_printf_i+0x226>
 800895a:	bf00      	nop
 800895c:	08008bc5 	.word	0x08008bc5
 8008960:	08008bd6 	.word	0x08008bd6

08008964 <memmove>:
 8008964:	4288      	cmp	r0, r1
 8008966:	b510      	push	{r4, lr}
 8008968:	eb01 0402 	add.w	r4, r1, r2
 800896c:	d902      	bls.n	8008974 <memmove+0x10>
 800896e:	4284      	cmp	r4, r0
 8008970:	4623      	mov	r3, r4
 8008972:	d807      	bhi.n	8008984 <memmove+0x20>
 8008974:	1e43      	subs	r3, r0, #1
 8008976:	42a1      	cmp	r1, r4
 8008978:	d008      	beq.n	800898c <memmove+0x28>
 800897a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800897e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008982:	e7f8      	b.n	8008976 <memmove+0x12>
 8008984:	4402      	add	r2, r0
 8008986:	4601      	mov	r1, r0
 8008988:	428a      	cmp	r2, r1
 800898a:	d100      	bne.n	800898e <memmove+0x2a>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008996:	e7f7      	b.n	8008988 <memmove+0x24>

08008998 <_sbrk_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_sbrk_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 f8ca 	bl	8000b3c <_sbrk>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_sbrk_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_sbrk_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20001ee8 	.word	0x20001ee8

080089b8 <memcpy>:
 80089b8:	440a      	add	r2, r1
 80089ba:	4291      	cmp	r1, r2
 80089bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c0:	d100      	bne.n	80089c4 <memcpy+0xc>
 80089c2:	4770      	bx	lr
 80089c4:	b510      	push	{r4, lr}
 80089c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ce:	4291      	cmp	r1, r2
 80089d0:	d1f9      	bne.n	80089c6 <memcpy+0xe>
 80089d2:	bd10      	pop	{r4, pc}

080089d4 <_realloc_r>:
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	4680      	mov	r8, r0
 80089da:	4614      	mov	r4, r2
 80089dc:	460e      	mov	r6, r1
 80089de:	b921      	cbnz	r1, 80089ea <_realloc_r+0x16>
 80089e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089e4:	4611      	mov	r1, r2
 80089e6:	f7ff bc49 	b.w	800827c <_malloc_r>
 80089ea:	b92a      	cbnz	r2, 80089f8 <_realloc_r+0x24>
 80089ec:	f7ff fbda 	bl	80081a4 <_free_r>
 80089f0:	4625      	mov	r5, r4
 80089f2:	4628      	mov	r0, r5
 80089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f8:	f000 f81b 	bl	8008a32 <_malloc_usable_size_r>
 80089fc:	4284      	cmp	r4, r0
 80089fe:	4607      	mov	r7, r0
 8008a00:	d802      	bhi.n	8008a08 <_realloc_r+0x34>
 8008a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a06:	d812      	bhi.n	8008a2e <_realloc_r+0x5a>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	f7ff fc36 	bl	800827c <_malloc_r>
 8008a10:	4605      	mov	r5, r0
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d0ed      	beq.n	80089f2 <_realloc_r+0x1e>
 8008a16:	42bc      	cmp	r4, r7
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	bf28      	it	cs
 8008a1e:	463a      	movcs	r2, r7
 8008a20:	f7ff ffca 	bl	80089b8 <memcpy>
 8008a24:	4631      	mov	r1, r6
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7ff fbbc 	bl	80081a4 <_free_r>
 8008a2c:	e7e1      	b.n	80089f2 <_realloc_r+0x1e>
 8008a2e:	4635      	mov	r5, r6
 8008a30:	e7df      	b.n	80089f2 <_realloc_r+0x1e>

08008a32 <_malloc_usable_size_r>:
 8008a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a36:	1f18      	subs	r0, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bfbc      	itt	lt
 8008a3c:	580b      	ldrlt	r3, [r1, r0]
 8008a3e:	18c0      	addlt	r0, r0, r3
 8008a40:	4770      	bx	lr
	...

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
