
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a65c  0800a65c  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a664  0800a664  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001e7c  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001fd8  20001fd8  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014a76  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036fc  00000000  00000000  00034c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c13  00000000  00000000  00039340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c92  00000000  00000000  00039f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000158bb  00000000  00000000  0005dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c92d5  00000000  00000000  000734a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046e0  00000000  00000000  0013c778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00140e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a32c 	.word	0x0800a32c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a32c 	.word	0x0800a32c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f001 f971 	bl	8001892 <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f009 f9d8 	bl	80099b8 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	20000273 	.word	0x20000273
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	20000272 	.word	0x20000272
 800062c:	0800a344 	.word	0x0800a344
 8000630:	20000180 	.word	0x20000180
 8000634:	20000274 	.word	0x20000274

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800063e:	f000 fe29 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 fa7b 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 fbb3 	bl	8000db0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800064a:	f008 fbdb 	bl	8008e04 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fb85 	bl	8000d5c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fb59 	bl	8000d08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8000656:	f000 f827 	bl	80006a8 <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <main+0x64>)
 800065c:	f000 f840 	bl	80006e0 <Auto_Baudrate_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t tick = HAL_GetTick();

  uint8_t data[64] = {0};
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	223c      	movs	r2, #60	; 0x3c
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f009 f9c3 	bl	80099f8 <memset>
  double coords[2] = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  AT_Join(&huart2);
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x68>)
 8000680:	f000 f9dc 	bl	8000a3c <AT_Join>

  while (1)
  {
	  GNSS_Get_Coords(&huart3, data, 64, coords);
 8000684:	463b      	mov	r3, r7
 8000686:	f107 0110 	add.w	r1, r7, #16
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0x6c>)
 800068e:	f000 f8e3 	bl	8000858 <GNSS_Get_Coords>
	  HAL_Delay(10000);
 8000692:	f242 7010 	movw	r0, #10000	; 0x2710
 8000696:	f000 fe6f 	bl	8001378 <HAL_Delay>
	  GNSS_Get_Coords(&huart3, data, 64, coords);
 800069a:	e7f3      	b.n	8000684 <main+0x4c>
 800069c:	20000000 	.word	0x20000000
 80006a0:	200001e8 	.word	0x200001e8
 80006a4:	2000022c 	.word	0x2000022c

080006a8 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006ac:	e005      	b.n	80006ba <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <HODL_Till_BTN+0x30>)
 80006b6:	f001 ffab 	bl	8002610 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80006ba:	2101      	movs	r1, #1
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <HODL_Till_BTN+0x34>)
 80006be:	f001 ff8f 	bl	80025e0 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f2      	beq.n	80006ae <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <HODL_Till_BTN+0x30>)
 80006d0:	f001 ff9e 	bl	8002610 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40020000 	.word	0x40020000

080006e0 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006ee:	e034      	b.n	800075a <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d133      	bne.n	8000762 <Auto_Baudrate_Setup+0x82>
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d12e      	bne.n	8000762 <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 8000704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10d      	bne.n	8000728 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000714:	4618      	mov	r0, r3
 8000716:	f000 faa9 	bl	8000c6c <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800071a:	4837      	ldr	r0, [pc, #220]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 800071c:	f001 f82c 	bl	8001778 <HAL_CAN_Start>
			  HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f000 fe29 	bl	8001378 <HAL_Delay>
 8000726:	e013      	b.n	8000750 <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 800072a:	f001 f869 	bl	8001800 <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 800072e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fa94 	bl	8000c6c <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000744:	482c      	ldr	r0, [pc, #176]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 8000746:	f001 f817 	bl	8001778 <HAL_CAN_Start>
			  HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f000 fe14 	bl	8001378 <HAL_Delay>
  for(i = 0; i < 4; i++){
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3301      	adds	r3, #1
 8000756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9c6      	bls.n	80006f0 <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <Auto_Baudrate_Setup+0x96>
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d029      	beq.n	80007ca <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800077a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800077e:	3b01      	subs	r3, #1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	491b      	ldr	r1, [pc, #108]	; (80007fc <Auto_Baudrate_Setup+0x11c>)
 800078e:	4618      	mov	r0, r3
 8000790:	f009 f912 	bl	80099b8 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd19 	bl	80001d0 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 fc07 	bl	8008fbc <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007b0:	f001 f826 	bl	8001800 <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007bc:	f000 fe00 	bl	80013c0 <HAL_CAN_Init>
	  CAN1_Filter_Config();
 80007c0:	f000 fa26 	bl	8000c10 <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <Auto_Baudrate_Setup+0x118>)
 80007c6:	f000 ffd7 	bl	8001778 <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <Auto_Baudrate_Setup+0x110>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d108      	bne.n	80007e6 <Auto_Baudrate_Setup+0x106>
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <Auto_Baudrate_Setup+0x114>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80007de:	2118      	movs	r1, #24
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <Auto_Baudrate_Setup+0x120>)
 80007e2:	f008 fbeb 	bl	8008fbc <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 80007e6:	bf00      	nop
 80007e8:	3738      	adds	r7, #56	; 0x38
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000271 	.word	0x20000271
 80007f4:	20000270 	.word	0x20000270
 80007f8:	200001c0 	.word	0x200001c0
 80007fc:	0800a41c 	.word	0x0800a41c
 8000800:	0800a448 	.word	0x0800a448

08000804 <Rem_Char>:

	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);

}

static void Rem_Char(uint8_t* data, uint8_t ch){
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	uint8_t *pr = data, *pw = data;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 8000818:	e011      	b.n	800083e <Rem_Char+0x3a>
        *pw = *pr++;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	60fa      	str	r2, [r7, #12]
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	701a      	strb	r2, [r3, #0]
        pw += (*pw != ch);
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	429a      	cmp	r2, r3
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	60bb      	str	r3, [r7, #8]
    while (*pr) {
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1e9      	bne.n	800081a <Rem_Char+0x16>
    }
    *pw = '\0';
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <GNSS_Get_Coords>:

static void GNSS_Get_Coords(UART_HandleTypeDef *huart, uint8_t* data, uint8_t size, double* Coords){
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4613      	mov	r3, r2
 8000866:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(huart, (uint8_t*)"&PMTK314,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*F9\r\n", strlen((char*)"&PMTK314,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*F9\r\n"), 1000);
 8000868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086c:	2233      	movs	r2, #51	; 0x33
 800086e:	4935      	ldr	r1, [pc, #212]	; (8000944 <GNSS_Get_Coords+0xec>)
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f003 fe48 	bl	8004506 <HAL_UART_Transmit>

//	HAL_UART_Receive_STR(huart, data, size, 50);
	  while(1){
		  HAL_UART_Receive_STR(huart, data, size, 50);
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	2332      	movs	r3, #50	; 0x32
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f000 f865 	bl	800094c <HAL_UART_Receive_STR>
//		                            4240.092202322.4681
//		                            42400922023224681

//		  Rem_Char(data, '$');
//		  break;
		  if(data[1] == (uint8_t)'G' && data[2] == (uint8_t)'N' && data[3] == (uint8_t)'G' && data[4] == (uint8_t)'L' && data[5] == (uint8_t)'L'){
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	3301      	adds	r3, #1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b47      	cmp	r3, #71	; 0x47
 800088a:	d1f4      	bne.n	8000876 <GNSS_Get_Coords+0x1e>
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3302      	adds	r3, #2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b4e      	cmp	r3, #78	; 0x4e
 8000894:	d1ef      	bne.n	8000876 <GNSS_Get_Coords+0x1e>
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	3303      	adds	r3, #3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b47      	cmp	r3, #71	; 0x47
 800089e:	d1ea      	bne.n	8000876 <GNSS_Get_Coords+0x1e>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3304      	adds	r3, #4
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b4c      	cmp	r3, #76	; 0x4c
 80008a8:	d1e5      	bne.n	8000876 <GNSS_Get_Coords+0x1e>
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3305      	adds	r3, #5
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b4c      	cmp	r3, #76	; 0x4c
 80008b2:	d000      	beq.n	80008b6 <GNSS_Get_Coords+0x5e>
		  HAL_UART_Receive_STR(huart, data, size, 50);
 80008b4:	e7df      	b.n	8000876 <GNSS_Get_Coords+0x1e>
			  break;
 80008b6:	bf00      	nop
		  }
	  }

//	**znam che moje sus strtok, narochno ne e taka**
	  for(int i = 0; i < size && data[i] != 0; i++){
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e02a      	b.n	8000914 <GNSS_Get_Coords+0xbc>
		  if(i < 18){
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2b11      	cmp	r3, #17
 80008c2:	dc16      	bgt.n	80008f2 <GNSS_Get_Coords+0x9a>
			  if(i > 8)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	dd09      	ble.n	80008de <GNSS_Get_Coords+0x86>
				  data[i] = data[i+11];
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	330b      	adds	r3, #11
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	441a      	add	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	440b      	add	r3, r1
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	e017      	b.n	800090e <GNSS_Get_Coords+0xb6>
			  else
				  data[i] = data[i+7];
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3307      	adds	r3, #7
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	441a      	add	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	440b      	add	r3, r1
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e00d      	b.n	800090e <GNSS_Get_Coords+0xb6>
		  }else if(i == 18){
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b12      	cmp	r3, #18
 80008f6:	d105      	bne.n	8000904 <GNSS_Get_Coords+0xac>
			  data[i] = '\n';
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	220a      	movs	r2, #10
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e004      	b.n	800090e <GNSS_Get_Coords+0xb6>
		  }else{
			  data[i] = 0;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4413      	add	r3, r2
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < size && data[i] != 0; i++){
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	429a      	cmp	r2, r3
 800091a:	da05      	bge.n	8000928 <GNSS_Get_Coords+0xd0>
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1ca      	bne.n	80008be <GNSS_Get_Coords+0x66>
		  }
	  }

	  Rem_Char(data, '.');
 8000928:	212e      	movs	r1, #46	; 0x2e
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	f7ff ff6a 	bl	8000804 <Rem_Char>
//	  strcat(msg, (uint8_t*)atoi((char*)data));

//	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);

	  AT_Send(&huart2, data, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <GNSS_Get_Coords+0xf0>)
 8000936:	f000 f837 	bl	80009a8 <AT_Send>

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800a464 	.word	0x0800a464
 8000948:	200001e8 	.word	0x200001e8

0800094c <HAL_UART_Receive_STR>:

static void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4613      	mov	r3, r2
 800095a:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	461a      	mov	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f009 f848 	bl	80099f8 <memset>
	uint8_t buff[2] = {0};
 8000968:	2300      	movs	r3, #0
 800096a:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	75fb      	strb	r3, [r7, #23]
 8000970:	e011      	b.n	8000996 <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(huart, buff, 1, Timeout);
 8000972:	f107 0114 	add.w	r1, r7, #20
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f003 fe55 	bl	800462a <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	7d3a      	ldrb	r2, [r7, #20]
 800098e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	3b01      	subs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
 8000996:	7d3b      	ldrb	r3, [r7, #20]
 8000998:	2b0a      	cmp	r3, #10
 800099a:	d1ea      	bne.n	8000972 <HAL_UART_Receive_STR+0x26>
	}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <AT_Send>:

static void AT_Send(UART_HandleTypeDef *huart, uint8_t* data, uint8_t Chnl){
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b09a      	sub	sp, #104	; 0x68
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	4613      	mov	r3, r2
 80009b4:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[64] = {0};
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	223c      	movs	r2, #60	; 0x3c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f818 	bl	80099f8 <memset>

    uint8_t lat[9] = {0};
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	711a      	strb	r2, [r3, #4]
    memcpy(&lat, data, 8);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2208      	movs	r2, #8
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 f854 	bl	8009a8c <memcpy>
    lat[8] = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	773b      	strb	r3, [r7, #28]
    data += 8;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3308      	adds	r3, #8
 80009ec:	60bb      	str	r3, [r7, #8]

	sprintf((char*)msg, "AT+SEND=%d:0:%x%x\n", Chnl, atoi((char*)lat), atoi((char*)data));
 80009ee:	79fc      	ldrb	r4, [r7, #7]
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f008 ff4f 	bl	8009898 <atoi>
 80009fa:	4605      	mov	r5, r0
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f008 ff4b 	bl	8009898 <atoi>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f107 0020 	add.w	r0, r7, #32
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	4622      	mov	r2, r4
 8000a0e:	490a      	ldr	r1, [pc, #40]	; (8000a38 <AT_Send+0x90>)
 8000a10:	f008 ffd2 	bl	80099b8 <siprintf>
	HAL_UART_Transmit(huart, msg, strlen((char*)msg), 1000);
 8000a14:	f107 0320 	add.w	r3, r7, #32
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fbd9 	bl	80001d0 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f107 0120 	add.w	r1, r7, #32
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f003 fd6b 	bl	8004506 <HAL_UART_Transmit>
}
 8000a30:	bf00      	nop
 8000a32:	3760      	adds	r7, #96	; 0x60
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}
 8000a38:	0800a498 	.word	0x0800a498

08000a3c <AT_Join>:

static void AT_Join(UART_HandleTypeDef *huart){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	//Reset teh LoRa E5 module
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4a:	4838      	ldr	r0, [pc, #224]	; (8000b2c <AT_Join+0xf0>)
 8000a4c:	f001 fde0 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a56:	4835      	ldr	r0, [pc, #212]	; (8000b2c <AT_Join+0xf0>)
 8000a58:	f001 fdda 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a5c:	20c8      	movs	r0, #200	; 0xc8
 8000a5e:	f000 fc8b 	bl	8001378 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4830      	ldr	r0, [pc, #192]	; (8000b2c <AT_Join+0xf0>)
 8000a6a:	f001 fdd1 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a74:	482d      	ldr	r0, [pc, #180]	; (8000b2c <AT_Join+0xf0>)
 8000a76:	f001 fdcb 	bl	8002610 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 fc7c 	bl	8001378 <HAL_Delay>

	//Start JOIN
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	4829      	ldr	r0, [pc, #164]	; (8000b2c <AT_Join+0xf0>)
 8000a88:	f001 fdc2 	bl	8002610 <HAL_GPIO_WritePin>
	uint8_t msg[64] = {0};
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	223c      	movs	r2, #60	; 0x3c
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 ffad 	bl	80099f8 <memset>
	uint32_t tick = HAL_GetTick();
 8000a9e:	f000 fc5f 	bl	8001360 <HAL_GetTick>
 8000aa2:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	4921      	ldr	r1, [pc, #132]	; (8000b30 <AT_Join+0xf4>)
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f003 fd2a 	bl	8004506 <HAL_UART_Transmit>
	while(strstr((char*) msg, "JOINED") == NULL){
 8000ab2:	e022      	b.n	8000afa <AT_Join+0xbe>
		if(HAL_GetTick() - tick >= 10000 || strstr((char*) msg, "FAILED") != NULL){
 8000ab4:	f000 fc54 	bl	8001360 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d808      	bhi.n	8000ad8 <AT_Join+0x9c>
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	491a      	ldr	r1, [pc, #104]	; (8000b34 <AT_Join+0xf8>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 ff9b 	bl	8009a08 <strstr>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d009      	beq.n	8000aec <AT_Join+0xb0>
			tick = HAL_GetTick();
 8000ad8:	f000 fc42 	bl	8001360 <HAL_GetTick>
 8000adc:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(huart, (uint8_t*)"AT+JOIN=1\n", 10, 1000);
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	4912      	ldr	r1, [pc, #72]	; (8000b30 <AT_Join+0xf4>)
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f003 fd0d 	bl	8004506 <HAL_UART_Transmit>
		}
		HAL_UART_Receive_STR(huart, msg, 64, 50);
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	2332      	movs	r3, #50	; 0x32
 8000af2:	2240      	movs	r2, #64	; 0x40
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff29 	bl	800094c <HAL_UART_Receive_STR>
	while(strstr((char*) msg, "JOINED") == NULL){
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <AT_Join+0xfc>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f008 ff81 	bl	8009a08 <strstr>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0d3      	beq.n	8000ab4 <AT_Join+0x78>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <AT_Join+0xf0>)
 8000b14:	f001 fd7c 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <AT_Join+0xf0>)
 8000b20:	f001 fd76 	bl	8002610 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	; 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	0800a4ac 	.word	0x0800a4ac
 8000b34:	0800a4b8 	.word	0x0800a4b8
 8000b38:	0800a4c0 	.word	0x0800a4c0

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	2230      	movs	r2, #48	; 0x30
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 ff54 	bl	80099f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 ffba 	bl	8003b3c <HAL_RCC_OscConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bce:	f000 f965 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2105      	movs	r1, #5
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fa1b 	bl	800402c <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bfc:	f000 f94e 	bl	8000e9c <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	; 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2228      	movs	r2, #40	; 0x28
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f008 feeb 	bl	80099f8 <memset>

  filters.FilterActivation = ENABLE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 8000c36:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000c3a:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000c40:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000c44:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <CAN1_Filter_Config+0x58>)
 8000c50:	f000 fcb2 	bl	80015b8 <HAL_CAN_ConfigFilter>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000c5a:	f000 f91f 	bl	8000e9c <Error_Handler>
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001c0 	.word	0x200001c0

08000c6c <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c78:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <MX_CAN1_Init+0x98>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cc2:	f000 fb7d 	bl	80013c0 <HAL_CAN_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000ccc:	f000 f8e6 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cd6:	f000 feee 	bl	8001ab6 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 fe88 	bl	80099f8 <memset>
  filters.FilterActivation = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_CAN1_Init+0x94>)
 8000cf4:	f000 fc60 	bl	80015b8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	; 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001c0 	.word	0x200001c0
 8000d04:	40006400 	.word	0x40006400

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART2_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f003 fb94 	bl	800446c <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f8a7 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001e8 	.word	0x200001e8
 8000d58:	40004400 	.word	0x40004400

08000d5c <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_USART3_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART3_UART_Init+0x4c>)
 8000d94:	f003 fb6a 	bl	800446c <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f000 f87d 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000022c 	.word	0x2000022c
 8000dac:	40004800 	.word	0x40004800

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e22:	f001 fbf5 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_GPIO_Init+0xe8>)
 8000e3a:	f001 fa35 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e58:	f001 fa26 	bl	80022a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e64:	f001 fbd4 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e82:	f001 fa11 	bl	80022a8 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40020000 	.word	0x40020000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a25      	ldr	r2, [pc, #148]	; (8000fac <HAL_CAN_MspInit+0xb4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d143      	bne.n	8000fa2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_CAN_MspInit+0xb8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f52:	2303      	movs	r3, #3
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f62:	2309      	movs	r3, #9
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <HAL_CAN_MspInit+0xbc>)
 8000f6e:	f001 f99b 	bl	80022a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2013      	movs	r0, #19
 8000f78:	f001 f8cd 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f7c:	2013      	movs	r0, #19
 8000f7e:	f001 f8e6 	bl	800214e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2014      	movs	r0, #20
 8000f88:	f001 f8c5 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f8c:	2014      	movs	r0, #20
 8000f8e:	f001 f8de 	bl	800214e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2015      	movs	r0, #21
 8000f98:	f001 f8bd 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f9c:	2015      	movs	r0, #21
 8000f9e:	f001 f8d6 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40006400 	.word	0x40006400
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <HAL_UART_MspInit+0x108>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d134      	bne.n	8001044 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001012:	230c      	movs	r3, #12
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001022:	2307      	movs	r3, #7
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4826      	ldr	r0, [pc, #152]	; (80010c8 <HAL_UART_MspInit+0x110>)
 800102e:	f001 f93b 	bl	80022a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2026      	movs	r0, #38	; 0x26
 8001038:	f001 f86d 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103c:	2026      	movs	r0, #38	; 0x26
 800103e:	f001 f886 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001042:	e039      	b.n	80010b8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_UART_MspInit+0x114>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d134      	bne.n	80010b8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_UART_MspInit+0x10c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001086:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <HAL_UART_MspInit+0x118>)
 80010a4:	f001 f900 	bl	80022a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2027      	movs	r0, #39	; 0x27
 80010ae:	f001 f832 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010b2:	2027      	movs	r0, #39	; 0x27
 80010b4:	f001 f84b 	bl	800214e <HAL_NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40004800 	.word	0x40004800
 80010d0:	40020400 	.word	0x40020400

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f90a 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <CAN1_TX_IRQHandler+0x10>)
 800112e:	f000 fce8 	bl	8001b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001c0 	.word	0x200001c0

0800113c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <CAN1_RX0_IRQHandler+0x14>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <CAN1_RX0_IRQHandler+0x18>)
 8001148:	f000 fcdb 	bl	8001b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000270 	.word	0x20000270
 8001154:	200001c0 	.word	0x200001c0

08001158 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <CAN1_RX1_IRQHandler+0x14>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <CAN1_RX1_IRQHandler+0x18>)
 8001164:	f000 fccd 	bl	8001b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000271 	.word	0x20000271
 8001170:	200001c0 	.word	0x200001c0

08001174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART2_IRQHandler+0x10>)
 800117a:	f003 faf9 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001e8 	.word	0x200001e8

08001188 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USART3_IRQHandler+0x10>)
 800118e:	f003 faef 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000022c 	.word	0x2000022c

0800119c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <OTG_FS_IRQHandler+0x10>)
 80011a2:	f001 fb9e 	bl	80028e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001764 	.word	0x20001764

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f008 fc28 	bl	8009a34 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20020000 	.word	0x20020000
 8001210:	00000400 	.word	0x00000400
 8001214:	2000027c 	.word	0x2000027c
 8001218:	20001fd8 	.word	0x20001fd8

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800125c:	4c0b      	ldr	r4, [pc, #44]	; (800128c <LoopFillZerobss+0x26>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126a:	f7ff ffd7 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f008 fbe7 	bl	8009a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff f9e1 	bl	8000638 <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001284:	0800a66c 	.word	0x0800a66c
  ldr r2, =_sbss
 8001288:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 800128c:	20001fd8 	.word	0x20001fd8

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_Init+0x40>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_Init+0x40>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x40>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 ff1f 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fdee 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ff37 	bl	800216a <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 feff 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000010 	.word	0x20000010
 8001330:	20000018 	.word	0x20000018
 8001334:	20000014 	.word	0x20000014

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000018 	.word	0x20000018
 800135c:	20000280 	.word	0x20000280

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000280 	.word	0x20000280

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000018 	.word	0x20000018

080013c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0ed      	b.n	80015ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fd8a 	bl	8000ef8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f4:	f7ff ffb4 	bl	8001360 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013fa:	e012      	b.n	8001422 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013fc:	f7ff ffb0 	bl	8001360 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b0a      	cmp	r3, #10
 8001408:	d90b      	bls.n	8001422 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2205      	movs	r2, #5
 800141a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0c5      	b.n	80015ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0e5      	beq.n	80013fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0202 	bic.w	r2, r2, #2
 800143e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001440:	f7ff ff8e 	bl	8001360 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001446:	e012      	b.n	800146e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001448:	f7ff ff8a 	bl	8001360 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b0a      	cmp	r3, #10
 8001454:	d90b      	bls.n	800146e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e09f      	b.n	80015ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e5      	bne.n	8001448 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e007      	b.n	80014a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7e5b      	ldrb	r3, [r3, #25]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e007      	b.n	80014d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7e9b      	ldrb	r3, [r3, #26]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d108      	bne.n	80014ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0220 	orr.w	r2, r2, #32
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e007      	b.n	80014fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0220 	bic.w	r2, r2, #32
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7edb      	ldrb	r3, [r3, #27]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0210 	bic.w	r2, r2, #16
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e007      	b.n	8001524 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7f1b      	ldrb	r3, [r3, #28]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e007      	b.n	800154e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0208 	bic.w	r2, r2, #8
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f5b      	ldrb	r3, [r3, #29]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0204 	orr.w	r2, r2, #4
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e007      	b.n	8001578 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0204 	bic.w	r2, r2, #4
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	ea42 0103 	orr.w	r1, r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d0:	7cfb      	ldrb	r3, [r7, #19]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d003      	beq.n	80015de <HAL_CAN_ConfigFilter+0x26>
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	f040 80be 	bne.w	800175a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_CAN_ConfigFilter+0x1bc>)
 80015e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2201      	movs	r2, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d123      	bne.n	8001688 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001662:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3248      	adds	r2, #72	; 0x48
 8001668:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800167c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	3348      	adds	r3, #72	; 0x48
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d122      	bne.n	80016d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3248      	adds	r2, #72	; 0x48
 80016b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	3348      	adds	r3, #72	; 0x48
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016f0:	e007      	b.n	8001702 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800171c:	e007      	b.n	800172e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	431a      	orrs	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800174c:	f023 0201 	bic.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e006      	b.n	8001768 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40006400 	.word	0x40006400

08001778 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d12e      	bne.n	80017ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fddc 	bl	8001360 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ac:	f7ff fdd8 	bl	8001360 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e012      	b.n	80017f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e5      	bne.n	80017ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e006      	b.n	80017f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d133      	bne.n	800187c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff fd9c 	bl	8001360 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800182a:	e012      	b.n	8001852 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800182c:	f7ff fd98 	bl	8001360 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d90b      	bls.n	8001852 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2205      	movs	r2, #5
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e01b      	b.n	800188a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0e5      	beq.n	800182c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0202 	bic.w	r2, r2, #2
 800186e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e006      	b.n	800188a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d003      	beq.n	80018b6 <HAL_CAN_GetRxMessage+0x24>
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 80f3 	bne.w	8001a9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10e      	bne.n	80018da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0e7      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0d8      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	331b      	adds	r3, #27
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0204 	and.w	r2, r3, #4
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	331b      	adds	r3, #27
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0d5b      	lsrs	r3, r3, #21
 8001926:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e00b      	b.n	8001948 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	331b      	adds	r3, #27
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	331b      	adds	r3, #27
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0202 	and.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	331b      	adds	r3, #27
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	331b      	adds	r3, #27
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a1a      	lsrs	r2, r3, #8
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0c1a      	lsrs	r2, r3, #16
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3302      	adds	r3, #2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e1a      	lsrs	r2, r3, #24
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3303      	adds	r3, #3
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0a1a      	lsrs	r2, r3, #8
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3305      	adds	r3, #5
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0c1a      	lsrs	r2, r3, #16
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3306      	adds	r3, #6
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e1a      	lsrs	r2, r3, #24
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0220 	orr.w	r2, r2, #32
 8001a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d002      	beq.n	8001ad4 <HAL_CAN_ActivateNotification+0x1e>
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6959      	ldr	r1, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e006      	b.n	8001af6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b08a      	sub	sp, #40	; 0x28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d07c      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d023      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f983 	bl	8001e70 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b6a:	e016      	b.n	8001b9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e00c      	b.n	8001b9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e002      	b.n	8001b9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f989 	bl	8001eac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d024      	beq.n	8001bee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f963 	bl	8001e84 <HAL_CAN_TxMailbox1CompleteCallback>
 8001bbe:	e016      	b.n	8001bee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	e00c      	b.n	8001bee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e002      	b.n	8001bee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f969 	bl	8001ec0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d024      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f943 	bl	8001e98 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c12:	e016      	b.n	8001c42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e00c      	b.n	8001c42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e002      	b.n	8001c42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f949 	bl	8001ed4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00c      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f930 	bl	8001ee8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7fe fc6b 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f912 	bl	8001f10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8f9 	bl	8001efc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2210      	movs	r2, #16
 8001d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8fc 	bl	8001f24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2208      	movs	r2, #8
 8001d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8f5 	bl	8001f38 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d07b      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d072      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d043      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03e      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	d02b      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x32a>
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d82e      	bhi.n	8001e36 <HAL_CAN_IRQHandler+0x334>
 8001dd8:	2b50      	cmp	r3, #80	; 0x50
 8001dda:	d022      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x320>
 8001ddc:	2b50      	cmp	r3, #80	; 0x50
 8001dde:	d82a      	bhi.n	8001e36 <HAL_CAN_IRQHandler+0x334>
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d019      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x316>
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d826      	bhi.n	8001e36 <HAL_CAN_IRQHandler+0x334>
 8001de8:	2b30      	cmp	r3, #48	; 0x30
 8001dea:	d010      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x30c>
 8001dec:	2b30      	cmp	r3, #48	; 0x30
 8001dee:	d822      	bhi.n	8001e36 <HAL_CAN_IRQHandler+0x334>
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d002      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x2f8>
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d005      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001df8:	e01d      	b.n	8001e36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e02:	e019      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0c:	e014      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f043 0320 	orr.w	r3, r3, #32
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e16:	e00f      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e20:	e00a      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2a:	e005      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e34:	e000      	b.n	8001e38 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f872 	bl	8001f4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff3e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff31 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff f8e6 	bl	8001360 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e052      	b.n	800225a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0216 	bic.w	r2, r2, #22
 80021c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <HAL_DMA_Abort+0x62>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0208 	bic.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002204:	e013      	b.n	800222e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002206:	f7ff f8ab 	bl	8001360 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b05      	cmp	r3, #5
 8002212:	d90c      	bls.n	800222e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e015      	b.n	800225a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e4      	bne.n	8002206 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	223f      	movs	r2, #63	; 0x3f
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d004      	beq.n	8002280 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e00c      	b.n	800229a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2205      	movs	r2, #5
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e16b      	b.n	800259c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 815a 	bne.w	8002596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d005      	beq.n	80022fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d130      	bne.n	800235c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 0201 	and.w	r2, r3, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b03      	cmp	r3, #3
 8002366:	d017      	beq.n	8002398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d123      	bne.n	80023ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0203 	and.w	r2, r3, #3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80b4 	beq.w	8002596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b60      	ldr	r3, [pc, #384]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a5f      	ldr	r2, [pc, #380]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_GPIO_Init+0x30c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244a:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_GPIO_Init+0x310>)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x314>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02b      	beq.n	80024ce <HAL_GPIO_Init+0x226>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_GPIO_Init+0x318>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x222>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_GPIO_Init+0x31c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x21e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_GPIO_Init+0x320>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x21a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4e      	ldr	r2, [pc, #312]	; (80025cc <HAL_GPIO_Init+0x324>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x216>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <HAL_GPIO_Init+0x328>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x212>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_GPIO_Init+0x32c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x20e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4b      	ldr	r2, [pc, #300]	; (80025d8 <HAL_GPIO_Init+0x330>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x20a>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e00e      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024b2:	2308      	movs	r3, #8
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024b6:	2306      	movs	r3, #6
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x228>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e0:	4935      	ldr	r1, [pc, #212]	; (80025b8 <HAL_GPIO_Init+0x310>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_GPIO_Init+0x334>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_GPIO_Init+0x334>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_GPIO_Init+0x334>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <HAL_GPIO_Init+0x334>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_GPIO_Init+0x334>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f ae90 	bls.w	80022c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40021c00 	.word	0x40021c00
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e001      	b.n	8002602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002644:	b08f      	sub	sp, #60	; 0x3c
 8002646:	af0a      	add	r7, sp, #40	; 0x28
 8002648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e10f      	b.n	8002874 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f006 fdec 	bl	800924c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 f8b5 	bl	8005802 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	687e      	ldr	r6, [r7, #4]
 80026a0:	466d      	mov	r5, sp
 80026a2:	f106 0410 	add.w	r4, r6, #16
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b6:	1d33      	adds	r3, r6, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 ff8c 	bl	80055d8 <USB_CoreInit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0d0      	b.n	8002874 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f8a3 	bl	8005824 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e04a      	b.n	800277a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	333d      	adds	r3, #61	; 0x3d
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	333c      	adds	r3, #60	; 0x3c
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	b298      	uxth	r0, r3
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3344      	adds	r3, #68	; 0x44
 8002720:	4602      	mov	r2, r0
 8002722:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3340      	adds	r3, #64	; 0x40
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3348      	adds	r3, #72	; 0x48
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	; 0x4c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3354      	adds	r3, #84	; 0x54
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3301      	adds	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3af      	bcc.n	80026e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e044      	b.n	8002814 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3301      	adds	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b5      	bcc.n	800278a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	687e      	ldr	r6, [r7, #4]
 8002826:	466d      	mov	r5, sp
 8002828:	f106 0410 	add.w	r4, r6, #16
 800282c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002838:	e885 0003 	stmia.w	r5, {r0, r1}
 800283c:	1d33      	adds	r3, r6, #4
 800283e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	f003 f83b 	bl	80058bc <USB_DevInit>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e00d      	b.n	8002874 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 f98a 	bl	8006b86 <USB_DevDisconnect>

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800287c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_Start+0x1c>
 8002894:	2302      	movs	r3, #2
 8002896:	e020      	b.n	80028da <HAL_PCD_Start+0x5e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d109      	bne.n	80028bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d005      	beq.n	80028bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 ff8d 	bl	80057e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 f93a 	bl	8006b44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028e2:	b590      	push	{r4, r7, lr}
 80028e4:	b08d      	sub	sp, #52	; 0x34
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 f9f8 	bl	8006cee <USB_GetMode>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 848a 	bne.w	800321a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 f95c 	bl	8006bc8 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8480 	beq.w	8003218 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 f949 	bl	8006bc8 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d107      	bne.n	8002950 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f002 0202 	and.w	r2, r2, #2
 800294e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f004 f937 	bl	8006bc8 <USB_ReadInterrupts>
 800295a:	4603      	mov	r3, r0
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b10      	cmp	r3, #16
 8002962:	d161      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0210 	bic.w	r2, r2, #16
 8002972:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	0c5b      	lsrs	r3, r3, #17
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	2b02      	cmp	r3, #2
 800299e:	d124      	bne.n	80029ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d035      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6a38      	ldr	r0, [r7, #32]
 80029c0:	f003 ff6e 	bl	80068a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	441a      	add	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	441a      	add	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
 80029e8:	e016      	b.n	8002a18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	0c5b      	lsrs	r3, r3, #17
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d110      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029fc:	2208      	movs	r2, #8
 80029fe:	4619      	mov	r1, r3
 8002a00:	6a38      	ldr	r0, [r7, #32]
 8002a02:	f003 ff4d 	bl	80068a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a12:	441a      	add	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0210 	orr.w	r2, r2, #16
 8002a26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 f8cb 	bl	8006bc8 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3c:	f040 80a7 	bne.w	8002b8e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 f8d0 	bl	8006bee <USB_ReadDevAllOutEpInterrupt>
 8002a4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a50:	e099      	b.n	8002b86 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 808e 	beq.w	8002b7a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 f8f4 	bl	8006c56 <USB_ReadDevOutEPInterrupt>
 8002a6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	461a      	mov	r2, r3
 8002a88:	2301      	movs	r3, #1
 8002a8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fec2 	bl	8003818 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2308      	movs	r3, #8
 8002aae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 ff98 	bl	80039e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d030      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d109      	bne.n	8002afe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	78db      	ldrb	r3, [r3, #3]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d108      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f006 fca7 	bl	800947c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	2320      	movs	r3, #32
 8002b5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af62 	bne.w	8002a52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 f818 	bl	8006bc8 <USB_ReadInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba2:	f040 80db 	bne.w	8002d5c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 f839 	bl	8006c22 <USB_ReadDevAllInEpInterrupt>
 8002bb0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bb6:	e0cd      	b.n	8002d54 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80c2 	beq.w	8002d48 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 f85f 	bl	8006c92 <USB_ReadDevInEPInterrupt>
 8002bd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d057      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	2201      	movs	r2, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69f9      	ldr	r1, [r7, #28]
 8002bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c00:	4013      	ands	r3, r2
 8002c02:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d132      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334c      	adds	r3, #76	; 0x4c
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4403      	add	r3, r0
 8002c3e:	3348      	adds	r3, #72	; 0x48
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4419      	add	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4403      	add	r3, r0
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d113      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x3a2>
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2101      	movs	r1, #1
 8002c80:	f004 f866 	bl	8006d50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f006 fb71 	bl	8009372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2308      	movs	r3, #8
 8002caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d023      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf0:	6a38      	ldr	r0, [r7, #32]
 8002cf2:	f002 ff47 	bl	8005b84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	3338      	adds	r3, #56	; 0x38
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	78db      	ldrb	r3, [r3, #3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f006 fbbe 	bl	80094a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d30:	461a      	mov	r2, r3
 8002d32:	2302      	movs	r3, #2
 8002d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fcdb 	bl	80036fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f af2e 	bne.w	8002bb8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 ff31 	bl	8006bc8 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d70:	d122      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fec2 	bl	8003b24 <HAL_PCDEx_LPM_Callback>
 8002da0:	e002      	b.n	8002da8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f006 fb5c 	bl	8009460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 ff03 	bl	8006bc8 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dcc:	d112      	bne.n	8002df4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f006 fb18 	bl	8009414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002df2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fee5 	bl	8006bc8 <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	f040 80b7 	bne.w	8002f7a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2110      	movs	r1, #16
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 feac 	bl	8005b84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	e046      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e72:	461a      	mov	r2, r3
 8002e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8a:	0151      	lsls	r1, r2, #5
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	440a      	add	r2, r1
 8002e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eaa:	0151      	lsls	r1, r2, #5
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	440a      	add	r2, r1
 8002eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3b3      	bcc.n	8002e32 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002edc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef6:	f043 030b 	orr.w	r3, r3, #11
 8002efa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0c:	f043 030b 	orr.w	r3, r3, #11
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	e015      	b.n	8002f40 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3a:	f043 030b 	orr.w	r3, r3, #11
 8002f3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f64:	461a      	mov	r2, r3
 8002f66:	f003 fef3 	bl	8006d50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fe22 	bl	8006bc8 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	d124      	bne.n	8002fda <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 feb8 	bl	8006d0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fe6d 	bl	8005c7e <USB_GetDevSpeed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681c      	ldr	r4, [r3, #0]
 8002fb0:	f001 fa28 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f002 fb6c 	bl	800569c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f006 f9fc 	bl	80093c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fdf2 	bl	8006bc8 <USB_ReadInterrupts>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d10a      	bne.n	8003004 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f006 f9d9 	bl	80093a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f002 0208 	and.w	r2, r2, #8
 8003002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fddd 	bl	8006bc8 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d122      	bne.n	800305e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003024:	2301      	movs	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	e014      	b.n	8003054 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb27 	bl	800369c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	3301      	adds	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	429a      	cmp	r2, r3
 800305c:	d3e5      	bcc.n	800302a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fdb0 	bl	8006bc8 <USB_ReadInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003072:	d13b      	bne.n	80030ec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
 8003078:	e02b      	b.n	80030d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3340      	adds	r3, #64	; 0x40
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d115      	bne.n	80030cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da12      	bge.n	80030cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333f      	adds	r3, #63	; 0x3f
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fae8 	bl	800369c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	3301      	adds	r3, #1
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3ce      	bcc.n	800307a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fd69 	bl	8006bc8 <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003100:	d155      	bne.n	80031ae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003102:	2301      	movs	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e045      	b.n	8003194 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d12e      	bne.n	800318e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003130:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	da2b      	bge.n	800318e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003142:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003146:	429a      	cmp	r2, r3
 8003148:	d121      	bne.n	800318e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318a:	6053      	str	r3, [r2, #4]
            break;
 800318c:	e007      	b.n	800319e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	429a      	cmp	r2, r3
 800319c:	d3b4      	bcc.n	8003108 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fd08 	bl	8006bc8 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d10a      	bne.n	80031da <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f006 f97d 	bl	80094c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fcf2 	bl	8006bc8 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d115      	bne.n	800321a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f006 f96d 	bl	80094e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	e000      	b.n	800321a <HAL_PCD_IRQHandler+0x938>
      return;
 8003218:	bf00      	nop
    }
  }
}
 800321a:	3734      	adds	r7, #52	; 0x34
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_PCD_SetAddress+0x1a>
 8003236:	2302      	movs	r3, #2
 8003238:	e013      	b.n	8003262 <HAL_PCD_SetAddress+0x42>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f003 fc50 	bl	8006af8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	4608      	mov	r0, r1
 8003274:	4611      	mov	r1, r2
 8003276:	461a      	mov	r2, r3
 8003278:	4603      	mov	r3, r0
 800327a:	70fb      	strb	r3, [r7, #3]
 800327c:	460b      	mov	r3, r1
 800327e:	803b      	strh	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da0f      	bge.n	80032b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	3338      	adds	r3, #56	; 0x38
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	705a      	strb	r2, [r3, #1]
 80032ae:	e00f      	b.n	80032d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	3304      	adds	r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032dc:	883a      	ldrh	r2, [r7, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	78ba      	ldrb	r2, [r7, #2]
 80032e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032fa:	78bb      	ldrb	r3, [r7, #2]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d102      	bne.n	8003306 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_EP_Open+0xaa>
 8003310:	2302      	movs	r3, #2
 8003312:	e00e      	b.n	8003332 <HAL_PCD_EP_Open+0xc8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fcd0 	bl	8005cc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003330:	7afb      	ldrb	r3, [r7, #11]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da0f      	bge.n	800336e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	3338      	adds	r3, #56	; 0x38
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	3304      	adds	r3, #4
 8003364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	705a      	strb	r2, [r3, #1]
 800336c:	e00f      	b.n	800338e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PCD_EP_Close+0x6e>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e00e      	b.n	80033c6 <HAL_PCD_EP_Close+0x8c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 fd0e 	bl	8005dd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	460b      	mov	r3, r1
 80033dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	6979      	ldr	r1, [r7, #20]
 8003442:	f002 ffed 	bl	8006420 <USB_EP0StartXfer>
 8003446:	e008      	b.n	800345a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	f002 fd9b 	bl	8005f90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	460b      	mov	r3, r1
 80034a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3338      	adds	r3, #56	; 0x38
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2200      	movs	r2, #0
 80034cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2201      	movs	r2, #1
 80034d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	f002 ff8b 	bl	8006420 <USB_EP0StartXfer>
 800350a:	e008      	b.n	800351e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	f002 fd39 	bl	8005f90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d901      	bls.n	8003546 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e050      	b.n	80035e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	da0f      	bge.n	800356e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 020f 	and.w	r2, r3, #15
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	3338      	adds	r3, #56	; 0x38
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	705a      	strb	r2, [r3, #1]
 800356c:	e00d      	b.n	800358a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_PCD_EP_SetStall+0x82>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e01e      	b.n	80035e8 <HAL_PCD_EP_SetStall+0xc0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 f9c9 	bl	8006950 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035d8:	461a      	mov	r2, r3
 80035da:	f003 fbb9 	bl	8006d50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d901      	bls.n	800360e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e042      	b.n	8003694 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800360e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003612:	2b00      	cmp	r3, #0
 8003614:	da0f      	bge.n	8003636 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3338      	adds	r3, #56	; 0x38
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	3304      	adds	r3, #4
 800362c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	705a      	strb	r2, [r3, #1]
 8003634:	e00f      	b.n	8003656 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_PCD_EP_ClrStall+0x86>
 8003672:	2302      	movs	r3, #2
 8003674:	e00e      	b.n	8003694 <HAL_PCD_EP_ClrStall+0xa4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	f003 f9d1 	bl	8006a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da0c      	bge.n	80036ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	3338      	adds	r3, #56	; 0x38
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	3304      	adds	r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e00c      	b.n	80036e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	3304      	adds	r3, #4
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68f9      	ldr	r1, [r7, #12]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 fff0 	bl	80066d0 <USB_EPStopXfer>
 80036f0:	4603      	mov	r3, r0
 80036f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036f4:	7afb      	ldrb	r3, [r7, #11]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af02      	add	r7, sp, #8
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	429a      	cmp	r2, r3
 8003730:	d901      	bls.n	8003736 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06c      	b.n	8003810 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3303      	adds	r3, #3
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800375a:	e02b      	b.n	80037b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	429a      	cmp	r2, r3
 8003770:	d902      	bls.n	8003778 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3303      	adds	r3, #3
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6919      	ldr	r1, [r3, #16]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003790:	b2db      	uxtb	r3, r3
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f003 f844 	bl	8006824 <USB_WritePacket>

    ep->xfer_buff  += len;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d809      	bhi.n	80037de <PCD_WriteEmptyTxFifo+0xe0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d203      	bcs.n	80037de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1be      	bne.n	800375c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d811      	bhi.n	800380e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	2201      	movs	r2, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	43db      	mvns	r3, r3
 8003804:	6939      	ldr	r1, [r7, #16]
 8003806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800380a:	4013      	ands	r3, r2
 800380c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	333c      	adds	r3, #60	; 0x3c
 8003830:	3304      	adds	r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d17b      	bne.n	8003946 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4a61      	ldr	r2, [pc, #388]	; (80039e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	f240 80b9 	bls.w	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80b3 	beq.w	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	e0a7      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2320      	movs	r3, #32
 800389e:	6093      	str	r3, [r2, #8]
 80038a0:	e098      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 8093 	bne.w	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d90f      	bls.n	80038d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	6093      	str	r3, [r2, #8]
 80038d4:	e07e      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	3304      	adds	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	440b      	add	r3, r1
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d114      	bne.n	8003938 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003920:	461a      	mov	r2, r3
 8003922:	2101      	movs	r1, #1
 8003924:	f003 fa14 	bl	8006d50 <USB_EP0_OutStart>
 8003928:	e006      	b.n	8003938 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	441a      	add	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f005 fcfc 	bl	800933c <HAL_PCD_DataOutStageCallback>
 8003944:	e046      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d124      	bne.n	8003998 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	461a      	mov	r2, r3
 8003966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396a:	6093      	str	r3, [r2, #8]
 800396c:	e032      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	2320      	movs	r3, #32
 8003988:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f005 fcd3 	bl	800933c <HAL_PCD_DataOutStageCallback>
 8003996:	e01d      	b.n	80039d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d114      	bne.n	80039c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039c0:	461a      	mov	r2, r3
 80039c2:	2100      	movs	r1, #0
 80039c4:	f003 f9c4 	bl	8006d50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f005 fcb4 	bl	800933c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	4f54300a 	.word	0x4f54300a
 80039e4:	4f54310a 	.word	0x4f54310a

080039e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	333c      	adds	r3, #60	; 0x3c
 8003a00:	3304      	adds	r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d90e      	bls.n	8003a3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f005 fc6b 	bl	8009318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d90c      	bls.n	8003a64 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f003 f976 	bl	8006d50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	4f54300a 	.word	0x4f54300a

08003a74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
 8003a80:	4613      	mov	r3, r2
 8003a82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a92:	883b      	ldrh	r3, [r7, #0]
 8003a94:	0419      	lsls	r1, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa0:	e028      	b.n	8003af4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e00d      	b.n	8003ad2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	3340      	adds	r3, #64	; 0x40
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4413      	add	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3ec      	bcc.n	8003ab6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003adc:	883b      	ldrh	r3, [r7, #0]
 8003ade:	0418      	lsls	r0, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	4302      	orrs	r2, r0
 8003aec:	3340      	adds	r3, #64	; 0x40
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e267      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5a:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b85      	ldr	r3, [pc, #532]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b7e      	ldr	r3, [pc, #504]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e242      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x74>
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x98>
 8003bba:	4b70      	ldr	r3, [pc, #448]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6f      	ldr	r2, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6c      	ldr	r2, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bd4:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a68      	ldr	r2, [pc, #416]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a65      	ldr	r2, [pc, #404]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fbb4 	bl	8001360 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fbb0 	bl	8001360 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e207      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xc0>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fba0 	bl	8001360 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd fb9c 	bl	8001360 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1f3      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0xe8>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c52:	4b4a      	ldr	r3, [pc, #296]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b44      	ldr	r3, [pc, #272]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1c7      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4937      	ldr	r1, [pc, #220]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e03a      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fb55 	bl	8001360 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd fb51 	bl	8001360 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1a8      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4925      	ldr	r1, [pc, #148]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fb34 	bl	8001360 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fb30 	bl	8001360 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e187      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d036      	beq.n	8003d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fb14 	bl	8001360 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fd fb10 	bl	8001360 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e167      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x200>
 8003d5a:	e01b      	b.n	8003d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fafd 	bl	8001360 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e00e      	b.n	8003d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fd faf9 	bl	8001360 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d907      	bls.n	8003d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e150      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470000 	.word	0x42470000
 8003d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ea      	bne.n	8003d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8097 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b77      	ldr	r3, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b74      	ldr	r3, [pc, #464]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fd fab9 	bl	8001360 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd fab5 	bl	8001360 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e10c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x30c>
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a5e      	ldr	r2, [pc, #376]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e48:	4b58      	ldr	r3, [pc, #352]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a57      	ldr	r2, [pc, #348]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a54      	ldr	r2, [pc, #336]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fd fa7a 	bl	8001360 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd fa76 	bl	8001360 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0cb      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RCC_OscConfig+0x334>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e94:	f7fd fa64 	bl	8001360 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd fa60 	bl	8001360 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0b5      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	4a38      	ldr	r2, [pc, #224]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80a1 	beq.w	800401c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d05c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d141      	bne.n	8003f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fa34 	bl	8001360 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fd fa30 	bl	8001360 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e087      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	491b      	ldr	r1, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fa09 	bl	8001360 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fd fa05 	bl	8001360 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e05c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x416>
 8003f70:	e054      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd f9f2 	bl	8001360 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd f9ee 	bl	8001360 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e045      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x444>
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e038      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fd f920 	bl	8001360 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fd f91c 	bl	8001360 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f821 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490a      	ldr	r1, [pc, #40]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd f880 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	0800a510 	.word	0x0800a510
 80041f0:	20000010 	.word	0x20000010
 80041f4:	20000014 	.word	0x20000014

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b094      	sub	sp, #80	; 0x50
 80041fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	2300      	movs	r3, #0
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004210:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d00d      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x40>
 800421c:	2b08      	cmp	r3, #8
 800421e:	f200 80e1 	bhi.w	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x34>
 8004226:	2b04      	cmp	r3, #4
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x3a>
 800422a:	e0db      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004230:	e0db      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCC_GetSysClockFreq+0x208>)
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004236:	e0d8      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d063      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	2200      	movs	r2, #0
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38
 8004258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	0159      	lsls	r1, r3, #5
 8004278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427c:	0150      	lsls	r0, r2, #5
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4621      	mov	r1, r4
 8004284:	1a51      	subs	r1, r2, r1
 8004286:	6139      	str	r1, [r7, #16]
 8004288:	4629      	mov	r1, r5
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800429c:	4659      	mov	r1, fp
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a6:	4651      	mov	r1, sl
 80042a8:	018a      	lsls	r2, r1, #6
 80042aa:	4651      	mov	r1, sl
 80042ac:	ebb2 0801 	subs.w	r8, r2, r1
 80042b0:	4659      	mov	r1, fp
 80042b2:	eb63 0901 	sbc.w	r9, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ca:	4690      	mov	r8, r2
 80042cc:	4699      	mov	r9, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb18 0303 	adds.w	r3, r8, r3
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	462b      	mov	r3, r5
 80042d8:	eb49 0303 	adc.w	r3, r9, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ea:	4629      	mov	r1, r5
 80042ec:	024b      	lsls	r3, r1, #9
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f4:	4621      	mov	r1, r4
 80042f6:	024a      	lsls	r2, r1, #9
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 8004302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004308:	f7fb ffba 	bl	8000280 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	e058      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	4618      	mov	r0, r3
 8004320:	4611      	mov	r1, r2
 8004322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0159      	lsls	r1, r3, #5
 800433e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004342:	0150      	lsls	r0, r2, #5
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4641      	mov	r1, r8
 800434a:	ebb2 0a01 	subs.w	sl, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb63 0b01 	sbc.w	fp, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004368:	ebb2 040a 	subs.w	r4, r2, sl
 800436c:	eb63 050b 	sbc.w	r5, r3, fp
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	00eb      	lsls	r3, r5, #3
 800437a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437e:	00e2      	lsls	r2, r4, #3
 8004380:	4614      	mov	r4, r2
 8004382:	461d      	mov	r5, r3
 8004384:	4643      	mov	r3, r8
 8004386:	18e3      	adds	r3, r4, r3
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	464b      	mov	r3, r9
 800438c:	eb45 0303 	adc.w	r3, r5, r3
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439e:	4629      	mov	r1, r5
 80043a0:	028b      	lsls	r3, r1, #10
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a8:	4621      	mov	r1, r4
 80043aa:	028a      	lsls	r2, r1, #10
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	61fa      	str	r2, [r7, #28]
 80043b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043bc:	f7fb ff60 	bl	8000280 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3750      	adds	r7, #80	; 0x50
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000010 	.word	0x20000010

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	0800a520 	.word	0x0800a520

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004448:	f7ff ffdc 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4903      	ldr	r1, [pc, #12]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	0800a520 	.word	0x0800a520

0800446c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e03f      	b.n	80044fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fd90 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fe1d 	bl	80050f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b08a      	sub	sp, #40	; 0x28
 800450a:	af02      	add	r7, sp, #8
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b20      	cmp	r3, #32
 8004524:	d17c      	bne.n	8004620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_UART_Transmit+0x2c>
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e075      	b.n	8004622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_UART_Transmit+0x3e>
 8004540:	2302      	movs	r3, #2
 8004542:	e06e      	b.n	8004622 <HAL_UART_Transmit+0x11c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455a:	f7fc ff01 	bl	8001360 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d108      	bne.n	8004588 <HAL_UART_Transmit+0x82>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e003      	b.n	8004590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004598:	e02a      	b.n	80045f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fb9b 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e036      	b.n	8004622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	3302      	adds	r3, #2
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e007      	b.n	80045e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	3301      	adds	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1cf      	bne.n	800459a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fb6b 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e006      	b.n	8004622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b08a      	sub	sp, #40	; 0x28
 800462e:	af02      	add	r7, sp, #8
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b20      	cmp	r3, #32
 8004648:	f040 808c 	bne.w	8004764 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_UART_Receive+0x2e>
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e084      	b.n	8004766 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UART_Receive+0x40>
 8004666:	2302      	movs	r3, #2
 8004668:	e07d      	b.n	8004766 <HAL_UART_Receive+0x13c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2222      	movs	r2, #34	; 0x22
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004686:	f7fc fe6b 	bl	8001360 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d108      	bne.n	80046b4 <HAL_UART_Receive+0x8a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e003      	b.n	80046bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046c4:	e043      	b.n	800474e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2120      	movs	r1, #32
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fb05 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e042      	b.n	8004766 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	3302      	adds	r3, #2
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e01f      	b.n	8004740 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004708:	d007      	beq.n	800471a <HAL_UART_Receive+0xf0>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_UART_Receive+0xfe>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e008      	b.n	800473a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004734:	b2da      	uxtb	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3301      	adds	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1b6      	bne.n	80046c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0ba      	sub	sp, #232	; 0xe8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_UART_IRQHandler+0x66>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fbd3 	bl	8004f7a <UART_Receive_IT>
      return;
 80047d4:	e256      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80de 	beq.w	800499c <HAL_UART_IRQHandler+0x22c>
 80047e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80d1 	beq.w	800499c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0xae>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_UART_IRQHandler+0xd2>
 800482a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0202 	orr.w	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_UART_IRQHandler+0xf6>
 800484e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d011      	beq.n	8004896 <HAL_UART_IRQHandler+0x126>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0208 	orr.w	r2, r3, #8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 81ed 	beq.w	8004c7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_UART_IRQHandler+0x14e>
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fb5e 	bl	8004f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_UART_IRQHandler+0x17a>
 80048e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04f      	beq.n	800498a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa66 	bl	8004dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	d141      	bne.n	8004982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800492a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800492e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1d9      	bne.n	80048fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d013      	beq.n	800497a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	4a7d      	ldr	r2, [pc, #500]	; (8004b4c <HAL_UART_IRQHandler+0x3dc>)
 8004958:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fc7f 	bl	8002262 <HAL_DMA_Abort_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e00e      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f99a 	bl	8004cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e00a      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f996 	bl	8004cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	e006      	b.n	8004998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f992 	bl	8004cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004996:	e170      	b.n	8004c7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	bf00      	nop
    return;
 800499a:	e16e      	b.n	8004c7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 814a 	bne.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8143 	beq.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 813c 	beq.w	8004c3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	f040 80b4 	bne.w	8004b50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8140 	beq.w	8004c7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a06:	429a      	cmp	r2, r3
 8004a08:	f080 8139 	bcs.w	8004c7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	f000 8088 	beq.w	8004b32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d9      	bne.n	8004a22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e1      	bne.n	8004a6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e3      	bne.n	8004aaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	f023 0310 	bic.w	r3, r3, #16
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e3      	bne.n	8004af0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fb28 	bl	8002182 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8c0 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b48:	e099      	b.n	8004c7e <HAL_UART_IRQHandler+0x50e>
 8004b4a:	bf00      	nop
 8004b4c:	08004e83 	.word	0x08004e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 808b 	beq.w	8004c82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0310 	bic.w	r3, r3, #16
 8004c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c18:	61fa      	str	r2, [r7, #28]
 8004c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	617b      	str	r3, [r7, #20]
   return(result);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f848 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c38:	e023      	b.n	8004c82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_UART_IRQHandler+0x4ea>
 8004c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f929 	bl	8004eaa <UART_Transmit_IT>
    return;
 8004c58:	e014      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00e      	beq.n	8004c84 <HAL_UART_IRQHandler+0x514>
 8004c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f969 	bl	8004f4a <UART_EndTransmit_IT>
    return;
 8004c78:	e004      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
    return;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
      return;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_UART_IRQHandler+0x514>
      return;
 8004c82:	bf00      	nop
  }
}
 8004c84:	37e8      	adds	r7, #232	; 0xe8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop

08004c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b090      	sub	sp, #64	; 0x40
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf0:	e050      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d04c      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d00:	f7fc fb2e 	bl	8001360 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d241      	bcs.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d30:	637a      	str	r2, [r7, #52]	; 0x34
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	613b      	str	r3, [r7, #16]
   return(result);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d64:	623a      	str	r2, [r7, #32]
 8004d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	6a3a      	ldr	r2, [r7, #32]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e00f      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d09f      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3740      	adds	r7, #64	; 0x40
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b095      	sub	sp, #84	; 0x54
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de4:	643a      	str	r2, [r7, #64]	; 0x40
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d119      	bne.n	8004e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f023 0310 	bic.w	r3, r3, #16
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e54:	61ba      	str	r2, [r7, #24]
 8004e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	613b      	str	r3, [r7, #16]
   return(result);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e76:	bf00      	nop
 8004e78:	3754      	adds	r7, #84	; 0x54
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff ff09 	bl	8004cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b21      	cmp	r3, #33	; 0x21
 8004ebc:	d13e      	bne.n	8004f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec6:	d114      	bne.n	8004ef2 <UART_Transmit_IT+0x48>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d110      	bne.n	8004ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	1c9a      	adds	r2, r3, #2
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	621a      	str	r2, [r3, #32]
 8004ef0:	e008      	b.n	8004f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6211      	str	r1, [r2, #32]
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10f      	bne.n	8004f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fe8e 	bl	8004c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b08c      	sub	sp, #48	; 0x30
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b22      	cmp	r3, #34	; 0x22
 8004f8c:	f040 80ab 	bne.w	80050e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	d117      	bne.n	8004fca <UART_Receive_IT+0x50>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d113      	bne.n	8004fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc8:	e026      	b.n	8005018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fdc:	d007      	beq.n	8004fee <UART_Receive_IT+0x74>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <UART_Receive_IT+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e008      	b.n	800500e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005008:	b2da      	uxtb	r2, r3
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4619      	mov	r1, r3
 8005026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005028:	2b00      	cmp	r3, #0
 800502a:	d15a      	bne.n	80050e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0220 	bic.w	r2, r2, #32
 800503a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800504a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	2b01      	cmp	r3, #1
 800506a:	d135      	bne.n	80050d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	613b      	str	r3, [r7, #16]
   return(result);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	623a      	str	r2, [r7, #32]
 8005094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	69f9      	ldr	r1, [r7, #28]
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	61bb      	str	r3, [r7, #24]
   return(result);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d10a      	bne.n	80050ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdf9 	bl	8004cc8 <HAL_UARTEx_RxEventCallback>
 80050d6:	e002      	b.n	80050de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fde1 	bl	8004ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e002      	b.n	80050e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3730      	adds	r7, #48	; 0x30
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f4:	b0c0      	sub	sp, #256	; 0x100
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	68d9      	ldr	r1, [r3, #12]
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	ea40 0301 	orr.w	r3, r0, r1
 8005118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	431a      	orrs	r2, r3
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	431a      	orrs	r2, r3
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005148:	f021 010c 	bic.w	r1, r1, #12
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005156:	430b      	orrs	r3, r1
 8005158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	6999      	ldr	r1, [r3, #24]
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	ea40 0301 	orr.w	r3, r0, r1
 8005176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b8f      	ldr	r3, [pc, #572]	; (80053bc <UART_SetConfig+0x2cc>)
 8005180:	429a      	cmp	r2, r3
 8005182:	d005      	beq.n	8005190 <UART_SetConfig+0xa0>
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <UART_SetConfig+0x2d0>)
 800518c:	429a      	cmp	r2, r3
 800518e:	d104      	bne.n	800519a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005190:	f7ff f958 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8005194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005198:	e003      	b.n	80051a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800519a:	f7ff f93f 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 800519e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	f040 810c 	bne.w	80053c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051c2:	4622      	mov	r2, r4
 80051c4:	462b      	mov	r3, r5
 80051c6:	1891      	adds	r1, r2, r2
 80051c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051ca:	415b      	adcs	r3, r3
 80051cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051d2:	4621      	mov	r1, r4
 80051d4:	eb12 0801 	adds.w	r8, r2, r1
 80051d8:	4629      	mov	r1, r5
 80051da:	eb43 0901 	adc.w	r9, r3, r1
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051f2:	4690      	mov	r8, r2
 80051f4:	4699      	mov	r9, r3
 80051f6:	4623      	mov	r3, r4
 80051f8:	eb18 0303 	adds.w	r3, r8, r3
 80051fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005200:	462b      	mov	r3, r5
 8005202:	eb49 0303 	adc.w	r3, r9, r3
 8005206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800521a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800521e:	460b      	mov	r3, r1
 8005220:	18db      	adds	r3, r3, r3
 8005222:	653b      	str	r3, [r7, #80]	; 0x50
 8005224:	4613      	mov	r3, r2
 8005226:	eb42 0303 	adc.w	r3, r2, r3
 800522a:	657b      	str	r3, [r7, #84]	; 0x54
 800522c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005234:	f7fb f824 	bl	8000280 <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <UART_SetConfig+0x2d4>)
 800523e:	fba3 2302 	umull	r2, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	011c      	lsls	r4, r3, #4
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	1891      	adds	r1, r2, r2
 800525e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005260:	415b      	adcs	r3, r3
 8005262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005268:	4641      	mov	r1, r8
 800526a:	eb12 0a01 	adds.w	sl, r2, r1
 800526e:	4649      	mov	r1, r9
 8005270:	eb43 0b01 	adc.w	fp, r3, r1
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005288:	4692      	mov	sl, r2
 800528a:	469b      	mov	fp, r3
 800528c:	4643      	mov	r3, r8
 800528e:	eb1a 0303 	adds.w	r3, sl, r3
 8005292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005296:	464b      	mov	r3, r9
 8005298:	eb4b 0303 	adc.w	r3, fp, r3
 800529c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052b4:	460b      	mov	r3, r1
 80052b6:	18db      	adds	r3, r3, r3
 80052b8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ba:	4613      	mov	r3, r2
 80052bc:	eb42 0303 	adc.w	r3, r2, r3
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
 80052c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052ca:	f7fa ffd9 	bl	8000280 <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <UART_SetConfig+0x2d4>)
 80052d6:	fba3 2301 	umull	r2, r3, r3, r1
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2264      	movs	r2, #100	; 0x64
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	1acb      	subs	r3, r1, r3
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <UART_SetConfig+0x2d4>)
 80052ec:	fba3 2302 	umull	r2, r3, r3, r2
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f8:	441c      	add	r4, r3
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	1891      	adds	r1, r2, r2
 8005312:	63b9      	str	r1, [r7, #56]	; 0x38
 8005314:	415b      	adcs	r3, r3
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800531c:	4641      	mov	r1, r8
 800531e:	1851      	adds	r1, r2, r1
 8005320:	6339      	str	r1, [r7, #48]	; 0x30
 8005322:	4649      	mov	r1, r9
 8005324:	414b      	adcs	r3, r1
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005334:	4659      	mov	r1, fp
 8005336:	00cb      	lsls	r3, r1, #3
 8005338:	4651      	mov	r1, sl
 800533a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533e:	4651      	mov	r1, sl
 8005340:	00ca      	lsls	r2, r1, #3
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	4603      	mov	r3, r0
 8005348:	4642      	mov	r2, r8
 800534a:	189b      	adds	r3, r3, r2
 800534c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005350:	464b      	mov	r3, r9
 8005352:	460a      	mov	r2, r1
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800536c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005370:	460b      	mov	r3, r1
 8005372:	18db      	adds	r3, r3, r3
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	4613      	mov	r3, r2
 8005378:	eb42 0303 	adc.w	r3, r2, r3
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005386:	f7fa ff7b 	bl	8000280 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <UART_SetConfig+0x2d4>)
 8005390:	fba3 1302 	umull	r1, r3, r3, r2
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	2164      	movs	r1, #100	; 0x64
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	3332      	adds	r3, #50	; 0x32
 80053a2:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <UART_SetConfig+0x2d4>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	f003 0207 	and.w	r2, r3, #7
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4422      	add	r2, r4
 80053b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053b8:	e106      	b.n	80055c8 <UART_SetConfig+0x4d8>
 80053ba:	bf00      	nop
 80053bc:	40011000 	.word	0x40011000
 80053c0:	40011400 	.word	0x40011400
 80053c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053da:	4642      	mov	r2, r8
 80053dc:	464b      	mov	r3, r9
 80053de:	1891      	adds	r1, r2, r2
 80053e0:	6239      	str	r1, [r7, #32]
 80053e2:	415b      	adcs	r3, r3
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
 80053e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ea:	4641      	mov	r1, r8
 80053ec:	1854      	adds	r4, r2, r1
 80053ee:	4649      	mov	r1, r9
 80053f0:	eb43 0501 	adc.w	r5, r3, r1
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	00eb      	lsls	r3, r5, #3
 80053fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005402:	00e2      	lsls	r2, r4, #3
 8005404:	4614      	mov	r4, r2
 8005406:	461d      	mov	r5, r3
 8005408:	4643      	mov	r3, r8
 800540a:	18e3      	adds	r3, r4, r3
 800540c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005410:	464b      	mov	r3, r9
 8005412:	eb45 0303 	adc.w	r3, r5, r3
 8005416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005436:	4629      	mov	r1, r5
 8005438:	008b      	lsls	r3, r1, #2
 800543a:	4621      	mov	r1, r4
 800543c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005440:	4621      	mov	r1, r4
 8005442:	008a      	lsls	r2, r1, #2
 8005444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005448:	f7fa ff1a 	bl	8000280 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <UART_SetConfig+0x4e4>)
 8005452:	fba3 2302 	umull	r2, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	011c      	lsls	r4, r3, #4
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	1891      	adds	r1, r2, r2
 8005472:	61b9      	str	r1, [r7, #24]
 8005474:	415b      	adcs	r3, r3
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800547c:	4641      	mov	r1, r8
 800547e:	1851      	adds	r1, r2, r1
 8005480:	6139      	str	r1, [r7, #16]
 8005482:	4649      	mov	r1, r9
 8005484:	414b      	adcs	r3, r1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005494:	4659      	mov	r1, fp
 8005496:	00cb      	lsls	r3, r1, #3
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549e:	4651      	mov	r1, sl
 80054a0:	00ca      	lsls	r2, r1, #3
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	4642      	mov	r2, r8
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054b0:	464b      	mov	r3, r9
 80054b2:	460a      	mov	r2, r1
 80054b4:	eb42 0303 	adc.w	r3, r2, r3
 80054b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054d4:	4649      	mov	r1, r9
 80054d6:	008b      	lsls	r3, r1, #2
 80054d8:	4641      	mov	r1, r8
 80054da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054de:	4641      	mov	r1, r8
 80054e0:	008a      	lsls	r2, r1, #2
 80054e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054e6:	f7fa fecb 	bl	8000280 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	4b38      	ldr	r3, [pc, #224]	; (80055d4 <UART_SetConfig+0x4e4>)
 80054f2:	fba3 2301 	umull	r2, r3, r3, r1
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2264      	movs	r2, #100	; 0x64
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	1acb      	subs	r3, r1, r3
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	3332      	adds	r3, #50	; 0x32
 8005504:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <UART_SetConfig+0x4e4>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005510:	441c      	add	r4, r3
 8005512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005516:	2200      	movs	r2, #0
 8005518:	673b      	str	r3, [r7, #112]	; 0x70
 800551a:	677a      	str	r2, [r7, #116]	; 0x74
 800551c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005520:	4642      	mov	r2, r8
 8005522:	464b      	mov	r3, r9
 8005524:	1891      	adds	r1, r2, r2
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	415b      	adcs	r3, r3
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005530:	4641      	mov	r1, r8
 8005532:	1851      	adds	r1, r2, r1
 8005534:	6039      	str	r1, [r7, #0]
 8005536:	4649      	mov	r1, r9
 8005538:	414b      	adcs	r3, r1
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005548:	4659      	mov	r1, fp
 800554a:	00cb      	lsls	r3, r1, #3
 800554c:	4651      	mov	r1, sl
 800554e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005552:	4651      	mov	r1, sl
 8005554:	00ca      	lsls	r2, r1, #3
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	4603      	mov	r3, r0
 800555c:	4642      	mov	r2, r8
 800555e:	189b      	adds	r3, r3, r2
 8005560:	66bb      	str	r3, [r7, #104]	; 0x68
 8005562:	464b      	mov	r3, r9
 8005564:	460a      	mov	r2, r1
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	663b      	str	r3, [r7, #96]	; 0x60
 8005576:	667a      	str	r2, [r7, #100]	; 0x64
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005584:	4649      	mov	r1, r9
 8005586:	008b      	lsls	r3, r1, #2
 8005588:	4641      	mov	r1, r8
 800558a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558e:	4641      	mov	r1, r8
 8005590:	008a      	lsls	r2, r1, #2
 8005592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005596:	f7fa fe73 	bl	8000280 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <UART_SetConfig+0x4e4>)
 80055a0:	fba3 1302 	umull	r1, r3, r3, r2
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	2164      	movs	r1, #100	; 0x64
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	3332      	adds	r3, #50	; 0x32
 80055b2:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <UART_SetConfig+0x4e4>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4422      	add	r2, r4
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ce:	46bd      	mov	sp, r7
 80055d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055d4:	51eb851f 	.word	0x51eb851f

080055d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d8:	b084      	sub	sp, #16
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	f107 001c 	add.w	r0, r7, #28
 80055e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d122      	bne.n	8005636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 fbee 	bl	8006e0c <USB_CoreReset>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]
 8005634:	e01a      	b.n	800566c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fbe2 	bl	8006e0c <USB_CoreReset>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800564c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
 800565e:	e005      	b.n	800566c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10b      	bne.n	800568a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f043 0206 	orr.w	r2, r3, #6
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005696:	b004      	add	sp, #16
 8005698:	4770      	bx	lr
	...

0800569c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d165      	bne.n	800577c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a41      	ldr	r2, [pc, #260]	; (80057b8 <USB_SetTurnaroundTime+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d906      	bls.n	80056c6 <USB_SetTurnaroundTime+0x2a>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <USB_SetTurnaroundTime+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d202      	bcs.n	80056c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056c0:	230f      	movs	r3, #15
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e062      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4a3c      	ldr	r2, [pc, #240]	; (80057bc <USB_SetTurnaroundTime+0x120>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d306      	bcc.n	80056dc <USB_SetTurnaroundTime+0x40>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4a3b      	ldr	r2, [pc, #236]	; (80057c0 <USB_SetTurnaroundTime+0x124>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d202      	bcs.n	80056dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056d6:	230e      	movs	r3, #14
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e057      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a38      	ldr	r2, [pc, #224]	; (80057c0 <USB_SetTurnaroundTime+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d306      	bcc.n	80056f2 <USB_SetTurnaroundTime+0x56>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <USB_SetTurnaroundTime+0x128>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d202      	bcs.n	80056f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056ec:	230d      	movs	r3, #13
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e04c      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a33      	ldr	r2, [pc, #204]	; (80057c4 <USB_SetTurnaroundTime+0x128>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d306      	bcc.n	8005708 <USB_SetTurnaroundTime+0x6c>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4a32      	ldr	r2, [pc, #200]	; (80057c8 <USB_SetTurnaroundTime+0x12c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d802      	bhi.n	8005708 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005702:	230c      	movs	r3, #12
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e041      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a2f      	ldr	r2, [pc, #188]	; (80057c8 <USB_SetTurnaroundTime+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d906      	bls.n	800571e <USB_SetTurnaroundTime+0x82>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <USB_SetTurnaroundTime+0x130>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d802      	bhi.n	800571e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005718:	230b      	movs	r3, #11
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e036      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <USB_SetTurnaroundTime+0x130>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d906      	bls.n	8005734 <USB_SetTurnaroundTime+0x98>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <USB_SetTurnaroundTime+0x134>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d802      	bhi.n	8005734 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800572e:	230a      	movs	r3, #10
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e02b      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <USB_SetTurnaroundTime+0x134>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d906      	bls.n	800574a <USB_SetTurnaroundTime+0xae>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <USB_SetTurnaroundTime+0x138>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d202      	bcs.n	800574a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005744:	2309      	movs	r3, #9
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e020      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <USB_SetTurnaroundTime+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d306      	bcc.n	8005760 <USB_SetTurnaroundTime+0xc4>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <USB_SetTurnaroundTime+0x13c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d802      	bhi.n	8005760 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800575a:	2308      	movs	r3, #8
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e015      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a1d      	ldr	r2, [pc, #116]	; (80057d8 <USB_SetTurnaroundTime+0x13c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d906      	bls.n	8005776 <USB_SetTurnaroundTime+0xda>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <USB_SetTurnaroundTime+0x140>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d202      	bcs.n	8005776 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005770:	2307      	movs	r3, #7
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e00a      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005776:	2306      	movs	r3, #6
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e007      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005782:	2309      	movs	r3, #9
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e001      	b.n	800578c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005788:	2309      	movs	r3, #9
 800578a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	029b      	lsls	r3, r3, #10
 80057a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	00d8acbf 	.word	0x00d8acbf
 80057bc:	00e4e1c0 	.word	0x00e4e1c0
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	01067380 	.word	0x01067380
 80057c8:	011a499f 	.word	0x011a499f
 80057cc:	01312cff 	.word	0x01312cff
 80057d0:	014ca43f 	.word	0x014ca43f
 80057d4:	016e3600 	.word	0x016e3600
 80057d8:	01a6ab1f 	.word	0x01a6ab1f
 80057dc:	01e84800 	.word	0x01e84800

080057e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f043 0201 	orr.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d115      	bne.n	8005872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005852:	2001      	movs	r0, #1
 8005854:	f7fb fd90 	bl	8001378 <HAL_Delay>
      ms++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 fa45 	bl	8006cee <USB_GetMode>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d01e      	beq.n	80058a8 <USB_SetCurrentMode+0x84>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b31      	cmp	r3, #49	; 0x31
 800586e:	d9f0      	bls.n	8005852 <USB_SetCurrentMode+0x2e>
 8005870:	e01a      	b.n	80058a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d115      	bne.n	80058a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005884:	2001      	movs	r0, #1
 8005886:	f7fb fd77 	bl	8001378 <HAL_Delay>
      ms++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 fa2c 	bl	8006cee <USB_GetMode>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <USB_SetCurrentMode+0x84>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b31      	cmp	r3, #49	; 0x31
 80058a0:	d9f0      	bls.n	8005884 <USB_SetCurrentMode+0x60>
 80058a2:	e001      	b.n	80058a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e005      	b.n	80058b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b32      	cmp	r3, #50	; 0x32
 80058ac:	d101      	bne.n	80058b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058bc:	b084      	sub	sp, #16
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e009      	b.n	80058f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	3340      	adds	r3, #64	; 0x40
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b0e      	cmp	r3, #14
 80058f4:	d9f2      	bls.n	80058dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11c      	bne.n	8005936 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
 8005934:	e00b      	b.n	800594e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	4619      	mov	r1, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005968:	461a      	mov	r2, r3
 800596a:	680b      	ldr	r3, [r1, #0]
 800596c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10c      	bne.n	800598e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800597a:	2100      	movs	r1, #0
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f965 	bl	8005c4c <USB_SetDevSpeed>
 8005982:	e008      	b.n	8005996 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005984:	2101      	movs	r1, #1
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f960 	bl	8005c4c <USB_SetDevSpeed>
 800598c:	e003      	b.n	8005996 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800598e:	2103      	movs	r1, #3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f95b 	bl	8005c4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005996:	2110      	movs	r1, #16
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8f3 	bl	8005b84 <USB_FlushTxFifo>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f91f 	bl	8005bec <USB_FlushRxFifo>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	461a      	mov	r2, r3
 80059c0:	2300      	movs	r3, #0
 80059c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	461a      	mov	r2, r3
 80059cc:	2300      	movs	r3, #0
 80059ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	461a      	mov	r2, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059dc:	2300      	movs	r3, #0
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	e043      	b.n	8005a6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f8:	d118      	bne.n	8005a2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	e013      	b.n	8005a3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	461a      	mov	r2, r3
 8005a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e008      	b.n	8005a3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	461a      	mov	r2, r3
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3301      	adds	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d3b7      	bcc.n	80059e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e043      	b.n	8005b00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8e:	d118      	bne.n	8005ac2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e013      	b.n	8005ad4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e008      	b.n	8005ad4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	461a      	mov	r2, r3
 8005af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3301      	adds	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3b7      	bcc.n	8005a78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f043 0210 	orr.w	r2, r3, #16
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <USB_DevInit+0x2c4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f043 0208 	orr.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d107      	bne.n	8005b70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b7c:	b004      	add	sp, #16
 8005b7e:	4770      	bx	lr
 8005b80:	803c3800 	.word	0x803c3800

08005b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <USB_FlushTxFifo+0x64>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e01b      	b.n	8005bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	daf2      	bge.n	8005b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	019b      	lsls	r3, r3, #6
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <USB_FlushTxFifo+0x64>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e006      	b.n	8005bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d0f0      	beq.n	8005bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	00030d40 	.word	0x00030d40

08005bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <USB_FlushRxFifo+0x5c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e018      	b.n	8005c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	daf2      	bge.n	8005bf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2210      	movs	r2, #16
 8005c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <USB_FlushRxFifo+0x5c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e006      	b.n	8005c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d0f0      	beq.n	8005c1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	00030d40 	.word	0x00030d40

08005c4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
 8005ca2:	e00a      	b.n	8005cba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d002      	beq.n	8005cb0 <USB_GetDevSpeed+0x32>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d102      	bne.n	8005cb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	75fb      	strb	r3, [r7, #23]
 8005cb4:	e001      	b.n	8005cba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005cb6:	230f      	movs	r3, #15
 8005cb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d13a      	bne.n	8005d5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d155      	bne.n	8005dc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	791b      	ldrb	r3, [r3, #4]
 8005d36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	059b      	lsls	r3, r3, #22
 8005d3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d40:	4313      	orrs	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e036      	b.n	8005dc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11a      	bne.n	8005dc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dae:	430b      	orrs	r3, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d161      	bne.n	8005eb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e0a:	d11f      	bne.n	8005e4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e90:	4013      	ands	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	0159      	lsls	r1, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <USB_DeactivateEndpoint+0x1b0>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]
 8005eb6:	e060      	b.n	8005f7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ece:	d11f      	bne.n	8005f10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f30:	4013      	ands	r3, r2
 8005f32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f54:	4013      	ands	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0159      	lsls	r1, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	4619      	mov	r1, r3
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <USB_DeactivateEndpoint+0x1b4>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	ec337800 	.word	0xec337800
 8005f8c:	eff37800 	.word	0xeff37800

08005f90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	f040 815c 	bne.w	800626a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d132      	bne.n	8006020 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	0cdb      	lsrs	r3, r3, #19
 800601a:	04db      	lsls	r3, r3, #19
 800601c:	6113      	str	r3, [r2, #16]
 800601e:	e074      	b.n	800610a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	0cdb      	lsrs	r3, r3, #19
 800603c:	04db      	lsls	r3, r3, #19
 800603e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800605e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6999      	ldr	r1, [r3, #24]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	440b      	add	r3, r1
 800607c:	1e59      	subs	r1, r3, #1
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	fbb1 f3f3 	udiv	r3, r1, r3
 8006086:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006088:	4b9d      	ldr	r3, [pc, #628]	; (8006300 <USB_EPStartXfer+0x370>)
 800608a:	400b      	ands	r3, r1
 800608c:	69b9      	ldr	r1, [r7, #24]
 800608e:	0148      	lsls	r0, r1, #5
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	4401      	add	r1, r0
 8006094:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b2:	69b9      	ldr	r1, [r7, #24]
 80060b4:	0148      	lsls	r0, r1, #5
 80060b6:	69f9      	ldr	r1, [r7, #28]
 80060b8:	4401      	add	r1, r0
 80060ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060be:	4313      	orrs	r3, r2
 80060c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d11f      	bne.n	800610a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006108:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d14b      	bne.n	80061a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d128      	bne.n	8006186 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d110      	bne.n	8006166 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	e00f      	b.n	8006186 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e133      	b.n	8006410 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	791b      	ldrb	r3, [r3, #4]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d015      	beq.n	80061fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 811b 	beq.w	8006410 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	2101      	movs	r1, #1
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f6:	4313      	orrs	r3, r2
 80061f8:	634b      	str	r3, [r1, #52]	; 0x34
 80061fa:	e109      	b.n	8006410 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d110      	bne.n	800622e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	e00f      	b.n	800624e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6919      	ldr	r1, [r3, #16]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	b298      	uxth	r0, r3
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4603      	mov	r3, r0
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fade 	bl	8006824 <USB_WritePacket>
 8006268:	e0d2      	b.n	8006410 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	0cdb      	lsrs	r3, r3, #19
 8006286:	04db      	lsls	r3, r3, #19
 8006288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d126      	bne.n	8006304 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	0148      	lsls	r0, r1, #5
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	4401      	add	r1, r0
 80062d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d8:	4313      	orrs	r3, r2
 80062da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fa:	6113      	str	r3, [r2, #16]
 80062fc:	e03a      	b.n	8006374 <USB_EPStartXfer+0x3e4>
 80062fe:	bf00      	nop
 8006300:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4413      	add	r3, r2
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	8afa      	ldrh	r2, [r7, #22]
 8006320:	fb03 f202 	mul.w	r2, r3, r2
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	8afb      	ldrh	r3, [r7, #22]
 8006338:	04d9      	lsls	r1, r3, #19
 800633a:	4b38      	ldr	r3, [pc, #224]	; (800641c <USB_EPStartXfer+0x48c>)
 800633c:	400b      	ands	r3, r1
 800633e:	69b9      	ldr	r1, [r7, #24]
 8006340:	0148      	lsls	r0, r1, #5
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	4401      	add	r1, r0
 8006346:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006364:	69b9      	ldr	r1, [r7, #24]
 8006366:	0148      	lsls	r0, r1, #5
 8006368:	69f9      	ldr	r1, [r7, #28]
 800636a:	4401      	add	r1, r0
 800636c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006370:	4313      	orrs	r3, r2
 8006372:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d10d      	bne.n	8006396 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6919      	ldr	r1, [r3, #16]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	460a      	mov	r2, r1
 8006394:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	791b      	ldrb	r3, [r3, #4]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d128      	bne.n	80063f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d110      	bne.n	80063d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e00f      	b.n	80063f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800640e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3720      	adds	r7, #32
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	1ff80000 	.word	0x1ff80000

08006420 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	f040 80ce 	bne.w	80065de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d132      	bne.n	80064b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800646c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	0cdb      	lsrs	r3, r3, #19
 80064aa:	04db      	lsls	r3, r3, #19
 80064ac:	6113      	str	r3, [r2, #16]
 80064ae:	e04e      	b.n	800654e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ca:	0cdb      	lsrs	r3, r3, #19
 80064cc:	04db      	lsls	r3, r3, #19
 80064ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	699a      	ldr	r2, [r3, #24]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d903      	bls.n	8006508 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653e:	6939      	ldr	r1, [r7, #16]
 8006540:	0148      	lsls	r0, r1, #5
 8006542:	6979      	ldr	r1, [r7, #20]
 8006544:	4401      	add	r1, r0
 8006546:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800654a:	4313      	orrs	r3, r2
 800654c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d11e      	bne.n	8006592 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e097      	b.n	80066c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8083 	beq.w	80066c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d8:	4313      	orrs	r3, r2
 80065da:	634b      	str	r3, [r1, #52]	; 0x34
 80065dc:	e071      	b.n	80066c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f8:	0cdb      	lsrs	r3, r3, #19
 80065fa:	04db      	lsls	r3, r3, #19
 80065fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800661c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006620:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	0148      	lsls	r0, r1, #5
 8006674:	6979      	ldr	r1, [r7, #20]
 8006676:	4401      	add	r1, r0
 8006678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800667c:	4313      	orrs	r3, r2
 800667e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10d      	bne.n	80066a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6919      	ldr	r1, [r3, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	460a      	mov	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d14a      	bne.n	8006784 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006706:	f040 8086 	bne.w	8006816 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800672c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006750:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f242 7210 	movw	r2, #10000	; 0x2710
 800675e:	4293      	cmp	r3, r2
 8006760:	d902      	bls.n	8006768 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
          break;
 8006766:	e056      	b.n	8006816 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006780:	d0e7      	beq.n	8006752 <USB_EPStopXfer+0x82>
 8006782:	e048      	b.n	8006816 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679c:	d13b      	bne.n	8006816 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d902      	bls.n	80067fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
          break;
 80067fa:	e00c      	b.n	8006816 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006814:	d0e7      	beq.n	80067e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006824:	b480      	push	{r7}
 8006826:	b089      	sub	sp, #36	; 0x24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4611      	mov	r1, r2
 8006830:	461a      	mov	r2, r3
 8006832:	460b      	mov	r3, r1
 8006834:	71fb      	strb	r3, [r7, #7]
 8006836:	4613      	mov	r3, r2
 8006838:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d123      	bne.n	8006892 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800684a:	88bb      	ldrh	r3, [r7, #4]
 800684c:	3303      	adds	r3, #3
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e018      	b.n	800688a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	031a      	lsls	r2, r3, #12
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006864:	461a      	mov	r2, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3301      	adds	r3, #1
 8006876:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	3301      	adds	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3301      	adds	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	3301      	adds	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d3e2      	bcc.n	8006858 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3724      	adds	r7, #36	; 0x24
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08b      	sub	sp, #44	; 0x2c
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068c6:	2300      	movs	r3, #0
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	e014      	b.n	80068f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	3301      	adds	r3, #1
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	3301      	adds	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	3301      	adds	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	3301      	adds	r3, #1
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	3301      	adds	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d3e6      	bcc.n	80068cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068fe:	8bfb      	ldrh	r3, [r7, #30]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01e      	beq.n	8006942 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690e:	461a      	mov	r2, r3
 8006910:	f107 0310 	add.w	r3, r7, #16
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	701a      	strb	r2, [r3, #0]
      i++;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	3301      	adds	r3, #1
 800692e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	3301      	adds	r3, #1
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006936:	8bfb      	ldrh	r3, [r7, #30]
 8006938:	3b01      	subs	r3, #1
 800693a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800693c:	8bfb      	ldrh	r3, [r7, #30]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1ea      	bne.n	8006918 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006944:	4618      	mov	r0, r3
 8006946:	372c      	adds	r7, #44	; 0x2c
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d12c      	bne.n	80069c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	db12      	blt.n	80069a4 <USB_EPSetStall+0x54>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e02b      	b.n	8006a1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db12      	blt.n	80069fe <USB_EPSetStall+0xae>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00f      	beq.n	80069fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d128      	bne.n	8006a9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d003      	beq.n	8006a78 <USB_EPClearStall+0x4c>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	791b      	ldrb	r3, [r3, #4]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d138      	bne.n	8006aea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e027      	b.n	8006aea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ab8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d003      	beq.n	8006aca <USB_EPClearStall+0x9e>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d10f      	bne.n	8006aea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b32:	4313      	orrs	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b72:	f023 0302 	bic.w	r3, r3, #2
 8006b76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ba0:	f023 0303 	bic.w	r3, r3, #3
 8006ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006be0:	68fb      	ldr	r3, [r7, #12]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	0c1b      	lsrs	r3, r3, #16
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4013      	ands	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	b29b      	uxth	r3, r3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c84:	68bb      	ldr	r3, [r7, #8]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	01db      	lsls	r3, r3, #7
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d28:	f023 0307 	bic.w	r3, r3, #7
 8006d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	333c      	adds	r3, #60	; 0x3c
 8006d66:	3304      	adds	r3, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <USB_EP0_OutStart+0xb8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d90a      	bls.n	8006d8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d84:	d101      	bne.n	8006d8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	e037      	b.n	8006dfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db8:	f043 0318 	orr.w	r3, r3, #24
 8006dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006dd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10f      	bne.n	8006df8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	461a      	mov	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	4f54300a 	.word	0x4f54300a

08006e0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <USB_CoreReset+0x64>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d901      	bls.n	8006e2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e01b      	b.n	8006e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	daf2      	bge.n	8006e18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f043 0201 	orr.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <USB_CoreReset+0x64>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d901      	bls.n	8006e54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e006      	b.n	8006e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d0f0      	beq.n	8006e42 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	00030d40 	.word	0x00030d40

08006e74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e84:	f002 fcc4 	bl	8009810 <USBD_static_malloc>
 8006e88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e0d4      	b.n	800704e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ea4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f002 fda4 	bl	80099f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	; 0xb0
 8006eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7c1b      	ldrb	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d138      	bne.n	8006f4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006edc:	4b5e      	ldr	r3, [pc, #376]	; (8007058 <USBD_CDC_Init+0x1e4>)
 8006ede:	7819      	ldrb	r1, [r3, #0]
 8006ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 fb6f 	bl	80095ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eec:	4b5a      	ldr	r3, [pc, #360]	; (8007058 <USBD_CDC_Init+0x1e4>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2201      	movs	r2, #1
 8006f04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f06:	4b55      	ldr	r3, [pc, #340]	; (800705c <USBD_CDC_Init+0x1e8>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f0e:	2202      	movs	r2, #2
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f002 fb5a 	bl	80095ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f16:	4b51      	ldr	r3, [pc, #324]	; (800705c <USBD_CDC_Init+0x1e8>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f2e:	2201      	movs	r2, #1
 8006f30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f32:	4b4b      	ldr	r3, [pc, #300]	; (8007060 <USBD_CDC_Init+0x1ec>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 020f 	and.w	r2, r3, #15
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	3326      	adds	r3, #38	; 0x26
 8006f48:	2210      	movs	r2, #16
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e035      	b.n	8006fba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f4e:	4b42      	ldr	r3, [pc, #264]	; (8007058 <USBD_CDC_Init+0x1e4>)
 8006f50:	7819      	ldrb	r1, [r3, #0]
 8006f52:	2340      	movs	r3, #64	; 0x40
 8006f54:	2202      	movs	r2, #2
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 fb37 	bl	80095ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f5c:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <USBD_CDC_Init+0x1e4>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 020f 	and.w	r2, r3, #15
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	2201      	movs	r2, #1
 8006f74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f76:	4b39      	ldr	r3, [pc, #228]	; (800705c <USBD_CDC_Init+0x1e8>)
 8006f78:	7819      	ldrb	r1, [r3, #0]
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 fb23 	bl	80095ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f84:	4b35      	ldr	r3, [pc, #212]	; (800705c <USBD_CDC_Init+0x1e8>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 020f 	and.w	r2, r3, #15
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fa0:	4b2f      	ldr	r3, [pc, #188]	; (8007060 <USBD_CDC_Init+0x1ec>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3326      	adds	r3, #38	; 0x26
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fba:	4b29      	ldr	r3, [pc, #164]	; (8007060 <USBD_CDC_Init+0x1ec>)
 8006fbc:	7819      	ldrb	r1, [r3, #0]
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f002 fb01 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <USBD_CDC_Init+0x1ec>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	3324      	adds	r3, #36	; 0x24
 8006fde:	2201      	movs	r2, #1
 8006fe0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	33b0      	adds	r3, #176	; 0xb0
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007018:	2302      	movs	r3, #2
 800701a:	e018      	b.n	800704e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7c1b      	ldrb	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <USBD_CDC_Init+0x1e8>)
 8007026:	7819      	ldrb	r1, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800702e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f002 fbb8 	bl	80097a8 <USBD_LL_PrepareReceive>
 8007038:	e008      	b.n	800704c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800703a:	4b08      	ldr	r3, [pc, #32]	; (800705c <USBD_CDC_Init+0x1e8>)
 800703c:	7819      	ldrb	r1, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007044:	2340      	movs	r3, #64	; 0x40
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fbae 	bl	80097a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200000a3 	.word	0x200000a3
 800705c:	200000a4 	.word	0x200000a4
 8007060:	200000a5 	.word	0x200000a5

08007064 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007070:	4b3a      	ldr	r3, [pc, #232]	; (800715c <USBD_CDC_DeInit+0xf8>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f002 facd 	bl	8009616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800707c:	4b37      	ldr	r3, [pc, #220]	; (800715c <USBD_CDC_DeInit+0xf8>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 020f 	and.w	r2, r3, #15
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	2200      	movs	r2, #0
 8007094:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007096:	4b32      	ldr	r3, [pc, #200]	; (8007160 <USBD_CDC_DeInit+0xfc>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f002 faba 	bl	8009616 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070a2:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <USBD_CDC_DeInit+0xfc>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 020f 	and.w	r2, r3, #15
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070ba:	2200      	movs	r2, #0
 80070bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070be:	4b29      	ldr	r3, [pc, #164]	; (8007164 <USBD_CDC_DeInit+0x100>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f002 faa6 	bl	8009616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <USBD_CDC_DeInit+0x100>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	2200      	movs	r2, #0
 80070e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070e4:	4b1f      	ldr	r3, [pc, #124]	; (8007164 <USBD_CDC_DeInit+0x100>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 020f 	and.w	r2, r3, #15
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	3326      	adds	r3, #38	; 0x26
 80070fa:	2200      	movs	r2, #0
 80070fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	32b0      	adds	r2, #176	; 0xb0
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01f      	beq.n	8007150 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	33b0      	adds	r3, #176	; 0xb0
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32b0      	adds	r2, #176	; 0xb0
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	4618      	mov	r0, r3
 8007134:	f002 fb7a 	bl	800982c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32b0      	adds	r2, #176	; 0xb0
 8007142:	2100      	movs	r1, #0
 8007144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	200000a3 	.word	0x200000a3
 8007160:	200000a4 	.word	0x200000a4
 8007164:	200000a5 	.word	0x200000a5

08007168 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	32b0      	adds	r2, #176	; 0xb0
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e0bf      	b.n	8007318 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d050      	beq.n	8007246 <USBD_CDC_Setup+0xde>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	f040 80af 	bne.w	8007308 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d03a      	beq.n	8007228 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da1b      	bge.n	80071f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	33b0      	adds	r3, #176	; 0xb0
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	88d2      	ldrh	r2, [r2, #6]
 80071d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	88db      	ldrh	r3, [r3, #6]
 80071de:	2b07      	cmp	r3, #7
 80071e0:	bf28      	it	cs
 80071e2:	2307      	movcs	r3, #7
 80071e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	89fa      	ldrh	r2, [r7, #14]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fd89 	bl	8008d04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071f2:	e090      	b.n	8007316 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785a      	ldrb	r2, [r3, #1]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	88db      	ldrh	r3, [r3, #6]
 8007202:	2b3f      	cmp	r3, #63	; 0x3f
 8007204:	d803      	bhi.n	800720e <USBD_CDC_Setup+0xa6>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	e000      	b.n	8007210 <USBD_CDC_Setup+0xa8>
 800720e:	2240      	movs	r2, #64	; 0x40
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800721e:	461a      	mov	r2, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fd9b 	bl	8008d5c <USBD_CtlPrepareRx>
      break;
 8007226:	e076      	b.n	8007316 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	33b0      	adds	r3, #176	; 0xb0
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	7850      	ldrb	r0, [r2, #1]
 800723e:	2200      	movs	r2, #0
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	4798      	blx	r3
      break;
 8007244:	e067      	b.n	8007316 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b0b      	cmp	r3, #11
 800724c:	d851      	bhi.n	80072f2 <USBD_CDC_Setup+0x18a>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_CDC_Setup+0xec>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007285 	.word	0x08007285
 8007258:	08007301 	.word	0x08007301
 800725c:	080072f3 	.word	0x080072f3
 8007260:	080072f3 	.word	0x080072f3
 8007264:	080072f3 	.word	0x080072f3
 8007268:	080072f3 	.word	0x080072f3
 800726c:	080072f3 	.word	0x080072f3
 8007270:	080072f3 	.word	0x080072f3
 8007274:	080072f3 	.word	0x080072f3
 8007278:	080072f3 	.word	0x080072f3
 800727c:	080072af 	.word	0x080072af
 8007280:	080072d9 	.word	0x080072d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b03      	cmp	r3, #3
 800728e:	d107      	bne.n	80072a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007290:	f107 030a 	add.w	r3, r7, #10
 8007294:	2202      	movs	r2, #2
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fd33 	bl	8008d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800729e:	e032      	b.n	8007306 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fcbd 	bl	8008c22 <USBD_CtlError>
            ret = USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	75fb      	strb	r3, [r7, #23]
          break;
 80072ac:	e02b      	b.n	8007306 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d107      	bne.n	80072ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072ba:	f107 030d 	add.w	r3, r7, #13
 80072be:	2201      	movs	r2, #1
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fd1e 	bl	8008d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072c8:	e01d      	b.n	8007306 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fca8 	bl	8008c22 <USBD_CtlError>
            ret = USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	75fb      	strb	r3, [r7, #23]
          break;
 80072d6:	e016      	b.n	8007306 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d00f      	beq.n	8007304 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fc9b 	bl	8008c22 <USBD_CtlError>
            ret = USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072f0:	e008      	b.n	8007304 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fc94 	bl	8008c22 <USBD_CtlError>
          ret = USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	75fb      	strb	r3, [r7, #23]
          break;
 80072fe:	e002      	b.n	8007306 <USBD_CDC_Setup+0x19e>
          break;
 8007300:	bf00      	nop
 8007302:	e008      	b.n	8007316 <USBD_CDC_Setup+0x1ae>
          break;
 8007304:	bf00      	nop
      }
      break;
 8007306:	e006      	b.n	8007316 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fc89 	bl	8008c22 <USBD_CtlError>
      ret = USBD_FAIL;
 8007310:	2303      	movs	r3, #3
 8007312:	75fb      	strb	r3, [r7, #23]
      break;
 8007314:	bf00      	nop
  }

  return (uint8_t)ret;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32b0      	adds	r2, #176	; 0xb0
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007346:	2303      	movs	r3, #3
 8007348:	e065      	b.n	8007416 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	32b0      	adds	r2, #176	; 0xb0
 8007354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007358:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3318      	adds	r3, #24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02f      	beq.n	80073d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	f003 020f 	and.w	r2, r3, #15
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	3318      	adds	r3, #24
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 010f 	and.w	r1, r3, #15
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	460b      	mov	r3, r1
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	440b      	add	r3, r1
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4403      	add	r3, r0
 800739c:	3348      	adds	r3, #72	; 0x48
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d112      	bne.n	80073d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3318      	adds	r3, #24
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073c6:	78f9      	ldrb	r1, [r7, #3]
 80073c8:	2300      	movs	r3, #0
 80073ca:	2200      	movs	r2, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 f9ca 	bl	8009766 <USBD_LL_Transmit>
 80073d2:	e01f      	b.n	8007414 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	33b0      	adds	r3, #176	; 0xb0
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	33b0      	adds	r3, #176	; 0xb0
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32b0      	adds	r2, #176	; 0xb0
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	32b0      	adds	r2, #176	; 0xb0
 8007444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e01a      	b.n	8007486 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 f9c8 	bl	80097ea <USBD_LL_GetRxDataSize>
 800745a:	4602      	mov	r2, r0
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	33b0      	adds	r3, #176	; 0xb0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007480:	4611      	mov	r1, r2
 8007482:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32b0      	adds	r2, #176	; 0xb0
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e025      	b.n	80074fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	33b0      	adds	r3, #176	; 0xb0
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01a      	beq.n	80074fa <USBD_CDC_EP0_RxReady+0x6c>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074ca:	2bff      	cmp	r3, #255	; 0xff
 80074cc:	d015      	beq.n	80074fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	33b0      	adds	r3, #176	; 0xb0
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ee:	b292      	uxth	r2, r2
 80074f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	22ff      	movs	r2, #255	; 0xff
 80074f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800750c:	2182      	movs	r1, #130	; 0x82
 800750e:	4818      	ldr	r0, [pc, #96]	; (8007570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007510:	f000 fd4f 	bl	8007fb2 <USBD_GetEpDesc>
 8007514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007516:	2101      	movs	r1, #1
 8007518:	4815      	ldr	r0, [pc, #84]	; (8007570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800751a:	f000 fd4a 	bl	8007fb2 <USBD_GetEpDesc>
 800751e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007520:	2181      	movs	r1, #129	; 0x81
 8007522:	4813      	ldr	r0, [pc, #76]	; (8007570 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007524:	f000 fd45 	bl	8007fb2 <USBD_GetEpDesc>
 8007528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2210      	movs	r2, #16
 8007534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2200      	movs	r2, #0
 8007540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007544:	711a      	strb	r2, [r3, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007558:	711a      	strb	r2, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2243      	movs	r2, #67	; 0x43
 8007562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000060 	.word	0x20000060

08007574 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800757c:	2182      	movs	r1, #130	; 0x82
 800757e:	4818      	ldr	r0, [pc, #96]	; (80075e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007580:	f000 fd17 	bl	8007fb2 <USBD_GetEpDesc>
 8007584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007586:	2101      	movs	r1, #1
 8007588:	4815      	ldr	r0, [pc, #84]	; (80075e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800758a:	f000 fd12 	bl	8007fb2 <USBD_GetEpDesc>
 800758e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007590:	2181      	movs	r1, #129	; 0x81
 8007592:	4813      	ldr	r0, [pc, #76]	; (80075e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007594:	f000 fd0d 	bl	8007fb2 <USBD_GetEpDesc>
 8007598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2210      	movs	r2, #16
 80075a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d006      	beq.n	80075ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2200      	movs	r2, #0
 80075b0:	711a      	strb	r2, [r3, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f042 0202 	orr.w	r2, r2, #2
 80075b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	711a      	strb	r2, [r3, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f042 0202 	orr.w	r2, r2, #2
 80075cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2243      	movs	r2, #67	; 0x43
 80075d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000060 	.word	0x20000060

080075e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075ec:	2182      	movs	r1, #130	; 0x82
 80075ee:	4818      	ldr	r0, [pc, #96]	; (8007650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075f0:	f000 fcdf 	bl	8007fb2 <USBD_GetEpDesc>
 80075f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075f6:	2101      	movs	r1, #1
 80075f8:	4815      	ldr	r0, [pc, #84]	; (8007650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075fa:	f000 fcda 	bl	8007fb2 <USBD_GetEpDesc>
 80075fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007600:	2181      	movs	r1, #129	; 0x81
 8007602:	4813      	ldr	r0, [pc, #76]	; (8007650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007604:	f000 fcd5 	bl	8007fb2 <USBD_GetEpDesc>
 8007608:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2210      	movs	r2, #16
 8007614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2200      	movs	r2, #0
 8007620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007624:	711a      	strb	r2, [r3, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007638:	711a      	strb	r2, [r3, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2243      	movs	r2, #67	; 0x43
 8007642:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000060 	.word	0x20000060

08007654 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	220a      	movs	r2, #10
 8007660:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007662:	4b03      	ldr	r3, [pc, #12]	; (8007670 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	2000001c 	.word	0x2000001c

08007674 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e009      	b.n	800769c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	33b0      	adds	r3, #176	; 0xb0
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	32b0      	adds	r2, #176	; 0xb0
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e008      	b.n	80076e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	32b0      	adds	r2, #176	; 0xb0
 8007700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007704:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e004      	b.n	800771a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32b0      	adds	r2, #176	; 0xb0
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	32b0      	adds	r2, #176	; 0xb0
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e025      	b.n	80077a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11f      	bne.n	80077a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800776c:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <USBD_CDC_TransmitPacket+0x88>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4403      	add	r3, r0
 8007786:	3318      	adds	r3, #24
 8007788:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <USBD_CDC_TransmitPacket+0x88>)
 800778c:	7819      	ldrb	r1, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 ffe3 	bl	8009766 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200000a3 	.word	0x200000a3

080077b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32b0      	adds	r2, #176	; 0xb0
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32b0      	adds	r2, #176	; 0xb0
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	e018      	b.n	8007814 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <USBD_CDC_ReceivePacket+0x68>)
 80077ec:	7819      	ldrb	r1, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 ffd5 	bl	80097a8 <USBD_LL_PrepareReceive>
 80077fe:	e008      	b.n	8007812 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <USBD_CDC_ReceivePacket+0x68>)
 8007802:	7819      	ldrb	r1, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 ffcb 	bl	80097a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200000a4 	.word	0x200000a4

08007820 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	e01f      	b.n	8007878 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	79fa      	ldrb	r2, [r7, #7]
 800786a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f001 fe45 	bl	80094fc <USBD_LL_Init>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	e025      	b.n	80078e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32ae      	adds	r2, #174	; 0xae
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00f      	beq.n	80078d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32ae      	adds	r2, #174	; 0xae
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	f107 020e 	add.w	r2, r7, #14
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	4602      	mov	r2, r0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fe4d 	bl	8009594 <USBD_LL_Start>
 80078fa:	4603      	mov	r3, r0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d009      	beq.n	8007948 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	4611      	mov	r1, r2
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	4611      	mov	r1, r2
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f908 	bl	8008bae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d01a      	beq.n	80079f8 <USBD_LL_SetupStage+0x72>
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d822      	bhi.n	8007a0c <USBD_LL_SetupStage+0x86>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <USBD_LL_SetupStage+0x4a>
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d00a      	beq.n	80079e4 <USBD_LL_SetupStage+0x5e>
 80079ce:	e01d      	b.n	8007a0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fb5f 	bl	800809c <USBD_StdDevReq>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
      break;
 80079e2:	e020      	b.n	8007a26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fbc7 	bl	8008180 <USBD_StdItfReq>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]
      break;
 80079f6:	e016      	b.n	8007a26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc29 	bl	8008258 <USBD_StdEPReq>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0a:	e00c      	b.n	8007a26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 fe1a 	bl	8009654 <USBD_LL_StallEP>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
      break;
 8007a24:	bf00      	nop
  }

  return ret;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d16e      	bne.n	8007b26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	f040 8098 	bne.w	8007b8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d913      	bls.n	8007a90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	1ad2      	subs	r2, r2, r3
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	bf28      	it	cs
 8007a82:	4613      	movcs	r3, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 f984 	bl	8008d96 <USBD_CtlContinueRx>
 8007a8e:	e07d      	b.n	8007b8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d014      	beq.n	8007ac8 <USBD_LL_DataOutStage+0x98>
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d81d      	bhi.n	8007ade <USBD_LL_DataOutStage+0xae>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <USBD_LL_DataOutStage+0x7c>
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d003      	beq.n	8007ab2 <USBD_LL_DataOutStage+0x82>
 8007aaa:	e018      	b.n	8007ade <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	75bb      	strb	r3, [r7, #22]
            break;
 8007ab0:	e018      	b.n	8007ae4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fa5e 	bl	8007f7e <USBD_CoreFindIF>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ac6:	e00d      	b.n	8007ae4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fa60 	bl	8007f98 <USBD_CoreFindEP>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75bb      	strb	r3, [r7, #22]
            break;
 8007adc:	e002      	b.n	8007ae4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ae2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ae4:	7dbb      	ldrb	r3, [r7, #22]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d119      	bne.n	8007b1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d113      	bne.n	8007b1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007af6:	7dba      	ldrb	r2, [r7, #22]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	32ae      	adds	r2, #174	; 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b06:	7dba      	ldrb	r2, [r7, #22]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b0e:	7dba      	ldrb	r2, [r7, #22]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	32ae      	adds	r2, #174	; 0xae
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 f94a 	bl	8008db8 <USBD_CtlSendStatus>
 8007b24:	e032      	b.n	8007b8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fa31 	bl	8007f98 <USBD_CoreFindEP>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b3a:	7dbb      	ldrb	r3, [r7, #22]
 8007b3c:	2bff      	cmp	r3, #255	; 0xff
 8007b3e:	d025      	beq.n	8007b8c <USBD_LL_DataOutStage+0x15c>
 8007b40:	7dbb      	ldrb	r3, [r7, #22]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d122      	bne.n	8007b8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d117      	bne.n	8007b82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b52:	7dba      	ldrb	r2, [r7, #22]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	32ae      	adds	r2, #174	; 0xae
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b62:	7dba      	ldrb	r2, [r7, #22]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b6a:	7dba      	ldrb	r2, [r7, #22]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	32ae      	adds	r2, #174	; 0xae
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	7afa      	ldrb	r2, [r7, #11]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	4798      	blx	r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	e000      	b.n	8007b8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d16f      	bne.n	8007c8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3314      	adds	r3, #20
 8007bae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d15a      	bne.n	8007c70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d914      	bls.n	8007bf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 f8ac 	bl	8008d3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007be2:	2300      	movs	r3, #0
 8007be4:	2200      	movs	r2, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 fddd 	bl	80097a8 <USBD_LL_PrepareReceive>
 8007bee:	e03f      	b.n	8007c70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d11c      	bne.n	8007c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d316      	bcc.n	8007c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d20f      	bcs.n	8007c36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2100      	movs	r1, #0
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f001 f88d 	bl	8008d3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 fdba 	bl	80097a8 <USBD_LL_PrepareReceive>
 8007c34:	e01c      	b.n	8007c70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d10f      	bne.n	8007c62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c62:	2180      	movs	r1, #128	; 0x80
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 fcf5 	bl	8009654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f001 f8b7 	bl	8008dde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d03a      	beq.n	8007cf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fe42 	bl	8007904 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c88:	e032      	b.n	8007cf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f97f 	bl	8007f98 <USBD_CoreFindEP>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2bff      	cmp	r3, #255	; 0xff
 8007ca2:	d025      	beq.n	8007cf0 <USBD_LL_DataInStage+0x15a>
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d122      	bne.n	8007cf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d11c      	bne.n	8007cf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cb6:	7dfa      	ldrb	r2, [r7, #23]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	32ae      	adds	r2, #174	; 0xae
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d014      	beq.n	8007cf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cc6:	7dfa      	ldrb	r2, [r7, #23]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cce:	7dfa      	ldrb	r2, [r7, #23]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	32ae      	adds	r2, #174	; 0xae
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	7afa      	ldrb	r2, [r7, #11]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
 8007cee:	e000      	b.n	8007cf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d014      	beq.n	8007d60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00e      	beq.n	8007d60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6852      	ldr	r2, [r2, #4]
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	4611      	mov	r1, r2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fc2f 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2240      	movs	r2, #64	; 0x40
 8007d78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2180      	movs	r1, #128	; 0x80
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fc21 	bl	80095ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2240      	movs	r2, #64	; 0x40
 8007d92:	621a      	str	r2, [r3, #32]

  return ret;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d106      	bne.n	8007e0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d110      	bne.n	8007e50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	32ae      	adds	r2, #174	; 0xae
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e01c      	b.n	8007eb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d115      	bne.n	8007eb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	32ae      	adds	r2, #174	; 0xae
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	32ae      	adds	r2, #174	; 0xae
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e01c      	b.n	8007f1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d115      	bne.n	8007f18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	32ae      	adds	r2, #174	; 0xae
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32ae      	adds	r2, #174	; 0xae
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6852      	ldr	r2, [r2, #4]
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	4611      	mov	r1, r2
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b086      	sub	sp, #24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d920      	bls.n	800801c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fe2:	e013      	b.n	800800c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fe4:	f107 030a 	add.w	r3, r7, #10
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6978      	ldr	r0, [r7, #20]
 8007fec:	f000 f81b 	bl	8008026 <USBD_GetNextDesc>
 8007ff0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	d108      	bne.n	800800c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	789b      	ldrb	r3, [r3, #2]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	429a      	cmp	r2, r3
 8008006:	d008      	beq.n	800801a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	b29a      	uxth	r2, r3
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	429a      	cmp	r2, r3
 8008016:	d8e5      	bhi.n	8007fe4 <USBD_GetEpDesc+0x32>
 8008018:	e000      	b.n	800801c <USBD_GetEpDesc+0x6a>
          break;
 800801a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800801c:	693b      	ldr	r3, [r7, #16]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	881a      	ldrh	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	4413      	add	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008052:	68fb      	ldr	r3, [r7, #12]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3301      	adds	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800807e:	8a3b      	ldrh	r3, [r7, #16]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b21a      	sxth	r2, r3
 8008084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008088:	4313      	orrs	r3, r2
 800808a:	b21b      	sxth	r3, r3
 800808c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800808e:	89fb      	ldrh	r3, [r7, #14]
}
 8008090:	4618      	mov	r0, r3
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d005      	beq.n	80080c2 <USBD_StdDevReq+0x26>
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d857      	bhi.n	800816a <USBD_StdDevReq+0xce>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00f      	beq.n	80080de <USBD_StdDevReq+0x42>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d153      	bne.n	800816a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	32ae      	adds	r2, #174	; 0xae
 80080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
      break;
 80080dc:	e04a      	b.n	8008174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b09      	cmp	r3, #9
 80080e4:	d83b      	bhi.n	800815e <USBD_StdDevReq+0xc2>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <USBD_StdDevReq+0x50>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008141 	.word	0x08008141
 80080f0:	08008155 	.word	0x08008155
 80080f4:	0800815f 	.word	0x0800815f
 80080f8:	0800814b 	.word	0x0800814b
 80080fc:	0800815f 	.word	0x0800815f
 8008100:	0800811f 	.word	0x0800811f
 8008104:	08008115 	.word	0x08008115
 8008108:	0800815f 	.word	0x0800815f
 800810c:	08008137 	.word	0x08008137
 8008110:	08008129 	.word	0x08008129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa3c 	bl	8008594 <USBD_GetDescriptor>
          break;
 800811c:	e024      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fba1 	bl	8008868 <USBD_SetAddress>
          break;
 8008126:	e01f      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fbe0 	bl	80088f0 <USBD_SetConfig>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
          break;
 8008134:	e018      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc83 	bl	8008a44 <USBD_GetConfig>
          break;
 800813e:	e013      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fcb4 	bl	8008ab0 <USBD_GetStatus>
          break;
 8008148:	e00e      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fce3 	bl	8008b18 <USBD_SetFeature>
          break;
 8008152:	e009      	b.n	8008168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fd07 	bl	8008b6a <USBD_ClrFeature>
          break;
 800815c:	e004      	b.n	8008168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fd5e 	bl	8008c22 <USBD_CtlError>
          break;
 8008166:	bf00      	nop
      }
      break;
 8008168:	e004      	b.n	8008174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fd58 	bl	8008c22 <USBD_CtlError>
      break;
 8008172:	bf00      	nop
  }

  return ret;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop

08008180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008196:	2b40      	cmp	r3, #64	; 0x40
 8008198:	d005      	beq.n	80081a6 <USBD_StdItfReq+0x26>
 800819a:	2b40      	cmp	r3, #64	; 0x40
 800819c:	d852      	bhi.n	8008244 <USBD_StdItfReq+0xc4>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <USBD_StdItfReq+0x26>
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d14e      	bne.n	8008244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d840      	bhi.n	8008236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	889b      	ldrh	r3, [r3, #4]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d836      	bhi.n	800822c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff fed9 	bl	8007f7e <USBD_CoreFindIF>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2bff      	cmp	r3, #255	; 0xff
 80081d4:	d01d      	beq.n	8008212 <USBD_StdItfReq+0x92>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d11a      	bne.n	8008212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081dc:	7bba      	ldrb	r2, [r7, #14]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	; 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00f      	beq.n	800820c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081ec:	7bba      	ldrb	r2, [r7, #14]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081f4:	7bba      	ldrb	r2, [r7, #14]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32ae      	adds	r2, #174	; 0xae
 80081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800820a:	e004      	b.n	8008216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008210:	e001      	b.n	8008216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d110      	bne.n	8008240 <USBD_StdItfReq+0xc0>
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10d      	bne.n	8008240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fdc7 	bl	8008db8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800822a:	e009      	b.n	8008240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fcf7 	bl	8008c22 <USBD_CtlError>
          break;
 8008234:	e004      	b.n	8008240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fcf2 	bl	8008c22 <USBD_CtlError>
          break;
 800823e:	e000      	b.n	8008242 <USBD_StdItfReq+0xc2>
          break;
 8008240:	bf00      	nop
      }
      break;
 8008242:	e004      	b.n	800824e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fceb 	bl	8008c22 <USBD_CtlError>
      break;
 800824c:	bf00      	nop
  }

  return ret;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	889b      	ldrh	r3, [r3, #4]
 800826a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d007      	beq.n	8008288 <USBD_StdEPReq+0x30>
 8008278:	2b40      	cmp	r3, #64	; 0x40
 800827a:	f200 817f 	bhi.w	800857c <USBD_StdEPReq+0x324>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d02a      	beq.n	80082d8 <USBD_StdEPReq+0x80>
 8008282:	2b20      	cmp	r3, #32
 8008284:	f040 817a 	bne.w	800857c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fe83 	bl	8007f98 <USBD_CoreFindEP>
 8008292:	4603      	mov	r3, r0
 8008294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	2bff      	cmp	r3, #255	; 0xff
 800829a:	f000 8174 	beq.w	8008586 <USBD_StdEPReq+0x32e>
 800829e:	7b7b      	ldrb	r3, [r7, #13]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f040 8170 	bne.w	8008586 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082a6:	7b7a      	ldrb	r2, [r7, #13]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082ae:	7b7a      	ldrb	r2, [r7, #13]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	32ae      	adds	r2, #174	; 0xae
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8163 	beq.w	8008586 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082c0:	7b7a      	ldrb	r2, [r7, #13]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	32ae      	adds	r2, #174	; 0xae
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082d6:	e156      	b.n	8008586 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d008      	beq.n	80082f2 <USBD_StdEPReq+0x9a>
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	f300 8145 	bgt.w	8008570 <USBD_StdEPReq+0x318>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 809b 	beq.w	8008422 <USBD_StdEPReq+0x1ca>
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d03c      	beq.n	800836a <USBD_StdEPReq+0x112>
 80082f0:	e13e      	b.n	8008570 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d002      	beq.n	8008304 <USBD_StdEPReq+0xac>
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d016      	beq.n	8008330 <USBD_StdEPReq+0xd8>
 8008302:	e02c      	b.n	800835e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <USBD_StdEPReq+0xce>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b80      	cmp	r3, #128	; 0x80
 800830e:	d00a      	beq.n	8008326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f99d 	bl	8009654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800831a:	2180      	movs	r1, #128	; 0x80
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f999 	bl	8009654 <USBD_LL_StallEP>
 8008322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008324:	e020      	b.n	8008368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc7a 	bl	8008c22 <USBD_CtlError>
              break;
 800832e:	e01b      	b.n	8008368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	885b      	ldrh	r3, [r3, #2]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10e      	bne.n	8008356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <USBD_StdEPReq+0xfe>
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b80      	cmp	r3, #128	; 0x80
 8008342:	d008      	beq.n	8008356 <USBD_StdEPReq+0xfe>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	88db      	ldrh	r3, [r3, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f97f 	bl	8009654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fd2e 	bl	8008db8 <USBD_CtlSendStatus>

              break;
 800835c:	e004      	b.n	8008368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc5e 	bl	8008c22 <USBD_CtlError>
              break;
 8008366:	bf00      	nop
          }
          break;
 8008368:	e107      	b.n	800857a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d002      	beq.n	800837c <USBD_StdEPReq+0x124>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d016      	beq.n	80083a8 <USBD_StdEPReq+0x150>
 800837a:	e04b      	b.n	8008414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <USBD_StdEPReq+0x146>
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b80      	cmp	r3, #128	; 0x80
 8008386:	d00a      	beq.n	800839e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 f961 	bl	8009654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008392:	2180      	movs	r1, #128	; 0x80
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f95d 	bl	8009654 <USBD_LL_StallEP>
 800839a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800839c:	e040      	b.n	8008420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc3e 	bl	8008c22 <USBD_CtlError>
              break;
 80083a6:	e03b      	b.n	8008420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	885b      	ldrh	r3, [r3, #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d136      	bne.n	800841e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 f967 	bl	8009692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fcf7 	bl	8008db8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fde2 	bl	8007f98 <USBD_CoreFindEP>
 80083d4:	4603      	mov	r3, r0
 80083d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083d8:	7b7b      	ldrb	r3, [r7, #13]
 80083da:	2bff      	cmp	r3, #255	; 0xff
 80083dc:	d01f      	beq.n	800841e <USBD_StdEPReq+0x1c6>
 80083de:	7b7b      	ldrb	r3, [r7, #13]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11c      	bne.n	800841e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083e4:	7b7a      	ldrb	r2, [r7, #13]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083ec:	7b7a      	ldrb	r2, [r7, #13]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	; 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d010      	beq.n	800841e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083fc:	7b7a      	ldrb	r2, [r7, #13]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32ae      	adds	r2, #174	; 0xae
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	4798      	blx	r3
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008412:	e004      	b.n	800841e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fc03 	bl	8008c22 <USBD_CtlError>
              break;
 800841c:	e000      	b.n	8008420 <USBD_StdEPReq+0x1c8>
              break;
 800841e:	bf00      	nop
          }
          break;
 8008420:	e0ab      	b.n	800857a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d002      	beq.n	8008434 <USBD_StdEPReq+0x1dc>
 800842e:	2b03      	cmp	r3, #3
 8008430:	d032      	beq.n	8008498 <USBD_StdEPReq+0x240>
 8008432:	e097      	b.n	8008564 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <USBD_StdEPReq+0x1f2>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d004      	beq.n	800844a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fbed 	bl	8008c22 <USBD_CtlError>
                break;
 8008448:	e091      	b.n	800856e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800844e:	2b00      	cmp	r3, #0
 8008450:	da0b      	bge.n	800846a <USBD_StdEPReq+0x212>
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	3310      	adds	r3, #16
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	3304      	adds	r3, #4
 8008468:	e00b      	b.n	8008482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	4413      	add	r3, r2
 8008480:	3304      	adds	r3, #4
 8008482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2202      	movs	r2, #2
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc37 	bl	8008d04 <USBD_CtlSendData>
              break;
 8008496:	e06a      	b.n	800856e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800849c:	2b00      	cmp	r3, #0
 800849e:	da11      	bge.n	80084c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	f003 020f 	and.w	r2, r3, #15
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3324      	adds	r3, #36	; 0x24
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d117      	bne.n	80084ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbb0 	bl	8008c22 <USBD_CtlError>
                  break;
 80084c2:	e054      	b.n	800856e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	f003 020f 	and.w	r2, r3, #15
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d104      	bne.n	80084ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb9d 	bl	8008c22 <USBD_CtlError>
                  break;
 80084e8:	e041      	b.n	800856e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da0b      	bge.n	800850a <USBD_StdEPReq+0x2b2>
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	3310      	adds	r3, #16
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	3304      	adds	r3, #4
 8008508:	e00b      	b.n	8008522 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008510:	4613      	mov	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	4413      	add	r3, r2
 8008520:	3304      	adds	r3, #4
 8008522:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <USBD_StdEPReq+0x2d8>
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b80      	cmp	r3, #128	; 0x80
 800852e:	d103      	bne.n	8008538 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e00e      	b.n	8008556 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f8c7 	bl	80096d0 <USBD_LL_IsStallEP>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e002      	b.n	8008556 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2202      	movs	r2, #2
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fbd1 	bl	8008d04 <USBD_CtlSendData>
              break;
 8008562:	e004      	b.n	800856e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fb5b 	bl	8008c22 <USBD_CtlError>
              break;
 800856c:	bf00      	nop
          }
          break;
 800856e:	e004      	b.n	800857a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fb55 	bl	8008c22 <USBD_CtlError>
          break;
 8008578:	bf00      	nop
      }
      break;
 800857a:	e005      	b.n	8008588 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fb4f 	bl	8008c22 <USBD_CtlError>
      break;
 8008584:	e000      	b.n	8008588 <USBD_StdEPReq+0x330>
      break;
 8008586:	bf00      	nop
  }

  return ret;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b06      	cmp	r3, #6
 80085b6:	f200 8128 	bhi.w	800880a <USBD_GetDescriptor+0x276>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_GetDescriptor+0x2c>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085dd 	.word	0x080085dd
 80085c4:	080085f5 	.word	0x080085f5
 80085c8:	08008635 	.word	0x08008635
 80085cc:	0800880b 	.word	0x0800880b
 80085d0:	0800880b 	.word	0x0800880b
 80085d4:	080087ab 	.word	0x080087ab
 80085d8:	080087d7 	.word	0x080087d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7c12      	ldrb	r2, [r2, #16]
 80085e8:	f107 0108 	add.w	r1, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
      break;
 80085f2:	e112      	b.n	800881a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7c1b      	ldrb	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10d      	bne.n	8008618 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f107 0208 	add.w	r2, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3301      	adds	r3, #1
 8008612:	2202      	movs	r2, #2
 8008614:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008616:	e100      	b.n	800881a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	f107 0208 	add.w	r2, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	2202      	movs	r2, #2
 8008630:	701a      	strb	r2, [r3, #0]
      break;
 8008632:	e0f2      	b.n	800881a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	885b      	ldrh	r3, [r3, #2]
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b05      	cmp	r3, #5
 800863c:	f200 80ac 	bhi.w	8008798 <USBD_GetDescriptor+0x204>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <USBD_GetDescriptor+0xb4>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	08008661 	.word	0x08008661
 800864c:	08008695 	.word	0x08008695
 8008650:	080086c9 	.word	0x080086c9
 8008654:	080086fd 	.word	0x080086fd
 8008658:	08008731 	.word	0x08008731
 800865c:	08008765 	.word	0x08008765
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	7c12      	ldrb	r2, [r2, #16]
 8008678:	f107 0108 	add.w	r1, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008682:	e091      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 facb 	bl	8008c22 <USBD_CtlError>
            err++;
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	3301      	adds	r3, #1
 8008690:	72fb      	strb	r3, [r7, #11]
          break;
 8008692:	e089      	b.n	80087a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7c12      	ldrb	r2, [r2, #16]
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b6:	e077      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fab1 	bl	8008c22 <USBD_CtlError>
            err++;
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	3301      	adds	r3, #1
 80086c4:	72fb      	strb	r3, [r7, #11]
          break;
 80086c6:	e06f      	b.n	80087a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	7c12      	ldrb	r2, [r2, #16]
 80086e0:	f107 0108 	add.w	r1, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ea:	e05d      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa97 	bl	8008c22 <USBD_CtlError>
            err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
          break;
 80086fa:	e055      	b.n	80087a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7c12      	ldrb	r2, [r2, #16]
 8008714:	f107 0108 	add.w	r1, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800871e:	e043      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa7d 	bl	8008c22 <USBD_CtlError>
            err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
          break;
 800872e:	e03b      	b.n	80087a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7c12      	ldrb	r2, [r2, #16]
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
 8008750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008752:	e029      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa63 	bl	8008c22 <USBD_CtlError>
            err++;
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	3301      	adds	r3, #1
 8008760:	72fb      	strb	r3, [r7, #11]
          break;
 8008762:	e021      	b.n	80087a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	7c12      	ldrb	r2, [r2, #16]
 800877c:	f107 0108 	add.w	r1, r7, #8
 8008780:	4610      	mov	r0, r2
 8008782:	4798      	blx	r3
 8008784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008786:	e00f      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa49 	bl	8008c22 <USBD_CtlError>
            err++;
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	3301      	adds	r3, #1
 8008794:	72fb      	strb	r3, [r7, #11]
          break;
 8008796:	e007      	b.n	80087a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa41 	bl	8008c22 <USBD_CtlError>
          err++;
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	3301      	adds	r3, #1
 80087a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087a6:	bf00      	nop
      }
      break;
 80087a8:	e037      	b.n	800881a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7c1b      	ldrb	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	f107 0208 	add.w	r2, r7, #8
 80087be:	4610      	mov	r0, r2
 80087c0:	4798      	blx	r3
 80087c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c4:	e029      	b.n	800881a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa2a 	bl	8008c22 <USBD_CtlError>
        err++;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	3301      	adds	r3, #1
 80087d2:	72fb      	strb	r3, [r7, #11]
      break;
 80087d4:	e021      	b.n	800881a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7c1b      	ldrb	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10d      	bne.n	80087fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f107 0208 	add.w	r2, r7, #8
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
 80087f4:	2207      	movs	r2, #7
 80087f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087f8:	e00f      	b.n	800881a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fa10 	bl	8008c22 <USBD_CtlError>
        err++;
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	3301      	adds	r3, #1
 8008806:	72fb      	strb	r3, [r7, #11]
      break;
 8008808:	e007      	b.n	800881a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa08 	bl	8008c22 <USBD_CtlError>
      err++;
 8008812:	7afb      	ldrb	r3, [r7, #11]
 8008814:	3301      	adds	r3, #1
 8008816:	72fb      	strb	r3, [r7, #11]
      break;
 8008818:	bf00      	nop
  }

  if (err != 0U)
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11e      	bne.n	800885e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	88db      	ldrh	r3, [r3, #6]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d016      	beq.n	8008856 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008828:	893b      	ldrh	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00e      	beq.n	800884c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	88da      	ldrh	r2, [r3, #6]
 8008832:	893b      	ldrh	r3, [r7, #8]
 8008834:	4293      	cmp	r3, r2
 8008836:	bf28      	it	cs
 8008838:	4613      	movcs	r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800883e:	893b      	ldrh	r3, [r7, #8]
 8008840:	461a      	mov	r2, r3
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa5d 	bl	8008d04 <USBD_CtlSendData>
 800884a:	e009      	b.n	8008860 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9e7 	bl	8008c22 <USBD_CtlError>
 8008854:	e004      	b.n	8008860 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 faae 	bl	8008db8 <USBD_CtlSendStatus>
 800885c:	e000      	b.n	8008860 <USBD_GetDescriptor+0x2cc>
    return;
 800885e:	bf00      	nop
  }
}
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop

08008868 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	889b      	ldrh	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d131      	bne.n	80088de <USBD_SetAddress+0x76>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d12d      	bne.n	80088de <USBD_SetAddress+0x76>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	885b      	ldrh	r3, [r3, #2]
 8008886:	2b7f      	cmp	r3, #127	; 0x7f
 8008888:	d829      	bhi.n	80088de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d104      	bne.n	80088ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9bc 	bl	8008c22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088aa:	e01d      	b.n	80088e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7bfa      	ldrb	r2, [r7, #15]
 80088b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 ff35 	bl	8009728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa7a 	bl	8008db8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d2:	e009      	b.n	80088e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088dc:	e004      	b.n	80088e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f99e 	bl	8008c22 <USBD_CtlError>
  }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	4b4e      	ldr	r3, [pc, #312]	; (8008a40 <USBD_SetConfig+0x150>)
 8008906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008908:	4b4d      	ldr	r3, [pc, #308]	; (8008a40 <USBD_SetConfig+0x150>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d905      	bls.n	800891c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f985 	bl	8008c22 <USBD_CtlError>
    return USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	e08c      	b.n	8008a36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d002      	beq.n	800892e <USBD_SetConfig+0x3e>
 8008928:	2b03      	cmp	r3, #3
 800892a:	d029      	beq.n	8008980 <USBD_SetConfig+0x90>
 800892c:	e075      	b.n	8008a1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800892e:	4b44      	ldr	r3, [pc, #272]	; (8008a40 <USBD_SetConfig+0x150>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008936:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008940:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <USBD_SetConfig+0x150>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fe ffe7 	bl	800791a <USBD_SetClassConfig>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d008      	beq.n	8008968 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f962 	bl	8008c22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008966:	e065      	b.n	8008a34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa25 	bl	8008db8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2203      	movs	r2, #3
 8008972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008976:	e05d      	b.n	8008a34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fa1d 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 800897e:	e059      	b.n	8008a34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008980:	4b2f      	ldr	r3, [pc, #188]	; (8008a40 <USBD_SetConfig+0x150>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d112      	bne.n	80089ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <USBD_SetConfig+0x150>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800899a:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <USBD_SetConfig+0x150>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe ffd6 	bl	8007952 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa06 	bl	8008db8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089ac:	e042      	b.n	8008a34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089ae:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <USBD_SetConfig+0x150>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d02a      	beq.n	8008a12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fe ffc4 	bl	8007952 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089ca:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <USBD_SetConfig+0x150>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <USBD_SetConfig+0x150>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fe ff9d 	bl	800791a <USBD_SetClassConfig>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00f      	beq.n	8008a0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f918 	bl	8008c22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fe ffa9 	bl	8007952 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a08:	e014      	b.n	8008a34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9d4 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 8008a10:	e010      	b.n	8008a34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9d0 	bl	8008db8 <USBD_CtlSendStatus>
      break;
 8008a18:	e00c      	b.n	8008a34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f900 	bl	8008c22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <USBD_SetConfig+0x150>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7fe ff92 	bl	8007952 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	73fb      	strb	r3, [r7, #15]
      break;
 8008a32:	bf00      	nop
  }

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000284 	.word	0x20000284

08008a44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d004      	beq.n	8008a60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8e2 	bl	8008c22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a5e:	e023      	b.n	8008aa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	dc02      	bgt.n	8008a72 <USBD_GetConfig+0x2e>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dc03      	bgt.n	8008a78 <USBD_GetConfig+0x34>
 8008a70:	e015      	b.n	8008a9e <USBD_GetConfig+0x5a>
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d00b      	beq.n	8008a8e <USBD_GetConfig+0x4a>
 8008a76:	e012      	b.n	8008a9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3308      	adds	r3, #8
 8008a82:	2201      	movs	r2, #1
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f93c 	bl	8008d04 <USBD_CtlSendData>
        break;
 8008a8c:	e00c      	b.n	8008aa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3304      	adds	r3, #4
 8008a92:	2201      	movs	r2, #1
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f934 	bl	8008d04 <USBD_CtlSendData>
        break;
 8008a9c:	e004      	b.n	8008aa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f8be 	bl	8008c22 <USBD_CtlError>
        break;
 8008aa6:	bf00      	nop
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d81e      	bhi.n	8008b06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	88db      	ldrh	r3, [r3, #6]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d004      	beq.n	8008ada <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8a5 	bl	8008c22 <USBD_CtlError>
        break;
 8008ad8:	e01a      	b.n	8008b10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f043 0202 	orr.w	r2, r3, #2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	330c      	adds	r3, #12
 8008afa:	2202      	movs	r2, #2
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f900 	bl	8008d04 <USBD_CtlSendData>
      break;
 8008b04:	e004      	b.n	8008b10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f88a 	bl	8008c22 <USBD_CtlError>
      break;
 8008b0e:	bf00      	nop
  }
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d107      	bne.n	8008b3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f940 	bl	8008db8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b38:	e013      	b.n	8008b62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d10b      	bne.n	8008b5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	889b      	ldrh	r3, [r3, #4]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f930 	bl	8008db8 <USBD_CtlSendStatus>
}
 8008b58:	e003      	b.n	8008b62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f860 	bl	8008c22 <USBD_CtlError>
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d80b      	bhi.n	8008b9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d10c      	bne.n	8008ba4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f910 	bl	8008db8 <USBD_CtlSendStatus>
      }
      break;
 8008b98:	e004      	b.n	8008ba4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f840 	bl	8008c22 <USBD_CtlError>
      break;
 8008ba2:	e000      	b.n	8008ba6 <USBD_ClrFeature+0x3c>
      break;
 8008ba4:	bf00      	nop
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	781a      	ldrb	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	781a      	ldrb	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff fa41 	bl	8008060 <SWAPBYTE>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fa34 	bl	8008060 <SWAPBYTE>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7ff fa27 	bl	8008060 <SWAPBYTE>
 8008c12:	4603      	mov	r3, r0
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	80da      	strh	r2, [r3, #6]
}
 8008c1a:	bf00      	nop
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fd10 	bl	8009654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c34:	2100      	movs	r1, #0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fd0c 	bl	8009654 <USBD_LL_StallEP>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d036      	beq.n	8008cc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c5e:	6938      	ldr	r0, [r7, #16]
 8008c60:	f000 f836 	bl	8008cd0 <USBD_GetLen>
 8008c64:	4603      	mov	r3, r0
 8008c66:	3301      	adds	r3, #1
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4413      	add	r3, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	3301      	adds	r3, #1
 8008c82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	4413      	add	r3, r2
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	3301      	adds	r3, #1
 8008c92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c94:	e013      	b.n	8008cbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	613b      	str	r3, [r7, #16]
    idx++;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	3301      	adds	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e7      	bne.n	8008c96 <USBD_GetString+0x52>
 8008cc6:	e000      	b.n	8008cca <USBD_GetString+0x86>
    return;
 8008cc8:	bf00      	nop
  }
}
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ce0:	e005      	b.n	8008cee <USBD_GetLen+0x1e>
  {
    len++;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f5      	bne.n	8008ce2 <USBD_GetLen+0x12>
  }

  return len;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fd1b 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fd0a 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	2100      	movs	r1, #0
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fd0e 	bl	80097a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	2100      	movs	r1, #0
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fcfd 	bl	80097a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcc9 	bl	8009766 <USBD_LL_Transmit>

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2205      	movs	r2, #5
 8008dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dee:	2300      	movs	r3, #0
 8008df0:	2200      	movs	r2, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fcd7 	bl	80097a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4912      	ldr	r1, [pc, #72]	; (8008e54 <MX_USB_DEVICE_Init+0x50>)
 8008e0c:	4812      	ldr	r0, [pc, #72]	; (8008e58 <MX_USB_DEVICE_Init+0x54>)
 8008e0e:	f7fe fd07 	bl	8007820 <USBD_Init>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e18:	f7f8 f840 	bl	8000e9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e1c:	490f      	ldr	r1, [pc, #60]	; (8008e5c <MX_USB_DEVICE_Init+0x58>)
 8008e1e:	480e      	ldr	r0, [pc, #56]	; (8008e58 <MX_USB_DEVICE_Init+0x54>)
 8008e20:	f7fe fd2e 	bl	8007880 <USBD_RegisterClass>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e2a:	f7f8 f837 	bl	8000e9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e2e:	490c      	ldr	r1, [pc, #48]	; (8008e60 <MX_USB_DEVICE_Init+0x5c>)
 8008e30:	4809      	ldr	r0, [pc, #36]	; (8008e58 <MX_USB_DEVICE_Init+0x54>)
 8008e32:	f7fe fc1f 	bl	8007674 <USBD_CDC_RegisterInterface>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e3c:	f7f8 f82e 	bl	8000e9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e40:	4805      	ldr	r0, [pc, #20]	; (8008e58 <MX_USB_DEVICE_Init+0x54>)
 8008e42:	f7fe fd53 	bl	80078ec <USBD_Start>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e4c:	f7f8 f826 	bl	8000e9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e50:	bf00      	nop
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	200000bc 	.word	0x200000bc
 8008e58:	20000288 	.word	0x20000288
 8008e5c:	20000028 	.word	0x20000028
 8008e60:	200000a8 	.word	0x200000a8

08008e64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4905      	ldr	r1, [pc, #20]	; (8008e80 <CDC_Init_FS+0x1c>)
 8008e6c:	4805      	ldr	r0, [pc, #20]	; (8008e84 <CDC_Init_FS+0x20>)
 8008e6e:	f7fe fc1b 	bl	80076a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e72:	4905      	ldr	r1, [pc, #20]	; (8008e88 <CDC_Init_FS+0x24>)
 8008e74:	4803      	ldr	r0, [pc, #12]	; (8008e84 <CDC_Init_FS+0x20>)
 8008e76:	f7fe fc39 	bl	80076ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000d64 	.word	0x20000d64
 8008e84:	20000288 	.word	0x20000288
 8008e88:	20000564 	.word	0x20000564

08008e8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b23      	cmp	r3, #35	; 0x23
 8008eb0:	d84a      	bhi.n	8008f48 <CDC_Control_FS+0xac>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <CDC_Control_FS+0x1c>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f49 	.word	0x08008f49
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f49 	.word	0x08008f49
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f49 	.word	0x08008f49
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f49 	.word	0x08008f49
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f49 	.word	0x08008f49
 8008f34:	08008f49 	.word	0x08008f49
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f49 	.word	0x08008f49
 8008f40:	08008f49 	.word	0x08008f49
 8008f44:	08008f49 	.word	0x08008f49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f48:	bf00      	nop
  }

  return (USBD_OK);
 8008f4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4813      	ldr	r0, [pc, #76]	; (8008fb4 <CDC_Receive_FS+0x5c>)
 8008f66:	f7fe fbc1 	bl	80076ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f6a:	4812      	ldr	r0, [pc, #72]	; (8008fb4 <CDC_Receive_FS+0x5c>)
 8008f6c:	f7fe fc22 	bl	80077b4 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f81f 	bl	8008fbc <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b31      	cmp	r3, #49	; 0x31
 8008f84:	d106      	bne.n	8008f94 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008f86:	2201      	movs	r2, #1
 8008f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f8c:	480a      	ldr	r0, [pc, #40]	; (8008fb8 <CDC_Receive_FS+0x60>)
 8008f8e:	f7f9 fb3f 	bl	8002610 <HAL_GPIO_WritePin>
 8008f92:	e009      	b.n	8008fa8 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b30      	cmp	r3, #48	; 0x30
 8008f9a:	d105      	bne.n	8008fa8 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <CDC_Receive_FS+0x60>)
 8008fa4:	f7f9 fb34 	bl	8002610 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008fa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000288 	.word	0x20000288
 8008fb8:	40020c00 	.word	0x40020c00

08008fbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <CDC_Transmit_FS+0x48>)
 8008fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e00b      	b.n	8008ffa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fe2:	887b      	ldrh	r3, [r7, #2]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	4806      	ldr	r0, [pc, #24]	; (8009004 <CDC_Transmit_FS+0x48>)
 8008fea:	f7fe fb5d 	bl	80076a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fee:	4805      	ldr	r0, [pc, #20]	; (8009004 <CDC_Transmit_FS+0x48>)
 8008ff0:	f7fe fb9a 	bl	8007728 <USBD_CDC_TransmitPacket>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000288 	.word	0x20000288

08009008 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	4613      	mov	r3, r2
 8009014:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800901a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800901e:	4618      	mov	r0, r3
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
	...

0800902c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2212      	movs	r2, #18
 800903c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800903e:	4b03      	ldr	r3, [pc, #12]	; (800904c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	200000d8 	.word	0x200000d8

08009050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2204      	movs	r2, #4
 8009060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009062:	4b03      	ldr	r3, [pc, #12]	; (8009070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	200000ec 	.word	0x200000ec

08009074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d105      	bne.n	8009092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4907      	ldr	r1, [pc, #28]	; (80090a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800908a:	4808      	ldr	r0, [pc, #32]	; (80090ac <USBD_FS_ProductStrDescriptor+0x38>)
 800908c:	f7ff fdda 	bl	8008c44 <USBD_GetString>
 8009090:	e004      	b.n	800909c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4904      	ldr	r1, [pc, #16]	; (80090a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009096:	4805      	ldr	r0, [pc, #20]	; (80090ac <USBD_FS_ProductStrDescriptor+0x38>)
 8009098:	f7ff fdd4 	bl	8008c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20001564 	.word	0x20001564
 80090ac:	0800a4c8 	.word	0x0800a4c8

080090b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	4904      	ldr	r1, [pc, #16]	; (80090d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090c0:	4804      	ldr	r0, [pc, #16]	; (80090d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090c2:	f7ff fdbf 	bl	8008c44 <USBD_GetString>
  return USBD_StrDesc;
 80090c6:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20001564 	.word	0x20001564
 80090d4:	0800a4e0 	.word	0x0800a4e0

080090d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	221a      	movs	r2, #26
 80090e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090ea:	f000 f843 	bl	8009174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090ee:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200000f0 	.word	0x200000f0

080090fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	4907      	ldr	r1, [pc, #28]	; (8009130 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009112:	4808      	ldr	r0, [pc, #32]	; (8009134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009114:	f7ff fd96 	bl	8008c44 <USBD_GetString>
 8009118:	e004      	b.n	8009124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	4904      	ldr	r1, [pc, #16]	; (8009130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800911e:	4805      	ldr	r0, [pc, #20]	; (8009134 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009120:	f7ff fd90 	bl	8008c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009124:	4b02      	ldr	r3, [pc, #8]	; (8009130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20001564 	.word	0x20001564
 8009134:	0800a4f4 	.word	0x0800a4f4

08009138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	6039      	str	r1, [r7, #0]
 8009142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d105      	bne.n	8009156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	4907      	ldr	r1, [pc, #28]	; (800916c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800914e:	4808      	ldr	r0, [pc, #32]	; (8009170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009150:	f7ff fd78 	bl	8008c44 <USBD_GetString>
 8009154:	e004      	b.n	8009160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4904      	ldr	r1, [pc, #16]	; (800916c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800915a:	4805      	ldr	r0, [pc, #20]	; (8009170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800915c:	f7ff fd72 	bl	8008c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20001564 	.word	0x20001564
 8009170:	0800a500 	.word	0x0800a500

08009174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800917a:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <Get_SerialNum+0x44>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009180:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <Get_SerialNum+0x48>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009186:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <Get_SerialNum+0x4c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4413      	add	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800919a:	2208      	movs	r2, #8
 800919c:	4909      	ldr	r1, [pc, #36]	; (80091c4 <Get_SerialNum+0x50>)
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f814 	bl	80091cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091a4:	2204      	movs	r2, #4
 80091a6:	4908      	ldr	r1, [pc, #32]	; (80091c8 <Get_SerialNum+0x54>)
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	f000 f80f 	bl	80091cc <IntToUnicode>
  }
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	1fff7a10 	.word	0x1fff7a10
 80091bc:	1fff7a14 	.word	0x1fff7a14
 80091c0:	1fff7a18 	.word	0x1fff7a18
 80091c4:	200000f2 	.word	0x200000f2
 80091c8:	20000102 	.word	0x20000102

080091cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]
 80091e2:	e027      	b.n	8009234 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0f1b      	lsrs	r3, r3, #28
 80091e8:	2b09      	cmp	r3, #9
 80091ea:	d80b      	bhi.n	8009204 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0f1b      	lsrs	r3, r3, #28
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4619      	mov	r1, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	440b      	add	r3, r1
 80091fc:	3230      	adds	r2, #48	; 0x30
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	e00a      	b.n	800921a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	0f1b      	lsrs	r3, r3, #28
 8009208:	b2da      	uxtb	r2, r3
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4619      	mov	r1, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	440b      	add	r3, r1
 8009214:	3237      	adds	r2, #55	; 0x37
 8009216:	b2d2      	uxtb	r2, r2
 8009218:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	3301      	adds	r3, #1
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	4413      	add	r3, r2
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	3301      	adds	r3, #1
 8009232:	75fb      	strb	r3, [r7, #23]
 8009234:	7dfa      	ldrb	r2, [r7, #23]
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	429a      	cmp	r2, r3
 800923a:	d3d3      	bcc.n	80091e4 <IntToUnicode+0x18>
  }
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	605a      	str	r2, [r3, #4]
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800926c:	d14b      	bne.n	8009306 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	4b27      	ldr	r3, [pc, #156]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	4a26      	ldr	r2, [pc, #152]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	6313      	str	r3, [r2, #48]	; 0x30
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800928a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800928e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009290:	2302      	movs	r3, #2
 8009292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009294:	2300      	movs	r3, #0
 8009296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009298:	2300      	movs	r3, #0
 800929a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800929c:	230a      	movs	r3, #10
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092a0:	f107 0314 	add.w	r3, r7, #20
 80092a4:	4619      	mov	r1, r3
 80092a6:	481b      	ldr	r0, [pc, #108]	; (8009314 <HAL_PCD_MspInit+0xc8>)
 80092a8:	f7f8 fffe 	bl	80022a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80092ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b2:	2302      	movs	r3, #2
 80092b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092b6:	2301      	movs	r3, #1
 80092b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ba:	2300      	movs	r3, #0
 80092bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092be:	230a      	movs	r3, #10
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092c2:	f107 0314 	add.w	r3, r7, #20
 80092c6:	4619      	mov	r1, r3
 80092c8:	4812      	ldr	r0, [pc, #72]	; (8009314 <HAL_PCD_MspInit+0xc8>)
 80092ca:	f7f8 ffed 	bl	80022a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 80092d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d8:	6353      	str	r3, [r2, #52]	; 0x34
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e2:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 80092e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092e8:	6453      	str	r3, [r2, #68]	; 0x44
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_PCD_MspInit+0xc4>)
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	2043      	movs	r0, #67	; 0x43
 80092fc:	f7f8 ff0b 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009300:	2043      	movs	r0, #67	; 0x43
 8009302:	f7f8 ff24 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009306:	bf00      	nop
 8009308:	3728      	adds	r7, #40	; 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40023800 	.word	0x40023800
 8009314:	40020000 	.word	0x40020000

08009318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fe fb29 	bl	8007986 <USBD_LL_SetupStage>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	4619      	mov	r1, r3
 8009366:	f7fe fb63 	bl	8007a30 <USBD_LL_DataOutStage>
}
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4613      	mov	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	334c      	adds	r3, #76	; 0x4c
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	4619      	mov	r1, r3
 800939a:	f7fe fbfc 	bl	8007b96 <USBD_LL_DataInStage>
}
 800939e:	bf00      	nop
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fd30 	bl	8007e1a <USBD_LL_SOF>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093ca:	2301      	movs	r3, #1
 80093cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	e008      	b.n	80093ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d102      	bne.n	80093ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	e001      	b.n	80093ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80093ea:	f7f7 fd57 	bl	8000e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fcd0 	bl	8007d9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe fc78 	bl	8007cfa <USBD_LL_Reset>
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fccb 	bl	8007dbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a1b      	ldr	r3, [r3, #32]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <HAL_PCD_SuspendCallback+0x48>)
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	4a03      	ldr	r2, [pc, #12]	; (800945c <HAL_PCD_SuspendCallback+0x48>)
 800944e:	f043 0306 	orr.w	r3, r3, #6
 8009452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	e000ed00 	.word	0xe000ed00

08009460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fcbb 	bl	8007dea <USBD_LL_Resume>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fd13 	bl	8007ebe <USBD_LL_IsoOUTIncomplete>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fccf 	bl	8007e5a <USBD_LL_IsoINIncomplete>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fd25 	bl	8007f22 <USBD_LL_DevConnected>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fd22 	bl	8007f38 <USBD_LL_DevDisconnected>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d13c      	bne.n	8009586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800950c:	4a20      	ldr	r2, [pc, #128]	; (8009590 <USBD_LL_Init+0x94>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1e      	ldr	r2, [pc, #120]	; (8009590 <USBD_LL_Init+0x94>)
 8009518:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <USBD_LL_Init+0x94>)
 800951e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <USBD_LL_Init+0x94>)
 8009526:	2204      	movs	r2, #4
 8009528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800952a:	4b19      	ldr	r3, [pc, #100]	; (8009590 <USBD_LL_Init+0x94>)
 800952c:	2202      	movs	r2, #2
 800952e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <USBD_LL_Init+0x94>)
 8009532:	2200      	movs	r2, #0
 8009534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <USBD_LL_Init+0x94>)
 8009538:	2202      	movs	r2, #2
 800953a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800953c:	4b14      	ldr	r3, [pc, #80]	; (8009590 <USBD_LL_Init+0x94>)
 800953e:	2200      	movs	r2, #0
 8009540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009542:	4b13      	ldr	r3, [pc, #76]	; (8009590 <USBD_LL_Init+0x94>)
 8009544:	2200      	movs	r2, #0
 8009546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009548:	4b11      	ldr	r3, [pc, #68]	; (8009590 <USBD_LL_Init+0x94>)
 800954a:	2200      	movs	r2, #0
 800954c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <USBD_LL_Init+0x94>)
 8009550:	2200      	movs	r2, #0
 8009552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009554:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <USBD_LL_Init+0x94>)
 8009556:	2200      	movs	r2, #0
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800955a:	480d      	ldr	r0, [pc, #52]	; (8009590 <USBD_LL_Init+0x94>)
 800955c:	f7f9 f871 	bl	8002642 <HAL_PCD_Init>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009566:	f7f7 fc99 	bl	8000e9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800956a:	2180      	movs	r1, #128	; 0x80
 800956c:	4808      	ldr	r0, [pc, #32]	; (8009590 <USBD_LL_Init+0x94>)
 800956e:	f7fa fac8 	bl	8003b02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009572:	2240      	movs	r2, #64	; 0x40
 8009574:	2100      	movs	r1, #0
 8009576:	4806      	ldr	r0, [pc, #24]	; (8009590 <USBD_LL_Init+0x94>)
 8009578:	f7fa fa7c 	bl	8003a74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800957c:	2280      	movs	r2, #128	; 0x80
 800957e:	2101      	movs	r1, #1
 8009580:	4803      	ldr	r0, [pc, #12]	; (8009590 <USBD_LL_Init+0x94>)
 8009582:	f7fa fa77 	bl	8003a74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001764 	.word	0x20001764

08009594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f9 f966 	bl	800287c <HAL_PCD_Start>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f942 	bl	8009840 <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	4608      	mov	r0, r1
 80095d4:	4611      	mov	r1, r2
 80095d6:	461a      	mov	r2, r3
 80095d8:	4603      	mov	r3, r0
 80095da:	70fb      	strb	r3, [r7, #3]
 80095dc:	460b      	mov	r3, r1
 80095de:	70bb      	strb	r3, [r7, #2]
 80095e0:	4613      	mov	r3, r2
 80095e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095f2:	78bb      	ldrb	r3, [r7, #2]
 80095f4:	883a      	ldrh	r2, [r7, #0]
 80095f6:	78f9      	ldrb	r1, [r7, #3]
 80095f8:	f7f9 fe37 	bl	800326a <HAL_PCD_EP_Open>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f91c 	bl	8009840 <USBD_Get_USB_Status>
 8009608:	4603      	mov	r3, r0
 800960a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960c:	7bbb      	ldrb	r3, [r7, #14]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7f9 fe80 	bl	800333a <HAL_PCD_EP_Close>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f8fd 	bl	8009840 <USBD_Get_USB_Status>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964a:	7bbb      	ldrb	r3, [r7, #14]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f7f9 ff58 	bl	8003528 <HAL_PCD_EP_SetStall>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f8de 	bl	8009840 <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f9 ff9d 	bl	80035f0 <HAL_PCD_EP_ClrStall>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f8bf 	bl	8009840 <USBD_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	da0b      	bge.n	8009704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	4613      	mov	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	333e      	adds	r3, #62	; 0x3e
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	e00b      	b.n	800971c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800971a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f7f9 fd6a 	bl	8003220 <HAL_PCD_SetAddress>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f874 	bl	8009840 <USBD_Get_USB_Status>
 8009758:	4603      	mov	r3, r0
 800975a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975c:	7bbb      	ldrb	r3, [r7, #14]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	460b      	mov	r3, r1
 8009774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009784:	7af9      	ldrb	r1, [r7, #11]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	f7f9 fe83 	bl	8003494 <HAL_PCD_EP_Transmit>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f853 	bl	8009840 <USBD_Get_USB_Status>
 800979a:	4603      	mov	r3, r0
 800979c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800979e:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	460b      	mov	r3, r1
 80097b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097c6:	7af9      	ldrb	r1, [r7, #11]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	f7f9 fdff 	bl	80033ce <HAL_PCD_EP_Receive>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f832 	bl	8009840 <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097fc:	78fa      	ldrb	r2, [r7, #3]
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7f9 fe2f 	bl	8003464 <HAL_PCD_EP_GetRxCount>
 8009806:	4603      	mov	r3, r0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009818:	4b03      	ldr	r3, [pc, #12]	; (8009828 <USBD_static_malloc+0x18>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	20001c70 	.word	0x20001c70

0800982c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]

}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b03      	cmp	r3, #3
 8009852:	d817      	bhi.n	8009884 <USBD_Get_USB_Status+0x44>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <USBD_Get_USB_Status+0x1c>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	0800986d 	.word	0x0800986d
 8009860:	08009873 	.word	0x08009873
 8009864:	08009879 	.word	0x08009879
 8009868:	0800987f 	.word	0x0800987f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
    break;
 8009870:	e00b      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009872:	2303      	movs	r3, #3
 8009874:	73fb      	strb	r3, [r7, #15]
    break;
 8009876:	e008      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009878:	2301      	movs	r3, #1
 800987a:	73fb      	strb	r3, [r7, #15]
    break;
 800987c:	e005      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	73fb      	strb	r3, [r7, #15]
    break;
 8009882:	e002      	b.n	800988a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
    break;
 8009888:	bf00      	nop
  }
  return usb_status;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <atoi>:
 8009898:	220a      	movs	r2, #10
 800989a:	2100      	movs	r1, #0
 800989c:	f000 b882 	b.w	80099a4 <strtol>

080098a0 <_strtol_l.constprop.0>:
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a6:	d001      	beq.n	80098ac <_strtol_l.constprop.0+0xc>
 80098a8:	2b24      	cmp	r3, #36	; 0x24
 80098aa:	d906      	bls.n	80098ba <_strtol_l.constprop.0+0x1a>
 80098ac:	f000 f8c2 	bl	8009a34 <__errno>
 80098b0:	2316      	movs	r3, #22
 80098b2:	6003      	str	r3, [r0, #0]
 80098b4:	2000      	movs	r0, #0
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80099a0 <_strtol_l.constprop.0+0x100>
 80098be:	460d      	mov	r5, r1
 80098c0:	462e      	mov	r6, r5
 80098c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80098ca:	f017 0708 	ands.w	r7, r7, #8
 80098ce:	d1f7      	bne.n	80098c0 <_strtol_l.constprop.0+0x20>
 80098d0:	2c2d      	cmp	r4, #45	; 0x2d
 80098d2:	d132      	bne.n	800993a <_strtol_l.constprop.0+0x9a>
 80098d4:	782c      	ldrb	r4, [r5, #0]
 80098d6:	2701      	movs	r7, #1
 80098d8:	1cb5      	adds	r5, r6, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d05b      	beq.n	8009996 <_strtol_l.constprop.0+0xf6>
 80098de:	2b10      	cmp	r3, #16
 80098e0:	d109      	bne.n	80098f6 <_strtol_l.constprop.0+0x56>
 80098e2:	2c30      	cmp	r4, #48	; 0x30
 80098e4:	d107      	bne.n	80098f6 <_strtol_l.constprop.0+0x56>
 80098e6:	782c      	ldrb	r4, [r5, #0]
 80098e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80098ec:	2c58      	cmp	r4, #88	; 0x58
 80098ee:	d14d      	bne.n	800998c <_strtol_l.constprop.0+0xec>
 80098f0:	786c      	ldrb	r4, [r5, #1]
 80098f2:	2310      	movs	r3, #16
 80098f4:	3502      	adds	r5, #2
 80098f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80098fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80098fe:	f04f 0e00 	mov.w	lr, #0
 8009902:	fbb8 f9f3 	udiv	r9, r8, r3
 8009906:	4676      	mov	r6, lr
 8009908:	fb03 8a19 	mls	sl, r3, r9, r8
 800990c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009910:	f1bc 0f09 	cmp.w	ip, #9
 8009914:	d816      	bhi.n	8009944 <_strtol_l.constprop.0+0xa4>
 8009916:	4664      	mov	r4, ip
 8009918:	42a3      	cmp	r3, r4
 800991a:	dd24      	ble.n	8009966 <_strtol_l.constprop.0+0xc6>
 800991c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009920:	d008      	beq.n	8009934 <_strtol_l.constprop.0+0x94>
 8009922:	45b1      	cmp	r9, r6
 8009924:	d31c      	bcc.n	8009960 <_strtol_l.constprop.0+0xc0>
 8009926:	d101      	bne.n	800992c <_strtol_l.constprop.0+0x8c>
 8009928:	45a2      	cmp	sl, r4
 800992a:	db19      	blt.n	8009960 <_strtol_l.constprop.0+0xc0>
 800992c:	fb06 4603 	mla	r6, r6, r3, r4
 8009930:	f04f 0e01 	mov.w	lr, #1
 8009934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009938:	e7e8      	b.n	800990c <_strtol_l.constprop.0+0x6c>
 800993a:	2c2b      	cmp	r4, #43	; 0x2b
 800993c:	bf04      	itt	eq
 800993e:	782c      	ldrbeq	r4, [r5, #0]
 8009940:	1cb5      	addeq	r5, r6, #2
 8009942:	e7ca      	b.n	80098da <_strtol_l.constprop.0+0x3a>
 8009944:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009948:	f1bc 0f19 	cmp.w	ip, #25
 800994c:	d801      	bhi.n	8009952 <_strtol_l.constprop.0+0xb2>
 800994e:	3c37      	subs	r4, #55	; 0x37
 8009950:	e7e2      	b.n	8009918 <_strtol_l.constprop.0+0x78>
 8009952:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009956:	f1bc 0f19 	cmp.w	ip, #25
 800995a:	d804      	bhi.n	8009966 <_strtol_l.constprop.0+0xc6>
 800995c:	3c57      	subs	r4, #87	; 0x57
 800995e:	e7db      	b.n	8009918 <_strtol_l.constprop.0+0x78>
 8009960:	f04f 3eff 	mov.w	lr, #4294967295
 8009964:	e7e6      	b.n	8009934 <_strtol_l.constprop.0+0x94>
 8009966:	f1be 3fff 	cmp.w	lr, #4294967295
 800996a:	d105      	bne.n	8009978 <_strtol_l.constprop.0+0xd8>
 800996c:	2322      	movs	r3, #34	; 0x22
 800996e:	6003      	str	r3, [r0, #0]
 8009970:	4646      	mov	r6, r8
 8009972:	b942      	cbnz	r2, 8009986 <_strtol_l.constprop.0+0xe6>
 8009974:	4630      	mov	r0, r6
 8009976:	e79e      	b.n	80098b6 <_strtol_l.constprop.0+0x16>
 8009978:	b107      	cbz	r7, 800997c <_strtol_l.constprop.0+0xdc>
 800997a:	4276      	negs	r6, r6
 800997c:	2a00      	cmp	r2, #0
 800997e:	d0f9      	beq.n	8009974 <_strtol_l.constprop.0+0xd4>
 8009980:	f1be 0f00 	cmp.w	lr, #0
 8009984:	d000      	beq.n	8009988 <_strtol_l.constprop.0+0xe8>
 8009986:	1e69      	subs	r1, r5, #1
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	e7f3      	b.n	8009974 <_strtol_l.constprop.0+0xd4>
 800998c:	2430      	movs	r4, #48	; 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1b1      	bne.n	80098f6 <_strtol_l.constprop.0+0x56>
 8009992:	2308      	movs	r3, #8
 8009994:	e7af      	b.n	80098f6 <_strtol_l.constprop.0+0x56>
 8009996:	2c30      	cmp	r4, #48	; 0x30
 8009998:	d0a5      	beq.n	80098e6 <_strtol_l.constprop.0+0x46>
 800999a:	230a      	movs	r3, #10
 800999c:	e7ab      	b.n	80098f6 <_strtol_l.constprop.0+0x56>
 800999e:	bf00      	nop
 80099a0:	0800a529 	.word	0x0800a529

080099a4 <strtol>:
 80099a4:	4613      	mov	r3, r2
 80099a6:	460a      	mov	r2, r1
 80099a8:	4601      	mov	r1, r0
 80099aa:	4802      	ldr	r0, [pc, #8]	; (80099b4 <strtol+0x10>)
 80099ac:	6800      	ldr	r0, [r0, #0]
 80099ae:	f7ff bf77 	b.w	80098a0 <_strtol_l.constprop.0>
 80099b2:	bf00      	nop
 80099b4:	20000158 	.word	0x20000158

080099b8 <siprintf>:
 80099b8:	b40e      	push	{r1, r2, r3}
 80099ba:	b500      	push	{lr}
 80099bc:	b09c      	sub	sp, #112	; 0x70
 80099be:	ab1d      	add	r3, sp, #116	; 0x74
 80099c0:	9002      	str	r0, [sp, #8]
 80099c2:	9006      	str	r0, [sp, #24]
 80099c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099c8:	4809      	ldr	r0, [pc, #36]	; (80099f0 <siprintf+0x38>)
 80099ca:	9107      	str	r1, [sp, #28]
 80099cc:	9104      	str	r1, [sp, #16]
 80099ce:	4909      	ldr	r1, [pc, #36]	; (80099f4 <siprintf+0x3c>)
 80099d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d4:	9105      	str	r1, [sp, #20]
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	a902      	add	r1, sp, #8
 80099dc:	f000 f9b6 	bl	8009d4c <_svfiprintf_r>
 80099e0:	9b02      	ldr	r3, [sp, #8]
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	b01c      	add	sp, #112	; 0x70
 80099e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ec:	b003      	add	sp, #12
 80099ee:	4770      	bx	lr
 80099f0:	20000158 	.word	0x20000158
 80099f4:	ffff0208 	.word	0xffff0208

080099f8 <memset>:
 80099f8:	4402      	add	r2, r0
 80099fa:	4603      	mov	r3, r0
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d100      	bne.n	8009a02 <memset+0xa>
 8009a00:	4770      	bx	lr
 8009a02:	f803 1b01 	strb.w	r1, [r3], #1
 8009a06:	e7f9      	b.n	80099fc <memset+0x4>

08009a08 <strstr>:
 8009a08:	780a      	ldrb	r2, [r1, #0]
 8009a0a:	b570      	push	{r4, r5, r6, lr}
 8009a0c:	b96a      	cbnz	r2, 8009a2a <strstr+0x22>
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d109      	bne.n	8009a28 <strstr+0x20>
 8009a14:	460c      	mov	r4, r1
 8009a16:	4605      	mov	r5, r0
 8009a18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f6      	beq.n	8009a0e <strstr+0x6>
 8009a20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009a24:	429e      	cmp	r6, r3
 8009a26:	d0f7      	beq.n	8009a18 <strstr+0x10>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	7803      	ldrb	r3, [r0, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1ef      	bne.n	8009a10 <strstr+0x8>
 8009a30:	4618      	mov	r0, r3
 8009a32:	e7ec      	b.n	8009a0e <strstr+0x6>

08009a34 <__errno>:
 8009a34:	4b01      	ldr	r3, [pc, #4]	; (8009a3c <__errno+0x8>)
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20000158 	.word	0x20000158

08009a40 <__libc_init_array>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	4d0d      	ldr	r5, [pc, #52]	; (8009a78 <__libc_init_array+0x38>)
 8009a44:	4c0d      	ldr	r4, [pc, #52]	; (8009a7c <__libc_init_array+0x3c>)
 8009a46:	1b64      	subs	r4, r4, r5
 8009a48:	10a4      	asrs	r4, r4, #2
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	42a6      	cmp	r6, r4
 8009a4e:	d109      	bne.n	8009a64 <__libc_init_array+0x24>
 8009a50:	4d0b      	ldr	r5, [pc, #44]	; (8009a80 <__libc_init_array+0x40>)
 8009a52:	4c0c      	ldr	r4, [pc, #48]	; (8009a84 <__libc_init_array+0x44>)
 8009a54:	f000 fc6a 	bl	800a32c <_init>
 8009a58:	1b64      	subs	r4, r4, r5
 8009a5a:	10a4      	asrs	r4, r4, #2
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	42a6      	cmp	r6, r4
 8009a60:	d105      	bne.n	8009a6e <__libc_init_array+0x2e>
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a68:	4798      	blx	r3
 8009a6a:	3601      	adds	r6, #1
 8009a6c:	e7ee      	b.n	8009a4c <__libc_init_array+0xc>
 8009a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a72:	4798      	blx	r3
 8009a74:	3601      	adds	r6, #1
 8009a76:	e7f2      	b.n	8009a5e <__libc_init_array+0x1e>
 8009a78:	0800a664 	.word	0x0800a664
 8009a7c:	0800a664 	.word	0x0800a664
 8009a80:	0800a664 	.word	0x0800a664
 8009a84:	0800a668 	.word	0x0800a668

08009a88 <__retarget_lock_acquire_recursive>:
 8009a88:	4770      	bx	lr

08009a8a <__retarget_lock_release_recursive>:
 8009a8a:	4770      	bx	lr

08009a8c <memcpy>:
 8009a8c:	440a      	add	r2, r1
 8009a8e:	4291      	cmp	r1, r2
 8009a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a94:	d100      	bne.n	8009a98 <memcpy+0xc>
 8009a96:	4770      	bx	lr
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	d1f9      	bne.n	8009a9a <memcpy+0xe>
 8009aa6:	bd10      	pop	{r4, pc}

08009aa8 <_free_r>:
 8009aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	d044      	beq.n	8009b38 <_free_r+0x90>
 8009aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab2:	9001      	str	r0, [sp, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aba:	bfb8      	it	lt
 8009abc:	18e4      	addlt	r4, r4, r3
 8009abe:	f000 f8df 	bl	8009c80 <__malloc_lock>
 8009ac2:	4a1e      	ldr	r2, [pc, #120]	; (8009b3c <_free_r+0x94>)
 8009ac4:	9801      	ldr	r0, [sp, #4]
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	b933      	cbnz	r3, 8009ad8 <_free_r+0x30>
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	6014      	str	r4, [r2, #0]
 8009ace:	b003      	add	sp, #12
 8009ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad4:	f000 b8da 	b.w	8009c8c <__malloc_unlock>
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d908      	bls.n	8009aee <_free_r+0x46>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf01      	itttt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	1949      	addeq	r1, r1, r5
 8009aea:	6021      	streq	r1, [r4, #0]
 8009aec:	e7ed      	b.n	8009aca <_free_r+0x22>
 8009aee:	461a      	mov	r2, r3
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	b10b      	cbz	r3, 8009af8 <_free_r+0x50>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d9fa      	bls.n	8009aee <_free_r+0x46>
 8009af8:	6811      	ldr	r1, [r2, #0]
 8009afa:	1855      	adds	r5, r2, r1
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d10b      	bne.n	8009b18 <_free_r+0x70>
 8009b00:	6824      	ldr	r4, [r4, #0]
 8009b02:	4421      	add	r1, r4
 8009b04:	1854      	adds	r4, r2, r1
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	d1e0      	bne.n	8009ace <_free_r+0x26>
 8009b0c:	681c      	ldr	r4, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	6053      	str	r3, [r2, #4]
 8009b12:	440c      	add	r4, r1
 8009b14:	6014      	str	r4, [r2, #0]
 8009b16:	e7da      	b.n	8009ace <_free_r+0x26>
 8009b18:	d902      	bls.n	8009b20 <_free_r+0x78>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	e7d6      	b.n	8009ace <_free_r+0x26>
 8009b20:	6825      	ldr	r5, [r4, #0]
 8009b22:	1961      	adds	r1, r4, r5
 8009b24:	428b      	cmp	r3, r1
 8009b26:	bf04      	itt	eq
 8009b28:	6819      	ldreq	r1, [r3, #0]
 8009b2a:	685b      	ldreq	r3, [r3, #4]
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	bf04      	itt	eq
 8009b30:	1949      	addeq	r1, r1, r5
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	6054      	str	r4, [r2, #4]
 8009b36:	e7ca      	b.n	8009ace <_free_r+0x26>
 8009b38:	b003      	add	sp, #12
 8009b3a:	bd30      	pop	{r4, r5, pc}
 8009b3c:	20001fd0 	.word	0x20001fd0

08009b40 <sbrk_aligned>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	4e0e      	ldr	r6, [pc, #56]	; (8009b7c <sbrk_aligned+0x3c>)
 8009b44:	460c      	mov	r4, r1
 8009b46:	6831      	ldr	r1, [r6, #0]
 8009b48:	4605      	mov	r5, r0
 8009b4a:	b911      	cbnz	r1, 8009b52 <sbrk_aligned+0x12>
 8009b4c:	f000 fba6 	bl	800a29c <_sbrk_r>
 8009b50:	6030      	str	r0, [r6, #0]
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 fba1 	bl	800a29c <_sbrk_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d00a      	beq.n	8009b74 <sbrk_aligned+0x34>
 8009b5e:	1cc4      	adds	r4, r0, #3
 8009b60:	f024 0403 	bic.w	r4, r4, #3
 8009b64:	42a0      	cmp	r0, r4
 8009b66:	d007      	beq.n	8009b78 <sbrk_aligned+0x38>
 8009b68:	1a21      	subs	r1, r4, r0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 fb96 	bl	800a29c <_sbrk_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	d101      	bne.n	8009b78 <sbrk_aligned+0x38>
 8009b74:	f04f 34ff 	mov.w	r4, #4294967295
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	20001fd4 	.word	0x20001fd4

08009b80 <_malloc_r>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	f025 0503 	bic.w	r5, r5, #3
 8009b8a:	3508      	adds	r5, #8
 8009b8c:	2d0c      	cmp	r5, #12
 8009b8e:	bf38      	it	cc
 8009b90:	250c      	movcc	r5, #12
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	4607      	mov	r7, r0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d905      	bls.n	8009ba8 <_malloc_r+0x28>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	2600      	movs	r6, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c7c <_malloc_r+0xfc>
 8009bac:	f000 f868 	bl	8009c80 <__malloc_lock>
 8009bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	bb5c      	cbnz	r4, 8009c10 <_malloc_r+0x90>
 8009bb8:	4629      	mov	r1, r5
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f7ff ffc0 	bl	8009b40 <sbrk_aligned>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	d155      	bne.n	8009c72 <_malloc_r+0xf2>
 8009bc6:	f8d8 4000 	ldr.w	r4, [r8]
 8009bca:	4626      	mov	r6, r4
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	d145      	bne.n	8009c5c <_malloc_r+0xdc>
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	d048      	beq.n	8009c66 <_malloc_r+0xe6>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4638      	mov	r0, r7
 8009bda:	eb04 0903 	add.w	r9, r4, r3
 8009bde:	f000 fb5d 	bl	800a29c <_sbrk_r>
 8009be2:	4581      	cmp	r9, r0
 8009be4:	d13f      	bne.n	8009c66 <_malloc_r+0xe6>
 8009be6:	6821      	ldr	r1, [r4, #0]
 8009be8:	1a6d      	subs	r5, r5, r1
 8009bea:	4629      	mov	r1, r5
 8009bec:	4638      	mov	r0, r7
 8009bee:	f7ff ffa7 	bl	8009b40 <sbrk_aligned>
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d037      	beq.n	8009c66 <_malloc_r+0xe6>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	442b      	add	r3, r5
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d038      	beq.n	8009c76 <_malloc_r+0xf6>
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	42a2      	cmp	r2, r4
 8009c08:	d12b      	bne.n	8009c62 <_malloc_r+0xe2>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	605a      	str	r2, [r3, #4]
 8009c0e:	e00f      	b.n	8009c30 <_malloc_r+0xb0>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	1b52      	subs	r2, r2, r5
 8009c14:	d41f      	bmi.n	8009c56 <_malloc_r+0xd6>
 8009c16:	2a0b      	cmp	r2, #11
 8009c18:	d917      	bls.n	8009c4a <_malloc_r+0xca>
 8009c1a:	1961      	adds	r1, r4, r5
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	6025      	str	r5, [r4, #0]
 8009c20:	bf18      	it	ne
 8009c22:	6059      	strne	r1, [r3, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	bf08      	it	eq
 8009c28:	f8c8 1000 	streq.w	r1, [r8]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4638      	mov	r0, r7
 8009c32:	f104 060b 	add.w	r6, r4, #11
 8009c36:	f000 f829 	bl	8009c8c <__malloc_unlock>
 8009c3a:	f026 0607 	bic.w	r6, r6, #7
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	1af2      	subs	r2, r6, r3
 8009c42:	d0ae      	beq.n	8009ba2 <_malloc_r+0x22>
 8009c44:	1b9b      	subs	r3, r3, r6
 8009c46:	50a3      	str	r3, [r4, r2]
 8009c48:	e7ab      	b.n	8009ba2 <_malloc_r+0x22>
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	6862      	ldr	r2, [r4, #4]
 8009c4e:	d1dd      	bne.n	8009c0c <_malloc_r+0x8c>
 8009c50:	f8c8 2000 	str.w	r2, [r8]
 8009c54:	e7ec      	b.n	8009c30 <_malloc_r+0xb0>
 8009c56:	4623      	mov	r3, r4
 8009c58:	6864      	ldr	r4, [r4, #4]
 8009c5a:	e7ac      	b.n	8009bb6 <_malloc_r+0x36>
 8009c5c:	4634      	mov	r4, r6
 8009c5e:	6876      	ldr	r6, [r6, #4]
 8009c60:	e7b4      	b.n	8009bcc <_malloc_r+0x4c>
 8009c62:	4613      	mov	r3, r2
 8009c64:	e7cc      	b.n	8009c00 <_malloc_r+0x80>
 8009c66:	230c      	movs	r3, #12
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f000 f80e 	bl	8009c8c <__malloc_unlock>
 8009c70:	e797      	b.n	8009ba2 <_malloc_r+0x22>
 8009c72:	6025      	str	r5, [r4, #0]
 8009c74:	e7dc      	b.n	8009c30 <_malloc_r+0xb0>
 8009c76:	605b      	str	r3, [r3, #4]
 8009c78:	deff      	udf	#255	; 0xff
 8009c7a:	bf00      	nop
 8009c7c:	20001fd0 	.word	0x20001fd0

08009c80 <__malloc_lock>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__malloc_lock+0x8>)
 8009c82:	f7ff bf01 	b.w	8009a88 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20001fcc 	.word	0x20001fcc

08009c8c <__malloc_unlock>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__malloc_unlock+0x8>)
 8009c8e:	f7ff befc 	b.w	8009a8a <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20001fcc 	.word	0x20001fcc

08009c98 <__ssputs_r>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	688e      	ldr	r6, [r1, #8]
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	42be      	cmp	r6, r7
 8009ca2:	680b      	ldr	r3, [r1, #0]
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4690      	mov	r8, r2
 8009caa:	d82c      	bhi.n	8009d06 <__ssputs_r+0x6e>
 8009cac:	898a      	ldrh	r2, [r1, #12]
 8009cae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cb2:	d026      	beq.n	8009d02 <__ssputs_r+0x6a>
 8009cb4:	6965      	ldr	r5, [r4, #20]
 8009cb6:	6909      	ldr	r1, [r1, #16]
 8009cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cbc:	eba3 0901 	sub.w	r9, r3, r1
 8009cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cc4:	1c7b      	adds	r3, r7, #1
 8009cc6:	444b      	add	r3, r9
 8009cc8:	106d      	asrs	r5, r5, #1
 8009cca:	429d      	cmp	r5, r3
 8009ccc:	bf38      	it	cc
 8009cce:	461d      	movcc	r5, r3
 8009cd0:	0553      	lsls	r3, r2, #21
 8009cd2:	d527      	bpl.n	8009d24 <__ssputs_r+0x8c>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7ff ff53 	bl	8009b80 <_malloc_r>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	b360      	cbz	r0, 8009d38 <__ssputs_r+0xa0>
 8009cde:	6921      	ldr	r1, [r4, #16]
 8009ce0:	464a      	mov	r2, r9
 8009ce2:	f7ff fed3 	bl	8009a8c <memcpy>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	6126      	str	r6, [r4, #16]
 8009cf4:	6165      	str	r5, [r4, #20]
 8009cf6:	444e      	add	r6, r9
 8009cf8:	eba5 0509 	sub.w	r5, r5, r9
 8009cfc:	6026      	str	r6, [r4, #0]
 8009cfe:	60a5      	str	r5, [r4, #8]
 8009d00:	463e      	mov	r6, r7
 8009d02:	42be      	cmp	r6, r7
 8009d04:	d900      	bls.n	8009d08 <__ssputs_r+0x70>
 8009d06:	463e      	mov	r6, r7
 8009d08:	6820      	ldr	r0, [r4, #0]
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	f000 faab 	bl	800a268 <memmove>
 8009d12:	68a3      	ldr	r3, [r4, #8]
 8009d14:	1b9b      	subs	r3, r3, r6
 8009d16:	60a3      	str	r3, [r4, #8]
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	4433      	add	r3, r6
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d24:	462a      	mov	r2, r5
 8009d26:	f000 fac9 	bl	800a2bc <_realloc_r>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1e0      	bne.n	8009cf2 <__ssputs_r+0x5a>
 8009d30:	6921      	ldr	r1, [r4, #16]
 8009d32:	4650      	mov	r0, sl
 8009d34:	f7ff feb8 	bl	8009aa8 <_free_r>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	f8ca 3000 	str.w	r3, [sl]
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4a:	e7e9      	b.n	8009d20 <__ssputs_r+0x88>

08009d4c <_svfiprintf_r>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	4698      	mov	r8, r3
 8009d52:	898b      	ldrh	r3, [r1, #12]
 8009d54:	061b      	lsls	r3, r3, #24
 8009d56:	b09d      	sub	sp, #116	; 0x74
 8009d58:	4607      	mov	r7, r0
 8009d5a:	460d      	mov	r5, r1
 8009d5c:	4614      	mov	r4, r2
 8009d5e:	d50e      	bpl.n	8009d7e <_svfiprintf_r+0x32>
 8009d60:	690b      	ldr	r3, [r1, #16]
 8009d62:	b963      	cbnz	r3, 8009d7e <_svfiprintf_r+0x32>
 8009d64:	2140      	movs	r1, #64	; 0x40
 8009d66:	f7ff ff0b 	bl	8009b80 <_malloc_r>
 8009d6a:	6028      	str	r0, [r5, #0]
 8009d6c:	6128      	str	r0, [r5, #16]
 8009d6e:	b920      	cbnz	r0, 8009d7a <_svfiprintf_r+0x2e>
 8009d70:	230c      	movs	r3, #12
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e0d0      	b.n	8009f1c <_svfiprintf_r+0x1d0>
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	616b      	str	r3, [r5, #20]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9309      	str	r3, [sp, #36]	; 0x24
 8009d82:	2320      	movs	r3, #32
 8009d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d8c:	2330      	movs	r3, #48	; 0x30
 8009d8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f34 <_svfiprintf_r+0x1e8>
 8009d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d96:	f04f 0901 	mov.w	r9, #1
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	469a      	mov	sl, r3
 8009d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da2:	b10a      	cbz	r2, 8009da8 <_svfiprintf_r+0x5c>
 8009da4:	2a25      	cmp	r2, #37	; 0x25
 8009da6:	d1f9      	bne.n	8009d9c <_svfiprintf_r+0x50>
 8009da8:	ebba 0b04 	subs.w	fp, sl, r4
 8009dac:	d00b      	beq.n	8009dc6 <_svfiprintf_r+0x7a>
 8009dae:	465b      	mov	r3, fp
 8009db0:	4622      	mov	r2, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	4638      	mov	r0, r7
 8009db6:	f7ff ff6f 	bl	8009c98 <__ssputs_r>
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f000 80a9 	beq.w	8009f12 <_svfiprintf_r+0x1c6>
 8009dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc2:	445a      	add	r2, fp
 8009dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80a1 	beq.w	8009f12 <_svfiprintf_r+0x1c6>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dda:	f10a 0a01 	add.w	sl, sl, #1
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	9307      	str	r3, [sp, #28]
 8009de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de6:	931a      	str	r3, [sp, #104]	; 0x68
 8009de8:	4654      	mov	r4, sl
 8009dea:	2205      	movs	r2, #5
 8009dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df0:	4850      	ldr	r0, [pc, #320]	; (8009f34 <_svfiprintf_r+0x1e8>)
 8009df2:	f7f6 f9f5 	bl	80001e0 <memchr>
 8009df6:	9a04      	ldr	r2, [sp, #16]
 8009df8:	b9d8      	cbnz	r0, 8009e32 <_svfiprintf_r+0xe6>
 8009dfa:	06d0      	lsls	r0, r2, #27
 8009dfc:	bf44      	itt	mi
 8009dfe:	2320      	movmi	r3, #32
 8009e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e04:	0711      	lsls	r1, r2, #28
 8009e06:	bf44      	itt	mi
 8009e08:	232b      	movmi	r3, #43	; 0x2b
 8009e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e12:	2b2a      	cmp	r3, #42	; 0x2a
 8009e14:	d015      	beq.n	8009e42 <_svfiprintf_r+0xf6>
 8009e16:	9a07      	ldr	r2, [sp, #28]
 8009e18:	4654      	mov	r4, sl
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f04f 0c0a 	mov.w	ip, #10
 8009e20:	4621      	mov	r1, r4
 8009e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e26:	3b30      	subs	r3, #48	; 0x30
 8009e28:	2b09      	cmp	r3, #9
 8009e2a:	d94d      	bls.n	8009ec8 <_svfiprintf_r+0x17c>
 8009e2c:	b1b0      	cbz	r0, 8009e5c <_svfiprintf_r+0x110>
 8009e2e:	9207      	str	r2, [sp, #28]
 8009e30:	e014      	b.n	8009e5c <_svfiprintf_r+0x110>
 8009e32:	eba0 0308 	sub.w	r3, r0, r8
 8009e36:	fa09 f303 	lsl.w	r3, r9, r3
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	46a2      	mov	sl, r4
 8009e40:	e7d2      	b.n	8009de8 <_svfiprintf_r+0x9c>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	1d19      	adds	r1, r3, #4
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	9103      	str	r1, [sp, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfbb      	ittet	lt
 8009e4e:	425b      	neglt	r3, r3
 8009e50:	f042 0202 	orrlt.w	r2, r2, #2
 8009e54:	9307      	strge	r3, [sp, #28]
 8009e56:	9307      	strlt	r3, [sp, #28]
 8009e58:	bfb8      	it	lt
 8009e5a:	9204      	strlt	r2, [sp, #16]
 8009e5c:	7823      	ldrb	r3, [r4, #0]
 8009e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e60:	d10c      	bne.n	8009e7c <_svfiprintf_r+0x130>
 8009e62:	7863      	ldrb	r3, [r4, #1]
 8009e64:	2b2a      	cmp	r3, #42	; 0x2a
 8009e66:	d134      	bne.n	8009ed2 <_svfiprintf_r+0x186>
 8009e68:	9b03      	ldr	r3, [sp, #12]
 8009e6a:	1d1a      	adds	r2, r3, #4
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	9203      	str	r2, [sp, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	bfb8      	it	lt
 8009e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e78:	3402      	adds	r4, #2
 8009e7a:	9305      	str	r3, [sp, #20]
 8009e7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f44 <_svfiprintf_r+0x1f8>
 8009e80:	7821      	ldrb	r1, [r4, #0]
 8009e82:	2203      	movs	r2, #3
 8009e84:	4650      	mov	r0, sl
 8009e86:	f7f6 f9ab 	bl	80001e0 <memchr>
 8009e8a:	b138      	cbz	r0, 8009e9c <_svfiprintf_r+0x150>
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	eba0 000a 	sub.w	r0, r0, sl
 8009e92:	2240      	movs	r2, #64	; 0x40
 8009e94:	4082      	lsls	r2, r0
 8009e96:	4313      	orrs	r3, r2
 8009e98:	3401      	adds	r4, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	4825      	ldr	r0, [pc, #148]	; (8009f38 <_svfiprintf_r+0x1ec>)
 8009ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea6:	2206      	movs	r2, #6
 8009ea8:	f7f6 f99a 	bl	80001e0 <memchr>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d038      	beq.n	8009f22 <_svfiprintf_r+0x1d6>
 8009eb0:	4b22      	ldr	r3, [pc, #136]	; (8009f3c <_svfiprintf_r+0x1f0>)
 8009eb2:	bb1b      	cbnz	r3, 8009efc <_svfiprintf_r+0x1b0>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	3307      	adds	r3, #7
 8009eb8:	f023 0307 	bic.w	r3, r3, #7
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	9303      	str	r3, [sp, #12]
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	4433      	add	r3, r6
 8009ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec6:	e768      	b.n	8009d9a <_svfiprintf_r+0x4e>
 8009ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ecc:	460c      	mov	r4, r1
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e7a6      	b.n	8009e20 <_svfiprintf_r+0xd4>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	3401      	adds	r4, #1
 8009ed6:	9305      	str	r3, [sp, #20]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f04f 0c0a 	mov.w	ip, #10
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee4:	3a30      	subs	r2, #48	; 0x30
 8009ee6:	2a09      	cmp	r2, #9
 8009ee8:	d903      	bls.n	8009ef2 <_svfiprintf_r+0x1a6>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c6      	beq.n	8009e7c <_svfiprintf_r+0x130>
 8009eee:	9105      	str	r1, [sp, #20]
 8009ef0:	e7c4      	b.n	8009e7c <_svfiprintf_r+0x130>
 8009ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e7f0      	b.n	8009ede <_svfiprintf_r+0x192>
 8009efc:	ab03      	add	r3, sp, #12
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	462a      	mov	r2, r5
 8009f02:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <_svfiprintf_r+0x1f4>)
 8009f04:	a904      	add	r1, sp, #16
 8009f06:	4638      	mov	r0, r7
 8009f08:	f3af 8000 	nop.w
 8009f0c:	1c42      	adds	r2, r0, #1
 8009f0e:	4606      	mov	r6, r0
 8009f10:	d1d6      	bne.n	8009ec0 <_svfiprintf_r+0x174>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	065b      	lsls	r3, r3, #25
 8009f16:	f53f af2d 	bmi.w	8009d74 <_svfiprintf_r+0x28>
 8009f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1c:	b01d      	add	sp, #116	; 0x74
 8009f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	462a      	mov	r2, r5
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <_svfiprintf_r+0x1f4>)
 8009f2a:	a904      	add	r1, sp, #16
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f000 f879 	bl	800a024 <_printf_i>
 8009f32:	e7eb      	b.n	8009f0c <_svfiprintf_r+0x1c0>
 8009f34:	0800a629 	.word	0x0800a629
 8009f38:	0800a633 	.word	0x0800a633
 8009f3c:	00000000 	.word	0x00000000
 8009f40:	08009c99 	.word	0x08009c99
 8009f44:	0800a62f 	.word	0x0800a62f

08009f48 <_printf_common>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	4699      	mov	r9, r3
 8009f50:	688a      	ldr	r2, [r1, #8]
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfb8      	it	lt
 8009f5c:	4613      	movlt	r3, r2
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b10a      	cbz	r2, 8009f6e <_printf_common+0x26>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	0699      	lsls	r1, r3, #26
 8009f72:	bf42      	ittt	mi
 8009f74:	6833      	ldrmi	r3, [r6, #0]
 8009f76:	3302      	addmi	r3, #2
 8009f78:	6033      	strmi	r3, [r6, #0]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d106      	bne.n	8009f90 <_printf_common+0x48>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	6832      	ldr	r2, [r6, #0]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc26      	bgt.n	8009fde <_printf_common+0x96>
 8009f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f94:	1e13      	subs	r3, r2, #0
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	0692      	lsls	r2, r2, #26
 8009f9e:	d42b      	bmi.n	8009ff8 <_printf_common+0xb0>
 8009fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d01e      	beq.n	8009fec <_printf_common+0xa4>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6922      	ldr	r2, [r4, #16]
 8009fb2:	f003 0306 	and.w	r3, r3, #6
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	bf02      	ittt	eq
 8009fba:	68e5      	ldreq	r5, [r4, #12]
 8009fbc:	6833      	ldreq	r3, [r6, #0]
 8009fbe:	1aed      	subeq	r5, r5, r3
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	2500      	movne	r5, #0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bfc4      	itt	gt
 8009fce:	1a9b      	subgt	r3, r3, r2
 8009fd0:	18ed      	addgt	r5, r5, r3
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	341a      	adds	r4, #26
 8009fd6:	42b5      	cmp	r5, r6
 8009fd8:	d11a      	bne.n	800a010 <_printf_common+0xc8>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e008      	b.n	8009ff0 <_printf_common+0xa8>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	47c0      	blx	r8
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d103      	bne.n	8009ff4 <_printf_common+0xac>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7c6      	b.n	8009f86 <_printf_common+0x3e>
 8009ff8:	18e1      	adds	r1, r4, r3
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	2030      	movs	r0, #48	; 0x30
 8009ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a002:	4422      	add	r2, r4
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a00c:	3302      	adds	r3, #2
 800a00e:	e7c7      	b.n	8009fa0 <_printf_common+0x58>
 800a010:	2301      	movs	r3, #1
 800a012:	4622      	mov	r2, r4
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d0e6      	beq.n	8009fec <_printf_common+0xa4>
 800a01e:	3601      	adds	r6, #1
 800a020:	e7d9      	b.n	8009fd6 <_printf_common+0x8e>
	...

0800a024 <_printf_i>:
 800a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	7e0f      	ldrb	r7, [r1, #24]
 800a02a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a02c:	2f78      	cmp	r7, #120	; 0x78
 800a02e:	4691      	mov	r9, r2
 800a030:	4680      	mov	r8, r0
 800a032:	460c      	mov	r4, r1
 800a034:	469a      	mov	sl, r3
 800a036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a03a:	d807      	bhi.n	800a04c <_printf_i+0x28>
 800a03c:	2f62      	cmp	r7, #98	; 0x62
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x32>
 800a040:	2f00      	cmp	r7, #0
 800a042:	f000 80d4 	beq.w	800a1ee <_printf_i+0x1ca>
 800a046:	2f58      	cmp	r7, #88	; 0x58
 800a048:	f000 80c0 	beq.w	800a1cc <_printf_i+0x1a8>
 800a04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a054:	e03a      	b.n	800a0cc <_printf_i+0xa8>
 800a056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a05a:	2b15      	cmp	r3, #21
 800a05c:	d8f6      	bhi.n	800a04c <_printf_i+0x28>
 800a05e:	a101      	add	r1, pc, #4	; (adr r1, 800a064 <_printf_i+0x40>)
 800a060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0d1 	.word	0x0800a0d1
 800a06c:	0800a04d 	.word	0x0800a04d
 800a070:	0800a04d 	.word	0x0800a04d
 800a074:	0800a04d 	.word	0x0800a04d
 800a078:	0800a04d 	.word	0x0800a04d
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a04d 	.word	0x0800a04d
 800a084:	0800a04d 	.word	0x0800a04d
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a1d5 	.word	0x0800a1d5
 800a094:	0800a0fd 	.word	0x0800a0fd
 800a098:	0800a18f 	.word	0x0800a18f
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1f7 	.word	0x0800a1f7
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a0fd 	.word	0x0800a0fd
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a197 	.word	0x0800a197
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	602a      	str	r2, [r5, #0]
 800a0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e09f      	b.n	800a210 <_printf_i+0x1ec>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	0607      	lsls	r7, r0, #24
 800a0d6:	f103 0104 	add.w	r1, r3, #4
 800a0da:	6029      	str	r1, [r5, #0]
 800a0dc:	d501      	bpl.n	800a0e2 <_printf_i+0xbe>
 800a0de:	681e      	ldr	r6, [r3, #0]
 800a0e0:	e003      	b.n	800a0ea <_printf_i+0xc6>
 800a0e2:	0646      	lsls	r6, r0, #25
 800a0e4:	d5fb      	bpl.n	800a0de <_printf_i+0xba>
 800a0e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	da03      	bge.n	800a0f6 <_printf_i+0xd2>
 800a0ee:	232d      	movs	r3, #45	; 0x2d
 800a0f0:	4276      	negs	r6, r6
 800a0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f6:	485a      	ldr	r0, [pc, #360]	; (800a260 <_printf_i+0x23c>)
 800a0f8:	230a      	movs	r3, #10
 800a0fa:	e012      	b.n	800a122 <_printf_i+0xfe>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	6820      	ldr	r0, [r4, #0]
 800a100:	1d19      	adds	r1, r3, #4
 800a102:	6029      	str	r1, [r5, #0]
 800a104:	0605      	lsls	r5, r0, #24
 800a106:	d501      	bpl.n	800a10c <_printf_i+0xe8>
 800a108:	681e      	ldr	r6, [r3, #0]
 800a10a:	e002      	b.n	800a112 <_printf_i+0xee>
 800a10c:	0641      	lsls	r1, r0, #25
 800a10e:	d5fb      	bpl.n	800a108 <_printf_i+0xe4>
 800a110:	881e      	ldrh	r6, [r3, #0]
 800a112:	4853      	ldr	r0, [pc, #332]	; (800a260 <_printf_i+0x23c>)
 800a114:	2f6f      	cmp	r7, #111	; 0x6f
 800a116:	bf0c      	ite	eq
 800a118:	2308      	moveq	r3, #8
 800a11a:	230a      	movne	r3, #10
 800a11c:	2100      	movs	r1, #0
 800a11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a122:	6865      	ldr	r5, [r4, #4]
 800a124:	60a5      	str	r5, [r4, #8]
 800a126:	2d00      	cmp	r5, #0
 800a128:	bfa2      	ittt	ge
 800a12a:	6821      	ldrge	r1, [r4, #0]
 800a12c:	f021 0104 	bicge.w	r1, r1, #4
 800a130:	6021      	strge	r1, [r4, #0]
 800a132:	b90e      	cbnz	r6, 800a138 <_printf_i+0x114>
 800a134:	2d00      	cmp	r5, #0
 800a136:	d04b      	beq.n	800a1d0 <_printf_i+0x1ac>
 800a138:	4615      	mov	r5, r2
 800a13a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a13e:	fb03 6711 	mls	r7, r3, r1, r6
 800a142:	5dc7      	ldrb	r7, [r0, r7]
 800a144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a148:	4637      	mov	r7, r6
 800a14a:	42bb      	cmp	r3, r7
 800a14c:	460e      	mov	r6, r1
 800a14e:	d9f4      	bls.n	800a13a <_printf_i+0x116>
 800a150:	2b08      	cmp	r3, #8
 800a152:	d10b      	bne.n	800a16c <_printf_i+0x148>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	07de      	lsls	r6, r3, #31
 800a158:	d508      	bpl.n	800a16c <_printf_i+0x148>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	4299      	cmp	r1, r3
 800a160:	bfde      	ittt	le
 800a162:	2330      	movle	r3, #48	; 0x30
 800a164:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a16c:	1b52      	subs	r2, r2, r5
 800a16e:	6122      	str	r2, [r4, #16]
 800a170:	f8cd a000 	str.w	sl, [sp]
 800a174:	464b      	mov	r3, r9
 800a176:	aa03      	add	r2, sp, #12
 800a178:	4621      	mov	r1, r4
 800a17a:	4640      	mov	r0, r8
 800a17c:	f7ff fee4 	bl	8009f48 <_printf_common>
 800a180:	3001      	adds	r0, #1
 800a182:	d14a      	bne.n	800a21a <_printf_i+0x1f6>
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	b004      	add	sp, #16
 800a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	f043 0320 	orr.w	r3, r3, #32
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	4833      	ldr	r0, [pc, #204]	; (800a264 <_printf_i+0x240>)
 800a198:	2778      	movs	r7, #120	; 0x78
 800a19a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6829      	ldr	r1, [r5, #0]
 800a1a2:	061f      	lsls	r7, r3, #24
 800a1a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1a8:	d402      	bmi.n	800a1b0 <_printf_i+0x18c>
 800a1aa:	065f      	lsls	r7, r3, #25
 800a1ac:	bf48      	it	mi
 800a1ae:	b2b6      	uxthmi	r6, r6
 800a1b0:	07df      	lsls	r7, r3, #31
 800a1b2:	bf48      	it	mi
 800a1b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b8:	6029      	str	r1, [r5, #0]
 800a1ba:	bf48      	it	mi
 800a1bc:	6023      	strmi	r3, [r4, #0]
 800a1be:	b91e      	cbnz	r6, 800a1c8 <_printf_i+0x1a4>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	f023 0320 	bic.w	r3, r3, #32
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	e7a7      	b.n	800a11c <_printf_i+0xf8>
 800a1cc:	4824      	ldr	r0, [pc, #144]	; (800a260 <_printf_i+0x23c>)
 800a1ce:	e7e4      	b.n	800a19a <_printf_i+0x176>
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	e7bd      	b.n	800a150 <_printf_i+0x12c>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	6826      	ldr	r6, [r4, #0]
 800a1d8:	6961      	ldr	r1, [r4, #20]
 800a1da:	1d18      	adds	r0, r3, #4
 800a1dc:	6028      	str	r0, [r5, #0]
 800a1de:	0635      	lsls	r5, r6, #24
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	d501      	bpl.n	800a1e8 <_printf_i+0x1c4>
 800a1e4:	6019      	str	r1, [r3, #0]
 800a1e6:	e002      	b.n	800a1ee <_printf_i+0x1ca>
 800a1e8:	0670      	lsls	r0, r6, #25
 800a1ea:	d5fb      	bpl.n	800a1e4 <_printf_i+0x1c0>
 800a1ec:	8019      	strh	r1, [r3, #0]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	4615      	mov	r5, r2
 800a1f4:	e7bc      	b.n	800a170 <_printf_i+0x14c>
 800a1f6:	682b      	ldr	r3, [r5, #0]
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	602a      	str	r2, [r5, #0]
 800a1fc:	681d      	ldr	r5, [r3, #0]
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	2100      	movs	r1, #0
 800a202:	4628      	mov	r0, r5
 800a204:	f7f5 ffec 	bl	80001e0 <memchr>
 800a208:	b108      	cbz	r0, 800a20e <_printf_i+0x1ea>
 800a20a:	1b40      	subs	r0, r0, r5
 800a20c:	6060      	str	r0, [r4, #4]
 800a20e:	6863      	ldr	r3, [r4, #4]
 800a210:	6123      	str	r3, [r4, #16]
 800a212:	2300      	movs	r3, #0
 800a214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a218:	e7aa      	b.n	800a170 <_printf_i+0x14c>
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	462a      	mov	r2, r5
 800a21e:	4649      	mov	r1, r9
 800a220:	4640      	mov	r0, r8
 800a222:	47d0      	blx	sl
 800a224:	3001      	adds	r0, #1
 800a226:	d0ad      	beq.n	800a184 <_printf_i+0x160>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	079b      	lsls	r3, r3, #30
 800a22c:	d413      	bmi.n	800a256 <_printf_i+0x232>
 800a22e:	68e0      	ldr	r0, [r4, #12]
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	4298      	cmp	r0, r3
 800a234:	bfb8      	it	lt
 800a236:	4618      	movlt	r0, r3
 800a238:	e7a6      	b.n	800a188 <_printf_i+0x164>
 800a23a:	2301      	movs	r3, #1
 800a23c:	4632      	mov	r2, r6
 800a23e:	4649      	mov	r1, r9
 800a240:	4640      	mov	r0, r8
 800a242:	47d0      	blx	sl
 800a244:	3001      	adds	r0, #1
 800a246:	d09d      	beq.n	800a184 <_printf_i+0x160>
 800a248:	3501      	adds	r5, #1
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	9903      	ldr	r1, [sp, #12]
 800a24e:	1a5b      	subs	r3, r3, r1
 800a250:	42ab      	cmp	r3, r5
 800a252:	dcf2      	bgt.n	800a23a <_printf_i+0x216>
 800a254:	e7eb      	b.n	800a22e <_printf_i+0x20a>
 800a256:	2500      	movs	r5, #0
 800a258:	f104 0619 	add.w	r6, r4, #25
 800a25c:	e7f5      	b.n	800a24a <_printf_i+0x226>
 800a25e:	bf00      	nop
 800a260:	0800a63a 	.word	0x0800a63a
 800a264:	0800a64b 	.word	0x0800a64b

0800a268 <memmove>:
 800a268:	4288      	cmp	r0, r1
 800a26a:	b510      	push	{r4, lr}
 800a26c:	eb01 0402 	add.w	r4, r1, r2
 800a270:	d902      	bls.n	800a278 <memmove+0x10>
 800a272:	4284      	cmp	r4, r0
 800a274:	4623      	mov	r3, r4
 800a276:	d807      	bhi.n	800a288 <memmove+0x20>
 800a278:	1e43      	subs	r3, r0, #1
 800a27a:	42a1      	cmp	r1, r4
 800a27c:	d008      	beq.n	800a290 <memmove+0x28>
 800a27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a286:	e7f8      	b.n	800a27a <memmove+0x12>
 800a288:	4402      	add	r2, r0
 800a28a:	4601      	mov	r1, r0
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d100      	bne.n	800a292 <memmove+0x2a>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a29a:	e7f7      	b.n	800a28c <memmove+0x24>

0800a29c <_sbrk_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	; (800a2b8 <_sbrk_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f6 ff82 	bl	80011b0 <_sbrk>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_sbrk_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_sbrk_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	20001fc8 	.word	0x20001fc8

0800a2bc <_realloc_r>:
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	460e      	mov	r6, r1
 800a2c6:	b921      	cbnz	r1, 800a2d2 <_realloc_r+0x16>
 800a2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	f7ff bc57 	b.w	8009b80 <_malloc_r>
 800a2d2:	b92a      	cbnz	r2, 800a2e0 <_realloc_r+0x24>
 800a2d4:	f7ff fbe8 	bl	8009aa8 <_free_r>
 800a2d8:	4625      	mov	r5, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	f000 f81b 	bl	800a31a <_malloc_usable_size_r>
 800a2e4:	4284      	cmp	r4, r0
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	d802      	bhi.n	800a2f0 <_realloc_r+0x34>
 800a2ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2ee:	d812      	bhi.n	800a316 <_realloc_r+0x5a>
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7ff fc44 	bl	8009b80 <_malloc_r>
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0ed      	beq.n	800a2da <_realloc_r+0x1e>
 800a2fe:	42bc      	cmp	r4, r7
 800a300:	4622      	mov	r2, r4
 800a302:	4631      	mov	r1, r6
 800a304:	bf28      	it	cs
 800a306:	463a      	movcs	r2, r7
 800a308:	f7ff fbc0 	bl	8009a8c <memcpy>
 800a30c:	4631      	mov	r1, r6
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fbca 	bl	8009aa8 <_free_r>
 800a314:	e7e1      	b.n	800a2da <_realloc_r+0x1e>
 800a316:	4635      	mov	r5, r6
 800a318:	e7df      	b.n	800a2da <_realloc_r+0x1e>

0800a31a <_malloc_usable_size_r>:
 800a31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a31e:	1f18      	subs	r0, r3, #4
 800a320:	2b00      	cmp	r3, #0
 800a322:	bfbc      	itt	lt
 800a324:	580b      	ldrlt	r3, [r1, r0]
 800a326:	18c0      	addlt	r0, r0, r3
 800a328:	4770      	bx	lr
	...

0800a32c <_init>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	bf00      	nop
 800a330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a332:	bc08      	pop	{r3}
 800a334:	469e      	mov	lr, r3
 800a336:	4770      	bx	lr

0800a338 <_fini>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr
