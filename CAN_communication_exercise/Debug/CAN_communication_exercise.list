
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be0  08008be0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be8  08008be8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001dac  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001ef8  20001ef8  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fdad  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003040  00000000  00000000  0002ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce8  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000986  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023466  00000000  00000000  0003461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011624  00000000  00000000  00057a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6795  00000000  00000000  000690a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003878  00000000  00000000  0012f840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001330b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a3c 	.word	0x08008a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008a3c 	.word	0x08008a3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_HandleTypeDef hcan1;

uint8_t data[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005a2:	f000 ff13 	bl	80013cc <HAL_CAN_GetRxMessage>
	  CDC_Transmit_FS(data, 8);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005aa:	f007 f935 	bl	8007818 <CDC_Transmit_FS>
//	  CDC_Transmit_FS(rxPHead.IDE, 4);

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000168 	.word	0x20000168
 80005bc:	20000174 	.word	0x20000174

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b09b      	sub	sp, #108	; 0x6c
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fb27 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f8b3 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f969 	bl	80008a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f007 f845 	bl	8007660 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005d6:	e005      	b.n	80005e4 <main+0x24>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	484c      	ldr	r0, [pc, #304]	; (8000710 <main+0x150>)
 80005e0:	f001 fd22 	bl	8002028 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 80005e4:	2101      	movs	r1, #1
 80005e6:	484b      	ldr	r0, [pc, #300]	; (8000714 <main+0x154>)
 80005e8:	f001 fd06 	bl	8001ff8 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f2      	beq.n	80005d8 <main+0x18>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4845      	ldr	r0, [pc, #276]	; (8000710 <main+0x150>)
 80005fa:	f001 fd15 	bl	8002028 <HAL_GPIO_WritePin>

  uint32_t PRE[4] = {42, 210, 84, 21};
 80005fe:	4b46      	ldr	r3, [pc, #280]	; (8000718 <main+0x158>)
 8000600:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(uint8_t i = 0; i < 5; i++){
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000610:	e044      	b.n	800069c <main+0xdc>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <main+0x15c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d118      	bne.n	800064e <main+0x8e>
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x160>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d113      	bne.n	800064e <main+0x8e>
		  HAL_CAN_Stop(&hcan1);
 8000626:	483f      	ldr	r0, [pc, #252]	; (8000724 <main+0x164>)
 8000628:	f000 fdac 	bl	8001184 <HAL_CAN_Stop>
		  MX_CAN1_Init(PRE[i]);
 800062c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	3368      	adds	r3, #104	; 0x68
 8000634:	443b      	add	r3, r7
 8000636:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8e4 	bl	8000808 <MX_CAN1_Init>
		  HAL_CAN_Start(&hcan1);
 8000640:	4838      	ldr	r0, [pc, #224]	; (8000724 <main+0x164>)
 8000642:	f000 fd5b 	bl	80010fc <HAL_CAN_Start>
		  HAL_Delay(100);
 8000646:	2064      	movs	r0, #100	; 0x64
 8000648:	f000 fb58 	bl	8000cfc <HAL_Delay>
 800064c:	e021      	b.n	8000692 <main+0xd2>
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <main+0x15c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b01      	cmp	r3, #1
 8000656:	d004      	beq.n	8000662 <main+0xa2>
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <main+0x160>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d117      	bne.n	8000692 <main+0xd2>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000666:	3b01      	subs	r3, #1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	3368      	adds	r3, #104	; 0x68
 800066c:	443b      	add	r3, r7
 800066e:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	492c      	ldr	r1, [pc, #176]	; (8000728 <main+0x168>)
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fd3c 	bl	80080f4 <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fda6 	bl	80001d0 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f007 f8c3 	bl	8007818 <CDC_Transmit_FS>
  for(uint8_t i = 0; i < 5; i++){
 8000692:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000696:	3301      	adds	r3, #1
 8000698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800069c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	d9b6      	bls.n	8000612 <main+0x52>
		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <main+0x15c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10a      	bne.n	80006c4 <main+0x104>
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <main+0x160>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d105      	bne.n	80006c4 <main+0x104>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80006b8:	2118      	movs	r1, #24
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <main+0x16c>)
 80006bc:	f007 f8ac 	bl	8007818 <CDC_Transmit_FS>
	  Error_Handler();
 80006c0:	f000 f950 	bl	8000964 <Error_Handler>

//    **Transmit**
//  **PIDs Supported**
  uint32_t mailbox;
  CAN_TxHeaderTypeDef pHead;
  pHead.StdId = 0x7DF;
 80006c4:	f240 73df 	movw	r3, #2015	; 0x7df
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  pHead.IDE = CAN_ID_STD;
 80006ca:	2300      	movs	r3, #0
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  pHead.RTR = CAN_RTR_DATA;
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  pHead.DLC = 8;
 80006d2:	2308      	movs	r3, #8
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48

  uint8_t data[] = {0x02, 0x01, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <main+0x170>)
 80006d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	e883 0003 	stmia.w	r3, {r0, r1}
//  TPpHead.RTR = CAN_RTR_DATA;
//  TPpHead.DLC = 8;
//
//  uint8_t TP_data[] = {0x02, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80006e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <main+0x164>)
 80006f2:	f000 fd90 	bl	8001216 <HAL_CAN_AddTxMessage>
//  uint8_t smth[6] = "sniff ";
//  uint16_t smth_len = 6;

  while (1)
  {
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80006f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <main+0x164>)
 8000704:	f000 fd87 	bl	8001216 <HAL_CAN_AddTxMessage>
	  HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 faf7 	bl	8000cfc <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 800070e:	e7f2      	b.n	80006f6 <main+0x136>
 8000710:	40020c00 	.word	0x40020c00
 8000714:	40020000 	.word	0x40020000
 8000718:	08008b3c 	.word	0x08008b3c
 800071c:	20000171 	.word	0x20000171
 8000720:	20000170 	.word	0x20000170
 8000724:	20000174 	.word	0x20000174
 8000728:	08008af4 	.word	0x08008af4
 800072c:	08008b20 	.word	0x08008b20
 8000730:	08008b4c 	.word	0x08008b4c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 fcf6 	bl	8008134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 feca 	bl	8003554 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c6:	f000 f8cd 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2105      	movs	r1, #5
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 f92b 	bl	8003a44 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f000 f8b6 	bl	8000964 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	; 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(uint32_t Prescaler)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_CAN1_Init+0x94>)
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <MX_CAN1_Init+0x98>)
 8000814:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_CAN1_Init+0x94>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_CAN1_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_CAN1_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_CAN1_Init+0x94>)
 800082a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800082e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_CAN1_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_CAN1_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_CAN1_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_CAN1_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_CAN1_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_CAN1_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_CAN1_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <MX_CAN1_Init+0x94>)
 800085c:	f000 fa72 	bl	8000d44 <HAL_CAN_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000866:	f000 f87d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 800086a:	f04f 31ff 	mov.w	r1, #4294967295
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_CAN1_Init+0x94>)
 8000870:	f000 febe 	bl	80015f0 <HAL_CAN_ActivateNotification>
  CAN_FilterTypeDef filters = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2228      	movs	r2, #40	; 0x28
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f007 fc59 	bl	8008134 <memset>
  filters.FilterActivation = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
//  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <MX_CAN1_Init+0x94>)
 800088e:	f000 fb55 	bl	8000f3c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3730      	adds	r7, #48	; 0x30
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000174 	.word	0x20000174
 80008a0:	40006400 	.word	0x40006400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_GPIO_Init+0xb8>)
 8000916:	f001 fb87 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091a:	2301      	movs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0xbc>)
 800092e:	f001 f9c7 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000932:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0xb8>)
 800094c:	f001 f9b8 	bl	8001cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <HAL_CAN_MspInit+0xb4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d143      	bne.n	8000a6a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 80009ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_CAN_MspInit+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <HAL_CAN_MspInit+0xbc>)
 8000a36:	f001 f943 	bl	8001cc0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2013      	movs	r0, #19
 8000a40:	f001 f907 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a44:	2013      	movs	r0, #19
 8000a46:	f001 f920 	bl	8001c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2014      	movs	r0, #20
 8000a50:	f001 f8ff 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a54:	2014      	movs	r0, #20
 8000a56:	f001 f918 	bl	8001c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2015      	movs	r0, #21
 8000a60:	f001 f8f7 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a64:	2015      	movs	r0, #21
 8000a66:	f001 f910 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40006400 	.word	0x40006400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8f6 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <CAN1_TX_IRQHandler+0x10>)
 8000ada:	f000 fdaf 	bl	800163c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000174 	.word	0x20000174

08000ae8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <CAN1_RX0_IRQHandler+0x14>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <CAN1_RX0_IRQHandler+0x18>)
 8000af4:	f000 fda2 	bl	800163c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000170 	.word	0x20000170
 8000b00:	20000174 	.word	0x20000174

08000b04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <CAN1_RX1_IRQHandler+0x14>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <CAN1_RX1_IRQHandler+0x18>)
 8000b10:	f000 fd94 	bl	800163c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000171 	.word	0x20000171
 8000b1c:	20000174 	.word	0x20000174

08000b20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <OTG_FS_IRQHandler+0x10>)
 8000b26:	f001 fbe8 	bl	80022fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20001684 	.word	0x20001684

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f007 faee 	bl	8008144 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20020000 	.word	0x20020000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	2000019c 	.word	0x2000019c
 8000b9c:	20001ef8 	.word	0x20001ef8

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ffd7 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f007 faad 	bl	8008150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fce3 	bl	80005c0 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000c08:	08008bf0 	.word	0x08008bf0
  ldr r2, =_sbss
 8000c0c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000c10:	20001ef8 	.word	0x20001ef8

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 fffb 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe90 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f813 	bl	8001ca6 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 ffdb 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200001a0 	.word	0x200001a0

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200001a0 	.word	0x200001a0

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0ed      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fe2c 	bl	80009c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d78:	f7ff ffb4 	bl	8000ce4 <HAL_GetTick>
 8000d7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7e:	e012      	b.n	8000da6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d80:	f7ff ffb0 	bl	8000ce4 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d90b      	bls.n	8000da6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0c5      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0e5      	beq.n	8000d80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0202 	bic.w	r2, r2, #2
 8000dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc4:	f7ff ff8e 	bl	8000ce4 <HAL_GetTick>
 8000dc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dca:	e012      	b.n	8000df2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dcc:	f7ff ff8a 	bl	8000ce4 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d90b      	bls.n	8000df2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2205      	movs	r2, #5
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e09f      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1e5      	bne.n	8000dcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7e5b      	ldrb	r3, [r3, #25]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7e9b      	ldrb	r3, [r3, #26]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d108      	bne.n	8000e6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0220 	orr.w	r2, r2, #32
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e007      	b.n	8000e7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0220 	bic.w	r2, r2, #32
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7edb      	ldrb	r3, [r3, #27]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d108      	bne.n	8000e98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0210 	bic.w	r2, r2, #16
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e007      	b.n	8000ea8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0210 	orr.w	r2, r2, #16
 8000ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1b      	ldrb	r3, [r3, #28]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0208 	orr.w	r2, r2, #8
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0208 	bic.w	r2, r2, #8
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7f5b      	ldrb	r3, [r3, #29]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d108      	bne.n	8000eec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0204 	orr.w	r2, r2, #4
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e007      	b.n	8000efc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0204 	bic.w	r2, r2, #4
 8000efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	ea42 0103 	orr.w	r1, r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f54:	7cfb      	ldrb	r3, [r7, #19]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d003      	beq.n	8000f62 <HAL_CAN_ConfigFilter+0x26>
 8000f5a:	7cfb      	ldrb	r3, [r7, #19]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f040 80be 	bne.w	80010de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f62:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	431a      	orrs	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d123      	bne.n	800100c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3248      	adds	r2, #72	; 0x48
 8000fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001000:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001002:	6979      	ldr	r1, [r7, #20]
 8001004:	3348      	adds	r3, #72	; 0x48
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d122      	bne.n	800105a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3248      	adds	r2, #72	; 0x48
 800103a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	3348      	adds	r3, #72	; 0x48
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001074:	e007      	b.n	8001086 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	401a      	ands	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010a0:	e007      	b.n	80010b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d107      	bne.n	80010ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d0:	f023 0201 	bic.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e006      	b.n	80010ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
  }
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40006400 	.word	0x40006400

080010fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d12e      	bne.n	800116e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001128:	f7ff fddc 	bl	8000ce4 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800112e:	e012      	b.n	8001156 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001130:	f7ff fdd8 	bl	8000ce4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b0a      	cmp	r3, #10
 800113c:	d90b      	bls.n	8001156 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2205      	movs	r2, #5
 800114e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e012      	b.n	800117c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e5      	bne.n	8001130 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d133      	bne.n	8001200 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fd9c 	bl	8000ce4 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ae:	e012      	b.n	80011d6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b0:	f7ff fd98 	bl	8000ce4 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b0a      	cmp	r3, #10
 80011bc:	d90b      	bls.n	80011d6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2205      	movs	r2, #5
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e01b      	b.n	800120e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0e5      	beq.n	80011b0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0202 	bic.w	r2, r2, #2
 80011f2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e006      	b.n	800120e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
  }
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001216:	b480      	push	{r7}
 8001218:	b089      	sub	sp, #36	; 0x24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d003      	beq.n	8001242 <HAL_CAN_AddTxMessage+0x2c>
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	2b02      	cmp	r3, #2
 800123e:	f040 80b8 	bne.w	80013b2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10a      	bne.n	8001262 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a0 	beq.w	80013a2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	0e1b      	lsrs	r3, r3, #24
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d907      	bls.n	8001282 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e09e      	b.n	80013c0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	6809      	ldr	r1, [r1, #0]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3318      	adds	r3, #24
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	440b      	add	r3, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e00f      	b.n	80012d0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3318      	adds	r3, #24
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	440b      	add	r3, r1
 80012ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3318      	adds	r3, #24
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	440b      	add	r3, r1
 80012e0:	3304      	adds	r3, #4
 80012e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	7d1b      	ldrb	r3, [r3, #20]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d111      	bne.n	8001310 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3318      	adds	r3, #24
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	3304      	adds	r3, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	6811      	ldr	r1, [r2, #0]
 8001300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3318      	adds	r3, #24
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	440b      	add	r3, r1
 800130c:	3304      	adds	r3, #4
 800130e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3307      	adds	r3, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	061a      	lsls	r2, r3, #24
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3306      	adds	r3, #6
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3305      	adds	r3, #5
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	4313      	orrs	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	3204      	adds	r2, #4
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	4610      	mov	r0, r2
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6811      	ldr	r1, [r2, #0]
 8001338:	ea43 0200 	orr.w	r2, r3, r0
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	440b      	add	r3, r1
 8001342:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001346:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	061a      	lsls	r2, r3, #24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3302      	adds	r3, #2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4313      	orrs	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	4610      	mov	r0, r2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	ea43 0200 	orr.w	r2, r3, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	440b      	add	r3, r1
 8001378:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800137c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3318      	adds	r3, #24
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3318      	adds	r3, #24
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	440b      	add	r3, r1
 800139c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e00e      	b.n	80013c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e006      	b.n	80013c0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3724      	adds	r7, #36	; 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d003      	beq.n	80013f0 <HAL_CAN_GetRxMessage+0x24>
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f040 80f3 	bne.w	80015d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10e      	bne.n	8001414 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d116      	bne.n	8001432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0e7      	b.n	80015e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0d8      	b.n	80015e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	331b      	adds	r3, #27
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0204 	and.w	r2, r3, #4
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10c      	bne.n	800146a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	331b      	adds	r3, #27
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	0d5b      	lsrs	r3, r3, #21
 8001460:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e00b      	b.n	8001482 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	331b      	adds	r3, #27
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0202 	and.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	331b      	adds	r3, #27
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 020f 	and.w	r2, r3, #15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	331b      	adds	r3, #27
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	331b      	adds	r3, #27
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1b      	lsrs	r3, r3, #16
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0a1a      	lsrs	r2, r3, #8
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1a      	lsrs	r2, r3, #16
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3302      	adds	r3, #2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0e1a      	lsrs	r2, r3, #24
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3303      	adds	r3, #3
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3304      	adds	r3, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0a1a      	lsrs	r2, r3, #8
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3305      	adds	r3, #5
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0c1a      	lsrs	r2, r3, #16
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3306      	adds	r3, #6
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0e1a      	lsrs	r2, r3, #24
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3307      	adds	r3, #7
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d108      	bne.n	80015c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0220 	orr.w	r2, r2, #32
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0220 	orr.w	r2, r2, #32
 80015d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e006      	b.n	80015e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
  }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d002      	beq.n	800160e <HAL_CAN_ActivateNotification+0x1e>
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d109      	bne.n	8001622 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6959      	ldr	r1, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e006      	b.n	8001630 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d07c      	beq.n	800177c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f983 	bl	80019aa <HAL_CAN_TxMailbox0CompleteCallback>
 80016a4:	e016      	b.n	80016d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e00c      	b.n	80016d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
 80016cc:	e002      	b.n	80016d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f989 	bl	80019e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f963 	bl	80019be <HAL_CAN_TxMailbox1CompleteCallback>
 80016f8:	e016      	b.n	8001728 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	e00c      	b.n	8001728 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	e002      	b.n	8001728 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f969 	bl	80019fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d024      	beq.n	800177c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800173a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f943 	bl	80019d2 <HAL_CAN_TxMailbox2CompleteCallback>
 800174c:	e016      	b.n	800177c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
 8001760:	e00c      	b.n	800177c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 8001774:	e002      	b.n	800177c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f949 	bl	8001a0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001796:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2210      	movs	r2, #16
 800179e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f930 	bl	8001a22 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fece 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2210      	movs	r2, #16
 8001802:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2208      	movs	r2, #8
 800181e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f912 	bl	8001a4a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8f9 	bl	8001a36 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8fc 	bl	8001a5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2208      	movs	r2, #8
 8001880:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8f5 	bl	8001a72 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07b      	beq.n	800198a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d072      	beq.n	8001982 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d043      	beq.n	8001982 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03e      	beq.n	8001982 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800190a:	2b60      	cmp	r3, #96	; 0x60
 800190c:	d02b      	beq.n	8001966 <HAL_CAN_IRQHandler+0x32a>
 800190e:	2b60      	cmp	r3, #96	; 0x60
 8001910:	d82e      	bhi.n	8001970 <HAL_CAN_IRQHandler+0x334>
 8001912:	2b50      	cmp	r3, #80	; 0x50
 8001914:	d022      	beq.n	800195c <HAL_CAN_IRQHandler+0x320>
 8001916:	2b50      	cmp	r3, #80	; 0x50
 8001918:	d82a      	bhi.n	8001970 <HAL_CAN_IRQHandler+0x334>
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d019      	beq.n	8001952 <HAL_CAN_IRQHandler+0x316>
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d826      	bhi.n	8001970 <HAL_CAN_IRQHandler+0x334>
 8001922:	2b30      	cmp	r3, #48	; 0x30
 8001924:	d010      	beq.n	8001948 <HAL_CAN_IRQHandler+0x30c>
 8001926:	2b30      	cmp	r3, #48	; 0x30
 8001928:	d822      	bhi.n	8001970 <HAL_CAN_IRQHandler+0x334>
 800192a:	2b10      	cmp	r3, #16
 800192c:	d002      	beq.n	8001934 <HAL_CAN_IRQHandler+0x2f8>
 800192e:	2b20      	cmp	r3, #32
 8001930:	d005      	beq.n	800193e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001932:	e01d      	b.n	8001970 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193c:	e019      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001946:	e014      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f043 0320 	orr.w	r3, r3, #32
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001950:	e00f      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195a:	e00a      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001964:	e005      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196e:	e000      	b.n	8001972 <HAL_CAN_IRQHandler+0x336>
            break;
 8001970:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001980:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2204      	movs	r2, #4
 8001988:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f872 	bl	8001a86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e16b      	b.n	8001fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f040 815a 	bne.w	8001fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d005      	beq.n	8001d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80b4 	beq.w	8001fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b60      	ldr	r3, [pc, #384]	; (8001fcc <HAL_GPIO_Init+0x30c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a5f      	ldr	r2, [pc, #380]	; (8001fcc <HAL_GPIO_Init+0x30c>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x30c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e62:	4a5b      	ldr	r2, [pc, #364]	; (8001fd0 <HAL_GPIO_Init+0x310>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_GPIO_Init+0x314>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x226>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <HAL_GPIO_Init+0x318>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x222>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a50      	ldr	r2, [pc, #320]	; (8001fdc <HAL_GPIO_Init+0x31c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x21e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4f      	ldr	r2, [pc, #316]	; (8001fe0 <HAL_GPIO_Init+0x320>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x21a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_GPIO_Init+0x324>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x216>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_GPIO_Init+0x328>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x212>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x32c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x20e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_GPIO_Init+0x330>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x20a>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e00e      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001eca:	2308      	movs	r3, #8
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ece:	2306      	movs	r3, #6
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x228>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	; (8001fd0 <HAL_GPIO_Init+0x310>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_GPIO_Init+0x334>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f ae90 	bls.w	8001cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40021c00 	.word	0x40021c00
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800205a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205c:	b08f      	sub	sp, #60	; 0x3c
 800205e:	af0a      	add	r7, sp, #40	; 0x28
 8002060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e10f      	b.n	800228c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f005 fd0e 	bl	8007aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2203      	movs	r2, #3
 8002090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 ffd7 	bl	800405e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	687e      	ldr	r6, [r7, #4]
 80020b8:	466d      	mov	r5, sp
 80020ba:	f106 0410 	add.w	r4, r6, #16
 80020be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ce:	1d33      	adds	r3, r6, #4
 80020d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d2:	6838      	ldr	r0, [r7, #0]
 80020d4:	f001 feae 	bl	8003e34 <USB_CoreInit>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0d0      	b.n	800228c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 ffc5 	bl	8004080 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e04a      	b.n	8002192 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	333d      	adds	r3, #61	; 0x3d
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	333c      	adds	r3, #60	; 0x3c
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	b298      	uxth	r0, r3
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3344      	adds	r3, #68	; 0x44
 8002138:	4602      	mov	r2, r0
 800213a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3340      	adds	r3, #64	; 0x40
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3348      	adds	r3, #72	; 0x48
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	334c      	adds	r3, #76	; 0x4c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3af      	bcc.n	80020fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e044      	b.n	800222c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	3301      	adds	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3b5      	bcc.n	80021a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	687e      	ldr	r6, [r7, #4]
 800223e:	466d      	mov	r5, sp
 8002240:	f106 0410 	add.w	r4, r6, #16
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002250:	e885 0003 	stmia.w	r5, {r0, r1}
 8002254:	1d33      	adds	r3, r6, #4
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	f001 ff5d 	bl	8004118 <USB_DevInit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e00d      	b.n	800228c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 f8ac 	bl	80053e2 <USB_DevDisconnect>

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002294 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PCD_Start+0x1c>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e020      	b.n	80022f2 <HAL_PCD_Start+0x5e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d109      	bne.n	80022d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d005      	beq.n	80022d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 feaf 	bl	800403c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 f85c 	bl	80053a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b08d      	sub	sp, #52	; 0x34
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f91a 	bl	800554a <USB_GetMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 848a 	bne.w	8002c32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 f87e 	bl	8005424 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8480 	beq.w	8002c30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f003 f86b 	bl	8005424 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d107      	bne.n	8002368 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f002 0202 	and.w	r2, r2, #2
 8002366:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 f859 	bl	8005424 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b10      	cmp	r3, #16
 800237a:	d161      	bne.n	8002440 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0210 	bic.w	r2, r2, #16
 800238a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d124      	bne.n	8002402 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d035      	beq.n	8002430 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	6a38      	ldr	r0, [r7, #32]
 80023d8:	f002 fe90 	bl	80050fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e8:	441a      	add	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fa:	441a      	add	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	621a      	str	r2, [r3, #32]
 8002400:	e016      	b.n	8002430 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	0c5b      	lsrs	r3, r3, #17
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	2b06      	cmp	r3, #6
 800240c:	d110      	bne.n	8002430 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002414:	2208      	movs	r2, #8
 8002416:	4619      	mov	r1, r3
 8002418:	6a38      	ldr	r0, [r7, #32]
 800241a:	f002 fe6f 	bl	80050fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800242a:	441a      	add	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0210 	orr.w	r2, r2, #16
 800243e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f002 ffed 	bl	8005424 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002450:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002454:	f040 80a7 	bne.w	80025a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fff2 	bl	800544a <USB_ReadDevAllOutEpInterrupt>
 8002466:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002468:	e099      	b.n	800259e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 808e 	beq.w	8002592 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f816 	bl	80054b2 <USB_ReadDevOutEPInterrupt>
 8002486:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249e:	461a      	mov	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fec2 	bl	8003230 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2308      	movs	r3, #8
 80024c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 ff98 	bl	8003400 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	2310      	movs	r3, #16
 80024ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d030      	beq.n	8002558 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d109      	bne.n	8002516 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002514:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	78db      	ldrb	r3, [r3, #3]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2200      	movs	r2, #0
 8002538:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f005 fbc9 	bl	8007cd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002552:	461a      	mov	r2, r3
 8002554:	2302      	movs	r3, #2
 8002556:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256e:	461a      	mov	r2, r3
 8002570:	2320      	movs	r3, #32
 8002572:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258a:	461a      	mov	r2, r3
 800258c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002590:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f af62 	bne.w	800246a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 ff3a 	bl	8005424 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ba:	f040 80db 	bne.w	8002774 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 ff5b 	bl	800547e <USB_ReadDevAllInEpInterrupt>
 80025c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025ce:	e0cd      	b.n	800276c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80c2 	beq.w	8002760 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 ff81 	bl	80054ee <USB_ReadDevInEPInterrupt>
 80025ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d057      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	2201      	movs	r2, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	69f9      	ldr	r1, [r7, #28]
 8002614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002618:	4013      	ands	r3, r2
 800261a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002628:	461a      	mov	r2, r3
 800262a:	2301      	movs	r3, #1
 800262c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d132      	bne.n	800269c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	334c      	adds	r3, #76	; 0x4c
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4403      	add	r3, r0
 8002656:	3348      	adds	r3, #72	; 0x48
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4419      	add	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4403      	add	r3, r0
 800266a:	334c      	adds	r3, #76	; 0x4c
 800266c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d113      	bne.n	800269c <HAL_PCD_IRQHandler+0x3a2>
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3354      	adds	r3, #84	; 0x54
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002694:	461a      	mov	r2, r3
 8002696:	2101      	movs	r1, #1
 8002698:	f002 ff88 	bl	80055ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f005 fa93 	bl	8007bce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026be:	461a      	mov	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026da:	461a      	mov	r2, r3
 80026dc:	2310      	movs	r3, #16
 80026de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f6:	461a      	mov	r2, r3
 80026f8:	2340      	movs	r3, #64	; 0x40
 80026fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	6a38      	ldr	r0, [r7, #32]
 800270a:	f001 fe69 	bl	80043e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	3338      	adds	r3, #56	; 0x38
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	3304      	adds	r3, #4
 8002720:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fae0 	bl	8007cfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002748:	461a      	mov	r2, r3
 800274a:	2302      	movs	r3, #2
 800274c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fcdb 	bl	8003116 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	3301      	adds	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	f47f af2e 	bne.w	80025d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fe53 	bl	8005424 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002788:	d122      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d108      	bne.n	80027ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027b0:	2100      	movs	r1, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fec2 	bl	800353c <HAL_PCDEx_LPM_Callback>
 80027b8:	e002      	b.n	80027c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f005 fa7e 	bl	8007cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 fe25 	bl	8005424 <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e4:	d112      	bne.n	800280c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f005 fa3a 	bl	8007c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800280a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f002 fe07 	bl	8005424 <USB_ReadInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	f040 80b7 	bne.w	8002992 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2110      	movs	r1, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fdce 	bl	80043e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002848:	e046      	b.n	80028d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002856:	461a      	mov	r2, r3
 8002858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800285c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286e:	0151      	lsls	r1, r2, #5
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	440a      	add	r2, r1
 8002874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800287c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288a:	461a      	mov	r2, r3
 800288c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002890:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c2:	0151      	lsls	r1, r2, #5
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	440a      	add	r2, r1
 80028c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	3301      	adds	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028de:	429a      	cmp	r2, r3
 80028e0:	d3b3      	bcc.n	800284a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290e:	f043 030b 	orr.w	r3, r3, #11
 8002912:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002924:	f043 030b 	orr.w	r3, r3, #11
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	e015      	b.n	8002958 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800293e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002942:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002952:	f043 030b 	orr.w	r3, r3, #11
 8002956:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002966:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800296a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800297c:	461a      	mov	r2, r3
 800297e:	f002 fe15 	bl	80055ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fd44 	bl	8005424 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a6:	d124      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fdda 	bl	8005566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fd8f 	bl	80044da <USB_GetDevSpeed>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	f001 fa28 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 80029cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4620      	mov	r0, r4
 80029d8:	f001 fa8e 	bl	8003ef8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f005 f91e 	bl	8007c1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fd14 	bl	8005424 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d10a      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f005 f8fb 	bl	8007c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f002 0208 	and.w	r2, r2, #8
 8002a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fcff 	bl	8005424 <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d122      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e014      	b.n	8002a6c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d105      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb27 	bl	80030b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	3301      	adds	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3e5      	bcc.n	8002a42 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fcd2 	bl	8005424 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8a:	d13b      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	e02b      	b.n	8002aea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3340      	adds	r3, #64	; 0x40
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d115      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da12      	bge.n	8002ae4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	333f      	adds	r3, #63	; 0x3f
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fae8 	bl	80030b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3ce      	bcc.n	8002a92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fc8b 	bl	8005424 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b18:	d155      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e045      	b.n	8002bac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d12e      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da2b      	bge.n	8002ba6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d121      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba2:	6053      	str	r3, [r2, #4]
            break;
 8002ba4:	e007      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	3301      	adds	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3b4      	bcc.n	8002b20 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fc2a 	bl	8005424 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d10a      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f005 f89f 	bl	8007d20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fc14 	bl	8005424 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d115      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f005 f88f 	bl	8007d3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	e000      	b.n	8002c32 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c30:	bf00      	nop
    }
  }
}
 8002c32:	3734      	adds	r7, #52	; 0x34
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}

08002c38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_PCD_SetAddress+0x1a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e013      	b.n	8002c7a <HAL_PCD_SetAddress+0x42>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fb72 	bl	8005354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	70fb      	strb	r3, [r7, #3]
 8002c94:	460b      	mov	r3, r1
 8002c96:	803b      	strh	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	3338      	adds	r3, #56	; 0x38
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cf4:	883a      	ldrh	r2, [r7, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	78ba      	ldrb	r2, [r7, #2]
 8002cfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d12:	78bb      	ldrb	r3, [r7, #2]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d102      	bne.n	8002d1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_EP_Open+0xaa>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e00e      	b.n	8002d4a <HAL_PCD_EP_Open+0xc8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 fbf2 	bl	8004524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d48:	7afb      	ldrb	r3, [r7, #11]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da0f      	bge.n	8002d86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	3338      	adds	r3, #56	; 0x38
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	705a      	strb	r2, [r3, #1]
 8002d84:	e00f      	b.n	8002da6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_EP_Close+0x6e>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e00e      	b.n	8002dde <HAL_PCD_EP_Close+0x8c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fc30 	bl	8004634 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6979      	ldr	r1, [r7, #20]
 8002e5a:	f001 ff0f 	bl	8004c7c <USB_EP0StartXfer>
 8002e5e:	e008      	b.n	8002e72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	f001 fcbd 	bl	80047ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f003 020f 	and.w	r2, r3, #15
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	3338      	adds	r3, #56	; 0x38
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6979      	ldr	r1, [r7, #20]
 8002f1e:	f001 fead 	bl	8004c7c <USB_EP0StartXfer>
 8002f22:	e008      	b.n	8002f36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6979      	ldr	r1, [r7, #20]
 8002f32:	f001 fc5b 	bl	80047ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d901      	bls.n	8002f5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e050      	b.n	8003000 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	da0f      	bge.n	8002f86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3338      	adds	r3, #56	; 0x38
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	705a      	strb	r2, [r3, #1]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_PCD_EP_SetStall+0x82>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e01e      	b.n	8003000 <HAL_PCD_EP_SetStall+0xc0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 f8eb 	bl	80051ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	b2d9      	uxtb	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f002 fadb 	bl	80055ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d901      	bls.n	8003026 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0f      	bge.n	800304e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3338      	adds	r3, #56	; 0x38
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	705a      	strb	r2, [r3, #1]
 800304c:	e00f      	b.n	800306e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_PCD_EP_ClrStall+0x86>
 800308a:	2302      	movs	r3, #2
 800308c:	e00e      	b.n	80030ac <HAL_PCD_EP_ClrStall+0xa4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68f9      	ldr	r1, [r7, #12]
 800309c:	4618      	mov	r0, r3
 800309e:	f002 f8f3 	bl	8005288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da0c      	bge.n	80030e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3338      	adds	r3, #56	; 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e00c      	b.n	80030fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f001 ff12 	bl	8004f2c <USB_EPStopXfer>
 8003108:	4603      	mov	r3, r0
 800310a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800310c:	7afb      	ldrb	r3, [r7, #11]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08a      	sub	sp, #40	; 0x28
 800311a:	af02      	add	r7, sp, #8
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	3338      	adds	r3, #56	; 0x38
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	429a      	cmp	r2, r3
 8003148:	d901      	bls.n	800314e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06c      	b.n	8003228 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	429a      	cmp	r2, r3
 8003162:	d902      	bls.n	800316a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3303      	adds	r3, #3
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003172:	e02b      	b.n	80031cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d902      	bls.n	8003190 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	3303      	adds	r3, #3
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6919      	ldr	r1, [r3, #16]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4603      	mov	r3, r0
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f001 ff66 	bl	8005080 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d809      	bhi.n	80031f6 <PCD_WriteEmptyTxFifo+0xe0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d203      	bcs.n	80031f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1be      	bne.n	8003174 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d811      	bhi.n	8003226 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	2201      	movs	r2, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	43db      	mvns	r3, r3
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003222:	4013      	ands	r3, r2
 8003224:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	333c      	adds	r3, #60	; 0x3c
 8003248:	3304      	adds	r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d17b      	bne.n	800335e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f240 80b9 	bls.w	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80b3 	beq.w	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	e0a7      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	2320      	movs	r3, #32
 80032b6:	6093      	str	r3, [r2, #8]
 80032b8:	e098      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 8093 	bne.w	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	; (80033f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d90f      	bls.n	80032ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e4:	461a      	mov	r2, r3
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	6093      	str	r3, [r2, #8]
 80032ec:	e07e      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	0159      	lsls	r1, r3, #5
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	440b      	add	r3, r1
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d114      	bne.n	8003350 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003338:	461a      	mov	r2, r3
 800333a:	2101      	movs	r1, #1
 800333c:	f002 f936 	bl	80055ac <USB_EP0_OutStart>
 8003340:	e006      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	441a      	add	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f004 fc1e 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
 800335c:	e046      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4a26      	ldr	r2, [pc, #152]	; (80033fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d124      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	6093      	str	r3, [r2, #8]
 8003384:	e032      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2320      	movs	r3, #32
 80033a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f004 fbf5 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
 80033ae:	e01d      	b.n	80033ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d114      	bne.n	80033e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033d8:	461a      	mov	r2, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	f002 f8e6 	bl	80055ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f004 fbd6 	bl	8007b98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	4f54300a 	.word	0x4f54300a
 80033fc:	4f54310a 	.word	0x4f54310a

08003400 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	333c      	adds	r3, #60	; 0x3c
 8003418:	3304      	adds	r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <PCD_EP_OutSetupPacket_int+0x88>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d90e      	bls.n	8003454 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 fb8d 	bl	8007b74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <PCD_EP_OutSetupPacket_int+0x88>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d90c      	bls.n	800347c <PCD_EP_OutSetupPacket_int+0x7c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003474:	461a      	mov	r2, r3
 8003476:	2101      	movs	r1, #1
 8003478:	f002 f898 	bl	80055ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	4f54300a 	.word	0x4f54300a

0800348c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
 8003498:	4613      	mov	r3, r2
 800349a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034aa:	883b      	ldrh	r3, [r7, #0]
 80034ac:	0419      	lsls	r1, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
 80034b8:	e028      	b.n	800350c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e00d      	b.n	80034ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	3340      	adds	r3, #64	; 0x40
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	3301      	adds	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3ec      	bcc.n	80034ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034f4:	883b      	ldrh	r3, [r7, #0]
 80034f6:	0418      	lsls	r0, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6819      	ldr	r1, [r3, #0]
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	3b01      	subs	r3, #1
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	4302      	orrs	r2, r0
 8003504:	3340      	adds	r3, #64	; 0x40
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e267      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d075      	beq.n	800365e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003572:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d00c      	beq.n	8003598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	2b08      	cmp	r3, #8
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003596:	d10b      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05b      	beq.n	800365c <HAL_RCC_OscConfig+0x108>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d157      	bne.n	800365c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e242      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x74>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x98>
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6f      	ldr	r2, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035ec:	4b69      	ldr	r3, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a68      	ldr	r2, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fb6a 	bl	8000ce4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fb66 	bl	8000ce4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e207      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xc0>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fb56 	bl	8000ce4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fb52 	bl	8000ce4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1f3      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0xe8>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b44      	ldr	r3, [pc, #272]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c7      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x244>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fd fb0b 	bl	8000ce4 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd fb07 	bl	8000ce4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a8      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4925      	ldr	r1, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x244>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd faea 	bl	8000ce4 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd fae6 	bl	8000ce4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e187      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d036      	beq.n	80037ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCC_OscConfig+0x248>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd faca 	bl	8000ce4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd fac6 	bl	8000ce4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e167      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x240>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x200>
 8003772:	e01b      	b.n	80037ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_OscConfig+0x248>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7fd fab3 	bl	8000ce4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00e      	b.n	80037a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003782:	f7fd faaf 	bl	8000ce4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d907      	bls.n	80037a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e150      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ea      	bne.n	8003782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8097 	beq.w	80038e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b7d      	ldr	r3, [pc, #500]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b74      	ldr	r3, [pc, #464]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fd fa6f 	bl	8000ce4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd fa6b 	bl	8000ce4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e10c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_OscConfig+0x474>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x2ea>
 8003830:	4b64      	ldr	r3, [pc, #400]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a63      	ldr	r2, [pc, #396]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x30c>
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a5e      	ldr	r2, [pc, #376]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a5b      	ldr	r2, [pc, #364]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 8003860:	4b58      	ldr	r3, [pc, #352]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a57      	ldr	r2, [pc, #348]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a54      	ldr	r2, [pc, #336]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd fa30 	bl	8000ce4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fd fa2c 	bl	8000ce4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0cb      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ee      	beq.n	8003888 <HAL_RCC_OscConfig+0x334>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7fd fa1a 	bl	8000ce4 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fa16 	bl	8000ce4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0b5      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ee      	bne.n	80038b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	4a38      	ldr	r2, [pc, #224]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a1 	beq.w	8003a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f2:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d05c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d141      	bne.n	800398a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd f9ea 	bl	8000ce4 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd f9e6 	bl	8000ce4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e087      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	491b      	ldr	r1, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fd f9bf 	bl	8000ce4 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396a:	f7fd f9bb 	bl	8000ce4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e05c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x416>
 8003988:	e054      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fd f9a8 	bl	8000ce4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd f9a4 	bl	8000ce4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e045      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x444>
 80039b6:	e03d      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e038      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000
 80039cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x4ec>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d028      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d121      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d11a      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800

08003a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0cc      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d90c      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d044      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e067      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4934      	ldr	r1, [pc, #208]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fd f8d6 	bl	8000ce4 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fd f8d2 	bl	8000ce4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e04f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d20c      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd f836 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08008b9c 	.word	0x08008b9c
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b094      	sub	sp, #80	; 0x50
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c20:	2300      	movs	r3, #0
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c28:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d00d      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x40>
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	f200 80e1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c42:	e0db      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c48:	e0db      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4a:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d063      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	0159      	lsls	r1, r3, #5
 8003c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c94:	0150      	lsls	r0, r2, #5
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	1a51      	subs	r1, r2, r1
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	018a      	lsls	r2, r1, #6
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc8:	4659      	mov	r1, fp
 8003cca:	eb63 0901 	sbc.w	r9, r3, r1
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce2:	4690      	mov	r8, r2
 8003ce4:	4699      	mov	r9, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	eb18 0303 	adds.w	r3, r8, r3
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	462b      	mov	r3, r5
 8003cf0:	eb49 0303 	adc.w	r3, r9, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d02:	4629      	mov	r1, r5
 8003d04:	024b      	lsls	r3, r1, #9
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	024a      	lsls	r2, r1, #9
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	2200      	movs	r2, #0
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d20:	f7fc faae 	bl	8000280 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	e058      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	4611      	mov	r1, r2
 8003d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0159      	lsls	r1, r3, #5
 8003d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5a:	0150      	lsls	r0, r2, #5
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4641      	mov	r1, r8
 8003d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d80:	ebb2 040a 	subs.w	r4, r2, sl
 8003d84:	eb63 050b 	sbc.w	r5, r3, fp
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	464b      	mov	r3, r9
 8003da4:	eb45 0303 	adc.w	r3, r5, r3
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd4:	f7fc fa54 	bl	8000280 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3750      	adds	r7, #80	; 0x50
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e34:	b084      	sub	sp, #16
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	f107 001c 	add.w	r0, r7, #28
 8003e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d122      	bne.n	8003e92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f001 fbee 	bl	8005668 <USB_CoreReset>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e01a      	b.n	8003ec8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f001 fbe2 	bl	8005668 <USB_CoreReset>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eba:	e005      	b.n	8003ec8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10b      	bne.n	8003ee6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f043 0206 	orr.w	r2, r3, #6
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef2:	b004      	add	sp, #16
 8003ef4:	4770      	bx	lr
	...

08003ef8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d165      	bne.n	8003fd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a41      	ldr	r2, [pc, #260]	; (8004014 <USB_SetTurnaroundTime+0x11c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d906      	bls.n	8003f22 <USB_SetTurnaroundTime+0x2a>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <USB_SetTurnaroundTime+0x120>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d202      	bcs.n	8003f22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e062      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <USB_SetTurnaroundTime+0x120>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d306      	bcc.n	8003f38 <USB_SetTurnaroundTime+0x40>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a3b      	ldr	r2, [pc, #236]	; (800401c <USB_SetTurnaroundTime+0x124>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d202      	bcs.n	8003f38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f32:	230e      	movs	r3, #14
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e057      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a38      	ldr	r2, [pc, #224]	; (800401c <USB_SetTurnaroundTime+0x124>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d306      	bcc.n	8003f4e <USB_SetTurnaroundTime+0x56>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a37      	ldr	r2, [pc, #220]	; (8004020 <USB_SetTurnaroundTime+0x128>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d202      	bcs.n	8003f4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f48:	230d      	movs	r3, #13
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e04c      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a33      	ldr	r2, [pc, #204]	; (8004020 <USB_SetTurnaroundTime+0x128>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d306      	bcc.n	8003f64 <USB_SetTurnaroundTime+0x6c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a32      	ldr	r2, [pc, #200]	; (8004024 <USB_SetTurnaroundTime+0x12c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d802      	bhi.n	8003f64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f5e:	230c      	movs	r3, #12
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e041      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a2f      	ldr	r2, [pc, #188]	; (8004024 <USB_SetTurnaroundTime+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d906      	bls.n	8003f7a <USB_SetTurnaroundTime+0x82>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <USB_SetTurnaroundTime+0x130>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d802      	bhi.n	8003f7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f74:	230b      	movs	r3, #11
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e036      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <USB_SetTurnaroundTime+0x130>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d906      	bls.n	8003f90 <USB_SetTurnaroundTime+0x98>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a29      	ldr	r2, [pc, #164]	; (800402c <USB_SetTurnaroundTime+0x134>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d802      	bhi.n	8003f90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e02b      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a26      	ldr	r2, [pc, #152]	; (800402c <USB_SetTurnaroundTime+0x134>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d906      	bls.n	8003fa6 <USB_SetTurnaroundTime+0xae>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <USB_SetTurnaroundTime+0x138>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d202      	bcs.n	8003fa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fa0:	2309      	movs	r3, #9
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e020      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <USB_SetTurnaroundTime+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d306      	bcc.n	8003fbc <USB_SetTurnaroundTime+0xc4>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <USB_SetTurnaroundTime+0x13c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d802      	bhi.n	8003fbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e015      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <USB_SetTurnaroundTime+0x13c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d906      	bls.n	8003fd2 <USB_SetTurnaroundTime+0xda>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <USB_SetTurnaroundTime+0x140>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d202      	bcs.n	8003fd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fcc:	2307      	movs	r3, #7
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e00a      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e007      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fde:	2309      	movs	r3, #9
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e001      	b.n	8003fe8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fe4:	2309      	movs	r3, #9
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	00d8acbf 	.word	0x00d8acbf
 8004018:	00e4e1c0 	.word	0x00e4e1c0
 800401c:	00f42400 	.word	0x00f42400
 8004020:	01067380 	.word	0x01067380
 8004024:	011a499f 	.word	0x011a499f
 8004028:	01312cff 	.word	0x01312cff
 800402c:	014ca43f 	.word	0x014ca43f
 8004030:	016e3600 	.word	0x016e3600
 8004034:	01a6ab1f 	.word	0x01a6ab1f
 8004038:	01e84800 	.word	0x01e84800

0800403c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d115      	bne.n	80040ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040ae:	2001      	movs	r0, #1
 80040b0:	f7fc fe24 	bl	8000cfc <HAL_Delay>
      ms++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 fa45 	bl	800554a <USB_GetMode>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d01e      	beq.n	8004104 <USB_SetCurrentMode+0x84>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b31      	cmp	r3, #49	; 0x31
 80040ca:	d9f0      	bls.n	80040ae <USB_SetCurrentMode+0x2e>
 80040cc:	e01a      	b.n	8004104 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d115      	bne.n	8004100 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7fc fe0b 	bl	8000cfc <HAL_Delay>
      ms++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3301      	adds	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 fa2c 	bl	800554a <USB_GetMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <USB_SetCurrentMode+0x84>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b31      	cmp	r3, #49	; 0x31
 80040fc:	d9f0      	bls.n	80040e0 <USB_SetCurrentMode+0x60>
 80040fe:	e001      	b.n	8004104 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e005      	b.n	8004110 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b32      	cmp	r3, #50	; 0x32
 8004108:	d101      	bne.n	800410e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004118:	b084      	sub	sp, #16
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e009      	b.n	800414c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3340      	adds	r3, #64	; 0x40
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	2200      	movs	r2, #0
 8004144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	3301      	adds	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b0e      	cmp	r3, #14
 8004150:	d9f2      	bls.n	8004138 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11c      	bne.n	8004192 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
 8004190:	e00b      	b.n	80041aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b0:	461a      	mov	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041bc:	4619      	mov	r1, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c4:	461a      	mov	r2, r3
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10c      	bne.n	80041ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d104      	bne.n	80041e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041d6:	2100      	movs	r1, #0
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f965 	bl	80044a8 <USB_SetDevSpeed>
 80041de:	e008      	b.n	80041f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041e0:	2101      	movs	r1, #1
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f960 	bl	80044a8 <USB_SetDevSpeed>
 80041e8:	e003      	b.n	80041f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041ea:	2103      	movs	r1, #3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f95b 	bl	80044a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041f2:	2110      	movs	r1, #16
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f8f3 	bl	80043e0 <USB_FlushTxFifo>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f91f 	bl	8004448 <USB_FlushRxFifo>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e043      	b.n	80042c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004254:	d118      	bne.n	8004288 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	461a      	mov	r2, r3
 800426a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e013      	b.n	800429a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	461a      	mov	r2, r3
 8004280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e008      	b.n	800429a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	461a      	mov	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	461a      	mov	r2, r3
 80042ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3301      	adds	r3, #1
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3b7      	bcc.n	800423e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e043      	b.n	800435c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ea:	d118      	bne.n	800431e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	461a      	mov	r2, r3
 8004300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e013      	b.n	8004330 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	461a      	mov	r2, r3
 8004316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e008      	b.n	8004330 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3301      	adds	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	429a      	cmp	r2, r3
 8004362:	d3b7      	bcc.n	80042d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <USB_DevInit+0x2c4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f043 0208 	orr.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c4:	f043 0304 	orr.w	r3, r3, #4
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043d8:	b004      	add	sp, #16
 80043da:	4770      	bx	lr
 80043dc:	803c3800 	.word	0x803c3800

080043e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <USB_FlushTxFifo+0x64>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e01b      	b.n	8004438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	daf2      	bge.n	80043ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	019b      	lsls	r3, r3, #6
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a08      	ldr	r2, [pc, #32]	; (8004444 <USB_FlushTxFifo+0x64>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	d0f0      	beq.n	8004418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	00030d40 	.word	0x00030d40

08004448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <USB_FlushRxFifo+0x5c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e018      	b.n	8004498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	daf2      	bge.n	8004454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2210      	movs	r2, #16
 8004476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <USB_FlushRxFifo+0x5c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e006      	b.n	8004498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b10      	cmp	r3, #16
 8004494:	d0f0      	beq.n	8004478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	00030d40 	.word	0x00030d40

080044a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044da:	b480      	push	{r7}
 80044dc:	b087      	sub	sp, #28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 0306 	and.w	r3, r3, #6
 80044f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
 80044fe:	e00a      	b.n	8004516 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d002      	beq.n	800450c <USB_GetDevSpeed+0x32>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d102      	bne.n	8004512 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800450c:	2302      	movs	r3, #2
 800450e:	75fb      	strb	r3, [r7, #23]
 8004510:	e001      	b.n	8004516 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004512:	230f      	movs	r3, #15
 8004514:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d13a      	bne.n	80045b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	b29b      	uxth	r3, r3
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800455e:	4313      	orrs	r3, r2
 8004560:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d155      	bne.n	8004624 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	791b      	ldrb	r3, [r3, #4]
 8004592:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004594:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	059b      	lsls	r3, r3, #22
 800459a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800459c:	4313      	orrs	r3, r2
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e036      	b.n	8004624 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11a      	bne.n	8004624 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800460a:	430b      	orrs	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d161      	bne.n	8004714 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004666:	d11f      	bne.n	80046a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004686:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	2101      	movs	r1, #1
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c8:	4013      	ands	r3, r2
 80046ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ec:	4013      	ands	r3, r2
 80046ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	0159      	lsls	r1, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	440b      	add	r3, r1
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	4619      	mov	r1, r3
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <USB_DeactivateEndpoint+0x1b0>)
 800470e:	4013      	ands	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
 8004712:	e060      	b.n	80047d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472a:	d11f      	bne.n	800476c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800474a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800476a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	43db      	mvns	r3, r3
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478c:	4013      	ands	r3, r2
 800478e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	43db      	mvns	r3, r3
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b0:	4013      	ands	r3, r2
 80047b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0159      	lsls	r1, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	4619      	mov	r1, r3
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <USB_DeactivateEndpoint+0x1b4>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	ec337800 	.word	0xec337800
 80047e8:	eff37800 	.word	0xeff37800

080047ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 815c 	bne.w	8004ac6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d132      	bne.n	800487c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004874:	0cdb      	lsrs	r3, r3, #19
 8004876:	04db      	lsls	r3, r3, #19
 8004878:	6113      	str	r3, [r2, #16]
 800487a:	e074      	b.n	8004966 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	0cdb      	lsrs	r3, r3, #19
 8004898:	04db      	lsls	r3, r3, #19
 800489a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	440b      	add	r3, r1
 80048d8:	1e59      	subs	r1, r3, #1
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048e4:	4b9d      	ldr	r3, [pc, #628]	; (8004b5c <USB_EPStartXfer+0x370>)
 80048e6:	400b      	ands	r3, r1
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	0148      	lsls	r0, r1, #5
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	4401      	add	r1, r0
 80048f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	0148      	lsls	r0, r1, #5
 8004912:	69f9      	ldr	r1, [r7, #28]
 8004914:	4401      	add	r1, r0
 8004916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d11f      	bne.n	8004966 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004940:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004944:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004964:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d14b      	bne.n	8004a04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d128      	bne.n	80049e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d110      	bne.n	80049c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e00f      	b.n	80049e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e133      	b.n	8004c6c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	791b      	ldrb	r3, [r3, #4]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d015      	beq.n	8004a58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 811b 	beq.w	8004c6c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	69f9      	ldr	r1, [r7, #28]
 8004a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a52:	4313      	orrs	r3, r2
 8004a54:	634b      	str	r3, [r1, #52]	; 0x34
 8004a56:	e109      	b.n	8004c6c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e00f      	b.n	8004aaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6919      	ldr	r1, [r3, #16]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fade 	bl	8005080 <USB_WritePacket>
 8004ac4:	e0d2      	b.n	8004c6c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	0cdb      	lsrs	r3, r3, #19
 8004ae2:	04db      	lsls	r3, r3, #19
 8004ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d126      	bne.n	8004b60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b28:	69b9      	ldr	r1, [r7, #24]
 8004b2a:	0148      	lsls	r0, r1, #5
 8004b2c:	69f9      	ldr	r1, [r7, #28]
 8004b2e:	4401      	add	r1, r0
 8004b30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b34:	4313      	orrs	r3, r2
 8004b36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b56:	6113      	str	r3, [r2, #16]
 8004b58:	e03a      	b.n	8004bd0 <USB_EPStartXfer+0x3e4>
 8004b5a:	bf00      	nop
 8004b5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	1e5a      	subs	r2, r3, #1
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	8afa      	ldrh	r2, [r7, #22]
 8004b7c:	fb03 f202 	mul.w	r2, r3, r2
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	8afb      	ldrh	r3, [r7, #22]
 8004b94:	04d9      	lsls	r1, r3, #19
 8004b96:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <USB_EPStartXfer+0x48c>)
 8004b98:	400b      	ands	r3, r1
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	0148      	lsls	r0, r1, #5
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	4401      	add	r1, r0
 8004ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	0148      	lsls	r0, r1, #5
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	4401      	add	r1, r0
 8004bc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10d      	bne.n	8004bf2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6919      	ldr	r1, [r3, #16]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	460a      	mov	r2, r1
 8004bf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	791b      	ldrb	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d128      	bne.n	8004c4c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d110      	bne.n	8004c2c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00f      	b.n	8004c4c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	1ff80000 	.word	0x1ff80000

08004c7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 80ce 	bne.w	8004e3a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d132      	bne.n	8004d0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	0cdb      	lsrs	r3, r3, #19
 8004d06:	04db      	lsls	r3, r3, #19
 8004d08:	6113      	str	r3, [r2, #16]
 8004d0a:	e04e      	b.n	8004daa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	0cdb      	lsrs	r3, r3, #19
 8004d28:	04db      	lsls	r3, r3, #19
 8004d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d903      	bls.n	8004d64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9a:	6939      	ldr	r1, [r7, #16]
 8004d9c:	0148      	lsls	r0, r1, #5
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	4401      	add	r1, r0
 8004da2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004da6:	4313      	orrs	r3, r2
 8004da8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d11e      	bne.n	8004dee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e097      	b.n	8004f1e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8083 	beq.w	8004f1e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	6979      	ldr	r1, [r7, #20]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4313      	orrs	r3, r2
 8004e36:	634b      	str	r3, [r1, #52]	; 0x34
 8004e38:	e071      	b.n	8004f1e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	0cdb      	lsrs	r3, r3, #19
 8004e56:	04db      	lsls	r3, r3, #19
 8004e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	0148      	lsls	r0, r1, #5
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10d      	bne.n	8004efe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6919      	ldr	r1, [r3, #16]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	460a      	mov	r2, r1
 8004efc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d14a      	bne.n	8004fe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f62:	f040 8086 	bne.w	8005072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d902      	bls.n	8004fc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc2:	e056      	b.n	8005072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fdc:	d0e7      	beq.n	8004fae <USB_EPStopXfer+0x82>
 8004fde:	e048      	b.n	8005072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff8:	d13b      	bne.n	8005072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800501c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f242 7210 	movw	r2, #10000	; 0x2710
 800504e:	4293      	cmp	r3, r2
 8005050:	d902      	bls.n	8005058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
          break;
 8005056:	e00c      	b.n	8005072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005070:	d0e7      	beq.n	8005042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	; 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	460b      	mov	r3, r1
 8005090:	71fb      	strb	r3, [r7, #7]
 8005092:	4613      	mov	r3, r2
 8005094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800509e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d123      	bne.n	80050ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050a6:	88bb      	ldrh	r3, [r7, #4]
 80050a8:	3303      	adds	r3, #3
 80050aa:	089b      	lsrs	r3, r3, #2
 80050ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e018      	b.n	80050e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	031a      	lsls	r2, r3, #12
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c0:	461a      	mov	r2, r3
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3301      	adds	r3, #1
 80050d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	3301      	adds	r3, #1
 80050d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3301      	adds	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	3301      	adds	r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d3e2      	bcc.n	80050b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3724      	adds	r7, #36	; 0x24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b08b      	sub	sp, #44	; 0x2c
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	b29b      	uxth	r3, r3
 8005118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	e014      	b.n	8005152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	601a      	str	r2, [r3, #0]
    pDest++;
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	3301      	adds	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	3301      	adds	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	3301      	adds	r3, #1
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	3301      	adds	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	3301      	adds	r3, #1
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3e6      	bcc.n	8005128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800515a:	8bfb      	ldrh	r3, [r7, #30]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01e      	beq.n	800519e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516a:	461a      	mov	r2, r3
 800516c:	f107 0310 	add.w	r3, r7, #16
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
 8005180:	b2da      	uxtb	r2, r3
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	701a      	strb	r2, [r3, #0]
      i++;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	3301      	adds	r3, #1
 800518a:	623b      	str	r3, [r7, #32]
      pDest++;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	3301      	adds	r3, #1
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005192:	8bfb      	ldrh	r3, [r7, #30]
 8005194:	3b01      	subs	r3, #1
 8005196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005198:	8bfb      	ldrh	r3, [r7, #30]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ea      	bne.n	8005174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	372c      	adds	r7, #44	; 0x2c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d12c      	bne.n	8005222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	db12      	blt.n	8005200 <USB_EPSetStall+0x54>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00f      	beq.n	8005200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e02b      	b.n	800527a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db12      	blt.n	800525a <USB_EPSetStall+0xae>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00f      	beq.n	800525a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d128      	bne.n	80052f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	791b      	ldrb	r3, [r3, #4]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d003      	beq.n	80052d4 <USB_EPClearStall+0x4c>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d138      	bne.n	8005346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e027      	b.n	8005346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005310:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	791b      	ldrb	r3, [r3, #4]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d003      	beq.n	8005326 <USB_EPClearStall+0x9e>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d10f      	bne.n	8005346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005372:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ce:	f023 0302 	bic.w	r3, r3, #2
 80053d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	0c1b      	lsrs	r3, r3, #16
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	b29b      	uxth	r3, r3
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054e0:	68bb      	ldr	r3, [r7, #8]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	01db      	lsls	r3, r3, #7
 8005520:	b2db      	uxtb	r3, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800553c:	68bb      	ldr	r3, [r7, #8]
}
 800553e:	4618      	mov	r0, r3
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0301 	and.w	r3, r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005584:	f023 0307 	bic.w	r3, r3, #7
 8005588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	460b      	mov	r3, r1
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	333c      	adds	r3, #60	; 0x3c
 80055c2:	3304      	adds	r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4a26      	ldr	r2, [pc, #152]	; (8005664 <USB_EP0_OutStart+0xb8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d90a      	bls.n	80055e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e0:	d101      	bne.n	80055e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e037      	b.n	8005656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005614:	f043 0318 	orr.w	r3, r3, #24
 8005618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005628:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800562c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800562e:	7afb      	ldrb	r3, [r7, #11]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10f      	bne.n	8005654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	461a      	mov	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	4f54300a 	.word	0x4f54300a

08005668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <USB_CoreReset+0x64>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e01b      	b.n	80056be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	daf2      	bge.n	8005674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <USB_CoreReset+0x64>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d0f0      	beq.n	800569e <USB_CoreReset+0x36>

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	00030d40 	.word	0x00030d40

080056d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056e0:	f002 fcc4 	bl	800806c <USBD_static_malloc>
 80056e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	32b0      	adds	r2, #176	; 0xb0
 80056f6:	2100      	movs	r1, #0
 80056f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0d4      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005700:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005704:	2100      	movs	r1, #0
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f002 fd14 	bl	8008134 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32b0      	adds	r2, #176	; 0xb0
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	; 0xb0
 8005726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d138      	bne.n	80057aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005738:	4b5e      	ldr	r3, [pc, #376]	; (80058b4 <USBD_CDC_Init+0x1e4>)
 800573a:	7819      	ldrb	r1, [r3, #0]
 800573c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005740:	2202      	movs	r2, #2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f002 fb6f 	bl	8007e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005748:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <USBD_CDC_Init+0x1e4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3324      	adds	r3, #36	; 0x24
 800575e:	2201      	movs	r2, #1
 8005760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005762:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800576a:	2202      	movs	r2, #2
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 fb5a 	bl	8007e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005772:	4b51      	ldr	r3, [pc, #324]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800578a:	2201      	movs	r2, #1
 800578c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800578e:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <USBD_CDC_Init+0x1ec>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3326      	adds	r3, #38	; 0x26
 80057a4:	2210      	movs	r2, #16
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e035      	b.n	8005816 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057aa:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ac:	7819      	ldrb	r1, [r3, #0]
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	2202      	movs	r2, #2
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f002 fb37 	bl	8007e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3324      	adds	r3, #36	; 0x24
 80057ce:	2201      	movs	r2, #1
 80057d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	2202      	movs	r2, #2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f002 fb23 	bl	8007e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057e0:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057f8:	2201      	movs	r2, #1
 80057fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <USBD_CDC_Init+0x1ec>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3326      	adds	r3, #38	; 0x26
 8005812:	2210      	movs	r2, #16
 8005814:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <USBD_CDC_Init+0x1ec>)
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	2308      	movs	r3, #8
 800581c:	2203      	movs	r2, #3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 fb01 	bl	8007e26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005824:	4b25      	ldr	r3, [pc, #148]	; (80058bc <USBD_CDC_Init+0x1ec>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3324      	adds	r3, #36	; 0x24
 800583a:	2201      	movs	r2, #1
 800583c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	33b0      	adds	r3, #176	; 0xb0
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005874:	2302      	movs	r3, #2
 8005876:	e018      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7c1b      	ldrb	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 8005882:	7819      	ldrb	r1, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800588a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f002 fbb8 	bl	8008004 <USBD_LL_PrepareReceive>
 8005894:	e008      	b.n	80058a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005896:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <USBD_CDC_Init+0x1e8>)
 8005898:	7819      	ldrb	r1, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058a0:	2340      	movs	r3, #64	; 0x40
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f002 fbae 	bl	8008004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000093 	.word	0x20000093
 80058b8:	20000094 	.word	0x20000094
 80058bc:	20000095 	.word	0x20000095

080058c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058cc:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 facd 	bl	8007e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058d8:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3324      	adds	r3, #36	; 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058f2:	4b32      	ldr	r3, [pc, #200]	; (80059bc <USBD_CDC_DeInit+0xfc>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 faba 	bl	8007e72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <USBD_CDC_DeInit+0xfc>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005916:	2200      	movs	r2, #0
 8005918:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <USBD_CDC_DeInit+0x100>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f002 faa6 	bl	8007e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <USBD_CDC_DeInit+0x100>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <USBD_CDC_DeInit+0x100>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3326      	adds	r3, #38	; 0x26
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	32b0      	adds	r2, #176	; 0xb0
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	33b0      	adds	r3, #176	; 0xb0
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32b0      	adds	r2, #176	; 0xb0
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fb7a 	bl	8008088 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	32b0      	adds	r2, #176	; 0xb0
 800599e:	2100      	movs	r1, #0
 80059a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000093 	.word	0x20000093
 80059bc:	20000094 	.word	0x20000094
 80059c0:	20000095 	.word	0x20000095

080059c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	32b0      	adds	r2, #176	; 0xb0
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0bf      	b.n	8005b74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d050      	beq.n	8005aa2 <USBD_CDC_Setup+0xde>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80af 	bne.w	8005b64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03a      	beq.n	8005a84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da1b      	bge.n	8005a50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	33b0      	adds	r3, #176	; 0xb0
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	88d2      	ldrh	r2, [r2, #6]
 8005a34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b07      	cmp	r3, #7
 8005a3c:	bf28      	it	cs
 8005a3e:	2307      	movcs	r3, #7
 8005a40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	89fa      	ldrh	r2, [r7, #14]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fd89 	bl	8007560 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a4e:	e090      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785a      	ldrb	r2, [r3, #1]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	88db      	ldrh	r3, [r3, #6]
 8005a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8005a60:	d803      	bhi.n	8005a6a <USBD_CDC_Setup+0xa6>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	e000      	b.n	8005a6c <USBD_CDC_Setup+0xa8>
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fd9b 	bl	80075b8 <USBD_CtlPrepareRx>
      break;
 8005a82:	e076      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	33b0      	adds	r3, #176	; 0xb0
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	7850      	ldrb	r0, [r2, #1]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4798      	blx	r3
      break;
 8005aa0:	e067      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b0b      	cmp	r3, #11
 8005aa8:	d851      	bhi.n	8005b4e <USBD_CDC_Setup+0x18a>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <USBD_CDC_Setup+0xec>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b0b 	.word	0x08005b0b
 8005adc:	08005b35 	.word	0x08005b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d107      	bne.n	8005afc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005aec:	f107 030a 	add.w	r3, r7, #10
 8005af0:	2202      	movs	r2, #2
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fd33 	bl	8007560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005afa:	e032      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fcbd 	bl	800747e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	75fb      	strb	r3, [r7, #23]
          break;
 8005b08:	e02b      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b16:	f107 030d 	add.w	r3, r7, #13
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fd1e 	bl	8007560 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b24:	e01d      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fca8 	bl	800747e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	75fb      	strb	r3, [r7, #23]
          break;
 8005b32:	e016      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d00f      	beq.n	8005b60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fc9b 	bl	800747e <USBD_CtlError>
            ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b4c:	e008      	b.n	8005b60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fc94 	bl	800747e <USBD_CtlError>
          ret = USBD_FAIL;
 8005b56:	2303      	movs	r3, #3
 8005b58:	75fb      	strb	r3, [r7, #23]
          break;
 8005b5a:	e002      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
          break;
 8005b5c:	bf00      	nop
 8005b5e:	e008      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          break;
 8005b60:	bf00      	nop
      }
      break;
 8005b62:	e006      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fc89 	bl	800747e <USBD_CtlError>
      ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32b0      	adds	r2, #176	; 0xb0
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e065      	b.n	8005c72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	32b0      	adds	r2, #176	; 0xb0
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3318      	adds	r3, #24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02f      	beq.n	8005c30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3318      	adds	r3, #24
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 010f 	and.w	r1, r3, #15
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4403      	add	r3, r0
 8005bf8:	3348      	adds	r3, #72	; 0x48
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d112      	bne.n	8005c30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c22:	78f9      	ldrb	r1, [r7, #3]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 f9ca 	bl	8007fc2 <USBD_LL_Transmit>
 8005c2e:	e01f      	b.n	8005c70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	33b0      	adds	r3, #176	; 0xb0
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	33b0      	adds	r3, #176	; 0xb0
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	32b0      	adds	r2, #176	; 0xb0
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	; 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e01a      	b.n	8005ce2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 f9c8 	bl	8008046 <USBD_LL_GetRxDataSize>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	33b0      	adds	r3, #176	; 0xb0
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	32b0      	adds	r2, #176	; 0xb0
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e025      	b.n	8005d58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	33b0      	adds	r3, #176	; 0xb0
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <USBD_CDC_EP0_RxReady+0x6c>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d26:	2bff      	cmp	r3, #255	; 0xff
 8005d28:	d015      	beq.n	8005d56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	33b0      	adds	r3, #176	; 0xb0
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	22ff      	movs	r2, #255	; 0xff
 8005d52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d68:	2182      	movs	r1, #130	; 0x82
 8005d6a:	4818      	ldr	r0, [pc, #96]	; (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d6c:	f000 fd4f 	bl	800680e <USBD_GetEpDesc>
 8005d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d72:	2101      	movs	r1, #1
 8005d74:	4815      	ldr	r0, [pc, #84]	; (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d76:	f000 fd4a 	bl	800680e <USBD_GetEpDesc>
 8005d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d7c:	2181      	movs	r1, #129	; 0x81
 8005d7e:	4813      	ldr	r0, [pc, #76]	; (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d80:	f000 fd45 	bl	800680e <USBD_GetEpDesc>
 8005d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da0:	711a      	strb	r2, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db4:	711a      	strb	r2, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2243      	movs	r2, #67	; 0x43
 8005dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dc0:	4b02      	ldr	r3, [pc, #8]	; (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000050 	.word	0x20000050

08005dd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dd8:	2182      	movs	r1, #130	; 0x82
 8005dda:	4818      	ldr	r0, [pc, #96]	; (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ddc:	f000 fd17 	bl	800680e <USBD_GetEpDesc>
 8005de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005de2:	2101      	movs	r1, #1
 8005de4:	4815      	ldr	r0, [pc, #84]	; (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005de6:	f000 fd12 	bl	800680e <USBD_GetEpDesc>
 8005dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dec:	2181      	movs	r1, #129	; 0x81
 8005dee:	4813      	ldr	r0, [pc, #76]	; (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005df0:	f000 fd0d 	bl	800680e <USBD_GetEpDesc>
 8005df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	711a      	strb	r2, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f042 0202 	orr.w	r2, r2, #2
 8005e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	711a      	strb	r2, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f042 0202 	orr.w	r2, r2, #2
 8005e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2243      	movs	r2, #67	; 0x43
 8005e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000050 	.word	0x20000050

08005e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e48:	2182      	movs	r1, #130	; 0x82
 8005e4a:	4818      	ldr	r0, [pc, #96]	; (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e4c:	f000 fcdf 	bl	800680e <USBD_GetEpDesc>
 8005e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e52:	2101      	movs	r1, #1
 8005e54:	4815      	ldr	r0, [pc, #84]	; (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e56:	f000 fcda 	bl	800680e <USBD_GetEpDesc>
 8005e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e5c:	2181      	movs	r1, #129	; 0x81
 8005e5e:	4813      	ldr	r0, [pc, #76]	; (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e60:	f000 fcd5 	bl	800680e <USBD_GetEpDesc>
 8005e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e80:	711a      	strb	r2, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e94:	711a      	strb	r2, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2243      	movs	r2, #67	; 0x43
 8005e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000050 	.word	0x20000050

08005eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	220a      	movs	r2, #10
 8005ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e009      	b.n	8005ef8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	33b0      	adds	r3, #176	; 0xb0
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	32b0      	adds	r2, #176	; 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e008      	b.n	8005f3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	32b0      	adds	r2, #176	; 0xb0
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e004      	b.n	8005f76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32b0      	adds	r2, #176	; 0xb0
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	; 0xb0
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e025      	b.n	8006002 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11f      	bne.n	8006000 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <USBD_CDC_TransmitPacket+0x88>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4403      	add	r3, r0
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <USBD_CDC_TransmitPacket+0x88>)
 8005fe8:	7819      	ldrb	r1, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 ffe3 	bl	8007fc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000093 	.word	0x20000093

08006010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	32b0      	adds	r2, #176	; 0xb0
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	32b0      	adds	r2, #176	; 0xb0
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800603a:	2303      	movs	r3, #3
 800603c:	e018      	b.n	8006070 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7c1b      	ldrb	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <USBD_CDC_ReceivePacket+0x68>)
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 ffd5 	bl	8008004 <USBD_LL_PrepareReceive>
 800605a:	e008      	b.n	800606e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <USBD_CDC_ReceivePacket+0x68>)
 800605e:	7819      	ldrb	r1, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 ffcb 	bl	8008004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000094 	.word	0x20000094

0800607c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	e01f      	b.n	80060d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	79fa      	ldrb	r2, [r7, #7]
 80060c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 fe45 	bl	8007d58 <USBD_LL_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e025      	b.n	8006140 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	32ae      	adds	r2, #174	; 0xae
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00f      	beq.n	8006130 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32ae      	adds	r2, #174	; 0xae
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	f107 020e 	add.w	r2, r7, #14
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fe4d 	bl	8007df0 <USBD_LL_Start>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	4611      	mov	r1, r2
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	4611      	mov	r1, r2
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 f908 	bl	800740a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2b02      	cmp	r3, #2
 800621c:	d01a      	beq.n	8006254 <USBD_LL_SetupStage+0x72>
 800621e:	2b02      	cmp	r3, #2
 8006220:	d822      	bhi.n	8006268 <USBD_LL_SetupStage+0x86>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <USBD_LL_SetupStage+0x4a>
 8006226:	2b01      	cmp	r3, #1
 8006228:	d00a      	beq.n	8006240 <USBD_LL_SetupStage+0x5e>
 800622a:	e01d      	b.n	8006268 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fb5f 	bl	80068f8 <USBD_StdDevReq>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
      break;
 800623e:	e020      	b.n	8006282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fbc7 	bl	80069dc <USBD_StdItfReq>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]
      break;
 8006252:	e016      	b.n	8006282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fc29 	bl	8006ab4 <USBD_StdEPReq>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
      break;
 8006266:	e00c      	b.n	8006282 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800626e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006272:	b2db      	uxtb	r3, r3
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fe1a 	bl	8007eb0 <USBD_LL_StallEP>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
      break;
 8006280:	bf00      	nop
  }

  return ret;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	460b      	mov	r3, r1
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d16e      	bne.n	8006382 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	f040 8098 	bne.w	80063e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d913      	bls.n	80062ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4293      	cmp	r3, r2
 80062dc:	bf28      	it	cs
 80062de:	4613      	movcs	r3, r2
 80062e0:	461a      	mov	r2, r3
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f001 f984 	bl	80075f2 <USBD_CtlContinueRx>
 80062ea:	e07d      	b.n	80063e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d014      	beq.n	8006324 <USBD_LL_DataOutStage+0x98>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d81d      	bhi.n	800633a <USBD_LL_DataOutStage+0xae>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <USBD_LL_DataOutStage+0x7c>
 8006302:	2b01      	cmp	r3, #1
 8006304:	d003      	beq.n	800630e <USBD_LL_DataOutStage+0x82>
 8006306:	e018      	b.n	800633a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	75bb      	strb	r3, [r7, #22]
            break;
 800630c:	e018      	b.n	8006340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006314:	b2db      	uxtb	r3, r3
 8006316:	4619      	mov	r1, r3
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fa5e 	bl	80067da <USBD_CoreFindIF>
 800631e:	4603      	mov	r3, r0
 8006320:	75bb      	strb	r3, [r7, #22]
            break;
 8006322:	e00d      	b.n	8006340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800632a:	b2db      	uxtb	r3, r3
 800632c:	4619      	mov	r1, r3
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa60 	bl	80067f4 <USBD_CoreFindEP>
 8006334:	4603      	mov	r3, r0
 8006336:	75bb      	strb	r3, [r7, #22]
            break;
 8006338:	e002      	b.n	8006340 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	75bb      	strb	r3, [r7, #22]
            break;
 800633e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006340:	7dbb      	ldrb	r3, [r7, #22]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d119      	bne.n	800637a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d113      	bne.n	800637a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006352:	7dba      	ldrb	r2, [r7, #22]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	32ae      	adds	r2, #174	; 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006362:	7dba      	ldrb	r2, [r7, #22]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800636a:	7dba      	ldrb	r2, [r7, #22]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	32ae      	adds	r2, #174	; 0xae
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 f94a 	bl	8007614 <USBD_CtlSendStatus>
 8006380:	e032      	b.n	80063e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fa31 	bl	80067f4 <USBD_CoreFindEP>
 8006392:	4603      	mov	r3, r0
 8006394:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006396:	7dbb      	ldrb	r3, [r7, #22]
 8006398:	2bff      	cmp	r3, #255	; 0xff
 800639a:	d025      	beq.n	80063e8 <USBD_LL_DataOutStage+0x15c>
 800639c:	7dbb      	ldrb	r3, [r7, #22]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d122      	bne.n	80063e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d117      	bne.n	80063de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063ae:	7dba      	ldrb	r2, [r7, #22]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	32ae      	adds	r2, #174	; 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063be:	7dba      	ldrb	r2, [r7, #22]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063c6:	7dba      	ldrb	r2, [r7, #22]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	32ae      	adds	r2, #174	; 0xae
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	7afa      	ldrb	r2, [r7, #11]
 80063d4:	4611      	mov	r1, r2
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	e000      	b.n	80063ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	460b      	mov	r3, r1
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d16f      	bne.n	80064e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3314      	adds	r3, #20
 800640a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006412:	2b02      	cmp	r3, #2
 8006414:	d15a      	bne.n	80064cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d914      	bls.n	800644c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	461a      	mov	r2, r3
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 f8ac 	bl	8007596 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800643e:	2300      	movs	r3, #0
 8006440:	2200      	movs	r2, #0
 8006442:	2100      	movs	r1, #0
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f001 fddd 	bl	8008004 <USBD_LL_PrepareReceive>
 800644a:	e03f      	b.n	80064cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d11c      	bne.n	8006492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006460:	429a      	cmp	r2, r3
 8006462:	d316      	bcc.n	8006492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800646e:	429a      	cmp	r2, r3
 8006470:	d20f      	bcs.n	8006492 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 f88d 	bl	8007596 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006484:	2300      	movs	r3, #0
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f001 fdba 	bl	8008004 <USBD_LL_PrepareReceive>
 8006490:	e01c      	b.n	80064cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d10f      	bne.n	80064be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f001 fcf5 	bl	8007eb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 f8b7 	bl	800763a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d03a      	beq.n	800654c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fe42 	bl	8006160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064e4:	e032      	b.n	800654c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f97f 	bl	80067f4 <USBD_CoreFindEP>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2bff      	cmp	r3, #255	; 0xff
 80064fe:	d025      	beq.n	800654c <USBD_LL_DataInStage+0x15a>
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d122      	bne.n	800654c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d11c      	bne.n	800654c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006512:	7dfa      	ldrb	r2, [r7, #23]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	32ae      	adds	r2, #174	; 0xae
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d014      	beq.n	800654c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006522:	7dfa      	ldrb	r2, [r7, #23]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800652a:	7dfa      	ldrb	r2, [r7, #23]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	32ae      	adds	r2, #174	; 0xae
 8006530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	7afa      	ldrb	r2, [r7, #11]
 8006538:	4611      	mov	r1, r2
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	4798      	blx	r3
 800653e:	4603      	mov	r3, r0
 8006540:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006542:	7dbb      	ldrb	r3, [r7, #22]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006548:	7dbb      	ldrb	r3, [r7, #22]
 800654a:	e000      	b.n	800654e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d014      	beq.n	80065bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6852      	ldr	r2, [r2, #4]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	4611      	mov	r1, r2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065bc:	2340      	movs	r3, #64	; 0x40
 80065be:	2200      	movs	r2, #0
 80065c0:	2100      	movs	r1, #0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fc2f 	bl	8007e26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065d8:	2340      	movs	r3, #64	; 0x40
 80065da:	2200      	movs	r2, #0
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fc21 	bl	8007e26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2240      	movs	r2, #64	; 0x40
 80065ee:	621a      	str	r2, [r3, #32]

  return ret;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2da      	uxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b04      	cmp	r3, #4
 8006658:	d106      	bne.n	8006668 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006660:	b2da      	uxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d110      	bne.n	80066ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	32ae      	adds	r2, #174	; 0xae
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01c      	b.n	8006712 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d115      	bne.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	; 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32ae      	adds	r2, #174	; 0xae
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	4611      	mov	r1, r2
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	; 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	e01c      	b.n	8006776 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d115      	bne.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32ae      	adds	r2, #174	; 0xae
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32ae      	adds	r2, #174	; 0xae
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	4611      	mov	r1, r2
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6852      	ldr	r2, [r2, #4]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	4611      	mov	r1, r2
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006800:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	429a      	cmp	r2, r3
 8006834:	d920      	bls.n	8006878 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800683e:	e013      	b.n	8006868 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006840:	f107 030a 	add.w	r3, r7, #10
 8006844:	4619      	mov	r1, r3
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f000 f81b 	bl	8006882 <USBD_GetNextDesc>
 800684c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b05      	cmp	r3, #5
 8006854:	d108      	bne.n	8006868 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	789b      	ldrb	r3, [r3, #2]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	429a      	cmp	r2, r3
 8006862:	d008      	beq.n	8006876 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	885b      	ldrh	r3, [r3, #2]
 800686c:	b29a      	uxth	r2, r3
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	429a      	cmp	r2, r3
 8006872:	d8e5      	bhi.n	8006840 <USBD_GetEpDesc+0x32>
 8006874:	e000      	b.n	8006878 <USBD_GetEpDesc+0x6a>
          break;
 8006876:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006878:	693b      	ldr	r3, [r7, #16]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	4413      	add	r3, r2
 800689c:	b29a      	uxth	r2, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068da:	8a3b      	ldrh	r3, [r7, #16]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	b21a      	sxth	r2, r3
 80068e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	b21b      	sxth	r3, r3
 80068e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068ea:	89fb      	ldrh	r3, [r7, #14]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d005      	beq.n	800691e <USBD_StdDevReq+0x26>
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d857      	bhi.n	80069c6 <USBD_StdDevReq+0xce>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00f      	beq.n	800693a <USBD_StdDevReq+0x42>
 800691a:	2b20      	cmp	r3, #32
 800691c:	d153      	bne.n	80069c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	32ae      	adds	r2, #174	; 0xae
 8006928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	e04a      	b.n	80069d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b09      	cmp	r3, #9
 8006940:	d83b      	bhi.n	80069ba <USBD_StdDevReq+0xc2>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <USBD_StdDevReq+0x50>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	0800699d 	.word	0x0800699d
 800694c:	080069b1 	.word	0x080069b1
 8006950:	080069bb 	.word	0x080069bb
 8006954:	080069a7 	.word	0x080069a7
 8006958:	080069bb 	.word	0x080069bb
 800695c:	0800697b 	.word	0x0800697b
 8006960:	08006971 	.word	0x08006971
 8006964:	080069bb 	.word	0x080069bb
 8006968:	08006993 	.word	0x08006993
 800696c:	08006985 	.word	0x08006985
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa3c 	bl	8006df0 <USBD_GetDescriptor>
          break;
 8006978:	e024      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fba1 	bl	80070c4 <USBD_SetAddress>
          break;
 8006982:	e01f      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fbe0 	bl	800714c <USBD_SetConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]
          break;
 8006990:	e018      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc83 	bl	80072a0 <USBD_GetConfig>
          break;
 800699a:	e013      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fcb4 	bl	800730c <USBD_GetStatus>
          break;
 80069a4:	e00e      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fce3 	bl	8007374 <USBD_SetFeature>
          break;
 80069ae:	e009      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fd07 	bl	80073c6 <USBD_ClrFeature>
          break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fd5e 	bl	800747e <USBD_CtlError>
          break;
 80069c2:	bf00      	nop
      }
      break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd58 	bl	800747e <USBD_CtlError>
      break;
 80069ce:	bf00      	nop
  }

  return ret;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop

080069dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d005      	beq.n	8006a02 <USBD_StdItfReq+0x26>
 80069f6:	2b40      	cmp	r3, #64	; 0x40
 80069f8:	d852      	bhi.n	8006aa0 <USBD_StdItfReq+0xc4>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <USBD_StdItfReq+0x26>
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d14e      	bne.n	8006aa0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d840      	bhi.n	8006a92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	889b      	ldrh	r3, [r3, #4]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d836      	bhi.n	8006a88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	889b      	ldrh	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fed9 	bl	80067da <USBD_CoreFindIF>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2bff      	cmp	r3, #255	; 0xff
 8006a30:	d01d      	beq.n	8006a6e <USBD_StdItfReq+0x92>
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a38:	7bba      	ldrb	r2, [r7, #14]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32ae      	adds	r2, #174	; 0xae
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a48:	7bba      	ldrb	r2, [r7, #14]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a50:	7bba      	ldrb	r2, [r7, #14]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32ae      	adds	r2, #174	; 0xae
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a66:	e004      	b.n	8006a72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a6c:	e001      	b.n	8006a72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d110      	bne.n	8006a9c <USBD_StdItfReq+0xc0>
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10d      	bne.n	8006a9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fdc7 	bl	8007614 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a86:	e009      	b.n	8006a9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fcf7 	bl	800747e <USBD_CtlError>
          break;
 8006a90:	e004      	b.n	8006a9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fcf2 	bl	800747e <USBD_CtlError>
          break;
 8006a9a:	e000      	b.n	8006a9e <USBD_StdItfReq+0xc2>
          break;
 8006a9c:	bf00      	nop
      }
      break;
 8006a9e:	e004      	b.n	8006aaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fceb 	bl	800747e <USBD_CtlError>
      break;
 8006aa8:	bf00      	nop
  }

  return ret;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d007      	beq.n	8006ae4 <USBD_StdEPReq+0x30>
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	f200 817f 	bhi.w	8006dd8 <USBD_StdEPReq+0x324>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d02a      	beq.n	8006b34 <USBD_StdEPReq+0x80>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	f040 817a 	bne.w	8006dd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fe83 	bl	80067f4 <USBD_CoreFindEP>
 8006aee:	4603      	mov	r3, r0
 8006af0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006af2:	7b7b      	ldrb	r3, [r7, #13]
 8006af4:	2bff      	cmp	r3, #255	; 0xff
 8006af6:	f000 8174 	beq.w	8006de2 <USBD_StdEPReq+0x32e>
 8006afa:	7b7b      	ldrb	r3, [r7, #13]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8170 	bne.w	8006de2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b0a:	7b7a      	ldrb	r2, [r7, #13]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	32ae      	adds	r2, #174	; 0xae
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8163 	beq.w	8006de2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b1c:	7b7a      	ldrb	r2, [r7, #13]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32ae      	adds	r2, #174	; 0xae
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b32:	e156      	b.n	8006de2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d008      	beq.n	8006b4e <USBD_StdEPReq+0x9a>
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	f300 8145 	bgt.w	8006dcc <USBD_StdEPReq+0x318>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 809b 	beq.w	8006c7e <USBD_StdEPReq+0x1ca>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d03c      	beq.n	8006bc6 <USBD_StdEPReq+0x112>
 8006b4c:	e13e      	b.n	8006dcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d002      	beq.n	8006b60 <USBD_StdEPReq+0xac>
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d016      	beq.n	8006b8c <USBD_StdEPReq+0xd8>
 8006b5e:	e02c      	b.n	8006bba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <USBD_StdEPReq+0xce>
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b80      	cmp	r3, #128	; 0x80
 8006b6a:	d00a      	beq.n	8006b82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f99d 	bl	8007eb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f999 	bl	8007eb0 <USBD_LL_StallEP>
 8006b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b80:	e020      	b.n	8006bc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc7a 	bl	800747e <USBD_CtlError>
              break;
 8006b8a:	e01b      	b.n	8006bc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10e      	bne.n	8006bb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <USBD_StdEPReq+0xfe>
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d008      	beq.n	8006bb2 <USBD_StdEPReq+0xfe>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f97f 	bl	8007eb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fd2e 	bl	8007614 <USBD_CtlSendStatus>

              break;
 8006bb8:	e004      	b.n	8006bc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fc5e 	bl	800747e <USBD_CtlError>
              break;
 8006bc2:	bf00      	nop
          }
          break;
 8006bc4:	e107      	b.n	8006dd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d002      	beq.n	8006bd8 <USBD_StdEPReq+0x124>
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d016      	beq.n	8006c04 <USBD_StdEPReq+0x150>
 8006bd6:	e04b      	b.n	8006c70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <USBD_StdEPReq+0x146>
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b80      	cmp	r3, #128	; 0x80
 8006be2:	d00a      	beq.n	8006bfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f961 	bl	8007eb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f95d 	bl	8007eb0 <USBD_LL_StallEP>
 8006bf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bf8:	e040      	b.n	8006c7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc3e 	bl	800747e <USBD_CtlError>
              break;
 8006c02:	e03b      	b.n	8006c7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	885b      	ldrh	r3, [r3, #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d136      	bne.n	8006c7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 f967 	bl	8007eee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcf7 	bl	8007614 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fde2 	bl	80067f4 <USBD_CoreFindEP>
 8006c30:	4603      	mov	r3, r0
 8006c32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c34:	7b7b      	ldrb	r3, [r7, #13]
 8006c36:	2bff      	cmp	r3, #255	; 0xff
 8006c38:	d01f      	beq.n	8006c7a <USBD_StdEPReq+0x1c6>
 8006c3a:	7b7b      	ldrb	r3, [r7, #13]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11c      	bne.n	8006c7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c40:	7b7a      	ldrb	r2, [r7, #13]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c48:	7b7a      	ldrb	r2, [r7, #13]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32ae      	adds	r2, #174	; 0xae
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c58:	7b7a      	ldrb	r2, [r7, #13]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	32ae      	adds	r2, #174	; 0xae
 8006c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c6e:	e004      	b.n	8006c7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fc03 	bl	800747e <USBD_CtlError>
              break;
 8006c78:	e000      	b.n	8006c7c <USBD_StdEPReq+0x1c8>
              break;
 8006c7a:	bf00      	nop
          }
          break;
 8006c7c:	e0ab      	b.n	8006dd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d002      	beq.n	8006c90 <USBD_StdEPReq+0x1dc>
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d032      	beq.n	8006cf4 <USBD_StdEPReq+0x240>
 8006c8e:	e097      	b.n	8006dc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <USBD_StdEPReq+0x1f2>
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b80      	cmp	r3, #128	; 0x80
 8006c9a:	d004      	beq.n	8006ca6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fbed 	bl	800747e <USBD_CtlError>
                break;
 8006ca4:	e091      	b.n	8006dca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da0b      	bge.n	8006cc6 <USBD_StdEPReq+0x212>
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	e00b      	b.n	8006cde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4413      	add	r3, r2
 8006cdc:	3304      	adds	r3, #4
 8006cde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fc37 	bl	8007560 <USBD_CtlSendData>
              break;
 8006cf2:	e06a      	b.n	8006dca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da11      	bge.n	8006d20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d117      	bne.n	8006d46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fbb0 	bl	800747e <USBD_CtlError>
                  break;
 8006d1e:	e054      	b.n	8006dca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	f003 020f 	and.w	r2, r3, #15
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb9d 	bl	800747e <USBD_CtlError>
                  break;
 8006d44:	e041      	b.n	8006dca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da0b      	bge.n	8006d66 <USBD_StdEPReq+0x2b2>
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	3310      	adds	r3, #16
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	3304      	adds	r3, #4
 8006d64:	e00b      	b.n	8006d7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <USBD_StdEPReq+0x2d8>
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b80      	cmp	r3, #128	; 0x80
 8006d8a:	d103      	bne.n	8006d94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e00e      	b.n	8006db2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f8c7 	bl	8007f2c <USBD_LL_IsStallEP>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2202      	movs	r2, #2
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fbd1 	bl	8007560 <USBD_CtlSendData>
              break;
 8006dbe:	e004      	b.n	8006dca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb5b 	bl	800747e <USBD_CtlError>
              break;
 8006dc8:	bf00      	nop
          }
          break;
 8006dca:	e004      	b.n	8006dd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fb55 	bl	800747e <USBD_CtlError>
          break;
 8006dd4:	bf00      	nop
      }
      break;
 8006dd6:	e005      	b.n	8006de4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb4f 	bl	800747e <USBD_CtlError>
      break;
 8006de0:	e000      	b.n	8006de4 <USBD_StdEPReq+0x330>
      break;
 8006de2:	bf00      	nop
  }

  return ret;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	2b06      	cmp	r3, #6
 8006e12:	f200 8128 	bhi.w	8007066 <USBD_GetDescriptor+0x276>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBD_GetDescriptor+0x2c>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08007067 	.word	0x08007067
 8006e2c:	08007067 	.word	0x08007067
 8006e30:	08007007 	.word	0x08007007
 8006e34:	08007033 	.word	0x08007033
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
      break;
 8006e4e:	e112      	b.n	8007076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7c1b      	ldrb	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10d      	bne.n	8006e74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f107 0208 	add.w	r2, r7, #8
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	2202      	movs	r2, #2
 8006e70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e72:	e100      	b.n	8007076 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	701a      	strb	r2, [r3, #0]
      break;
 8006e8e:	e0f2      	b.n	8007076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	f200 80ac 	bhi.w	8006ff4 <USBD_GetDescriptor+0x204>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <USBD_GetDescriptor+0xb4>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ebd 	.word	0x08006ebd
 8006ea8:	08006ef1 	.word	0x08006ef1
 8006eac:	08006f25 	.word	0x08006f25
 8006eb0:	08006f59 	.word	0x08006f59
 8006eb4:	08006f8d 	.word	0x08006f8d
 8006eb8:	08006fc1 	.word	0x08006fc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ede:	e091      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 facb 	bl	800747e <USBD_CtlError>
            err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
          break;
 8006eee:	e089      	b.n	8007004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e077      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fab1 	bl	800747e <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e06f      	b.n	8007004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e05d      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa97 	bl	800747e <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e055      	b.n	8007004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e043      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa7d 	bl	800747e <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e03b      	b.n	8007004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fae:	e029      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa63 	bl	800747e <USBD_CtlError>
            err++;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fbe:	e021      	b.n	8007004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7c12      	ldrb	r2, [r2, #16]
 8006fd8:	f107 0108 	add.w	r1, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fe2:	e00f      	b.n	8007004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa49 	bl	800747e <USBD_CtlError>
            err++;
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ff2:	e007      	b.n	8007004 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa41 	bl	800747e <USBD_CtlError>
          err++;
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	3301      	adds	r3, #1
 8007000:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007002:	bf00      	nop
      }
      break;
 8007004:	e037      	b.n	8007076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7c1b      	ldrb	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007016:	f107 0208 	add.w	r2, r7, #8
 800701a:	4610      	mov	r0, r2
 800701c:	4798      	blx	r3
 800701e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007020:	e029      	b.n	8007076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fa2a 	bl	800747e <USBD_CtlError>
        err++;
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	3301      	adds	r3, #1
 800702e:	72fb      	strb	r3, [r7, #11]
      break;
 8007030:	e021      	b.n	8007076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7c1b      	ldrb	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10d      	bne.n	8007056 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f107 0208 	add.w	r2, r7, #8
 8007046:	4610      	mov	r0, r2
 8007048:	4798      	blx	r3
 800704a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	2207      	movs	r2, #7
 8007052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007054:	e00f      	b.n	8007076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa10 	bl	800747e <USBD_CtlError>
        err++;
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	3301      	adds	r3, #1
 8007062:	72fb      	strb	r3, [r7, #11]
      break;
 8007064:	e007      	b.n	8007076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa08 	bl	800747e <USBD_CtlError>
      err++;
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	3301      	adds	r3, #1
 8007072:	72fb      	strb	r3, [r7, #11]
      break;
 8007074:	bf00      	nop
  }

  if (err != 0U)
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11e      	bne.n	80070ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	88db      	ldrh	r3, [r3, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d016      	beq.n	80070b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00e      	beq.n	80070a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	88da      	ldrh	r2, [r3, #6]
 800708e:	893b      	ldrh	r3, [r7, #8]
 8007090:	4293      	cmp	r3, r2
 8007092:	bf28      	it	cs
 8007094:	4613      	movcs	r3, r2
 8007096:	b29b      	uxth	r3, r3
 8007098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800709a:	893b      	ldrh	r3, [r7, #8]
 800709c:	461a      	mov	r2, r3
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa5d 	bl	8007560 <USBD_CtlSendData>
 80070a6:	e009      	b.n	80070bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9e7 	bl	800747e <USBD_CtlError>
 80070b0:	e004      	b.n	80070bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 faae 	bl	8007614 <USBD_CtlSendStatus>
 80070b8:	e000      	b.n	80070bc <USBD_GetDescriptor+0x2cc>
    return;
 80070ba:	bf00      	nop
  }
}
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop

080070c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	889b      	ldrh	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d131      	bne.n	800713a <USBD_SetAddress+0x76>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	88db      	ldrh	r3, [r3, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d12d      	bne.n	800713a <USBD_SetAddress+0x76>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	2b7f      	cmp	r3, #127	; 0x7f
 80070e4:	d829      	bhi.n	800713a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d104      	bne.n	8007108 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9bc 	bl	800747e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007106:	e01d      	b.n	8007144 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7bfa      	ldrb	r2, [r7, #15]
 800710c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 ff35 	bl	8007f84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa7a 	bl	8007614 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712e:	e009      	b.n	8007144 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007138:	e004      	b.n	8007144 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f99e 	bl	800747e <USBD_CtlError>
  }
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	4b4e      	ldr	r3, [pc, #312]	; (800729c <USBD_SetConfig+0x150>)
 8007162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007164:	4b4d      	ldr	r3, [pc, #308]	; (800729c <USBD_SetConfig+0x150>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d905      	bls.n	8007178 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f985 	bl	800747e <USBD_CtlError>
    return USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	e08c      	b.n	8007292 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d002      	beq.n	800718a <USBD_SetConfig+0x3e>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d029      	beq.n	80071dc <USBD_SetConfig+0x90>
 8007188:	e075      	b.n	8007276 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800718a:	4b44      	ldr	r3, [pc, #272]	; (800729c <USBD_SetConfig+0x150>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d020      	beq.n	80071d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007192:	4b42      	ldr	r3, [pc, #264]	; (800729c <USBD_SetConfig+0x150>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800719c:	4b3f      	ldr	r3, [pc, #252]	; (800729c <USBD_SetConfig+0x150>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fe ffe7 	bl	8006176 <USBD_SetClassConfig>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f962 	bl	800747e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071c2:	e065      	b.n	8007290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa25 	bl	8007614 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071d2:	e05d      	b.n	8007290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa1d 	bl	8007614 <USBD_CtlSendStatus>
      break;
 80071da:	e059      	b.n	8007290 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071dc:	4b2f      	ldr	r3, [pc, #188]	; (800729c <USBD_SetConfig+0x150>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d112      	bne.n	800720a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071ec:	4b2b      	ldr	r3, [pc, #172]	; (800729c <USBD_SetConfig+0x150>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <USBD_SetConfig+0x150>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fe ffd6 	bl	80061ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa06 	bl	8007614 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007208:	e042      	b.n	8007290 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <USBD_SetConfig+0x150>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d02a      	beq.n	800726e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe ffc4 	bl	80061ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <USBD_SetConfig+0x150>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007230:	4b1a      	ldr	r3, [pc, #104]	; (800729c <USBD_SetConfig+0x150>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fe ff9d 	bl	8006176 <USBD_SetClassConfig>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f918 	bl	800747e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fe ffa9 	bl	80061ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007264:	e014      	b.n	8007290 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f9d4 	bl	8007614 <USBD_CtlSendStatus>
      break;
 800726c:	e010      	b.n	8007290 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9d0 	bl	8007614 <USBD_CtlSendStatus>
      break;
 8007274:	e00c      	b.n	8007290 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f900 	bl	800747e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <USBD_SetConfig+0x150>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fe ff92 	bl	80061ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800728a:	2303      	movs	r3, #3
 800728c:	73fb      	strb	r3, [r7, #15]
      break;
 800728e:	bf00      	nop
  }

  return ret;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200001a4 	.word	0x200001a4

080072a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	88db      	ldrh	r3, [r3, #6]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d004      	beq.n	80072bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8e2 	bl	800747e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ba:	e023      	b.n	8007304 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	dc02      	bgt.n	80072ce <USBD_GetConfig+0x2e>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dc03      	bgt.n	80072d4 <USBD_GetConfig+0x34>
 80072cc:	e015      	b.n	80072fa <USBD_GetConfig+0x5a>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d00b      	beq.n	80072ea <USBD_GetConfig+0x4a>
 80072d2:	e012      	b.n	80072fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3308      	adds	r3, #8
 80072de:	2201      	movs	r2, #1
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f93c 	bl	8007560 <USBD_CtlSendData>
        break;
 80072e8:	e00c      	b.n	8007304 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2201      	movs	r2, #1
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f934 	bl	8007560 <USBD_CtlSendData>
        break;
 80072f8:	e004      	b.n	8007304 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f8be 	bl	800747e <USBD_CtlError>
        break;
 8007302:	bf00      	nop
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	2b02      	cmp	r3, #2
 8007322:	d81e      	bhi.n	8007362 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d004      	beq.n	8007336 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8a5 	bl	800747e <USBD_CtlError>
        break;
 8007334:	e01a      	b.n	800736c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 0202 	orr.w	r2, r3, #2
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	330c      	adds	r3, #12
 8007356:	2202      	movs	r2, #2
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f900 	bl	8007560 <USBD_CtlSendData>
      break;
 8007360:	e004      	b.n	800736c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f88a 	bl	800747e <USBD_CtlError>
      break;
 800736a:	bf00      	nop
  }
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d107      	bne.n	8007396 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f940 	bl	8007614 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007394:	e013      	b.n	80073be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	885b      	ldrh	r3, [r3, #2]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d10b      	bne.n	80073b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	889b      	ldrh	r3, [r3, #4]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f930 	bl	8007614 <USBD_CtlSendStatus>
}
 80073b4:	e003      	b.n	80073be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f860 	bl	800747e <USBD_CtlError>
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d80b      	bhi.n	80073f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d10c      	bne.n	8007400 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f910 	bl	8007614 <USBD_CtlSendStatus>
      }
      break;
 80073f4:	e004      	b.n	8007400 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f840 	bl	800747e <USBD_CtlError>
      break;
 80073fe:	e000      	b.n	8007402 <USBD_ClrFeature+0x3c>
      break;
 8007400:	bf00      	nop
  }
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	781a      	ldrb	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fa41 	bl	80068bc <SWAPBYTE>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff fa34 	bl	80068bc <SWAPBYTE>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fa27 	bl	80068bc <SWAPBYTE>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	80da      	strh	r2, [r3, #6]
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fd10 	bl	8007eb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd0c 	bl	8007eb0 <USBD_LL_StallEP>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d036      	beq.n	8007524 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f000 f836 	bl	800752c <USBD_GetLen>
 80074c0:	4603      	mov	r3, r0
 80074c2:	3301      	adds	r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	3301      	adds	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	4413      	add	r3, r2
 80074e6:	2203      	movs	r2, #3
 80074e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	3301      	adds	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074f0:	e013      	b.n	800751a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	3301      	adds	r3, #1
 8007502:	613b      	str	r3, [r7, #16]
    idx++;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	3301      	adds	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	4413      	add	r3, r2
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
    idx++;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	3301      	adds	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e7      	bne.n	80074f2 <USBD_GetString+0x52>
 8007522:	e000      	b.n	8007526 <USBD_GetString+0x86>
    return;
 8007524:	bf00      	nop
  }
}
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800753c:	e005      	b.n	800754a <USBD_GetLen+0x1e>
  {
    len++;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	3301      	adds	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	3301      	adds	r3, #1
 8007548:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f5      	bne.n	800753e <USBD_GetLen+0x12>
  }

  return len;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2202      	movs	r2, #2
 8007570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fd1b 	bl	8007fc2 <USBD_LL_Transmit>

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	2100      	movs	r1, #0
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fd0a 	bl	8007fc2 <USBD_LL_Transmit>

  return USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2203      	movs	r2, #3
 80075c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	2100      	movs	r1, #0
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fd0e 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	2100      	movs	r1, #0
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fcfd 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007624:	2300      	movs	r3, #0
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fcc9 	bl	8007fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2205      	movs	r2, #5
 8007646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800764a:	2300      	movs	r3, #0
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fcd7 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007664:	2200      	movs	r2, #0
 8007666:	4912      	ldr	r1, [pc, #72]	; (80076b0 <MX_USB_DEVICE_Init+0x50>)
 8007668:	4812      	ldr	r0, [pc, #72]	; (80076b4 <MX_USB_DEVICE_Init+0x54>)
 800766a:	f7fe fd07 	bl	800607c <USBD_Init>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007674:	f7f9 f976 	bl	8000964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007678:	490f      	ldr	r1, [pc, #60]	; (80076b8 <MX_USB_DEVICE_Init+0x58>)
 800767a:	480e      	ldr	r0, [pc, #56]	; (80076b4 <MX_USB_DEVICE_Init+0x54>)
 800767c:	f7fe fd2e 	bl	80060dc <USBD_RegisterClass>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007686:	f7f9 f96d 	bl	8000964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800768a:	490c      	ldr	r1, [pc, #48]	; (80076bc <MX_USB_DEVICE_Init+0x5c>)
 800768c:	4809      	ldr	r0, [pc, #36]	; (80076b4 <MX_USB_DEVICE_Init+0x54>)
 800768e:	f7fe fc1f 	bl	8005ed0 <USBD_CDC_RegisterInterface>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007698:	f7f9 f964 	bl	8000964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800769c:	4805      	ldr	r0, [pc, #20]	; (80076b4 <MX_USB_DEVICE_Init+0x54>)
 800769e:	f7fe fd53 	bl	8006148 <USBD_Start>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076a8:	f7f9 f95c 	bl	8000964 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076ac:	bf00      	nop
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200000ac 	.word	0x200000ac
 80076b4:	200001a8 	.word	0x200001a8
 80076b8:	20000018 	.word	0x20000018
 80076bc:	20000098 	.word	0x20000098

080076c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076c4:	2200      	movs	r2, #0
 80076c6:	4905      	ldr	r1, [pc, #20]	; (80076dc <CDC_Init_FS+0x1c>)
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <CDC_Init_FS+0x20>)
 80076ca:	f7fe fc1b 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076ce:	4905      	ldr	r1, [pc, #20]	; (80076e4 <CDC_Init_FS+0x24>)
 80076d0:	4803      	ldr	r0, [pc, #12]	; (80076e0 <CDC_Init_FS+0x20>)
 80076d2:	f7fe fc39 	bl	8005f48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000c84 	.word	0x20000c84
 80076e0:	200001a8 	.word	0x200001a8
 80076e4:	20000484 	.word	0x20000484

080076e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
 8007704:	4613      	mov	r3, r2
 8007706:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b23      	cmp	r3, #35	; 0x23
 800770c:	d84a      	bhi.n	80077a4 <CDC_Control_FS+0xac>
 800770e:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <CDC_Control_FS+0x1c>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	080077a5 	.word	0x080077a5
 8007718:	080077a5 	.word	0x080077a5
 800771c:	080077a5 	.word	0x080077a5
 8007720:	080077a5 	.word	0x080077a5
 8007724:	080077a5 	.word	0x080077a5
 8007728:	080077a5 	.word	0x080077a5
 800772c:	080077a5 	.word	0x080077a5
 8007730:	080077a5 	.word	0x080077a5
 8007734:	080077a5 	.word	0x080077a5
 8007738:	080077a5 	.word	0x080077a5
 800773c:	080077a5 	.word	0x080077a5
 8007740:	080077a5 	.word	0x080077a5
 8007744:	080077a5 	.word	0x080077a5
 8007748:	080077a5 	.word	0x080077a5
 800774c:	080077a5 	.word	0x080077a5
 8007750:	080077a5 	.word	0x080077a5
 8007754:	080077a5 	.word	0x080077a5
 8007758:	080077a5 	.word	0x080077a5
 800775c:	080077a5 	.word	0x080077a5
 8007760:	080077a5 	.word	0x080077a5
 8007764:	080077a5 	.word	0x080077a5
 8007768:	080077a5 	.word	0x080077a5
 800776c:	080077a5 	.word	0x080077a5
 8007770:	080077a5 	.word	0x080077a5
 8007774:	080077a5 	.word	0x080077a5
 8007778:	080077a5 	.word	0x080077a5
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077a5 	.word	0x080077a5
 8007784:	080077a5 	.word	0x080077a5
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077a5 	.word	0x080077a5
 8007790:	080077a5 	.word	0x080077a5
 8007794:	080077a5 	.word	0x080077a5
 8007798:	080077a5 	.word	0x080077a5
 800779c:	080077a5 	.word	0x080077a5
 80077a0:	080077a5 	.word	0x080077a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077a4:	bf00      	nop
  }

  return (USBD_OK);
 80077a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4813      	ldr	r0, [pc, #76]	; (8007810 <CDC_Receive_FS+0x5c>)
 80077c2:	f7fe fbc1 	bl	8005f48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077c6:	4812      	ldr	r0, [pc, #72]	; (8007810 <CDC_Receive_FS+0x5c>)
 80077c8:	f7fe fc22 	bl	8006010 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f81f 	bl	8007818 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b31      	cmp	r3, #49	; 0x31
 80077e0:	d106      	bne.n	80077f0 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80077e2:	2201      	movs	r2, #1
 80077e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077e8:	480a      	ldr	r0, [pc, #40]	; (8007814 <CDC_Receive_FS+0x60>)
 80077ea:	f7fa fc1d 	bl	8002028 <HAL_GPIO_WritePin>
 80077ee:	e009      	b.n	8007804 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d105      	bne.n	8007804 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80077f8:	2200      	movs	r2, #0
 80077fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077fe:	4805      	ldr	r0, [pc, #20]	; (8007814 <CDC_Receive_FS+0x60>)
 8007800:	f7fa fc12 	bl	8002028 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8007804:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200001a8 	.word	0x200001a8
 8007814:	40020c00 	.word	0x40020c00

08007818 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <CDC_Transmit_FS+0x48>)
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800783a:	2301      	movs	r3, #1
 800783c:	e00b      	b.n	8007856 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800783e:	887b      	ldrh	r3, [r7, #2]
 8007840:	461a      	mov	r2, r3
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4806      	ldr	r0, [pc, #24]	; (8007860 <CDC_Transmit_FS+0x48>)
 8007846:	f7fe fb5d 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800784a:	4805      	ldr	r0, [pc, #20]	; (8007860 <CDC_Transmit_FS+0x48>)
 800784c:	f7fe fb9a 	bl	8005f84 <USBD_CDC_TransmitPacket>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200001a8 	.word	0x200001a8

08007864 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	6039      	str	r1, [r7, #0]
 8007892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2212      	movs	r2, #18
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	200000c8 	.word	0x200000c8

080078ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2204      	movs	r2, #4
 80078bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200000dc 	.word	0x200000dc

080078d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4907      	ldr	r1, [pc, #28]	; (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e6:	4808      	ldr	r0, [pc, #32]	; (8007908 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e8:	f7ff fdda 	bl	80074a0 <USBD_GetString>
 80078ec:	e004      	b.n	80078f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4904      	ldr	r1, [pc, #16]	; (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
 80078f2:	4805      	ldr	r0, [pc, #20]	; (8007908 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f4:	f7ff fdd4 	bl	80074a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20001484 	.word	0x20001484
 8007908:	08008b54 	.word	0x08008b54

0800790c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	4904      	ldr	r1, [pc, #16]	; (800792c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800791c:	4804      	ldr	r0, [pc, #16]	; (8007930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800791e:	f7ff fdbf 	bl	80074a0 <USBD_GetString>
  return USBD_StrDesc;
 8007922:	4b02      	ldr	r3, [pc, #8]	; (800792c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20001484 	.word	0x20001484
 8007930:	08008b6c 	.word	0x08008b6c

08007934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	221a      	movs	r2, #26
 8007944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007946:	f000 f843 	bl	80079d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800794a:	4b02      	ldr	r3, [pc, #8]	; (8007954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200000e0 	.word	0x200000e0

08007958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4907      	ldr	r1, [pc, #28]	; (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
 800796e:	4808      	ldr	r0, [pc, #32]	; (8007990 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007970:	f7ff fd96 	bl	80074a0 <USBD_GetString>
 8007974:	e004      	b.n	8007980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
 800797a:	4805      	ldr	r0, [pc, #20]	; (8007990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800797c:	f7ff fd90 	bl	80074a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007980:	4b02      	ldr	r3, [pc, #8]	; (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20001484 	.word	0x20001484
 8007990:	08008b80 	.word	0x08008b80

08007994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d105      	bne.n	80079b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4907      	ldr	r1, [pc, #28]	; (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079aa:	4808      	ldr	r0, [pc, #32]	; (80079cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079ac:	f7ff fd78 	bl	80074a0 <USBD_GetString>
 80079b0:	e004      	b.n	80079bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4904      	ldr	r1, [pc, #16]	; (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b8:	f7ff fd72 	bl	80074a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20001484 	.word	0x20001484
 80079cc:	08008b8c 	.word	0x08008b8c

080079d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <Get_SerialNum+0x44>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <Get_SerialNum+0x48>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079e2:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <Get_SerialNum+0x4c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079f6:	2208      	movs	r2, #8
 80079f8:	4909      	ldr	r1, [pc, #36]	; (8007a20 <Get_SerialNum+0x50>)
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 f814 	bl	8007a28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a00:	2204      	movs	r2, #4
 8007a02:	4908      	ldr	r1, [pc, #32]	; (8007a24 <Get_SerialNum+0x54>)
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f000 f80f 	bl	8007a28 <IntToUnicode>
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	1fff7a10 	.word	0x1fff7a10
 8007a18:	1fff7a14 	.word	0x1fff7a14
 8007a1c:	1fff7a18 	.word	0x1fff7a18
 8007a20:	200000e2 	.word	0x200000e2
 8007a24:	200000f2 	.word	0x200000f2

08007a28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
 8007a3e:	e027      	b.n	8007a90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0f1b      	lsrs	r3, r3, #28
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d80b      	bhi.n	8007a60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	440b      	add	r3, r1
 8007a58:	3230      	adds	r2, #48	; 0x30
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e00a      	b.n	8007a76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	440b      	add	r3, r1
 8007a70:	3237      	adds	r2, #55	; 0x37
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	3301      	adds	r3, #1
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
 8007a90:	7dfa      	ldrb	r2, [r7, #23]
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d3d3      	bcc.n	8007a40 <IntToUnicode+0x18>
  }
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac8:	d14b      	bne.n	8007b62 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aec:	2302      	movs	r3, #2
 8007aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007af4:	2300      	movs	r3, #0
 8007af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007af8:	230a      	movs	r3, #10
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007afc:	f107 0314 	add.w	r3, r7, #20
 8007b00:	4619      	mov	r1, r3
 8007b02:	481b      	ldr	r0, [pc, #108]	; (8007b70 <HAL_PCD_MspInit+0xc8>)
 8007b04:	f7fa f8dc 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b12:	2301      	movs	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b16:	2300      	movs	r3, #0
 8007b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b1a:	230a      	movs	r3, #10
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	4619      	mov	r1, r3
 8007b24:	4812      	ldr	r0, [pc, #72]	; (8007b70 <HAL_PCD_MspInit+0xc8>)
 8007b26:	f7fa f8cb 	bl	8001cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b2a:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	4a0f      	ldr	r2, [pc, #60]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b34:	6353      	str	r3, [r2, #52]	; 0x34
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3e:	4a0b      	ldr	r2, [pc, #44]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b44:	6453      	str	r3, [r2, #68]	; 0x44
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_PCD_MspInit+0xc4>)
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	2043      	movs	r0, #67	; 0x43
 8007b58:	f7fa f87b 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b5c:	2043      	movs	r0, #67	; 0x43
 8007b5e:	f7fa f894 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b62:	bf00      	nop
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	40020000 	.word	0x40020000

08007b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7fe fb29 	bl	80061e2 <USBD_LL_SetupStage>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f7fe fb63 	bl	800628c <USBD_LL_DataOutStage>
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	334c      	adds	r3, #76	; 0x4c
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f7fe fbfc 	bl	80063f2 <USBD_LL_DataInStage>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fd30 	bl	8006676 <USBD_LL_SOF>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
 8007c36:	e008      	b.n	8007c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d102      	bne.n	8007c46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
 8007c44:	e001      	b.n	8007c4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c46:	f7f8 fe8d 	bl	8000964 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c50:	7bfa      	ldrb	r2, [r7, #15]
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe fcd0 	bl	80065fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fc78 	bl	8006556 <USBD_LL_Reset>
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fccb 	bl	800661a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <HAL_PCD_SuspendCallback+0x48>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4a03      	ldr	r2, [pc, #12]	; (8007cb8 <HAL_PCD_SuspendCallback+0x48>)
 8007caa:	f043 0306 	orr.w	r3, r3, #6
 8007cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fcbb 	bl	8006646 <USBD_LL_Resume>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fd13 	bl	800671a <USBD_LL_IsoOUTIncomplete>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fccf 	bl	80066b6 <USBD_LL_IsoINIncomplete>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fd25 	bl	800677e <USBD_LL_DevConnected>
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fd22 	bl	8006794 <USBD_LL_DevDisconnected>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d13c      	bne.n	8007de2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d68:	4a20      	ldr	r2, [pc, #128]	; (8007dec <USBD_LL_Init+0x94>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a1e      	ldr	r2, [pc, #120]	; (8007dec <USBD_LL_Init+0x94>)
 8007d74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d78:	4b1c      	ldr	r3, [pc, #112]	; (8007dec <USBD_LL_Init+0x94>)
 8007d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d80:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <USBD_LL_Init+0x94>)
 8007d82:	2204      	movs	r2, #4
 8007d84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d86:	4b19      	ldr	r3, [pc, #100]	; (8007dec <USBD_LL_Init+0x94>)
 8007d88:	2202      	movs	r2, #2
 8007d8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <USBD_LL_Init+0x94>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d92:	4b16      	ldr	r3, [pc, #88]	; (8007dec <USBD_LL_Init+0x94>)
 8007d94:	2202      	movs	r2, #2
 8007d96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d98:	4b14      	ldr	r3, [pc, #80]	; (8007dec <USBD_LL_Init+0x94>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <USBD_LL_Init+0x94>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <USBD_LL_Init+0x94>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <USBD_LL_Init+0x94>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007db0:	4b0e      	ldr	r3, [pc, #56]	; (8007dec <USBD_LL_Init+0x94>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007db6:	480d      	ldr	r0, [pc, #52]	; (8007dec <USBD_LL_Init+0x94>)
 8007db8:	f7fa f94f 	bl	800205a <HAL_PCD_Init>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dc2:	f7f8 fdcf 	bl	8000964 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dc6:	2180      	movs	r1, #128	; 0x80
 8007dc8:	4808      	ldr	r0, [pc, #32]	; (8007dec <USBD_LL_Init+0x94>)
 8007dca:	f7fb fba6 	bl	800351a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dce:	2240      	movs	r2, #64	; 0x40
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4806      	ldr	r0, [pc, #24]	; (8007dec <USBD_LL_Init+0x94>)
 8007dd4:	f7fb fb5a 	bl	800348c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007dd8:	2280      	movs	r2, #128	; 0x80
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4803      	ldr	r0, [pc, #12]	; (8007dec <USBD_LL_Init+0x94>)
 8007dde:	f7fb fb55 	bl	800348c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20001684 	.word	0x20001684

08007df0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fa fa44 	bl	8002294 <HAL_PCD_Start>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f942 	bl	800809c <USBD_Get_USB_Status>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	4608      	mov	r0, r1
 8007e30:	4611      	mov	r1, r2
 8007e32:	461a      	mov	r2, r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	70fb      	strb	r3, [r7, #3]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70bb      	strb	r3, [r7, #2]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e4e:	78bb      	ldrb	r3, [r7, #2]
 8007e50:	883a      	ldrh	r2, [r7, #0]
 8007e52:	78f9      	ldrb	r1, [r7, #3]
 8007e54:	f7fa ff15 	bl	8002c82 <HAL_PCD_EP_Open>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f91c 	bl	800809c <USBD_Get_USB_Status>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fa ff5e 	bl	8002d52 <HAL_PCD_EP_Close>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f8fd 	bl	800809c <USBD_Get_USB_Status>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fb f836 	bl	8002f40 <HAL_PCD_EP_SetStall>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f8de 	bl	800809c <USBD_Get_USB_Status>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fb f87b 	bl	8003008 <HAL_PCD_EP_ClrStall>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 f8bf 	bl	800809c <USBD_Get_USB_Status>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da0b      	bge.n	8007f60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	4613      	mov	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	333e      	adds	r3, #62	; 0x3e
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	e00b      	b.n	8007f78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fa fe48 	bl	8002c38 <HAL_PCD_SetAddress>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f874 	bl	800809c <USBD_Get_USB_Status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b086      	sub	sp, #24
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fe0:	7af9      	ldrb	r1, [r7, #11]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f7fa ff61 	bl	8002eac <HAL_PCD_EP_Transmit>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f853 	bl	800809c <USBD_Get_USB_Status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	460b      	mov	r3, r1
 8008012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008022:	7af9      	ldrb	r1, [r7, #11]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	f7fa fedd 	bl	8002de6 <HAL_PCD_EP_Receive>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f832 	bl	800809c <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800803c:	7dbb      	ldrb	r3, [r7, #22]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7fa ff0d 	bl	8002e7c <HAL_PCD_EP_GetRxCount>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008074:	4b03      	ldr	r3, [pc, #12]	; (8008084 <USBD_static_malloc+0x18>)
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20001b90 	.word	0x20001b90

08008088 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d817      	bhi.n	80080e0 <USBD_Get_USB_Status+0x44>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_Get_USB_Status+0x1c>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	080080cf 	.word	0x080080cf
 80080c0:	080080d5 	.word	0x080080d5
 80080c4:	080080db 	.word	0x080080db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
    break;
 80080cc:	e00b      	b.n	80080e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080ce:	2303      	movs	r3, #3
 80080d0:	73fb      	strb	r3, [r7, #15]
    break;
 80080d2:	e008      	b.n	80080e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
    break;
 80080d8:	e005      	b.n	80080e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	73fb      	strb	r3, [r7, #15]
    break;
 80080de:	e002      	b.n	80080e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	73fb      	strb	r3, [r7, #15]
    break;
 80080e4:	bf00      	nop
  }
  return usb_status;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <siprintf>:
 80080f4:	b40e      	push	{r1, r2, r3}
 80080f6:	b500      	push	{lr}
 80080f8:	b09c      	sub	sp, #112	; 0x70
 80080fa:	ab1d      	add	r3, sp, #116	; 0x74
 80080fc:	9002      	str	r0, [sp, #8]
 80080fe:	9006      	str	r0, [sp, #24]
 8008100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008104:	4809      	ldr	r0, [pc, #36]	; (800812c <siprintf+0x38>)
 8008106:	9107      	str	r1, [sp, #28]
 8008108:	9104      	str	r1, [sp, #16]
 800810a:	4909      	ldr	r1, [pc, #36]	; (8008130 <siprintf+0x3c>)
 800810c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008110:	9105      	str	r1, [sp, #20]
 8008112:	6800      	ldr	r0, [r0, #0]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	a902      	add	r1, sp, #8
 8008118:	f000 f992 	bl	8008440 <_svfiprintf_r>
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	b01c      	add	sp, #112	; 0x70
 8008124:	f85d eb04 	ldr.w	lr, [sp], #4
 8008128:	b003      	add	sp, #12
 800812a:	4770      	bx	lr
 800812c:	20000148 	.word	0x20000148
 8008130:	ffff0208 	.word	0xffff0208

08008134 <memset>:
 8008134:	4402      	add	r2, r0
 8008136:	4603      	mov	r3, r0
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <memset+0xa>
 800813c:	4770      	bx	lr
 800813e:	f803 1b01 	strb.w	r1, [r3], #1
 8008142:	e7f9      	b.n	8008138 <memset+0x4>

08008144 <__errno>:
 8008144:	4b01      	ldr	r3, [pc, #4]	; (800814c <__errno+0x8>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000148 	.word	0x20000148

08008150 <__libc_init_array>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4d0d      	ldr	r5, [pc, #52]	; (8008188 <__libc_init_array+0x38>)
 8008154:	4c0d      	ldr	r4, [pc, #52]	; (800818c <__libc_init_array+0x3c>)
 8008156:	1b64      	subs	r4, r4, r5
 8008158:	10a4      	asrs	r4, r4, #2
 800815a:	2600      	movs	r6, #0
 800815c:	42a6      	cmp	r6, r4
 800815e:	d109      	bne.n	8008174 <__libc_init_array+0x24>
 8008160:	4d0b      	ldr	r5, [pc, #44]	; (8008190 <__libc_init_array+0x40>)
 8008162:	4c0c      	ldr	r4, [pc, #48]	; (8008194 <__libc_init_array+0x44>)
 8008164:	f000 fc6a 	bl	8008a3c <_init>
 8008168:	1b64      	subs	r4, r4, r5
 800816a:	10a4      	asrs	r4, r4, #2
 800816c:	2600      	movs	r6, #0
 800816e:	42a6      	cmp	r6, r4
 8008170:	d105      	bne.n	800817e <__libc_init_array+0x2e>
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	f855 3b04 	ldr.w	r3, [r5], #4
 8008178:	4798      	blx	r3
 800817a:	3601      	adds	r6, #1
 800817c:	e7ee      	b.n	800815c <__libc_init_array+0xc>
 800817e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008182:	4798      	blx	r3
 8008184:	3601      	adds	r6, #1
 8008186:	e7f2      	b.n	800816e <__libc_init_array+0x1e>
 8008188:	08008be8 	.word	0x08008be8
 800818c:	08008be8 	.word	0x08008be8
 8008190:	08008be8 	.word	0x08008be8
 8008194:	08008bec 	.word	0x08008bec

08008198 <__retarget_lock_acquire_recursive>:
 8008198:	4770      	bx	lr

0800819a <__retarget_lock_release_recursive>:
 800819a:	4770      	bx	lr

0800819c <_free_r>:
 800819c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819e:	2900      	cmp	r1, #0
 80081a0:	d044      	beq.n	800822c <_free_r+0x90>
 80081a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a6:	9001      	str	r0, [sp, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f1a1 0404 	sub.w	r4, r1, #4
 80081ae:	bfb8      	it	lt
 80081b0:	18e4      	addlt	r4, r4, r3
 80081b2:	f000 f8df 	bl	8008374 <__malloc_lock>
 80081b6:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <_free_r+0x94>)
 80081b8:	9801      	ldr	r0, [sp, #4]
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b933      	cbnz	r3, 80081cc <_free_r+0x30>
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	b003      	add	sp, #12
 80081c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c8:	f000 b8da 	b.w	8008380 <__malloc_unlock>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d908      	bls.n	80081e2 <_free_r+0x46>
 80081d0:	6825      	ldr	r5, [r4, #0]
 80081d2:	1961      	adds	r1, r4, r5
 80081d4:	428b      	cmp	r3, r1
 80081d6:	bf01      	itttt	eq
 80081d8:	6819      	ldreq	r1, [r3, #0]
 80081da:	685b      	ldreq	r3, [r3, #4]
 80081dc:	1949      	addeq	r1, r1, r5
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	e7ed      	b.n	80081be <_free_r+0x22>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x50>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x46>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1855      	adds	r5, r2, r1
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x70>
 80081f4:	6824      	ldr	r4, [r4, #0]
 80081f6:	4421      	add	r1, r4
 80081f8:	1854      	adds	r4, r2, r1
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1e0      	bne.n	80081c2 <_free_r+0x26>
 8008200:	681c      	ldr	r4, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6053      	str	r3, [r2, #4]
 8008206:	440c      	add	r4, r1
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	e7da      	b.n	80081c2 <_free_r+0x26>
 800820c:	d902      	bls.n	8008214 <_free_r+0x78>
 800820e:	230c      	movs	r3, #12
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	e7d6      	b.n	80081c2 <_free_r+0x26>
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1961      	adds	r1, r4, r5
 8008218:	428b      	cmp	r3, r1
 800821a:	bf04      	itt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	bf04      	itt	eq
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7ca      	b.n	80081c2 <_free_r+0x26>
 800822c:	b003      	add	sp, #12
 800822e:	bd30      	pop	{r4, r5, pc}
 8008230:	20001ef0 	.word	0x20001ef0

08008234 <sbrk_aligned>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4e0e      	ldr	r6, [pc, #56]	; (8008270 <sbrk_aligned+0x3c>)
 8008238:	460c      	mov	r4, r1
 800823a:	6831      	ldr	r1, [r6, #0]
 800823c:	4605      	mov	r5, r0
 800823e:	b911      	cbnz	r1, 8008246 <sbrk_aligned+0x12>
 8008240:	f000 fba6 	bl	8008990 <_sbrk_r>
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f000 fba1 	bl	8008990 <_sbrk_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d00a      	beq.n	8008268 <sbrk_aligned+0x34>
 8008252:	1cc4      	adds	r4, r0, #3
 8008254:	f024 0403 	bic.w	r4, r4, #3
 8008258:	42a0      	cmp	r0, r4
 800825a:	d007      	beq.n	800826c <sbrk_aligned+0x38>
 800825c:	1a21      	subs	r1, r4, r0
 800825e:	4628      	mov	r0, r5
 8008260:	f000 fb96 	bl	8008990 <_sbrk_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d101      	bne.n	800826c <sbrk_aligned+0x38>
 8008268:	f04f 34ff 	mov.w	r4, #4294967295
 800826c:	4620      	mov	r0, r4
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	20001ef4 	.word	0x20001ef4

08008274 <_malloc_r>:
 8008274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008278:	1ccd      	adds	r5, r1, #3
 800827a:	f025 0503 	bic.w	r5, r5, #3
 800827e:	3508      	adds	r5, #8
 8008280:	2d0c      	cmp	r5, #12
 8008282:	bf38      	it	cc
 8008284:	250c      	movcc	r5, #12
 8008286:	2d00      	cmp	r5, #0
 8008288:	4607      	mov	r7, r0
 800828a:	db01      	blt.n	8008290 <_malloc_r+0x1c>
 800828c:	42a9      	cmp	r1, r5
 800828e:	d905      	bls.n	800829c <_malloc_r+0x28>
 8008290:	230c      	movs	r3, #12
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	2600      	movs	r6, #0
 8008296:	4630      	mov	r0, r6
 8008298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008370 <_malloc_r+0xfc>
 80082a0:	f000 f868 	bl	8008374 <__malloc_lock>
 80082a4:	f8d8 3000 	ldr.w	r3, [r8]
 80082a8:	461c      	mov	r4, r3
 80082aa:	bb5c      	cbnz	r4, 8008304 <_malloc_r+0x90>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff ffc0 	bl	8008234 <sbrk_aligned>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	4604      	mov	r4, r0
 80082b8:	d155      	bne.n	8008366 <_malloc_r+0xf2>
 80082ba:	f8d8 4000 	ldr.w	r4, [r8]
 80082be:	4626      	mov	r6, r4
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	d145      	bne.n	8008350 <_malloc_r+0xdc>
 80082c4:	2c00      	cmp	r4, #0
 80082c6:	d048      	beq.n	800835a <_malloc_r+0xe6>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	4631      	mov	r1, r6
 80082cc:	4638      	mov	r0, r7
 80082ce:	eb04 0903 	add.w	r9, r4, r3
 80082d2:	f000 fb5d 	bl	8008990 <_sbrk_r>
 80082d6:	4581      	cmp	r9, r0
 80082d8:	d13f      	bne.n	800835a <_malloc_r+0xe6>
 80082da:	6821      	ldr	r1, [r4, #0]
 80082dc:	1a6d      	subs	r5, r5, r1
 80082de:	4629      	mov	r1, r5
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff ffa7 	bl	8008234 <sbrk_aligned>
 80082e6:	3001      	adds	r0, #1
 80082e8:	d037      	beq.n	800835a <_malloc_r+0xe6>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	442b      	add	r3, r5
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	f8d8 3000 	ldr.w	r3, [r8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d038      	beq.n	800836a <_malloc_r+0xf6>
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	42a2      	cmp	r2, r4
 80082fc:	d12b      	bne.n	8008356 <_malloc_r+0xe2>
 80082fe:	2200      	movs	r2, #0
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	e00f      	b.n	8008324 <_malloc_r+0xb0>
 8008304:	6822      	ldr	r2, [r4, #0]
 8008306:	1b52      	subs	r2, r2, r5
 8008308:	d41f      	bmi.n	800834a <_malloc_r+0xd6>
 800830a:	2a0b      	cmp	r2, #11
 800830c:	d917      	bls.n	800833e <_malloc_r+0xca>
 800830e:	1961      	adds	r1, r4, r5
 8008310:	42a3      	cmp	r3, r4
 8008312:	6025      	str	r5, [r4, #0]
 8008314:	bf18      	it	ne
 8008316:	6059      	strne	r1, [r3, #4]
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	bf08      	it	eq
 800831c:	f8c8 1000 	streq.w	r1, [r8]
 8008320:	5162      	str	r2, [r4, r5]
 8008322:	604b      	str	r3, [r1, #4]
 8008324:	4638      	mov	r0, r7
 8008326:	f104 060b 	add.w	r6, r4, #11
 800832a:	f000 f829 	bl	8008380 <__malloc_unlock>
 800832e:	f026 0607 	bic.w	r6, r6, #7
 8008332:	1d23      	adds	r3, r4, #4
 8008334:	1af2      	subs	r2, r6, r3
 8008336:	d0ae      	beq.n	8008296 <_malloc_r+0x22>
 8008338:	1b9b      	subs	r3, r3, r6
 800833a:	50a3      	str	r3, [r4, r2]
 800833c:	e7ab      	b.n	8008296 <_malloc_r+0x22>
 800833e:	42a3      	cmp	r3, r4
 8008340:	6862      	ldr	r2, [r4, #4]
 8008342:	d1dd      	bne.n	8008300 <_malloc_r+0x8c>
 8008344:	f8c8 2000 	str.w	r2, [r8]
 8008348:	e7ec      	b.n	8008324 <_malloc_r+0xb0>
 800834a:	4623      	mov	r3, r4
 800834c:	6864      	ldr	r4, [r4, #4]
 800834e:	e7ac      	b.n	80082aa <_malloc_r+0x36>
 8008350:	4634      	mov	r4, r6
 8008352:	6876      	ldr	r6, [r6, #4]
 8008354:	e7b4      	b.n	80082c0 <_malloc_r+0x4c>
 8008356:	4613      	mov	r3, r2
 8008358:	e7cc      	b.n	80082f4 <_malloc_r+0x80>
 800835a:	230c      	movs	r3, #12
 800835c:	603b      	str	r3, [r7, #0]
 800835e:	4638      	mov	r0, r7
 8008360:	f000 f80e 	bl	8008380 <__malloc_unlock>
 8008364:	e797      	b.n	8008296 <_malloc_r+0x22>
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	e7dc      	b.n	8008324 <_malloc_r+0xb0>
 800836a:	605b      	str	r3, [r3, #4]
 800836c:	deff      	udf	#255	; 0xff
 800836e:	bf00      	nop
 8008370:	20001ef0 	.word	0x20001ef0

08008374 <__malloc_lock>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__malloc_lock+0x8>)
 8008376:	f7ff bf0f 	b.w	8008198 <__retarget_lock_acquire_recursive>
 800837a:	bf00      	nop
 800837c:	20001eec 	.word	0x20001eec

08008380 <__malloc_unlock>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__malloc_unlock+0x8>)
 8008382:	f7ff bf0a 	b.w	800819a <__retarget_lock_release_recursive>
 8008386:	bf00      	nop
 8008388:	20001eec 	.word	0x20001eec

0800838c <__ssputs_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	688e      	ldr	r6, [r1, #8]
 8008392:	461f      	mov	r7, r3
 8008394:	42be      	cmp	r6, r7
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	4682      	mov	sl, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4690      	mov	r8, r2
 800839e:	d82c      	bhi.n	80083fa <__ssputs_r+0x6e>
 80083a0:	898a      	ldrh	r2, [r1, #12]
 80083a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a6:	d026      	beq.n	80083f6 <__ssputs_r+0x6a>
 80083a8:	6965      	ldr	r5, [r4, #20]
 80083aa:	6909      	ldr	r1, [r1, #16]
 80083ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b0:	eba3 0901 	sub.w	r9, r3, r1
 80083b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b8:	1c7b      	adds	r3, r7, #1
 80083ba:	444b      	add	r3, r9
 80083bc:	106d      	asrs	r5, r5, #1
 80083be:	429d      	cmp	r5, r3
 80083c0:	bf38      	it	cc
 80083c2:	461d      	movcc	r5, r3
 80083c4:	0553      	lsls	r3, r2, #21
 80083c6:	d527      	bpl.n	8008418 <__ssputs_r+0x8c>
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7ff ff53 	bl	8008274 <_malloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	b360      	cbz	r0, 800842c <__ssputs_r+0xa0>
 80083d2:	6921      	ldr	r1, [r4, #16]
 80083d4:	464a      	mov	r2, r9
 80083d6:	f000 faeb 	bl	80089b0 <memcpy>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	6126      	str	r6, [r4, #16]
 80083e8:	6165      	str	r5, [r4, #20]
 80083ea:	444e      	add	r6, r9
 80083ec:	eba5 0509 	sub.w	r5, r5, r9
 80083f0:	6026      	str	r6, [r4, #0]
 80083f2:	60a5      	str	r5, [r4, #8]
 80083f4:	463e      	mov	r6, r7
 80083f6:	42be      	cmp	r6, r7
 80083f8:	d900      	bls.n	80083fc <__ssputs_r+0x70>
 80083fa:	463e      	mov	r6, r7
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	4632      	mov	r2, r6
 8008400:	4641      	mov	r1, r8
 8008402:	f000 faab 	bl	800895c <memmove>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	1b9b      	subs	r3, r3, r6
 800840a:	60a3      	str	r3, [r4, #8]
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	4433      	add	r3, r6
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2000      	movs	r0, #0
 8008414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008418:	462a      	mov	r2, r5
 800841a:	f000 fad7 	bl	80089cc <_realloc_r>
 800841e:	4606      	mov	r6, r0
 8008420:	2800      	cmp	r0, #0
 8008422:	d1e0      	bne.n	80083e6 <__ssputs_r+0x5a>
 8008424:	6921      	ldr	r1, [r4, #16]
 8008426:	4650      	mov	r0, sl
 8008428:	f7ff feb8 	bl	800819c <_free_r>
 800842c:	230c      	movs	r3, #12
 800842e:	f8ca 3000 	str.w	r3, [sl]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	f04f 30ff 	mov.w	r0, #4294967295
 800843e:	e7e9      	b.n	8008414 <__ssputs_r+0x88>

08008440 <_svfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4698      	mov	r8, r3
 8008446:	898b      	ldrh	r3, [r1, #12]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	b09d      	sub	sp, #116	; 0x74
 800844c:	4607      	mov	r7, r0
 800844e:	460d      	mov	r5, r1
 8008450:	4614      	mov	r4, r2
 8008452:	d50e      	bpl.n	8008472 <_svfiprintf_r+0x32>
 8008454:	690b      	ldr	r3, [r1, #16]
 8008456:	b963      	cbnz	r3, 8008472 <_svfiprintf_r+0x32>
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	f7ff ff0b 	bl	8008274 <_malloc_r>
 800845e:	6028      	str	r0, [r5, #0]
 8008460:	6128      	str	r0, [r5, #16]
 8008462:	b920      	cbnz	r0, 800846e <_svfiprintf_r+0x2e>
 8008464:	230c      	movs	r3, #12
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	e0d0      	b.n	8008610 <_svfiprintf_r+0x1d0>
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	616b      	str	r3, [r5, #20]
 8008472:	2300      	movs	r3, #0
 8008474:	9309      	str	r3, [sp, #36]	; 0x24
 8008476:	2320      	movs	r3, #32
 8008478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008480:	2330      	movs	r3, #48	; 0x30
 8008482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008628 <_svfiprintf_r+0x1e8>
 8008486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848a:	f04f 0901 	mov.w	r9, #1
 800848e:	4623      	mov	r3, r4
 8008490:	469a      	mov	sl, r3
 8008492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008496:	b10a      	cbz	r2, 800849c <_svfiprintf_r+0x5c>
 8008498:	2a25      	cmp	r2, #37	; 0x25
 800849a:	d1f9      	bne.n	8008490 <_svfiprintf_r+0x50>
 800849c:	ebba 0b04 	subs.w	fp, sl, r4
 80084a0:	d00b      	beq.n	80084ba <_svfiprintf_r+0x7a>
 80084a2:	465b      	mov	r3, fp
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ff6f 	bl	800838c <__ssputs_r>
 80084ae:	3001      	adds	r0, #1
 80084b0:	f000 80a9 	beq.w	8008606 <_svfiprintf_r+0x1c6>
 80084b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b6:	445a      	add	r2, fp
 80084b8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80a1 	beq.w	8008606 <_svfiprintf_r+0x1c6>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ce:	f10a 0a01 	add.w	sl, sl, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084da:	931a      	str	r3, [sp, #104]	; 0x68
 80084dc:	4654      	mov	r4, sl
 80084de:	2205      	movs	r2, #5
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	4850      	ldr	r0, [pc, #320]	; (8008628 <_svfiprintf_r+0x1e8>)
 80084e6:	f7f7 fe7b 	bl	80001e0 <memchr>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	b9d8      	cbnz	r0, 8008526 <_svfiprintf_r+0xe6>
 80084ee:	06d0      	lsls	r0, r2, #27
 80084f0:	bf44      	itt	mi
 80084f2:	2320      	movmi	r3, #32
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f8:	0711      	lsls	r1, r2, #28
 80084fa:	bf44      	itt	mi
 80084fc:	232b      	movmi	r3, #43	; 0x2b
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b2a      	cmp	r3, #42	; 0x2a
 8008508:	d015      	beq.n	8008536 <_svfiprintf_r+0xf6>
 800850a:	9a07      	ldr	r2, [sp, #28]
 800850c:	4654      	mov	r4, sl
 800850e:	2000      	movs	r0, #0
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	4621      	mov	r1, r4
 8008516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851a:	3b30      	subs	r3, #48	; 0x30
 800851c:	2b09      	cmp	r3, #9
 800851e:	d94d      	bls.n	80085bc <_svfiprintf_r+0x17c>
 8008520:	b1b0      	cbz	r0, 8008550 <_svfiprintf_r+0x110>
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	e014      	b.n	8008550 <_svfiprintf_r+0x110>
 8008526:	eba0 0308 	sub.w	r3, r0, r8
 800852a:	fa09 f303 	lsl.w	r3, r9, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	46a2      	mov	sl, r4
 8008534:	e7d2      	b.n	80084dc <_svfiprintf_r+0x9c>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbb      	ittet	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	f042 0202 	orrlt.w	r2, r2, #2
 8008548:	9307      	strge	r3, [sp, #28]
 800854a:	9307      	strlt	r3, [sp, #28]
 800854c:	bfb8      	it	lt
 800854e:	9204      	strlt	r2, [sp, #16]
 8008550:	7823      	ldrb	r3, [r4, #0]
 8008552:	2b2e      	cmp	r3, #46	; 0x2e
 8008554:	d10c      	bne.n	8008570 <_svfiprintf_r+0x130>
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	2b2a      	cmp	r3, #42	; 0x2a
 800855a:	d134      	bne.n	80085c6 <_svfiprintf_r+0x186>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9203      	str	r2, [sp, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfb8      	it	lt
 8008568:	f04f 33ff 	movlt.w	r3, #4294967295
 800856c:	3402      	adds	r4, #2
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008638 <_svfiprintf_r+0x1f8>
 8008574:	7821      	ldrb	r1, [r4, #0]
 8008576:	2203      	movs	r2, #3
 8008578:	4650      	mov	r0, sl
 800857a:	f7f7 fe31 	bl	80001e0 <memchr>
 800857e:	b138      	cbz	r0, 8008590 <_svfiprintf_r+0x150>
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	eba0 000a 	sub.w	r0, r0, sl
 8008586:	2240      	movs	r2, #64	; 0x40
 8008588:	4082      	lsls	r2, r0
 800858a:	4313      	orrs	r3, r2
 800858c:	3401      	adds	r4, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	4825      	ldr	r0, [pc, #148]	; (800862c <_svfiprintf_r+0x1ec>)
 8008596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859a:	2206      	movs	r2, #6
 800859c:	f7f7 fe20 	bl	80001e0 <memchr>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d038      	beq.n	8008616 <_svfiprintf_r+0x1d6>
 80085a4:	4b22      	ldr	r3, [pc, #136]	; (8008630 <_svfiprintf_r+0x1f0>)
 80085a6:	bb1b      	cbnz	r3, 80085f0 <_svfiprintf_r+0x1b0>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	3307      	adds	r3, #7
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	4433      	add	r3, r6
 80085b8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ba:	e768      	b.n	800848e <_svfiprintf_r+0x4e>
 80085bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c0:	460c      	mov	r4, r1
 80085c2:	2001      	movs	r0, #1
 80085c4:	e7a6      	b.n	8008514 <_svfiprintf_r+0xd4>
 80085c6:	2300      	movs	r3, #0
 80085c8:	3401      	adds	r4, #1
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	4619      	mov	r1, r3
 80085ce:	f04f 0c0a 	mov.w	ip, #10
 80085d2:	4620      	mov	r0, r4
 80085d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d8:	3a30      	subs	r2, #48	; 0x30
 80085da:	2a09      	cmp	r2, #9
 80085dc:	d903      	bls.n	80085e6 <_svfiprintf_r+0x1a6>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c6      	beq.n	8008570 <_svfiprintf_r+0x130>
 80085e2:	9105      	str	r1, [sp, #20]
 80085e4:	e7c4      	b.n	8008570 <_svfiprintf_r+0x130>
 80085e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ea:	4604      	mov	r4, r0
 80085ec:	2301      	movs	r3, #1
 80085ee:	e7f0      	b.n	80085d2 <_svfiprintf_r+0x192>
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <_svfiprintf_r+0x1f4>)
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	4638      	mov	r0, r7
 80085fc:	f3af 8000 	nop.w
 8008600:	1c42      	adds	r2, r0, #1
 8008602:	4606      	mov	r6, r0
 8008604:	d1d6      	bne.n	80085b4 <_svfiprintf_r+0x174>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	065b      	lsls	r3, r3, #25
 800860a:	f53f af2d 	bmi.w	8008468 <_svfiprintf_r+0x28>
 800860e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008610:	b01d      	add	sp, #116	; 0x74
 8008612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008616:	ab03      	add	r3, sp, #12
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	462a      	mov	r2, r5
 800861c:	4b05      	ldr	r3, [pc, #20]	; (8008634 <_svfiprintf_r+0x1f4>)
 800861e:	a904      	add	r1, sp, #16
 8008620:	4638      	mov	r0, r7
 8008622:	f000 f879 	bl	8008718 <_printf_i>
 8008626:	e7eb      	b.n	8008600 <_svfiprintf_r+0x1c0>
 8008628:	08008bac 	.word	0x08008bac
 800862c:	08008bb6 	.word	0x08008bb6
 8008630:	00000000 	.word	0x00000000
 8008634:	0800838d 	.word	0x0800838d
 8008638:	08008bb2 	.word	0x08008bb2

0800863c <_printf_common>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	4616      	mov	r6, r2
 8008642:	4699      	mov	r9, r3
 8008644:	688a      	ldr	r2, [r1, #8]
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800864c:	4293      	cmp	r3, r2
 800864e:	bfb8      	it	lt
 8008650:	4613      	movlt	r3, r2
 8008652:	6033      	str	r3, [r6, #0]
 8008654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008658:	4607      	mov	r7, r0
 800865a:	460c      	mov	r4, r1
 800865c:	b10a      	cbz	r2, 8008662 <_printf_common+0x26>
 800865e:	3301      	adds	r3, #1
 8008660:	6033      	str	r3, [r6, #0]
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	0699      	lsls	r1, r3, #26
 8008666:	bf42      	ittt	mi
 8008668:	6833      	ldrmi	r3, [r6, #0]
 800866a:	3302      	addmi	r3, #2
 800866c:	6033      	strmi	r3, [r6, #0]
 800866e:	6825      	ldr	r5, [r4, #0]
 8008670:	f015 0506 	ands.w	r5, r5, #6
 8008674:	d106      	bne.n	8008684 <_printf_common+0x48>
 8008676:	f104 0a19 	add.w	sl, r4, #25
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	6832      	ldr	r2, [r6, #0]
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	42ab      	cmp	r3, r5
 8008682:	dc26      	bgt.n	80086d2 <_printf_common+0x96>
 8008684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008688:	1e13      	subs	r3, r2, #0
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	bf18      	it	ne
 800868e:	2301      	movne	r3, #1
 8008690:	0692      	lsls	r2, r2, #26
 8008692:	d42b      	bmi.n	80086ec <_printf_common+0xb0>
 8008694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008698:	4649      	mov	r1, r9
 800869a:	4638      	mov	r0, r7
 800869c:	47c0      	blx	r8
 800869e:	3001      	adds	r0, #1
 80086a0:	d01e      	beq.n	80086e0 <_printf_common+0xa4>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	f003 0306 	and.w	r3, r3, #6
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	bf02      	ittt	eq
 80086ae:	68e5      	ldreq	r5, [r4, #12]
 80086b0:	6833      	ldreq	r3, [r6, #0]
 80086b2:	1aed      	subeq	r5, r5, r3
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	bf0c      	ite	eq
 80086b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086bc:	2500      	movne	r5, #0
 80086be:	4293      	cmp	r3, r2
 80086c0:	bfc4      	itt	gt
 80086c2:	1a9b      	subgt	r3, r3, r2
 80086c4:	18ed      	addgt	r5, r5, r3
 80086c6:	2600      	movs	r6, #0
 80086c8:	341a      	adds	r4, #26
 80086ca:	42b5      	cmp	r5, r6
 80086cc:	d11a      	bne.n	8008704 <_printf_common+0xc8>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e008      	b.n	80086e4 <_printf_common+0xa8>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4652      	mov	r2, sl
 80086d6:	4649      	mov	r1, r9
 80086d8:	4638      	mov	r0, r7
 80086da:	47c0      	blx	r8
 80086dc:	3001      	adds	r0, #1
 80086de:	d103      	bne.n	80086e8 <_printf_common+0xac>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	3501      	adds	r5, #1
 80086ea:	e7c6      	b.n	800867a <_printf_common+0x3e>
 80086ec:	18e1      	adds	r1, r4, r3
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	2030      	movs	r0, #48	; 0x30
 80086f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086f6:	4422      	add	r2, r4
 80086f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008700:	3302      	adds	r3, #2
 8008702:	e7c7      	b.n	8008694 <_printf_common+0x58>
 8008704:	2301      	movs	r3, #1
 8008706:	4622      	mov	r2, r4
 8008708:	4649      	mov	r1, r9
 800870a:	4638      	mov	r0, r7
 800870c:	47c0      	blx	r8
 800870e:	3001      	adds	r0, #1
 8008710:	d0e6      	beq.n	80086e0 <_printf_common+0xa4>
 8008712:	3601      	adds	r6, #1
 8008714:	e7d9      	b.n	80086ca <_printf_common+0x8e>
	...

08008718 <_printf_i>:
 8008718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	7e0f      	ldrb	r7, [r1, #24]
 800871e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008720:	2f78      	cmp	r7, #120	; 0x78
 8008722:	4691      	mov	r9, r2
 8008724:	4680      	mov	r8, r0
 8008726:	460c      	mov	r4, r1
 8008728:	469a      	mov	sl, r3
 800872a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800872e:	d807      	bhi.n	8008740 <_printf_i+0x28>
 8008730:	2f62      	cmp	r7, #98	; 0x62
 8008732:	d80a      	bhi.n	800874a <_printf_i+0x32>
 8008734:	2f00      	cmp	r7, #0
 8008736:	f000 80d4 	beq.w	80088e2 <_printf_i+0x1ca>
 800873a:	2f58      	cmp	r7, #88	; 0x58
 800873c:	f000 80c0 	beq.w	80088c0 <_printf_i+0x1a8>
 8008740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008748:	e03a      	b.n	80087c0 <_printf_i+0xa8>
 800874a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800874e:	2b15      	cmp	r3, #21
 8008750:	d8f6      	bhi.n	8008740 <_printf_i+0x28>
 8008752:	a101      	add	r1, pc, #4	; (adr r1, 8008758 <_printf_i+0x40>)
 8008754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087c5 	.word	0x080087c5
 8008760:	08008741 	.word	0x08008741
 8008764:	08008741 	.word	0x08008741
 8008768:	08008741 	.word	0x08008741
 800876c:	08008741 	.word	0x08008741
 8008770:	080087c5 	.word	0x080087c5
 8008774:	08008741 	.word	0x08008741
 8008778:	08008741 	.word	0x08008741
 800877c:	08008741 	.word	0x08008741
 8008780:	08008741 	.word	0x08008741
 8008784:	080088c9 	.word	0x080088c9
 8008788:	080087f1 	.word	0x080087f1
 800878c:	08008883 	.word	0x08008883
 8008790:	08008741 	.word	0x08008741
 8008794:	08008741 	.word	0x08008741
 8008798:	080088eb 	.word	0x080088eb
 800879c:	08008741 	.word	0x08008741
 80087a0:	080087f1 	.word	0x080087f1
 80087a4:	08008741 	.word	0x08008741
 80087a8:	08008741 	.word	0x08008741
 80087ac:	0800888b 	.word	0x0800888b
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	602a      	str	r2, [r5, #0]
 80087b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c0:	2301      	movs	r3, #1
 80087c2:	e09f      	b.n	8008904 <_printf_i+0x1ec>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	0607      	lsls	r7, r0, #24
 80087ca:	f103 0104 	add.w	r1, r3, #4
 80087ce:	6029      	str	r1, [r5, #0]
 80087d0:	d501      	bpl.n	80087d6 <_printf_i+0xbe>
 80087d2:	681e      	ldr	r6, [r3, #0]
 80087d4:	e003      	b.n	80087de <_printf_i+0xc6>
 80087d6:	0646      	lsls	r6, r0, #25
 80087d8:	d5fb      	bpl.n	80087d2 <_printf_i+0xba>
 80087da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087de:	2e00      	cmp	r6, #0
 80087e0:	da03      	bge.n	80087ea <_printf_i+0xd2>
 80087e2:	232d      	movs	r3, #45	; 0x2d
 80087e4:	4276      	negs	r6, r6
 80087e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ea:	485a      	ldr	r0, [pc, #360]	; (8008954 <_printf_i+0x23c>)
 80087ec:	230a      	movs	r3, #10
 80087ee:	e012      	b.n	8008816 <_printf_i+0xfe>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	1d19      	adds	r1, r3, #4
 80087f6:	6029      	str	r1, [r5, #0]
 80087f8:	0605      	lsls	r5, r0, #24
 80087fa:	d501      	bpl.n	8008800 <_printf_i+0xe8>
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	e002      	b.n	8008806 <_printf_i+0xee>
 8008800:	0641      	lsls	r1, r0, #25
 8008802:	d5fb      	bpl.n	80087fc <_printf_i+0xe4>
 8008804:	881e      	ldrh	r6, [r3, #0]
 8008806:	4853      	ldr	r0, [pc, #332]	; (8008954 <_printf_i+0x23c>)
 8008808:	2f6f      	cmp	r7, #111	; 0x6f
 800880a:	bf0c      	ite	eq
 800880c:	2308      	moveq	r3, #8
 800880e:	230a      	movne	r3, #10
 8008810:	2100      	movs	r1, #0
 8008812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008816:	6865      	ldr	r5, [r4, #4]
 8008818:	60a5      	str	r5, [r4, #8]
 800881a:	2d00      	cmp	r5, #0
 800881c:	bfa2      	ittt	ge
 800881e:	6821      	ldrge	r1, [r4, #0]
 8008820:	f021 0104 	bicge.w	r1, r1, #4
 8008824:	6021      	strge	r1, [r4, #0]
 8008826:	b90e      	cbnz	r6, 800882c <_printf_i+0x114>
 8008828:	2d00      	cmp	r5, #0
 800882a:	d04b      	beq.n	80088c4 <_printf_i+0x1ac>
 800882c:	4615      	mov	r5, r2
 800882e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008832:	fb03 6711 	mls	r7, r3, r1, r6
 8008836:	5dc7      	ldrb	r7, [r0, r7]
 8008838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800883c:	4637      	mov	r7, r6
 800883e:	42bb      	cmp	r3, r7
 8008840:	460e      	mov	r6, r1
 8008842:	d9f4      	bls.n	800882e <_printf_i+0x116>
 8008844:	2b08      	cmp	r3, #8
 8008846:	d10b      	bne.n	8008860 <_printf_i+0x148>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	07de      	lsls	r6, r3, #31
 800884c:	d508      	bpl.n	8008860 <_printf_i+0x148>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	6861      	ldr	r1, [r4, #4]
 8008852:	4299      	cmp	r1, r3
 8008854:	bfde      	ittt	le
 8008856:	2330      	movle	r3, #48	; 0x30
 8008858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800885c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008860:	1b52      	subs	r2, r2, r5
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	f8cd a000 	str.w	sl, [sp]
 8008868:	464b      	mov	r3, r9
 800886a:	aa03      	add	r2, sp, #12
 800886c:	4621      	mov	r1, r4
 800886e:	4640      	mov	r0, r8
 8008870:	f7ff fee4 	bl	800863c <_printf_common>
 8008874:	3001      	adds	r0, #1
 8008876:	d14a      	bne.n	800890e <_printf_i+0x1f6>
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	b004      	add	sp, #16
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	4833      	ldr	r0, [pc, #204]	; (8008958 <_printf_i+0x240>)
 800888c:	2778      	movs	r7, #120	; 0x78
 800888e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	6829      	ldr	r1, [r5, #0]
 8008896:	061f      	lsls	r7, r3, #24
 8008898:	f851 6b04 	ldr.w	r6, [r1], #4
 800889c:	d402      	bmi.n	80088a4 <_printf_i+0x18c>
 800889e:	065f      	lsls	r7, r3, #25
 80088a0:	bf48      	it	mi
 80088a2:	b2b6      	uxthmi	r6, r6
 80088a4:	07df      	lsls	r7, r3, #31
 80088a6:	bf48      	it	mi
 80088a8:	f043 0320 	orrmi.w	r3, r3, #32
 80088ac:	6029      	str	r1, [r5, #0]
 80088ae:	bf48      	it	mi
 80088b0:	6023      	strmi	r3, [r4, #0]
 80088b2:	b91e      	cbnz	r6, 80088bc <_printf_i+0x1a4>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	f023 0320 	bic.w	r3, r3, #32
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	2310      	movs	r3, #16
 80088be:	e7a7      	b.n	8008810 <_printf_i+0xf8>
 80088c0:	4824      	ldr	r0, [pc, #144]	; (8008954 <_printf_i+0x23c>)
 80088c2:	e7e4      	b.n	800888e <_printf_i+0x176>
 80088c4:	4615      	mov	r5, r2
 80088c6:	e7bd      	b.n	8008844 <_printf_i+0x12c>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	6826      	ldr	r6, [r4, #0]
 80088cc:	6961      	ldr	r1, [r4, #20]
 80088ce:	1d18      	adds	r0, r3, #4
 80088d0:	6028      	str	r0, [r5, #0]
 80088d2:	0635      	lsls	r5, r6, #24
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	d501      	bpl.n	80088dc <_printf_i+0x1c4>
 80088d8:	6019      	str	r1, [r3, #0]
 80088da:	e002      	b.n	80088e2 <_printf_i+0x1ca>
 80088dc:	0670      	lsls	r0, r6, #25
 80088de:	d5fb      	bpl.n	80088d8 <_printf_i+0x1c0>
 80088e0:	8019      	strh	r1, [r3, #0]
 80088e2:	2300      	movs	r3, #0
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	4615      	mov	r5, r2
 80088e8:	e7bc      	b.n	8008864 <_printf_i+0x14c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	681d      	ldr	r5, [r3, #0]
 80088f2:	6862      	ldr	r2, [r4, #4]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4628      	mov	r0, r5
 80088f8:	f7f7 fc72 	bl	80001e0 <memchr>
 80088fc:	b108      	cbz	r0, 8008902 <_printf_i+0x1ea>
 80088fe:	1b40      	subs	r0, r0, r5
 8008900:	6060      	str	r0, [r4, #4]
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	6123      	str	r3, [r4, #16]
 8008906:	2300      	movs	r3, #0
 8008908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800890c:	e7aa      	b.n	8008864 <_printf_i+0x14c>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	462a      	mov	r2, r5
 8008912:	4649      	mov	r1, r9
 8008914:	4640      	mov	r0, r8
 8008916:	47d0      	blx	sl
 8008918:	3001      	adds	r0, #1
 800891a:	d0ad      	beq.n	8008878 <_printf_i+0x160>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	079b      	lsls	r3, r3, #30
 8008920:	d413      	bmi.n	800894a <_printf_i+0x232>
 8008922:	68e0      	ldr	r0, [r4, #12]
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	4298      	cmp	r0, r3
 8008928:	bfb8      	it	lt
 800892a:	4618      	movlt	r0, r3
 800892c:	e7a6      	b.n	800887c <_printf_i+0x164>
 800892e:	2301      	movs	r3, #1
 8008930:	4632      	mov	r2, r6
 8008932:	4649      	mov	r1, r9
 8008934:	4640      	mov	r0, r8
 8008936:	47d0      	blx	sl
 8008938:	3001      	adds	r0, #1
 800893a:	d09d      	beq.n	8008878 <_printf_i+0x160>
 800893c:	3501      	adds	r5, #1
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	9903      	ldr	r1, [sp, #12]
 8008942:	1a5b      	subs	r3, r3, r1
 8008944:	42ab      	cmp	r3, r5
 8008946:	dcf2      	bgt.n	800892e <_printf_i+0x216>
 8008948:	e7eb      	b.n	8008922 <_printf_i+0x20a>
 800894a:	2500      	movs	r5, #0
 800894c:	f104 0619 	add.w	r6, r4, #25
 8008950:	e7f5      	b.n	800893e <_printf_i+0x226>
 8008952:	bf00      	nop
 8008954:	08008bbd 	.word	0x08008bbd
 8008958:	08008bce 	.word	0x08008bce

0800895c <memmove>:
 800895c:	4288      	cmp	r0, r1
 800895e:	b510      	push	{r4, lr}
 8008960:	eb01 0402 	add.w	r4, r1, r2
 8008964:	d902      	bls.n	800896c <memmove+0x10>
 8008966:	4284      	cmp	r4, r0
 8008968:	4623      	mov	r3, r4
 800896a:	d807      	bhi.n	800897c <memmove+0x20>
 800896c:	1e43      	subs	r3, r0, #1
 800896e:	42a1      	cmp	r1, r4
 8008970:	d008      	beq.n	8008984 <memmove+0x28>
 8008972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800897a:	e7f8      	b.n	800896e <memmove+0x12>
 800897c:	4402      	add	r2, r0
 800897e:	4601      	mov	r1, r0
 8008980:	428a      	cmp	r2, r1
 8008982:	d100      	bne.n	8008986 <memmove+0x2a>
 8008984:	bd10      	pop	{r4, pc}
 8008986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800898a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800898e:	e7f7      	b.n	8008980 <memmove+0x24>

08008990 <_sbrk_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_sbrk_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f8 f8ca 	bl	8000b34 <_sbrk>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_sbrk_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_sbrk_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20001ee8 	.word	0x20001ee8

080089b0 <memcpy>:
 80089b0:	440a      	add	r2, r1
 80089b2:	4291      	cmp	r1, r2
 80089b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b8:	d100      	bne.n	80089bc <memcpy+0xc>
 80089ba:	4770      	bx	lr
 80089bc:	b510      	push	{r4, lr}
 80089be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089c6:	4291      	cmp	r1, r2
 80089c8:	d1f9      	bne.n	80089be <memcpy+0xe>
 80089ca:	bd10      	pop	{r4, pc}

080089cc <_realloc_r>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	4680      	mov	r8, r0
 80089d2:	4614      	mov	r4, r2
 80089d4:	460e      	mov	r6, r1
 80089d6:	b921      	cbnz	r1, 80089e2 <_realloc_r+0x16>
 80089d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	4611      	mov	r1, r2
 80089de:	f7ff bc49 	b.w	8008274 <_malloc_r>
 80089e2:	b92a      	cbnz	r2, 80089f0 <_realloc_r+0x24>
 80089e4:	f7ff fbda 	bl	800819c <_free_r>
 80089e8:	4625      	mov	r5, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	f000 f81b 	bl	8008a2a <_malloc_usable_size_r>
 80089f4:	4284      	cmp	r4, r0
 80089f6:	4607      	mov	r7, r0
 80089f8:	d802      	bhi.n	8008a00 <_realloc_r+0x34>
 80089fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089fe:	d812      	bhi.n	8008a26 <_realloc_r+0x5a>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4640      	mov	r0, r8
 8008a04:	f7ff fc36 	bl	8008274 <_malloc_r>
 8008a08:	4605      	mov	r5, r0
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d0ed      	beq.n	80089ea <_realloc_r+0x1e>
 8008a0e:	42bc      	cmp	r4, r7
 8008a10:	4622      	mov	r2, r4
 8008a12:	4631      	mov	r1, r6
 8008a14:	bf28      	it	cs
 8008a16:	463a      	movcs	r2, r7
 8008a18:	f7ff ffca 	bl	80089b0 <memcpy>
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4640      	mov	r0, r8
 8008a20:	f7ff fbbc 	bl	800819c <_free_r>
 8008a24:	e7e1      	b.n	80089ea <_realloc_r+0x1e>
 8008a26:	4635      	mov	r5, r6
 8008a28:	e7df      	b.n	80089ea <_realloc_r+0x1e>

08008a2a <_malloc_usable_size_r>:
 8008a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2e:	1f18      	subs	r0, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bfbc      	itt	lt
 8008a34:	580b      	ldrlt	r3, [r1, r0]
 8008a36:	18c0      	addlt	r0, r0, r3
 8008a38:	4770      	bx	lr
	...

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
