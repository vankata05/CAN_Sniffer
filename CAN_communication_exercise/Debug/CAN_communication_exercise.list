
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f74  08009f74  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f7c  08009f7c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001e38  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001f94  20001f94  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014cde  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003726  00000000  00000000  00034ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd8  00000000  00000000  000385d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf9  00000000  00000000  000395b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c92  00000000  00000000  0003a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001569f  00000000  00000000  0005de3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9290  00000000  00000000  000734da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045a0  00000000  00000000  0013c76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00140d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009da8 	.word	0x08009da8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08009da8 	.word	0x08009da8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f000 ff8f 	bl	80014ce <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f008 ff2c 	bl	8009460 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000022f 	.word	0x2000022f
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	2000022e 	.word	0x2000022e
 800062c:	08009dc0 	.word	0x08009dc0
 8000630:	20000180 	.word	0x20000180
 8000634:	20000230 	.word	0x20000230

08000638 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	466b      	mov	r3, sp
 8000648:	461e      	mov	r6, r3
	uint8_t pData[Size];
 800064a:	8879      	ldrh	r1, [r7, #2]
 800064c:	460b      	mov	r3, r1
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	b28b      	uxth	r3, r1
 8000654:	2200      	movs	r2, #0
 8000656:	4698      	mov	r8, r3
 8000658:	4691      	mov	r9, r2
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800066a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800066e:	b28b      	uxth	r3, r1
 8000670:	2200      	movs	r2, #0
 8000672:	461c      	mov	r4, r3
 8000674:	4615      	mov	r5, r2
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	00eb      	lsls	r3, r5, #3
 8000680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000684:	00e2      	lsls	r2, r4, #3
 8000686:	460b      	mov	r3, r1
 8000688:	3307      	adds	r3, #7
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	ebad 0d03 	sub.w	sp, sp, r3
 8000692:	466b      	mov	r3, sp
 8000694:	3300      	adds	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	HAL_UART_Receive(&huart, (uint8_t*)pData, Size, 100);
 8000698:	887a      	ldrh	r2, [r7, #2]
 800069a:	1d38      	adds	r0, r7, #4
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	f003 fd4f 	bl	8004142 <HAL_UART_Receive>

	CDC_Transmit_FS(pData, Size);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68b8      	ldr	r0, [r7, #8]
 80006aa:	f008 fa6b 	bl	8008b84 <CDC_Transmit_FS>
 80006ae:	46b5      	mov	sp, r6
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080006bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, (uint8_t*)data1, 64);
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	4906      	ldr	r1, [pc, #24]	; (80006e0 <HAL_UART_RxCpltCallback+0x24>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f003 fddc 	bl	8004286 <HAL_UART_Receive_IT>
  CDC_Transmit_FS((uint8_t*)data1, 64);
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <HAL_UART_RxCpltCallback+0x24>)
 80006d2:	f008 fa57 	bl	8008b84 <CDC_Transmit_FS>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000180 	.word	0x20000180

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b090      	sub	sp, #64	; 0x40
 80006e8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80006ea:	f000 fbf1 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f8cb 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 f9d9 	bl	8000aa8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006f6:	f008 f969 	bl	80089cc <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80006fa:	f000 f9ab 	bl	8000a54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 80006fe:	f000 f815 	bl	800072c <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <main+0x40>)
 8000704:	f000 f82e 	bl	8000764 <Auto_Baudrate_Setup>
//		  Capture_PID(&PIDs[i]);
//	  CDC_Transmit_FS((uint8_t*)PIDs[0].LastVal, 4);
//		HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//	  HAL_UART_Transmit(&huart5, (uint8_t*)"HEWWO", 5, 100);
//	  /*
	  HAL_UART_Receive(&huart3, data, 64, 1000);
 8000708:	4639      	mov	r1, r7
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	2240      	movs	r2, #64	; 0x40
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <main+0x44>)
 8000712:	f003 fd16 	bl	8004142 <HAL_UART_Receive>
//	  strcat(data, "\n----------");
	  CDC_Transmit_FS(data, 64);
 8000716:	463b      	mov	r3, r7
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4618      	mov	r0, r3
 800071c:	f008 fa32 	bl	8008b84 <CDC_Transmit_FS>
	  HAL_UART_Receive(&huart3, data, 64, 1000);
 8000720:	e7f2      	b.n	8000708 <main+0x24>
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	200001e8 	.word	0x200001e8

0800072c <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000730:	e005      	b.n	800073e <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <HODL_Till_BTN+0x30>)
 800073a:	f001 fd87 	bl	800224c <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800073e:	2101      	movs	r1, #1
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <HODL_Till_BTN+0x34>)
 8000742:	f001 fd6b 	bl	800221c <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f2      	beq.n	8000732 <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <HODL_Till_BTN+0x30>)
 8000754:	f001 fd7a 	bl	800224c <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000

08000764 <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 800076c:	2300      	movs	r3, #0
 800076e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000772:	e034      	b.n	80007de <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <Auto_Baudrate_Setup+0x110>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d133      	bne.n	80007e6 <Auto_Baudrate_Setup+0x82>
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <Auto_Baudrate_Setup+0x114>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d12e      	bne.n	80007e6 <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 8000788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10d      	bne.n	80007ac <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f90d 	bl	80009b8 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 800079e:	4837      	ldr	r0, [pc, #220]	; (800087c <Auto_Baudrate_Setup+0x118>)
 80007a0:	f000 fe08 	bl	80013b4 <HAL_CAN_Start>
			  HAL_Delay(100);
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f000 fc05 	bl	8000fb4 <HAL_Delay>
 80007aa:	e013      	b.n	80007d4 <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 80007ac:	4833      	ldr	r0, [pc, #204]	; (800087c <Auto_Baudrate_Setup+0x118>)
 80007ae:	f000 fe45 	bl	800143c <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 80007b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f8f8 	bl	80009b8 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <Auto_Baudrate_Setup+0x118>)
 80007ca:	f000 fdf3 	bl	80013b4 <HAL_CAN_Start>
			  HAL_Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f000 fbf0 	bl	8000fb4 <HAL_Delay>
  for(i = 0; i < 4; i++){
 80007d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007d8:	3301      	adds	r3, #1
 80007da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d9c6      	bls.n	8000774 <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <Auto_Baudrate_Setup+0x110>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d104      	bne.n	80007fa <Auto_Baudrate_Setup+0x96>
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <Auto_Baudrate_Setup+0x114>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d029      	beq.n	800084e <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 80007fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000802:	3b01      	subs	r3, #1
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	491b      	ldr	r1, [pc, #108]	; (8000880 <Auto_Baudrate_Setup+0x11c>)
 8000812:	4618      	mov	r0, r3
 8000814:	f008 fe24 	bl	8009460 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcd7 	bl	80001d0 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f008 f9a9 	bl	8008b84 <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <Auto_Baudrate_Setup+0x118>)
 8000834:	f000 fe02 	bl	800143c <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <Auto_Baudrate_Setup+0x118>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <Auto_Baudrate_Setup+0x118>)
 8000840:	f000 fbdc 	bl	8000ffc <HAL_CAN_Init>
	  CAN1_Filter_Config();
 8000844:	f000 f88a 	bl	800095c <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <Auto_Baudrate_Setup+0x118>)
 800084a:	f000 fdb3 	bl	80013b4 <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <Auto_Baudrate_Setup+0x110>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d108      	bne.n	800086a <Auto_Baudrate_Setup+0x106>
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <Auto_Baudrate_Setup+0x114>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 8000862:	2118      	movs	r1, #24
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <Auto_Baudrate_Setup+0x120>)
 8000866:	f008 f98d 	bl	8008b84 <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 800086a:	bf00      	nop
 800086c:	3738      	adds	r7, #56	; 0x38
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000022d 	.word	0x2000022d
 8000878:	2000022c 	.word	0x2000022c
 800087c:	200001c0 	.word	0x200001c0
 8000880:	08009e98 	.word	0x08009e98
 8000884:	08009ec4 	.word	0x08009ec4

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f008 fe02 	bl	80094a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <SystemClock_Config+0xcc>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <SystemClock_Config+0xd0>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000906:	2307      	movs	r3, #7
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4618      	mov	r0, r3
 8000910:	f002 ff32 	bl	8003778 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800091a:	f000 f925 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2105      	movs	r1, #5
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f993 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000948:	f000 f90e 	bl	8000b68 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2228      	movs	r2, #40	; 0x28
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f008 fd99 	bl	80094a0 <memset>

  filters.FilterActivation = ENABLE;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 800097e:	2301      	movs	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 8000982:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000986:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 800098c:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000990:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <CAN1_Filter_Config+0x58>)
 800099c:	f000 fc2a 	bl	80011f4 <HAL_CAN_ConfigFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 80009a6:	f000 f8df 	bl	8000b68 <Error_Handler>
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001c0 	.word	0x200001c0

080009b8 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_CAN1_Init+0x98>)
 80009c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 80009c8:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN1_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_CAN1_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN1_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <MX_CAN1_Init+0x94>)
 8000a0e:	f000 faf5 	bl	8000ffc <HAL_CAN_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000a18:	f000 f8a6 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <MX_CAN1_Init+0x94>)
 8000a22:	f000 fe66 	bl	80016f2 <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 fd36 	bl	80094a0 <memset>
  filters.FilterActivation = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_CAN1_Init+0x94>)
 8000a40:	f000 fbd8 	bl	80011f4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001c0 	.word	0x200001c0
 8000a50:	40006400 	.word	0x40006400

08000a54 <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART3_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a8c:	f003 fb0c 	bl	80040a8 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f867 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001e8 	.word	0x200001e8
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xb8>)
 8000b1a:	f001 fb97 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_GPIO_Init+0xbc>)
 8000b32:	f001 f9d7 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_GPIO_Init+0xb8>)
 8000b50:	f001 f9c8 	bl	8001ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40020000 	.word	0x40020000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <HAL_CAN_MspInit+0xb4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d143      	bne.n	8000c6e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <HAL_CAN_MspInit+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c2e:	2309      	movs	r3, #9
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <HAL_CAN_MspInit+0xbc>)
 8000c3a:	f001 f953 	bl	8001ee4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2013      	movs	r0, #19
 8000c44:	f001 f885 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c48:	2013      	movs	r0, #19
 8000c4a:	f001 f89e 	bl	8001d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2014      	movs	r0, #20
 8000c54:	f001 f87d 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c58:	2014      	movs	r0, #20
 8000c5a:	f001 f896 	bl	8001d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2015      	movs	r0, #21
 8000c64:	f001 f875 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c68:	2015      	movs	r0, #21
 8000c6a:	f001 f88e 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40006400 	.word	0x40006400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_UART_MspInit+0x94>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d134      	bne.n	8000d10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cfc:	f001 f8f2 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2027      	movs	r0, #39	; 0x27
 8000d06:	f001 f824 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d0a:	2027      	movs	r0, #39	; 0x27
 8000d0c:	f001 f83d 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40004800 	.word	0x40004800
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f900 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <CAN1_TX_IRQHandler+0x10>)
 8000d7e:	f000 fcde 	bl	800173e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001c0 	.word	0x200001c0

08000d8c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <CAN1_RX0_IRQHandler+0x14>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <CAN1_RX0_IRQHandler+0x18>)
 8000d98:	f000 fcd1 	bl	800173e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000022c 	.word	0x2000022c
 8000da4:	200001c0 	.word	0x200001c0

08000da8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <CAN1_RX1_IRQHandler+0x14>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <CAN1_RX1_IRQHandler+0x18>)
 8000db4:	f000 fcc3 	bl	800173e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000022d 	.word	0x2000022d
 8000dc0:	200001c0 	.word	0x200001c0

08000dc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USART3_IRQHandler+0x10>)
 8000dca:	f003 fa8d 	bl	80042e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001e8 	.word	0x200001e8

08000dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <OTG_FS_IRQHandler+0x10>)
 8000dde:	f001 fb9e 	bl	800251e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20001720 	.word	0x20001720

08000dec <_sbrk>:
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
 8000e1c:	f008 fb48 	bl	80094b0 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000238 	.word	0x20000238
 8000e54:	20001f98 	.word	0x20001f98

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x12>
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1a>)
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1e>)
 8000e86:	2300      	movs	r3, #0
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:
 8000e8a:	58d4      	ldr	r4, [r2, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:
 8000e90:	18c4      	adds	r4, r0, r3
 8000e92:	428c      	cmp	r4, r1
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x22>)
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x26>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:
 8000ea2:	42a2      	cmp	r2, r4
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
 8000ea6:	f7ff ffd7 	bl	8000e58 <SystemInit>
 8000eaa:	f008 fb07 	bl	80094bc <__libc_init_array>
 8000eae:	f7ff fc19 	bl	80006e4 <main>
 8000eb2:	4770      	bx	lr
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	2000015c 	.word	0x2000015c
 8000ec0:	08009f84 	.word	0x08009f84
 8000ec4:	2000015c 	.word	0x2000015c
 8000ec8:	20001f94 	.word	0x20001f94

08000ecc <ADC_IRQHandler>:
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 ff1f 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fe36 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 ff37 	bl	8001da6 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 feff 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000018 	.word	0x20000018
 8000f70:	20000014 	.word	0x20000014

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000018 	.word	0x20000018
 8000f98:	2000023c 	.word	0x2000023c

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000023c 	.word	0x2000023c

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000018 	.word	0x20000018

08000ffc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ed      	b.n	80011ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fdd2 	bl	8000bc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ffb4 	bl	8000f9c <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ffb0 	bl	8000f9c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0c5      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e5      	beq.n	8001038 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0202 	bic.w	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ff8e 	bl	8000f9c <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ff8a 	bl	8000f9c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e09f      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e5      	bne.n	8001084 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e5b      	ldrb	r3, [r3, #25]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e9b      	ldrb	r3, [r3, #26]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0220 	orr.w	r2, r2, #32
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0220 	bic.w	r2, r2, #32
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7edb      	ldrb	r3, [r3, #27]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0210 	bic.w	r2, r2, #16
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7f1b      	ldrb	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0208 	bic.w	r2, r2, #8
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7f5b      	ldrb	r3, [r3, #29]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	ea42 0103 	orr.w	r1, r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d003      	beq.n	800121a <HAL_CAN_ConfigFilter+0x26>
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	2b02      	cmp	r3, #2
 8001216:	f040 80be 	bne.w	8001396 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800121c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001234:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2201      	movs	r2, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	401a      	ands	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d123      	bne.n	80012c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800129e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3248      	adds	r2, #72	; 0x48
 80012a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	3348      	adds	r3, #72	; 0x48
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d122      	bne.n	8001312 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3248      	adds	r2, #72	; 0x48
 80012f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001306:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	3348      	adds	r3, #72	; 0x48
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	401a      	ands	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800132c:	e007      	b.n	800133e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	431a      	orrs	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	401a      	ands	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001358:	e007      	b.n	800136a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001388:	f023 0201 	bic.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e006      	b.n	80013a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40006400 	.word	0x40006400

080013b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12e      	bne.n	8001426 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013e0:	f7ff fddc 	bl	8000f9c <HAL_GetTick>
 80013e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e6:	e012      	b.n	800140e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e8:	f7ff fdd8 	bl	8000f9c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	d90b      	bls.n	800140e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2205      	movs	r2, #5
 8001406:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e012      	b.n	8001434 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e5      	bne.n	80013e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e006      	b.n	8001434 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d133      	bne.n	80014b8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fd9c 	bl	8000f9c <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001466:	e012      	b.n	800148e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001468:	f7ff fd98 	bl	8000f9c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d90b      	bls.n	800148e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2205      	movs	r2, #5
 8001486:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e01b      	b.n	80014c6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0e5      	beq.n	8001468 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0202 	bic.w	r2, r2, #2
 80014aa:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e006      	b.n	80014c6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014ce:	b480      	push	{r7}
 80014d0:	b087      	sub	sp, #28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_GetRxMessage+0x24>
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 80f3 	bne.w	80016d8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10e      	bne.n	8001516 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0e7      	b.n	80016e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d107      	bne.n	8001534 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0d8      	b.n	80016e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	331b      	adds	r3, #27
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0204 	and.w	r2, r3, #4
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	331b      	adds	r3, #27
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e00b      	b.n	8001584 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	331b      	adds	r3, #27
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4413      	add	r3, r2
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	331b      	adds	r3, #27
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0202 	and.w	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	331b      	adds	r3, #27
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	3304      	adds	r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 020f 	and.w	r2, r3, #15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	331b      	adds	r3, #27
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	331b      	adds	r3, #27
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	3304      	adds	r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0a1a      	lsrs	r2, r3, #8
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	0c1a      	lsrs	r2, r3, #16
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3302      	adds	r3, #2
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e1a      	lsrs	r2, r3, #24
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3303      	adds	r3, #3
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3304      	adds	r3, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0a1a      	lsrs	r2, r3, #8
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	3305      	adds	r3, #5
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0c1a      	lsrs	r2, r3, #16
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3306      	adds	r3, #6
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	4413      	add	r3, r2
 800169c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0e1a      	lsrs	r2, r3, #24
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3307      	adds	r3, #7
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	e007      	b.n	80016d4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e006      	b.n	80016e6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001702:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d002      	beq.n	8001710 <HAL_CAN_ActivateNotification+0x1e>
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d109      	bne.n	8001724 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6959      	ldr	r1, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e006      	b.n	8001732 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08a      	sub	sp, #40	; 0x28
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d07c      	beq.n	800187e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d023      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f983 	bl	8001aac <HAL_CAN_TxMailbox0CompleteCallback>
 80017a6:	e016      	b.n	80017d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e00c      	b.n	80017d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	e002      	b.n	80017d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f989 	bl	8001ae8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f963 	bl	8001ac0 <HAL_CAN_TxMailbox1CompleteCallback>
 80017fa:	e016      	b.n	800182a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	e00c      	b.n	800182a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	e002      	b.n	800182a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f969 	bl	8001afc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d024      	beq.n	800187e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f943 	bl	8001ad4 <HAL_CAN_TxMailbox2CompleteCallback>
 800184e:	e016      	b.n	800187e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e00c      	b.n	800187e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	e002      	b.n	800187e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f949 	bl	8001b10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00c      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2210      	movs	r2, #16
 80018a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2208      	movs	r2, #8
 80018bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f930 	bl	8001b24 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7fe fe4d 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00c      	beq.n	8001906 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2210      	movs	r2, #16
 8001904:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2208      	movs	r2, #8
 8001920:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f912 	bl	8001b4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8f9 	bl	8001b38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2210      	movs	r2, #16
 8001960:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8fc 	bl	8001b60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f8f5 	bl	8001b74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d07b      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d072      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d043      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03e      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a0c:	2b60      	cmp	r3, #96	; 0x60
 8001a0e:	d02b      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x32a>
 8001a10:	2b60      	cmp	r3, #96	; 0x60
 8001a12:	d82e      	bhi.n	8001a72 <HAL_CAN_IRQHandler+0x334>
 8001a14:	2b50      	cmp	r3, #80	; 0x50
 8001a16:	d022      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x320>
 8001a18:	2b50      	cmp	r3, #80	; 0x50
 8001a1a:	d82a      	bhi.n	8001a72 <HAL_CAN_IRQHandler+0x334>
 8001a1c:	2b40      	cmp	r3, #64	; 0x40
 8001a1e:	d019      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x316>
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d826      	bhi.n	8001a72 <HAL_CAN_IRQHandler+0x334>
 8001a24:	2b30      	cmp	r3, #48	; 0x30
 8001a26:	d010      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x30c>
 8001a28:	2b30      	cmp	r3, #48	; 0x30
 8001a2a:	d822      	bhi.n	8001a72 <HAL_CAN_IRQHandler+0x334>
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d002      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x2f8>
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d005      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a34:	e01d      	b.n	8001a72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a3e:	e019      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f043 0310 	orr.w	r3, r3, #16
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a48:	e014      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a52:	e00f      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5c:	e00a      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a66:	e005      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a70:	e000      	b.n	8001a74 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f872 	bl	8001b88 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff3e 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff31 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff f8e6 	bl	8000f9c <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d008      	beq.n	8001df0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e052      	b.n	8001e96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0216 	bic.w	r2, r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <HAL_DMA_Abort+0x62>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0208 	bic.w	r2, r2, #8
 8001e2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	e013      	b.n	8001e6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e42:	f7ff f8ab 	bl	8000f9c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d90c      	bls.n	8001e6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e015      	b.n	8001e96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e4      	bne.n	8001e42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	223f      	movs	r2, #63	; 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00c      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e16b      	b.n	80021d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 815a 	bne.w	80021d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d130      	bne.n	8001f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d017      	beq.n	8001fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80b4 	beq.w	80021d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a5f      	ldr	r2, [pc, #380]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_GPIO_Init+0x310>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_GPIO_Init+0x314>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x226>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_GPIO_Init+0x318>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x222>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a50      	ldr	r2, [pc, #320]	; (8002200 <HAL_GPIO_Init+0x31c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x21e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_GPIO_Init+0x320>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <HAL_GPIO_Init+0x324>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_GPIO_Init+0x328>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_GPIO_Init+0x32c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4b      	ldr	r2, [pc, #300]	; (8002214 <HAL_GPIO_Init+0x330>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x20a>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00e      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x228>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x228>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x228>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	; (80021f4 <HAL_GPIO_Init+0x310>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_GPIO_Init+0x334>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a32      	ldr	r2, [pc, #200]	; (8002218 <HAL_GPIO_Init+0x334>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_GPIO_Init+0x334>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_GPIO_Init+0x334>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_GPIO_Init+0x334>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_GPIO_Init+0x334>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_GPIO_Init+0x334>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_GPIO_Init+0x334>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae90 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800227e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002280:	b08f      	sub	sp, #60	; 0x3c
 8002282:	af0a      	add	r7, sp, #40	; 0x28
 8002284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e10f      	b.n	80024b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f006 fdb2 	bl	8008e14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2203      	movs	r2, #3
 80022b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f87b 	bl	80053ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	687e      	ldr	r6, [r7, #4]
 80022dc:	466d      	mov	r5, sp
 80022de:	f106 0410 	add.w	r4, r6, #16
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f2:	1d33      	adds	r3, r6, #4
 80022f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f002 ff52 	bl	80051a0 <USB_CoreInit>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0d0      	b.n	80024b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f869 	bl	80053ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e04a      	b.n	80023b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	333d      	adds	r3, #61	; 0x3d
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	333c      	adds	r3, #60	; 0x3c
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	b298      	uxth	r0, r3
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	; 0x44
 800235c:	4602      	mov	r2, r0
 800235e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3340      	adds	r3, #64	; 0x40
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3348      	adds	r3, #72	; 0x48
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3354      	adds	r3, #84	; 0x54
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3af      	bcc.n	8002320 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e044      	b.n	8002450 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3b5      	bcc.n	80023c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	687e      	ldr	r6, [r7, #4]
 8002462:	466d      	mov	r5, sp
 8002464:	f106 0410 	add.w	r4, r6, #16
 8002468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002470:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002474:	e885 0003 	stmia.w	r5, {r0, r1}
 8002478:	1d33      	adds	r3, r6, #4
 800247a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247c:	6838      	ldr	r0, [r7, #0]
 800247e:	f003 f801 	bl	8005484 <USB_DevInit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e00d      	b.n	80024b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 f950 	bl	800674e <USB_DevDisconnect>

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_PCD_Start+0x1c>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e020      	b.n	8002516 <HAL_PCD_Start+0x5e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d109      	bne.n	80024f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d005      	beq.n	80024f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 ff53 	bl	80053a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f900 	bl	800670c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b08d      	sub	sp, #52	; 0x34
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f004 f9be 	bl	80068b6 <USB_GetMode>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 848a 	bne.w	8002e56 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f004 f922 	bl	8006790 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8480 	beq.w	8002e54 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f004 f90f 	bl	8006790 <USB_ReadInterrupts>
 8002572:	4603      	mov	r3, r0
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f002 0202 	and.w	r2, r2, #2
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f004 f8fd 	bl	8006790 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b10      	cmp	r3, #16
 800259e:	d161      	bne.n	8002664 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	0c5b      	lsrs	r3, r3, #17
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d124      	bne.n	8002626 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d035      	beq.n	8002654 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6a38      	ldr	r0, [r7, #32]
 80025fc:	f003 ff34 	bl	8006468 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260c:	441a      	add	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6a1a      	ldr	r2, [r3, #32]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800261e:	441a      	add	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
 8002624:	e016      	b.n	8002654 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	0c5b      	lsrs	r3, r3, #17
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	2b06      	cmp	r3, #6
 8002630:	d110      	bne.n	8002654 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002638:	2208      	movs	r2, #8
 800263a:	4619      	mov	r1, r3
 800263c:	6a38      	ldr	r0, [r7, #32]
 800263e:	f003 ff13 	bl	8006468 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264e:	441a      	add	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0210 	orr.w	r2, r2, #16
 8002662:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 f891 	bl	8006790 <USB_ReadInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002678:	f040 80a7 	bne.w	80027ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 f896 	bl	80067b6 <USB_ReadDevAllOutEpInterrupt>
 800268a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800268c:	e099      	b.n	80027c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 808e 	beq.w	80027b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 f8ba 	bl	800681e <USB_ReadDevOutEPInterrupt>
 80026aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c2:	461a      	mov	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fec2 	bl	8003454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e6:	461a      	mov	r2, r3
 80026e8:	2308      	movs	r3, #8
 80026ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 ff98 	bl	8003624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	461a      	mov	r2, r3
 800270c:	2310      	movs	r3, #16
 800270e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d030      	beq.n	800277c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	d109      	bne.n	800273a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002738:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2200      	movs	r2, #0
 800275c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f006 fc6d 	bl	8009044 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002776:	461a      	mov	r2, r3
 8002778:	2302      	movs	r3, #2
 800277a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	2320      	movs	r3, #32
 8002796:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ae:	461a      	mov	r2, r3
 80027b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	3301      	adds	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f af62 	bne.w	800268e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 ffde 	bl	8006790 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027de:	f040 80db 	bne.w	8002998 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 ffff 	bl	80067ea <USB_ReadDevAllInEpInterrupt>
 80027ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027f2:	e0cd      	b.n	8002990 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80c2 	beq.w	8002984 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f004 f825 	bl	800685a <USB_ReadDevInEPInterrupt>
 8002810:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d057      	beq.n	80028cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	2201      	movs	r2, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	69f9      	ldr	r1, [r7, #28]
 8002838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800283c:	4013      	ands	r3, r2
 800283e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284c:	461a      	mov	r2, r3
 800284e:	2301      	movs	r3, #1
 8002850:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d132      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	334c      	adds	r3, #76	; 0x4c
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4403      	add	r3, r0
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4419      	add	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	334c      	adds	r3, #76	; 0x4c
 8002890:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x3a2>
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3354      	adds	r3, #84	; 0x54
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028b8:	461a      	mov	r2, r3
 80028ba:	2101      	movs	r1, #1
 80028bc:	f004 f82c 	bl	8006918 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f006 fb37 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e2:	461a      	mov	r2, r3
 80028e4:	2308      	movs	r3, #8
 80028e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028fe:	461a      	mov	r2, r3
 8002900:	2310      	movs	r3, #16
 8002902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291a:	461a      	mov	r2, r3
 800291c:	2340      	movs	r3, #64	; 0x40
 800291e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d023      	beq.n	8002972 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800292a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292c:	6a38      	ldr	r0, [r7, #32]
 800292e:	f002 ff0d 	bl	800574c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	3338      	adds	r3, #56	; 0x38
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	3304      	adds	r3, #4
 8002944:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	78db      	ldrb	r3, [r3, #3]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f006 fb84 	bl	8009068 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296c:	461a      	mov	r2, r3
 800296e:	2302      	movs	r3, #2
 8002970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fcdb 	bl	800333a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3301      	adds	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	f47f af2e 	bne.w	80027f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fef7 	bl	8006790 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ac:	d122      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d108      	bne.n	80029de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029d4:	2100      	movs	r1, #0
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fec2 	bl	8003760 <HAL_PCDEx_LPM_Callback>
 80029dc:	e002      	b.n	80029e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 fb22 	bl	8009028 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fec9 	bl	8006790 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a08:	d112      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f006 fade 	bl	8008fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a2e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 feab 	bl	8006790 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	f040 80b7 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2110      	movs	r1, #16
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fe72 	bl	800574c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6c:	e046      	b.n	8002afc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a92:	0151      	lsls	r1, r2, #5
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	440a      	add	r2, r1
 8002a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ab4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	0151      	lsls	r1, r2, #5
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	440a      	add	r2, r1
 8002acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ad0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ad4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae6:	0151      	lsls	r1, r2, #5
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	440a      	add	r2, r1
 8002aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002af0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002af4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	3301      	adds	r3, #1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d3b3      	bcc.n	8002a6e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b32:	f043 030b 	orr.w	r3, r3, #11
 8002b36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f043 030b 	orr.w	r3, r3, #11
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	e015      	b.n	8002b7c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b76:	f043 030b 	orr.w	r3, r3, #11
 8002b7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f003 feb9 	bl	8006918 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fde8 	bl	8006790 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bca:	d124      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fe7e 	bl	80068d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fe33 	bl	8005846 <USB_GetDevSpeed>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681c      	ldr	r4, [r3, #0]
 8002bec:	f001 fa28 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f002 fb32 	bl	8005264 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f006 f9c2 	bl	8008f8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fdb8 	bl	8006790 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d10a      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f006 f99f 	bl	8008f6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f002 0208 	and.w	r2, r2, #8
 8002c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fda3 	bl	8006790 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d122      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c60:	2301      	movs	r3, #1
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e014      	b.n	8002c90 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fb27 	bl	80032d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3e5      	bcc.n	8002c66 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fd76 	bl	8006790 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cae:	d13b      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb4:	e02b      	b.n	8002d0e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3340      	adds	r3, #64	; 0x40
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d115      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da12      	bge.n	8002d08 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	333f      	adds	r3, #63	; 0x3f
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fae8 	bl	80032d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3ce      	bcc.n	8002cb6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fd2f 	bl	8006790 <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3c:	d155      	bne.n	8002dea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3e:	2301      	movs	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e045      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d12e      	bne.n	8002dca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da2b      	bge.n	8002dca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d121      	bne.n	8002dca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc6:	6053      	str	r3, [r2, #4]
            break;
 8002dc8:	e007      	b.n	8002dda <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3301      	adds	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3b4      	bcc.n	8002d44 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fcce 	bl	8006790 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d10a      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f006 f943 	bl	800908c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fcb8 	bl	8006790 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d115      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f006 f933 	bl	80090a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	e000      	b.n	8002e56 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e54:	bf00      	nop
    }
  }
}
 8002e56:	3734      	adds	r7, #52	; 0x34
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_PCD_SetAddress+0x1a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e013      	b.n	8002e9e <HAL_PCD_SetAddress+0x42>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fc16 	bl	80066c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	4608      	mov	r0, r1
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	70fb      	strb	r3, [r7, #3]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	803b      	strh	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da0f      	bge.n	8002eec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	3338      	adds	r3, #56	; 0x38
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	705a      	strb	r2, [r3, #1]
 8002eea:	e00f      	b.n	8002f0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 020f 	and.w	r2, r3, #15
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f18:	883a      	ldrh	r2, [r7, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	78ba      	ldrb	r2, [r7, #2]
 8002f22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f36:	78bb      	ldrb	r3, [r7, #2]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d102      	bne.n	8002f42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_PCD_EP_Open+0xaa>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e00e      	b.n	8002f6e <HAL_PCD_EP_Open+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fc96 	bl	8005890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da0f      	bge.n	8002faa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3338      	adds	r3, #56	; 0x38
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	705a      	strb	r2, [r3, #1]
 8002fa8:	e00f      	b.n	8002fca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_PCD_EP_Close+0x6e>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e00e      	b.n	8003002 <HAL_PCD_EP_Close+0x8c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fcd4 	bl	80059a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	460b      	mov	r3, r1
 8003018:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	3304      	adds	r3, #4
 8003032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	b2da      	uxtb	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	6979      	ldr	r1, [r7, #20]
 800307e:	f002 ffb3 	bl	8005fe8 <USB_EP0StartXfer>
 8003082:	e008      	b.n	8003096 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	f002 fd61 	bl	8005b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 020f 	and.w	r2, r3, #15
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	460b      	mov	r3, r1
 80030de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	b2da      	uxtb	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	f002 ff51 	bl	8005fe8 <USB_EP0StartXfer>
 8003146:	e008      	b.n	800315a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	6979      	ldr	r1, [r7, #20]
 8003156:	f002 fcff 	bl	8005b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d901      	bls.n	8003182 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e050      	b.n	8003224 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0f      	bge.n	80031aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 020f 	and.w	r2, r3, #15
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	3338      	adds	r3, #56	; 0x38
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	705a      	strb	r2, [r3, #1]
 80031a8:	e00d      	b.n	80031c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_PCD_EP_SetStall+0x82>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e01e      	b.n	8003224 <HAL_PCD_EP_SetStall+0xc0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 f98f 	bl	8006518 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	b2d9      	uxtb	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003214:	461a      	mov	r2, r3
 8003216:	f003 fb7f 	bl	8006918 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d901      	bls.n	800324a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e042      	b.n	80032d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800324a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da0f      	bge.n	8003272 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3338      	adds	r3, #56	; 0x38
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	705a      	strb	r2, [r3, #1]
 8003270:	e00f      	b.n	8003292 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_PCD_EP_ClrStall+0x86>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e00e      	b.n	80032d0 <HAL_PCD_EP_ClrStall+0xa4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f997 	bl	80065f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da0c      	bge.n	8003306 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3338      	adds	r3, #56	; 0x38
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e00c      	b.n	8003320 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 ffb6 	bl	8006298 <USB_EPStopXfer>
 800332c:	4603      	mov	r3, r0
 800332e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003330:	7afb      	ldrb	r3, [r7, #11]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08a      	sub	sp, #40	; 0x28
 800333e:	af02      	add	r7, sp, #8
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	; 0x38
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d901      	bls.n	8003372 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e06c      	b.n	800344c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	429a      	cmp	r2, r3
 8003386:	d902      	bls.n	800338e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3303      	adds	r3, #3
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003396:	e02b      	b.n	80033f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d902      	bls.n	80033b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3303      	adds	r3, #3
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6919      	ldr	r1, [r3, #16]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4603      	mov	r3, r0
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f003 f80a 	bl	80063ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	429a      	cmp	r2, r3
 8003404:	d809      	bhi.n	800341a <PCD_WriteEmptyTxFifo+0xe0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800340e:	429a      	cmp	r2, r3
 8003410:	d203      	bcs.n	800341a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1be      	bne.n	8003398 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	429a      	cmp	r2, r3
 8003424:	d811      	bhi.n	800344a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2201      	movs	r2, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	43db      	mvns	r3, r3
 8003440:	6939      	ldr	r1, [r7, #16]
 8003442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003446:	4013      	ands	r3, r2
 8003448:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	333c      	adds	r3, #60	; 0x3c
 800346c:	3304      	adds	r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d17b      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4a61      	ldr	r2, [pc, #388]	; (800361c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f240 80b9 	bls.w	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80b3 	beq.w	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	461a      	mov	r2, r3
 80034b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034bc:	6093      	str	r3, [r2, #8]
 80034be:	e0a7      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	2320      	movs	r3, #32
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	e098      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8093 	bne.w	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d90f      	bls.n	8003512 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	e07e      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	4413      	add	r3, r2
 8003524:	3304      	adds	r3, #4
 8003526:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	440b      	add	r3, r1
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353e:	1ad2      	subs	r2, r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d114      	bne.n	8003574 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800355c:	461a      	mov	r2, r3
 800355e:	2101      	movs	r1, #1
 8003560:	f003 f9da 	bl	8006918 <USB_EP0_OutStart>
 8003564:	e006      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f005 fcc2 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
 8003580:	e046      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d124      	bne.n	80035d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	461a      	mov	r2, r3
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	6093      	str	r3, [r2, #8]
 80035a8:	e032      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	2320      	movs	r3, #32
 80035c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f005 fc99 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
 80035d2:	e01d      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d114      	bne.n	8003604 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035fc:	461a      	mov	r2, r3
 80035fe:	2100      	movs	r1, #0
 8003600:	f003 f98a 	bl	8006918 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f005 fc7a 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	4f54300a 	.word	0x4f54300a
 8003620:	4f54310a 	.word	0x4f54310a

08003624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	333c      	adds	r3, #60	; 0x3c
 800363c:	3304      	adds	r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d90e      	bls.n	8003678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f005 fc31 	bl	8008ee0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d90c      	bls.n	80036a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d108      	bne.n	80036a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003698:	461a      	mov	r2, r3
 800369a:	2101      	movs	r1, #1
 800369c:	f003 f93c 	bl	8006918 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	4f54300a 	.word	0x4f54300a

080036b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
 80036bc:	4613      	mov	r3, r2
 80036be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036ce:	883b      	ldrh	r3, [r7, #0]
 80036d0:	0419      	lsls	r1, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	430a      	orrs	r2, r1
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
 80036dc:	e028      	b.n	8003730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	4413      	add	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	e00d      	b.n	800370e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	3340      	adds	r3, #64	; 0x40
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4413      	add	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	3301      	adds	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	3b01      	subs	r3, #1
 8003714:	429a      	cmp	r2, r3
 8003716:	d3ec      	bcc.n	80036f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003718:	883b      	ldrh	r3, [r7, #0]
 800371a:	0418      	lsls	r0, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	3b01      	subs	r3, #1
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4302      	orrs	r2, r0
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e267      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d075      	beq.n	8003882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003796:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d00c      	beq.n	80037bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b85      	ldr	r3, [pc, #532]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d112      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ae:	4b82      	ldr	r3, [pc, #520]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ba:	d10b      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	4b7e      	ldr	r3, [pc, #504]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d05b      	beq.n	8003880 <HAL_RCC_OscConfig+0x108>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d157      	bne.n	8003880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e242      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d106      	bne.n	80037ec <HAL_RCC_OscConfig+0x74>
 80037de:	4b76      	ldr	r3, [pc, #472]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a75      	ldr	r2, [pc, #468]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0xb0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x98>
 80037f6:	4b70      	ldr	r3, [pc, #448]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6f      	ldr	r2, [pc, #444]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6c      	ldr	r2, [pc, #432]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0xb0>
 8003810:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b66      	ldr	r3, [pc, #408]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fd fbb4 	bl	8000f9c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd fbb0 	bl	8000f9c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e207      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0xc0>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd fba0 	bl	8000f9c <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003860:	f7fd fb9c 	bl	8000f9c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1f3      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0xe8>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388e:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d11c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a6:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x152>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e1c7      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4937      	ldr	r1, [pc, #220]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	e03a      	b.n	8003956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x244>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fd fb55 	bl	8000f9c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fd fb51 	bl	8000f9c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e1a8      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4925      	ldr	r1, [pc, #148]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_OscConfig+0x244>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fb34 	bl	8000f9c <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003938:	f7fd fb30 	bl	8000f9c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e187      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d036      	beq.n	80039d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_RCC_OscConfig+0x248>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fd fb14 	bl	8000f9c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003978:	f7fd fb10 	bl	8000f9c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e167      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_OscConfig+0x240>)
 800398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x200>
 8003996:	e01b      	b.n	80039d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_OscConfig+0x248>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fd fafd 	bl	8000f9c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	e00e      	b.n	80039c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fd faf9 	bl	8000f9c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d907      	bls.n	80039c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e150      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	42470000 	.word	0x42470000
 80039c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ea      	bne.n	80039a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8097 	beq.w	8003b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	4b7d      	ldr	r3, [pc, #500]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a7c      	ldr	r2, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b77      	ldr	r3, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b74      	ldr	r3, [pc, #464]	; (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a73      	ldr	r2, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fab9 	bl	8000f9c <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fab5 	bl	8000f9c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e10c      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a60:	e01c      	b.n	8003a9c <HAL_RCC_OscConfig+0x324>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x30c>
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a5b      	ldr	r2, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0x324>
 8003a84:	4b58      	ldr	r3, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	4b55      	ldr	r3, [pc, #340]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a54      	ldr	r2, [pc, #336]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	f023 0304 	bic.w	r3, r3, #4
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fa7a 	bl	8000f9c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fa76 	bl	8000f9c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0cb      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ee      	beq.n	8003aac <HAL_RCC_OscConfig+0x334>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad0:	f7fd fa64 	bl	8000f9c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fa60 	bl	8000f9c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e0b5      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ee      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a1 	beq.w	8003c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d05c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d141      	bne.n	8003bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fa34 	bl	8000f9c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fa30 	bl	8000f9c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e087      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	491b      	ldr	r1, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fd fa09 	bl	8000f9c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fd fa05 	bl	8000f9c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e05c      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x416>
 8003bac:	e054      	b.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd f9f2 	bl	8000f9c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd f9ee 	bl	8000f9c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e045      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x444>
 8003bda:	e03d      	b.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e038      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x4ec>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d028      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d121      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cc      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d90c      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d044      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e067      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4934      	ldr	r1, [pc, #208]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fd f920 	bl	8000f9c <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fd f91c 	bl	8000f9c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20c      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dee:	f000 f821 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003df2:	4602      	mov	r2, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	490a      	ldr	r1, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	5ccb      	ldrb	r3, [r1, r3]
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f880 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023c00 	.word	0x40023c00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	08009f28 	.word	0x08009f28
 8003e2c:	20000010 	.word	0x20000010
 8003e30:	20000014 	.word	0x20000014

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e38:	b094      	sub	sp, #80	; 0x50
 8003e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e40:	2300      	movs	r3, #0
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e44:	2300      	movs	r3, #0
 8003e46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e4c:	4b79      	ldr	r3, [pc, #484]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d00d      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x40>
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	f200 80e1 	bhi.w	8004020 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x34>
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e66:	e0db      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4b73      	ldr	r3, [pc, #460]	; (8004038 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e6c:	e0db      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e6e:	4b73      	ldr	r3, [pc, #460]	; (800403c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e72:	e0d8      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e7e:	4b6d      	ldr	r3, [pc, #436]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d063      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	099b      	lsrs	r3, r3, #6
 8003e90:	2200      	movs	r2, #0
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	0159      	lsls	r1, r3, #5
 8003eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb8:	0150      	lsls	r0, r2, #5
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	1a51      	subs	r1, r2, r1
 8003ec2:	6139      	str	r1, [r7, #16]
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ed8:	4659      	mov	r1, fp
 8003eda:	018b      	lsls	r3, r1, #6
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	018a      	lsls	r2, r1, #6
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	ebb2 0801 	subs.w	r8, r2, r1
 8003eec:	4659      	mov	r1, fp
 8003eee:	eb63 0901 	sbc.w	r9, r3, r1
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f06:	4690      	mov	r8, r2
 8003f08:	4699      	mov	r9, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	eb18 0303 	adds.w	r3, r8, r3
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	462b      	mov	r3, r5
 8003f14:	eb49 0303 	adc.w	r3, r9, r3
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f26:	4629      	mov	r1, r5
 8003f28:	024b      	lsls	r3, r1, #9
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f30:	4621      	mov	r1, r4
 8003f32:	024a      	lsls	r2, r1, #9
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f44:	f7fc f99c 	bl	8000280 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f50:	e058      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f62:	623b      	str	r3, [r7, #32]
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	0159      	lsls	r1, r3, #5
 8003f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7e:	0150      	lsls	r0, r2, #5
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4641      	mov	r1, r8
 8003f86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fa4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fa8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	00eb      	lsls	r3, r5, #3
 8003fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fba:	00e2      	lsls	r2, r4, #3
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	4643      	mov	r3, r8
 8003fc2:	18e3      	adds	r3, r4, r3
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	eb45 0303 	adc.w	r3, r5, r3
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fda:	4629      	mov	r1, r5
 8003fdc:	028b      	lsls	r3, r1, #10
 8003fde:	4621      	mov	r1, r4
 8003fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	028a      	lsls	r2, r1, #10
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	61fa      	str	r2, [r7, #28]
 8003ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff8:	f7fc f942 	bl	8000280 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	3301      	adds	r3, #1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetSysClockFreq+0x204>)
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004028:	4618      	mov	r0, r3
 800402a:	3750      	adds	r7, #80	; 0x50
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400
 800403c:	007a1200 	.word	0x007a1200

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_GetHCLKFreq+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000010 	.word	0x20000010

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800405c:	f7ff fff0 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0a9b      	lsrs	r3, r3, #10
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4903      	ldr	r1, [pc, #12]	; (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	08009f38 	.word	0x08009f38

08004080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004084:	f7ff ffdc 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0b5b      	lsrs	r3, r3, #13
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08009f38 	.word	0x08009f38

080040a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e03f      	b.n	800413a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc fdd8 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	; 0x24
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fde3 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b08a      	sub	sp, #40	; 0x28
 8004146:	af02      	add	r7, sp, #8
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	f040 808c 	bne.w	800427c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_UART_Receive+0x2e>
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e084      	b.n	800427e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_UART_Receive+0x40>
 800417e:	2302      	movs	r3, #2
 8004180:	e07d      	b.n	800427e <HAL_UART_Receive+0x13c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2222      	movs	r2, #34	; 0x22
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419e:	f7fc fefd 	bl	8000f9c <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d108      	bne.n	80041cc <HAL_UART_Receive+0x8a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e003      	b.n	80041d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041dc:	e043      	b.n	8004266 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2120      	movs	r1, #32
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb1f 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e042      	b.n	800427e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10c      	bne.n	8004218 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	b29a      	uxth	r2, r3
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3302      	adds	r3, #2
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e01f      	b.n	8004258 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d007      	beq.n	8004232 <HAL_UART_Receive+0xf0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_UART_Receive+0xfe>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e008      	b.n	8004252 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424c:	b2da      	uxtb	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1b6      	bne.n	80041de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	d11d      	bne.n	80042dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Receive_IT+0x26>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e016      	b.n	80042de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_UART_Receive_IT+0x38>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e00f      	b.n	80042de <HAL_UART_Receive_IT+0x58>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fb18 	bl	8004908 <UART_Start_Receive_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	e000      	b.n	80042de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0ba      	sub	sp, #232	; 0xe8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_UART_IRQHandler+0x66>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fbfb 	bl	8004b42 <UART_Receive_IT>
      return;
 800434c:	e256      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800434e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80de 	beq.w	8004514 <HAL_UART_IRQHandler+0x22c>
 8004358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80d1 	beq.w	8004514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xae>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xd2>
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0202 	orr.w	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_UART_IRQHandler+0xf6>
 80043c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_UART_IRQHandler+0x126>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f043 0208 	orr.w	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 81ed 	beq.w	80047f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_UART_IRQHandler+0x14e>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb86 	bl	8004b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_UART_IRQHandler+0x17a>
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04f      	beq.n	8004502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa8e 	bl	8004984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d141      	bne.n	80044fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1d9      	bne.n	8004476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d013      	beq.n	80044f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4a7d      	ldr	r2, [pc, #500]	; (80046c4 <HAL_UART_IRQHandler+0x3dc>)
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fce1 	bl	8001e9e <HAL_DMA_Abort_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00e      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f990 	bl	8004818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00a      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f98c 	bl	8004818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e006      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f988 	bl	8004818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800450e:	e170      	b.n	80047f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	bf00      	nop
    return;
 8004512:	e16e      	b.n	80047f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 814a 	bne.w	80047b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8143 	beq.w	80047b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 813c 	beq.w	80047b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	f040 80b4 	bne.w	80046c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800456c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8140 	beq.w	80047f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457e:	429a      	cmp	r2, r3
 8004580:	f080 8139 	bcs.w	80047f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800458a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004596:	f000 8088 	beq.w	80046aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1d9      	bne.n	800459a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800460a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e1      	bne.n	80045e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800464c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e3      	bne.n	8004622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800468c:	65ba      	str	r2, [r7, #88]	; 0x58
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800469a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e3      	bne.n	8004668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd fb8a 	bl	8001dbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fb ffbc 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c0:	e099      	b.n	80047f6 <HAL_UART_IRQHandler+0x50e>
 80046c2:	bf00      	nop
 80046c4:	08004a4b 	.word	0x08004a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 808b 	beq.w	80047fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8086 	beq.w	80047fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004712:	647a      	str	r2, [r7, #68]	; 0x44
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e3      	bne.n	80046ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	623b      	str	r3, [r7, #32]
   return(result);
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800474a:	633a      	str	r2, [r7, #48]	; 0x30
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e3      	bne.n	8004726 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	60fb      	str	r3, [r7, #12]
   return(result);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0310 	bic.w	r3, r3, #16
 8004782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004790:	61fa      	str	r2, [r7, #28]
 8004792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	617b      	str	r3, [r7, #20]
   return(result);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e3      	bne.n	800476c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fb ff44 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b0:	e023      	b.n	80047fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_UART_IRQHandler+0x4ea>
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f951 	bl	8004a72 <UART_Transmit_IT>
    return;
 80047d0:	e014      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <HAL_UART_IRQHandler+0x514>
 80047de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f991 	bl	8004b12 <UART_EndTransmit_IT>
    return;
 80047f0:	e004      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
    return;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
      return;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
      return;
 80047fa:	bf00      	nop
  }
}
 80047fc:	37e8      	adds	r7, #232	; 0xe8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop

08004804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b090      	sub	sp, #64	; 0x40
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483c:	e050      	b.n	80048e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d04c      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <UART_WaitOnFlagUntilTimeout+0x30>
 800484c:	f7fc fba6 	bl	8000f9c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	429a      	cmp	r2, r3
 800485a:	d241      	bcs.n	80048e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800487c:	637a      	str	r2, [r7, #52]	; 0x34
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	613b      	str	r3, [r7, #16]
   return(result);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b0:	623a      	str	r2, [r7, #32]
 80048b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	69f9      	ldr	r1, [r7, #28]
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e00f      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d09f      	beq.n	800483e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3740      	adds	r7, #64	; 0x40
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2222      	movs	r2, #34	; 0x22
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004954:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0220 	orr.w	r2, r2, #32
 8004974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b095      	sub	sp, #84	; 0x54
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ac:	643a      	str	r2, [r7, #64]	; 0x40
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d119      	bne.n	8004a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a1c:	61ba      	str	r2, [r7, #24]
 8004a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a3e:	bf00      	nop
 8004a40:	3754      	adds	r7, #84	; 0x54
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fed7 	bl	8004818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	d13e      	bne.n	8004b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d114      	bne.n	8004aba <UART_Transmit_IT+0x48>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]
 8004ab8:	e008      	b.n	8004acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6211      	str	r1, [r2, #32]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fe66 	bl	8004804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08c      	sub	sp, #48	; 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b22      	cmp	r3, #34	; 0x22
 8004b54:	f040 80ab 	bne.w	8004cae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d117      	bne.n	8004b92 <UART_Receive_IT+0x50>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b90:	e026      	b.n	8004be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d007      	beq.n	8004bb6 <UART_Receive_IT+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <UART_Receive_IT+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e008      	b.n	8004bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4619      	mov	r1, r3
 8004bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d15a      	bne.n	8004caa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0220 	bic.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d135      	bne.n	8004ca0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	623a      	str	r2, [r7, #32]
 8004c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d10a      	bne.n	8004c92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fb fccd 	bl	8000638 <HAL_UARTEx_RxEventCallback>
 8004c9e:	e002      	b.n	8004ca6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fb fd0b 	bl	80006bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e002      	b.n	8004cb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e000      	b.n	8004cb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
  }
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3730      	adds	r7, #48	; 0x30
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0c0      	sub	sp, #256	; 0x100
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	68d9      	ldr	r1, [r3, #12]
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	ea40 0301 	orr.w	r3, r0, r1
 8004ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	ea40 0301 	orr.w	r3, r0, r1
 8004d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8f      	ldr	r3, [pc, #572]	; (8004f84 <UART_SetConfig+0x2cc>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <UART_SetConfig+0xa0>
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8d      	ldr	r3, [pc, #564]	; (8004f88 <UART_SetConfig+0x2d0>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7ff f992 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d60:	e003      	b.n	8004d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d62:	f7ff f979 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8004d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	f040 810c 	bne.w	8004f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d92:	415b      	adcs	r3, r3
 8004d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	eb12 0801 	adds.w	r8, r2, r1
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb43 0901 	adc.w	r9, r3, r1
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dba:	4690      	mov	r8, r2
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	eb18 0303 	adds.w	r3, r8, r3
 8004dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb49 0303 	adc.w	r3, r9, r3
 8004dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004de6:	460b      	mov	r3, r1
 8004de8:	18db      	adds	r3, r3, r3
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
 8004dec:	4613      	mov	r3, r2
 8004dee:	eb42 0303 	adc.w	r3, r2, r3
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
 8004df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dfc:	f7fb fa40 	bl	8000280 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011c      	lsls	r4, r3, #4
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e30:	4641      	mov	r1, r8
 8004e32:	eb12 0a01 	adds.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb43 0b01 	adc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e50:	4692      	mov	sl, r2
 8004e52:	469b      	mov	fp, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb4b 0303 	adc.w	r3, fp, r3
 8004e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e92:	f7fb f9f5 	bl	8000280 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2264      	movs	r2, #100	; 0x64
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004edc:	415b      	adcs	r3, r3
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f38:	460b      	mov	r3, r1
 8004f3a:	18db      	adds	r3, r3, r3
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3e:	4613      	mov	r3, r2
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f4e:	f7fb f997 	bl	8000280 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	; 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	3332      	adds	r3, #50	; 0x32
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4422      	add	r2, r4
 8004f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f80:	e106      	b.n	8005190 <UART_SetConfig+0x4d8>
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa2:	4642      	mov	r2, r8
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	1891      	adds	r1, r2, r2
 8004fa8:	6239      	str	r1, [r7, #32]
 8004faa:	415b      	adcs	r3, r3
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	1854      	adds	r4, r2, r1
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	eb43 0501 	adc.w	r5, r3, r1
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	00eb      	lsls	r3, r5, #3
 8004fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fca:	00e2      	lsls	r2, r4, #3
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	4643      	mov	r3, r8
 8004fd2:	18e3      	adds	r3, r4, r3
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd8:	464b      	mov	r3, r9
 8004fda:	eb45 0303 	adc.w	r3, r5, r3
 8004fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ffe:	4629      	mov	r1, r5
 8005000:	008b      	lsls	r3, r1, #2
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005008:	4621      	mov	r1, r4
 800500a:	008a      	lsls	r2, r1, #2
 800500c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005010:	f7fb f936 	bl	8000280 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b60      	ldr	r3, [pc, #384]	; (800519c <UART_SetConfig+0x4e4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800502c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	61b9      	str	r1, [r7, #24]
 800503c:	415b      	adcs	r3, r3
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6139      	str	r1, [r7, #16]
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	67bb      	str	r3, [r7, #120]	; 0x78
 800508e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050ae:	f7fb f8e7 	bl	8000280 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	4b38      	ldr	r3, [pc, #224]	; (800519c <UART_SetConfig+0x4e4>)
 80050ba:	fba3 2301 	umull	r2, r3, r3, r1
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	; 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1acb      	subs	r3, r1, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <UART_SetConfig+0x4e4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d8:	441c      	add	r4, r3
 80050da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050de:	2200      	movs	r2, #0
 80050e0:	673b      	str	r3, [r7, #112]	; 0x70
 80050e2:	677a      	str	r2, [r7, #116]	; 0x74
 80050e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	415b      	adcs	r3, r3
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6039      	str	r1, [r7, #0]
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	66bb      	str	r3, [r7, #104]	; 0x68
 800512a:	464b      	mov	r3, r9
 800512c:	460a      	mov	r2, r1
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
 800513e:	667a      	str	r2, [r7, #100]	; 0x64
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800514c:	4649      	mov	r1, r9
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	4641      	mov	r1, r8
 8005152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005156:	4641      	mov	r1, r8
 8005158:	008a      	lsls	r2, r1, #2
 800515a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800515e:	f7fb f88f 	bl	8000280 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x4e4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	; 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	3332      	adds	r3, #50	; 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x4e4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005196:	46bd      	mov	sp, r7
 8005198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519c:	51eb851f 	.word	0x51eb851f

080051a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a0:	b084      	sub	sp, #16
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	f107 001c 	add.w	r0, r7, #28
 80051ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d122      	bne.n	80051fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d105      	bne.n	80051f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fbee 	bl	80069d4 <USB_CoreReset>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
 80051fc:	e01a      	b.n	8005234 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fbe2 	bl	80069d4 <USB_CoreReset>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
 8005226:	e005      	b.n	8005234 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10b      	bne.n	8005252 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f043 0206 	orr.w	r2, r3, #6
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800525e:	b004      	add	sp, #16
 8005260:	4770      	bx	lr
	...

08005264 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d165      	bne.n	8005344 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a41      	ldr	r2, [pc, #260]	; (8005380 <USB_SetTurnaroundTime+0x11c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d906      	bls.n	800528e <USB_SetTurnaroundTime+0x2a>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a40      	ldr	r2, [pc, #256]	; (8005384 <USB_SetTurnaroundTime+0x120>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d202      	bcs.n	800528e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005288:	230f      	movs	r3, #15
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e062      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4a3c      	ldr	r2, [pc, #240]	; (8005384 <USB_SetTurnaroundTime+0x120>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d306      	bcc.n	80052a4 <USB_SetTurnaroundTime+0x40>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a3b      	ldr	r2, [pc, #236]	; (8005388 <USB_SetTurnaroundTime+0x124>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d202      	bcs.n	80052a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800529e:	230e      	movs	r3, #14
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e057      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a38      	ldr	r2, [pc, #224]	; (8005388 <USB_SetTurnaroundTime+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d306      	bcc.n	80052ba <USB_SetTurnaroundTime+0x56>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a37      	ldr	r2, [pc, #220]	; (800538c <USB_SetTurnaroundTime+0x128>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d202      	bcs.n	80052ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052b4:	230d      	movs	r3, #13
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e04c      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4a33      	ldr	r2, [pc, #204]	; (800538c <USB_SetTurnaroundTime+0x128>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d306      	bcc.n	80052d0 <USB_SetTurnaroundTime+0x6c>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a32      	ldr	r2, [pc, #200]	; (8005390 <USB_SetTurnaroundTime+0x12c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d802      	bhi.n	80052d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ca:	230c      	movs	r3, #12
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e041      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <USB_SetTurnaroundTime+0x12c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d906      	bls.n	80052e6 <USB_SetTurnaroundTime+0x82>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a2e      	ldr	r2, [pc, #184]	; (8005394 <USB_SetTurnaroundTime+0x130>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d802      	bhi.n	80052e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052e0:	230b      	movs	r3, #11
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e036      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <USB_SetTurnaroundTime+0x130>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d906      	bls.n	80052fc <USB_SetTurnaroundTime+0x98>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a29      	ldr	r2, [pc, #164]	; (8005398 <USB_SetTurnaroundTime+0x134>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d802      	bhi.n	80052fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052f6:	230a      	movs	r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e02b      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a26      	ldr	r2, [pc, #152]	; (8005398 <USB_SetTurnaroundTime+0x134>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d906      	bls.n	8005312 <USB_SetTurnaroundTime+0xae>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4a25      	ldr	r2, [pc, #148]	; (800539c <USB_SetTurnaroundTime+0x138>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d202      	bcs.n	8005312 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800530c:	2309      	movs	r3, #9
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e020      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <USB_SetTurnaroundTime+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d306      	bcc.n	8005328 <USB_SetTurnaroundTime+0xc4>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <USB_SetTurnaroundTime+0x13c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d802      	bhi.n	8005328 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005322:	2308      	movs	r3, #8
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e015      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <USB_SetTurnaroundTime+0x13c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d906      	bls.n	800533e <USB_SetTurnaroundTime+0xda>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <USB_SetTurnaroundTime+0x140>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d202      	bcs.n	800533e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005338:	2307      	movs	r3, #7
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e00a      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800533e:	2306      	movs	r3, #6
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e007      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800534a:	2309      	movs	r3, #9
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	e001      	b.n	8005354 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005350:	2309      	movs	r3, #9
 8005352:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	00d8acbf 	.word	0x00d8acbf
 8005384:	00e4e1c0 	.word	0x00e4e1c0
 8005388:	00f42400 	.word	0x00f42400
 800538c:	01067380 	.word	0x01067380
 8005390:	011a499f 	.word	0x011a499f
 8005394:	01312cff 	.word	0x01312cff
 8005398:	014ca43f 	.word	0x014ca43f
 800539c:	016e3600 	.word	0x016e3600
 80053a0:	01a6ab1f 	.word	0x01a6ab1f
 80053a4:	01e84800 	.word	0x01e84800

080053a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f043 0201 	orr.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d115      	bne.n	800543a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541a:	2001      	movs	r0, #1
 800541c:	f7fb fdca 	bl	8000fb4 <HAL_Delay>
      ms++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fa45 	bl	80068b6 <USB_GetMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d01e      	beq.n	8005470 <USB_SetCurrentMode+0x84>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b31      	cmp	r3, #49	; 0x31
 8005436:	d9f0      	bls.n	800541a <USB_SetCurrentMode+0x2e>
 8005438:	e01a      	b.n	8005470 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d115      	bne.n	800546c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800544c:	2001      	movs	r0, #1
 800544e:	f7fb fdb1 	bl	8000fb4 <HAL_Delay>
      ms++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fa2c 	bl	80068b6 <USB_GetMode>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <USB_SetCurrentMode+0x84>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b31      	cmp	r3, #49	; 0x31
 8005468:	d9f0      	bls.n	800544c <USB_SetCurrentMode+0x60>
 800546a:	e001      	b.n	8005470 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e005      	b.n	800547c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b32      	cmp	r3, #50	; 0x32
 8005474:	d101      	bne.n	800547a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005484:	b084      	sub	sp, #16
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	e009      	b.n	80054b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3340      	adds	r3, #64	; 0x40
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	2200      	movs	r2, #0
 80054b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b0e      	cmp	r3, #14
 80054bc:	d9f2      	bls.n	80054a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11c      	bne.n	80054fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d2:	f043 0302 	orr.w	r3, r3, #2
 80054d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
 80054fc:	e00b      	b.n	8005516 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800551c:	461a      	mov	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	4619      	mov	r1, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	461a      	mov	r2, r3
 8005532:	680b      	ldr	r3, [r1, #0]
 8005534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10c      	bne.n	8005556 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f965 	bl	8005814 <USB_SetDevSpeed>
 800554a:	e008      	b.n	800555e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800554c:	2101      	movs	r1, #1
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f960 	bl	8005814 <USB_SetDevSpeed>
 8005554:	e003      	b.n	800555e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005556:	2103      	movs	r1, #3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f95b 	bl	8005814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800555e:	2110      	movs	r1, #16
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8f3 	bl	800574c <USB_FlushTxFifo>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f91f 	bl	80057b4 <USB_FlushRxFifo>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	461a      	mov	r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e043      	b.n	8005632 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c0:	d118      	bne.n	80055f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	461a      	mov	r2, r3
 80055d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	e013      	b.n	8005606 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	461a      	mov	r2, r3
 80055ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e008      	b.n	8005606 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800562a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3301      	adds	r3, #1
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d3b7      	bcc.n	80055aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e043      	b.n	80056c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005656:	d118      	bne.n	800568a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	461a      	mov	r2, r3
 800566c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e013      	b.n	800569c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	461a      	mov	r2, r3
 8005682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	e008      	b.n	800569c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3301      	adds	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d3b7      	bcc.n	8005640 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f043 0210 	orr.w	r2, r3, #16
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <USB_DevInit+0x2c4>)
 800570a:	4313      	orrs	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f043 0208 	orr.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005744:	b004      	add	sp, #16
 8005746:	4770      	bx	lr
 8005748:	803c3800 	.word	0x803c3800

0800574c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_FlushTxFifo+0x64>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e01b      	b.n	80057a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	daf2      	bge.n	800575a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	019b      	lsls	r3, r3, #6
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <USB_FlushTxFifo+0x64>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e006      	b.n	80057a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d0f0      	beq.n	8005784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a11      	ldr	r2, [pc, #68]	; (8005810 <USB_FlushRxFifo+0x5c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e018      	b.n	8005804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	daf2      	bge.n	80057c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2210      	movs	r2, #16
 80057e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <USB_FlushRxFifo+0x5c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d0f0      	beq.n	80057e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	00030d40 	.word	0x00030d40

08005814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
 800586a:	e00a      	b.n	8005882 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d002      	beq.n	8005878 <USB_GetDevSpeed+0x32>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d102      	bne.n	800587e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005878:	2302      	movs	r3, #2
 800587a:	75fb      	strb	r3, [r7, #23]
 800587c:	e001      	b.n	8005882 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800587e:	230f      	movs	r3, #15
 8005880:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d13a      	bne.n	8005922 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d155      	bne.n	8005990 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	791b      	ldrb	r3, [r3, #4]
 80058fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005900:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	059b      	lsls	r3, r3, #22
 8005906:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005908:	4313      	orrs	r3, r2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e036      	b.n	8005990 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	2101      	movs	r1, #1
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4313      	orrs	r3, r2
 8005942:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11a      	bne.n	8005990 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005976:	430b      	orrs	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d161      	bne.n	8005a80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d2:	d11f      	bne.n	8005a14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4013      	ands	r3, r2
 8005a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a58:	4013      	ands	r3, r2
 8005a5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	4619      	mov	r1, r3
 8005a78:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <USB_DeactivateEndpoint+0x1b0>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
 8005a7e:	e060      	b.n	8005b42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a96:	d11f      	bne.n	8005ad8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ab6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2101      	movs	r1, #1
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	43db      	mvns	r3, r3
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af8:	4013      	ands	r3, r2
 8005afa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	43db      	mvns	r3, r3
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <USB_DeactivateEndpoint+0x1b4>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	ec337800 	.word	0xec337800
 8005b54:	eff37800 	.word	0xeff37800

08005b58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	f040 815c 	bne.w	8005e32 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d132      	bne.n	8005be8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ba0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	0cdb      	lsrs	r3, r3, #19
 8005be2:	04db      	lsls	r3, r3, #19
 8005be4:	6113      	str	r3, [r2, #16]
 8005be6:	e074      	b.n	8005cd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	0cdb      	lsrs	r3, r3, #19
 8005c04:	04db      	lsls	r3, r3, #19
 8005c06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6999      	ldr	r1, [r3, #24]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	440b      	add	r3, r1
 8005c44:	1e59      	subs	r1, r3, #1
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c50:	4b9d      	ldr	r3, [pc, #628]	; (8005ec8 <USB_EPStartXfer+0x370>)
 8005c52:	400b      	ands	r3, r1
 8005c54:	69b9      	ldr	r1, [r7, #24]
 8005c56:	0148      	lsls	r0, r1, #5
 8005c58:	69f9      	ldr	r1, [r7, #28]
 8005c5a:	4401      	add	r1, r0
 8005c5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7a:	69b9      	ldr	r1, [r7, #24]
 8005c7c:	0148      	lsls	r0, r1, #5
 8005c7e:	69f9      	ldr	r1, [r7, #28]
 8005c80:	4401      	add	r1, r0
 8005c82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	791b      	ldrb	r3, [r3, #4]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d11f      	bne.n	8005cd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d14b      	bne.n	8005d70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d128      	bne.n	8005d4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d110      	bne.n	8005d2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e00f      	b.n	8005d4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e133      	b.n	8005fd8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	791b      	ldrb	r3, [r3, #4]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d015      	beq.n	8005dc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 811b 	beq.w	8005fd8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	2101      	movs	r1, #1
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	69f9      	ldr	r1, [r7, #28]
 8005dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	634b      	str	r3, [r1, #52]	; 0x34
 8005dc2:	e109      	b.n	8005fd8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d110      	bne.n	8005df6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	e00f      	b.n	8005e16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6919      	ldr	r1, [r3, #16]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	781a      	ldrb	r2, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	b298      	uxth	r0, r3
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4603      	mov	r3, r0
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fade 	bl	80063ec <USB_WritePacket>
 8005e30:	e0d2      	b.n	8005fd8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4c:	0cdb      	lsrs	r3, r3, #19
 8005e4e:	04db      	lsls	r3, r3, #19
 8005e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d126      	bne.n	8005ecc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e94:	69b9      	ldr	r1, [r7, #24]
 8005e96:	0148      	lsls	r0, r1, #5
 8005e98:	69f9      	ldr	r1, [r7, #28]
 8005e9a:	4401      	add	r1, r0
 8005e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec2:	6113      	str	r3, [r2, #16]
 8005ec4:	e03a      	b.n	8005f3c <USB_EPStartXfer+0x3e4>
 8005ec6:	bf00      	nop
 8005ec8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	8afa      	ldrh	r2, [r7, #22]
 8005ee8:	fb03 f202 	mul.w	r2, r3, r2
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	8afb      	ldrh	r3, [r7, #22]
 8005f00:	04d9      	lsls	r1, r3, #19
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <USB_EPStartXfer+0x48c>)
 8005f04:	400b      	ands	r3, r1
 8005f06:	69b9      	ldr	r1, [r7, #24]
 8005f08:	0148      	lsls	r0, r1, #5
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	4401      	add	r1, r0
 8005f0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f12:	4313      	orrs	r3, r2
 8005f14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	0148      	lsls	r0, r1, #5
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	4401      	add	r1, r0
 8005f34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d10d      	bne.n	8005f5e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6919      	ldr	r1, [r3, #16]
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	791b      	ldrb	r3, [r3, #4]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d128      	bne.n	8005fb8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d110      	bne.n	8005f98 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e00f      	b.n	8005fb8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	1ff80000 	.word	0x1ff80000

08005fe8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 80ce 	bne.w	80061a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d132      	bne.n	8006078 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006070:	0cdb      	lsrs	r3, r3, #19
 8006072:	04db      	lsls	r3, r3, #19
 8006074:	6113      	str	r3, [r2, #16]
 8006076:	e04e      	b.n	8006116 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	0cdb      	lsrs	r3, r3, #19
 8006094:	04db      	lsls	r3, r3, #19
 8006096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d903      	bls.n	80060d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006106:	6939      	ldr	r1, [r7, #16]
 8006108:	0148      	lsls	r0, r1, #5
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	4401      	add	r1, r0
 800610e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006112:	4313      	orrs	r3, r2
 8006114:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d11e      	bne.n	800615a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d009      	beq.n	8006138 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006152:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e097      	b.n	800628a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006178:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8083 	beq.w	800628a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a0:	4313      	orrs	r3, r2
 80061a2:	634b      	str	r3, [r1, #52]	; 0x34
 80061a4:	e071      	b.n	800628a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	0cdb      	lsrs	r3, r3, #19
 80061c2:	04db      	lsls	r3, r3, #19
 80061c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	6939      	ldr	r1, [r7, #16]
 800623a:	0148      	lsls	r0, r1, #5
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	4401      	add	r1, r0
 8006240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10d      	bne.n	800626a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6919      	ldr	r1, [r3, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	460a      	mov	r2, r1
 8006268:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d14a      	bne.n	800634c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ce:	f040 8086 	bne.w	80063de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f242 7210 	movw	r2, #10000	; 0x2710
 8006326:	4293      	cmp	r3, r2
 8006328:	d902      	bls.n	8006330 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e056      	b.n	80063de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006348:	d0e7      	beq.n	800631a <USB_EPStopXfer+0x82>
 800634a:	e048      	b.n	80063de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006364:	d13b      	bne.n	80063de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006388:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d902      	bls.n	80063c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
          break;
 80063c2:	e00c      	b.n	80063de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063dc:	d0e7      	beq.n	80063ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b089      	sub	sp, #36	; 0x24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	460b      	mov	r3, r1
 80063fc:	71fb      	strb	r3, [r7, #7]
 80063fe:	4613      	mov	r3, r2
 8006400:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800640a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d123      	bne.n	800645a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006412:	88bb      	ldrh	r3, [r7, #4]
 8006414:	3303      	adds	r3, #3
 8006416:	089b      	lsrs	r3, r3, #2
 8006418:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800641a:	2300      	movs	r3, #0
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e018      	b.n	8006452 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	031a      	lsls	r2, r3, #12
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642c:	461a      	mov	r2, r3
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3301      	adds	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3301      	adds	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	3301      	adds	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d3e2      	bcc.n	8006420 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3724      	adds	r7, #36	; 0x24
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006468:	b480      	push	{r7}
 800646a:	b08b      	sub	sp, #44	; 0x2c
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	b29b      	uxth	r3, r3
 8006484:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	e014      	b.n	80064be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	601a      	str	r2, [r3, #0]
    pDest++;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	3301      	adds	r3, #1
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	3301      	adds	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	3301      	adds	r3, #1
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	3301      	adds	r3, #1
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	3301      	adds	r3, #1
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d3e6      	bcc.n	8006494 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064c6:	8bfb      	ldrh	r3, [r7, #30]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01e      	beq.n	800650a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d6:	461a      	mov	r2, r3
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	701a      	strb	r2, [r3, #0]
      i++;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	3301      	adds	r3, #1
 80064f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	3b01      	subs	r3, #1
 8006502:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006504:	8bfb      	ldrh	r3, [r7, #30]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1ea      	bne.n	80064e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800650c:	4618      	mov	r0, r3
 800650e:	372c      	adds	r7, #44	; 0x2c
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d12c      	bne.n	800658e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db12      	blt.n	800656c <USB_EPSetStall+0x54>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00f      	beq.n	800656c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800656a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e02b      	b.n	80065e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	db12      	blt.n	80065c6 <USB_EPSetStall+0xae>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00f      	beq.n	80065c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d128      	bne.n	8006662 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800662e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	791b      	ldrb	r3, [r3, #4]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d003      	beq.n	8006640 <USB_EPClearStall+0x4c>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d138      	bne.n	80066b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e027      	b.n	80066b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006680:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	791b      	ldrb	r3, [r3, #4]
 8006686:	2b03      	cmp	r3, #3
 8006688:	d003      	beq.n	8006692 <USB_EPClearStall+0x9e>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d10f      	bne.n	80066b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066f4:	68f9      	ldr	r1, [r7, #12]
 80066f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673a:	f023 0302 	bic.w	r3, r3, #2
 800673e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006768:	f023 0303 	bic.w	r3, r3, #3
 800676c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677c:	f043 0302 	orr.w	r3, r3, #2
 8006780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4013      	ands	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	4013      	ands	r3, r2
 80067d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	0c1b      	lsrs	r3, r3, #16
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b085      	sub	sp, #20
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	b29b      	uxth	r3, r3
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800684c:	68bb      	ldr	r3, [r7, #8]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	fa22 f303 	lsr.w	r3, r2, r3
 800688a:	01db      	lsls	r3, r3, #7
 800688c:	b2db      	uxtb	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068a8:	68bb      	ldr	r3, [r7, #8]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0301 	and.w	r3, r3, #1
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068f0:	f023 0307 	bic.w	r3, r3, #7
 80068f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	460b      	mov	r3, r1
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	333c      	adds	r3, #60	; 0x3c
 800692e:	3304      	adds	r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4a26      	ldr	r2, [pc, #152]	; (80069d0 <USB_EP0_OutStart+0xb8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d90a      	bls.n	8006952 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800694c:	d101      	bne.n	8006952 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	e037      	b.n	80069c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006980:	f043 0318 	orr.w	r3, r3, #24
 8006984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006998:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10f      	bne.n	80069c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	4f54300a 	.word	0x4f54300a

080069d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <USB_CoreReset+0x64>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e01b      	b.n	8006a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	daf2      	bge.n	80069e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f043 0201 	orr.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <USB_CoreReset+0x64>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d901      	bls.n	8006a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d0f0      	beq.n	8006a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	00030d40 	.word	0x00030d40

08006a3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a4c:	f002 fcc4 	bl	80093d8 <USBD_static_malloc>
 8006a50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32b0      	adds	r2, #176	; 0xb0
 8006a62:	2100      	movs	r1, #0
 8006a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0d4      	b.n	8006c16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a70:	2100      	movs	r1, #0
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f002 fd14 	bl	80094a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32b0      	adds	r2, #176	; 0xb0
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	32b0      	adds	r2, #176	; 0xb0
 8006a92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7c1b      	ldrb	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d138      	bne.n	8006b16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <USBD_CDC_Init+0x1e4>)
 8006aa6:	7819      	ldrb	r1, [r3, #0]
 8006aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aac:	2202      	movs	r2, #2
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f002 fb6f 	bl	8009192 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ab4:	4b5a      	ldr	r3, [pc, #360]	; (8006c20 <USBD_CDC_Init+0x1e4>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3324      	adds	r3, #36	; 0x24
 8006aca:	2201      	movs	r2, #1
 8006acc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ace:	4b55      	ldr	r3, [pc, #340]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006ad0:	7819      	ldrb	r1, [r3, #0]
 8006ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 fb5a 	bl	8009192 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ade:	4b51      	ldr	r3, [pc, #324]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006af6:	2201      	movs	r2, #1
 8006af8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006afa:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <USBD_CDC_Init+0x1ec>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 020f 	and.w	r2, r3, #15
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3326      	adds	r3, #38	; 0x26
 8006b10:	2210      	movs	r2, #16
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	e035      	b.n	8006b82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <USBD_CDC_Init+0x1e4>)
 8006b18:	7819      	ldrb	r1, [r3, #0]
 8006b1a:	2340      	movs	r3, #64	; 0x40
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f002 fb37 	bl	8009192 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b24:	4b3e      	ldr	r3, [pc, #248]	; (8006c20 <USBD_CDC_Init+0x1e4>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3324      	adds	r3, #36	; 0x24
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b3e:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006b40:	7819      	ldrb	r1, [r3, #0]
 8006b42:	2340      	movs	r3, #64	; 0x40
 8006b44:	2202      	movs	r2, #2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fb23 	bl	8009192 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b4c:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b64:	2201      	movs	r2, #1
 8006b66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b68:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <USBD_CDC_Init+0x1ec>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	3326      	adds	r3, #38	; 0x26
 8006b7e:	2210      	movs	r2, #16
 8006b80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b82:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <USBD_CDC_Init+0x1ec>)
 8006b84:	7819      	ldrb	r1, [r3, #0]
 8006b86:	2308      	movs	r3, #8
 8006b88:	2203      	movs	r2, #3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f002 fb01 	bl	8009192 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b90:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <USBD_CDC_Init+0x1ec>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3324      	adds	r3, #36	; 0x24
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	33b0      	adds	r3, #176	; 0xb0
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006be0:	2302      	movs	r3, #2
 8006be2:	e018      	b.n	8006c16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1b      	ldrb	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006bee:	7819      	ldrb	r1, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f002 fbb8 	bl	8009370 <USBD_LL_PrepareReceive>
 8006c00:	e008      	b.n	8006c14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <USBD_CDC_Init+0x1e8>)
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 fbae 	bl	8009370 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200000a3 	.word	0x200000a3
 8006c24:	200000a4 	.word	0x200000a4
 8006c28:	200000a5 	.word	0x200000a5

08006c2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c38:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <USBD_CDC_DeInit+0xf8>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f002 facd 	bl	80091de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c44:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <USBD_CDC_DeInit+0xf8>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	f003 020f 	and.w	r2, r3, #15
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	3324      	adds	r3, #36	; 0x24
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c5e:	4b32      	ldr	r3, [pc, #200]	; (8006d28 <USBD_CDC_DeInit+0xfc>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f002 faba 	bl	80091de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <USBD_CDC_DeInit+0xfc>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c82:	2200      	movs	r2, #0
 8006c84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c86:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <USBD_CDC_DeInit+0x100>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f002 faa6 	bl	80091de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c92:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <USBD_CDC_DeInit+0x100>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f003 020f 	and.w	r2, r3, #15
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	2200      	movs	r2, #0
 8006caa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cac:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <USBD_CDC_DeInit+0x100>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 020f 	and.w	r2, r3, #15
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3326      	adds	r3, #38	; 0x26
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	32b0      	adds	r2, #176	; 0xb0
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01f      	beq.n	8006d18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	33b0      	adds	r3, #176	; 0xb0
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32b0      	adds	r2, #176	; 0xb0
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f002 fb7a 	bl	80093f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	; 0xb0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200000a3 	.word	0x200000a3
 8006d28:	200000a4 	.word	0x200000a4
 8006d2c:	200000a5 	.word	0x200000a5

08006d30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32b0      	adds	r2, #176	; 0xb0
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0bf      	b.n	8006ee0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d050      	beq.n	8006e0e <USBD_CDC_Setup+0xde>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	f040 80af 	bne.w	8006ed0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03a      	beq.n	8006df0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da1b      	bge.n	8006dbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	33b0      	adds	r3, #176	; 0xb0
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	88d2      	ldrh	r2, [r2, #6]
 8006da0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b07      	cmp	r3, #7
 8006da8:	bf28      	it	cs
 8006daa:	2307      	movcs	r3, #7
 8006dac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	89fa      	ldrh	r2, [r7, #14]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fd89 	bl	80088cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dba:	e090      	b.n	8006ede <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785a      	ldrb	r2, [r3, #1]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	2b3f      	cmp	r3, #63	; 0x3f
 8006dcc:	d803      	bhi.n	8006dd6 <USBD_CDC_Setup+0xa6>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	e000      	b.n	8006dd8 <USBD_CDC_Setup+0xa8>
 8006dd6:	2240      	movs	r2, #64	; 0x40
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dde:	6939      	ldr	r1, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006de6:	461a      	mov	r2, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fd9b 	bl	8008924 <USBD_CtlPrepareRx>
      break;
 8006dee:	e076      	b.n	8006ede <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	33b0      	adds	r3, #176	; 0xb0
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	7850      	ldrb	r0, [r2, #1]
 8006e06:	2200      	movs	r2, #0
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	4798      	blx	r3
      break;
 8006e0c:	e067      	b.n	8006ede <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b0b      	cmp	r3, #11
 8006e14:	d851      	bhi.n	8006eba <USBD_CDC_Setup+0x18a>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBD_CDC_Setup+0xec>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006ebb 	.word	0x08006ebb
 8006e28:	08006ebb 	.word	0x08006ebb
 8006e2c:	08006ebb 	.word	0x08006ebb
 8006e30:	08006ebb 	.word	0x08006ebb
 8006e34:	08006ebb 	.word	0x08006ebb
 8006e38:	08006ebb 	.word	0x08006ebb
 8006e3c:	08006ebb 	.word	0x08006ebb
 8006e40:	08006ebb 	.word	0x08006ebb
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006ea1 	.word	0x08006ea1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d107      	bne.n	8006e68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e58:	f107 030a 	add.w	r3, r7, #10
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 fd33 	bl	80088cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e66:	e032      	b.n	8006ece <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fcbd 	bl	80087ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	75fb      	strb	r3, [r7, #23]
          break;
 8006e74:	e02b      	b.n	8006ece <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d107      	bne.n	8006e92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e82:	f107 030d 	add.w	r3, r7, #13
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fd1e 	bl	80088cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e90:	e01d      	b.n	8006ece <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fca8 	bl	80087ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9e:	e016      	b.n	8006ece <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d00f      	beq.n	8006ecc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fc9b 	bl	80087ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006eb8:	e008      	b.n	8006ecc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fc94 	bl	80087ea <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec6:	e002      	b.n	8006ece <USBD_CDC_Setup+0x19e>
          break;
 8006ec8:	bf00      	nop
 8006eca:	e008      	b.n	8006ede <USBD_CDC_Setup+0x1ae>
          break;
 8006ecc:	bf00      	nop
      }
      break;
 8006ece:	e006      	b.n	8006ede <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fc89 	bl	80087ea <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	32b0      	adds	r2, #176	; 0xb0
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e065      	b.n	8006fde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	32b0      	adds	r2, #176	; 0xb0
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3318      	adds	r3, #24
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d02f      	beq.n	8006f9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3318      	adds	r3, #24
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	f003 010f 	and.w	r1, r3, #15
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4403      	add	r3, r0
 8006f64:	3348      	adds	r3, #72	; 0x48
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d112      	bne.n	8006f9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3318      	adds	r3, #24
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f8e:	78f9      	ldrb	r1, [r7, #3]
 8006f90:	2300      	movs	r3, #0
 8006f92:	2200      	movs	r2, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 f9ca 	bl	800932e <USBD_LL_Transmit>
 8006f9a:	e01f      	b.n	8006fdc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	33b0      	adds	r3, #176	; 0xb0
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d010      	beq.n	8006fdc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	33b0      	adds	r3, #176	; 0xb0
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fd8:	78fa      	ldrb	r2, [r7, #3]
 8006fda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	32b0      	adds	r2, #176	; 0xb0
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	32b0      	adds	r2, #176	; 0xb0
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007014:	2303      	movs	r3, #3
 8007016:	e01a      	b.n	800704e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 f9c8 	bl	80093b2 <USBD_LL_GetRxDataSize>
 8007022:	4602      	mov	r2, r0
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	33b0      	adds	r3, #176	; 0xb0
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007048:	4611      	mov	r1, r2
 800704a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	32b0      	adds	r2, #176	; 0xb0
 8007068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e025      	b.n	80070c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	33b0      	adds	r3, #176	; 0xb0
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <USBD_CDC_EP0_RxReady+0x6c>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d015      	beq.n	80070c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	33b0      	adds	r3, #176	; 0xb0
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070b6:	b292      	uxth	r2, r2
 80070b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	22ff      	movs	r2, #255	; 0xff
 80070be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070d4:	2182      	movs	r1, #130	; 0x82
 80070d6:	4818      	ldr	r0, [pc, #96]	; (8007138 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070d8:	f000 fd4f 	bl	8007b7a <USBD_GetEpDesc>
 80070dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070de:	2101      	movs	r1, #1
 80070e0:	4815      	ldr	r0, [pc, #84]	; (8007138 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070e2:	f000 fd4a 	bl	8007b7a <USBD_GetEpDesc>
 80070e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070e8:	2181      	movs	r1, #129	; 0x81
 80070ea:	4813      	ldr	r0, [pc, #76]	; (8007138 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070ec:	f000 fd45 	bl	8007b7a <USBD_GetEpDesc>
 80070f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2210      	movs	r2, #16
 80070fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2200      	movs	r2, #0
 8007108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800710c:	711a      	strb	r2, [r3, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007120:	711a      	strb	r2, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2243      	movs	r2, #67	; 0x43
 800712a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000060 	.word	0x20000060

0800713c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007144:	2182      	movs	r1, #130	; 0x82
 8007146:	4818      	ldr	r0, [pc, #96]	; (80071a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007148:	f000 fd17 	bl	8007b7a <USBD_GetEpDesc>
 800714c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800714e:	2101      	movs	r1, #1
 8007150:	4815      	ldr	r0, [pc, #84]	; (80071a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007152:	f000 fd12 	bl	8007b7a <USBD_GetEpDesc>
 8007156:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007158:	2181      	movs	r1, #129	; 0x81
 800715a:	4813      	ldr	r0, [pc, #76]	; (80071a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800715c:	f000 fd0d 	bl	8007b7a <USBD_GetEpDesc>
 8007160:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2210      	movs	r2, #16
 800716c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d006      	beq.n	8007182 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2200      	movs	r2, #0
 8007178:	711a      	strb	r2, [r3, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f042 0202 	orr.w	r2, r2, #2
 8007180:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d006      	beq.n	8007196 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	711a      	strb	r2, [r3, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f042 0202 	orr.w	r2, r2, #2
 8007194:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2243      	movs	r2, #67	; 0x43
 800719a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800719c:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000060 	.word	0x20000060

080071ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b4:	2182      	movs	r1, #130	; 0x82
 80071b6:	4818      	ldr	r0, [pc, #96]	; (8007218 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071b8:	f000 fcdf 	bl	8007b7a <USBD_GetEpDesc>
 80071bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071be:	2101      	movs	r1, #1
 80071c0:	4815      	ldr	r0, [pc, #84]	; (8007218 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071c2:	f000 fcda 	bl	8007b7a <USBD_GetEpDesc>
 80071c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071c8:	2181      	movs	r1, #129	; 0x81
 80071ca:	4813      	ldr	r0, [pc, #76]	; (8007218 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071cc:	f000 fcd5 	bl	8007b7a <USBD_GetEpDesc>
 80071d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2210      	movs	r2, #16
 80071dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2243      	movs	r2, #67	; 0x43
 800720a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000060 	.word	0x20000060

0800721c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	220a      	movs	r2, #10
 8007228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800722a:	4b03      	ldr	r3, [pc, #12]	; (8007238 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	2000001c 	.word	0x2000001c

0800723c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	e009      	b.n	8007264 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	33b0      	adds	r3, #176	; 0xb0
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	32b0      	adds	r2, #176	; 0xb0
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	e008      	b.n	80072a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	32b0      	adds	r2, #176	; 0xb0
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e004      	b.n	80072e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	; 0xb0
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32b0      	adds	r2, #176	; 0xb0
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800731e:	2303      	movs	r3, #3
 8007320:	e025      	b.n	800736e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007328:	2b00      	cmp	r3, #0
 800732a:	d11f      	bne.n	800736c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2201      	movs	r2, #1
 8007330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <USBD_CDC_TransmitPacket+0x88>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 020f 	and.w	r2, r3, #15
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4403      	add	r3, r0
 800734e:	3318      	adds	r3, #24
 8007350:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <USBD_CDC_TransmitPacket+0x88>)
 8007354:	7819      	ldrb	r1, [r3, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 ffe3 	bl	800932e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200000a3 	.word	0x200000a3

0800737c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32b0      	adds	r2, #176	; 0xb0
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32b0      	adds	r2, #176	; 0xb0
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e018      	b.n	80073dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7c1b      	ldrb	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <USBD_CDC_ReceivePacket+0x68>)
 80073b4:	7819      	ldrb	r1, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ffd5 	bl	8009370 <USBD_LL_PrepareReceive>
 80073c6:	e008      	b.n	80073da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <USBD_CDC_ReceivePacket+0x68>)
 80073ca:	7819      	ldrb	r1, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d2:	2340      	movs	r3, #64	; 0x40
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 ffcb 	bl	8009370 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	200000a4 	.word	0x200000a4

080073e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e01f      	b.n	8007440 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	79fa      	ldrb	r2, [r7, #7]
 8007432:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fe45 	bl	80090c4 <USBD_LL_Init>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	e025      	b.n	80074ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32ae      	adds	r2, #174	; 0xae
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00f      	beq.n	800749c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	; 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f107 020e 	add.w	r2, r7, #14
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	4602      	mov	r2, r0
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fe4d 	bl	800915c <USBD_LL_Start>
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d009      	beq.n	8007510 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	4611      	mov	r1, r2
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	4611      	mov	r1, r2
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f001 f908 	bl	8008776 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007574:	461a      	mov	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2b02      	cmp	r3, #2
 8007588:	d01a      	beq.n	80075c0 <USBD_LL_SetupStage+0x72>
 800758a:	2b02      	cmp	r3, #2
 800758c:	d822      	bhi.n	80075d4 <USBD_LL_SetupStage+0x86>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <USBD_LL_SetupStage+0x4a>
 8007592:	2b01      	cmp	r3, #1
 8007594:	d00a      	beq.n	80075ac <USBD_LL_SetupStage+0x5e>
 8007596:	e01d      	b.n	80075d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fb5f 	bl	8007c64 <USBD_StdDevReq>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
      break;
 80075aa:	e020      	b.n	80075ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fbc7 	bl	8007d48 <USBD_StdItfReq>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]
      break;
 80075be:	e016      	b.n	80075ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc29 	bl	8007e20 <USBD_StdEPReq>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
      break;
 80075d2:	e00c      	b.n	80075ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fe1a 	bl	800921c <USBD_LL_StallEP>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]
      break;
 80075ec:	bf00      	nop
  }

  return ret;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d16e      	bne.n	80076ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800761e:	2b03      	cmp	r3, #3
 8007620:	f040 8098 	bne.w	8007754 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d913      	bls.n	8007658 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	4293      	cmp	r3, r2
 8007648:	bf28      	it	cs
 800764a:	4613      	movcs	r3, r2
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 f984 	bl	800895e <USBD_CtlContinueRx>
 8007656:	e07d      	b.n	8007754 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2b02      	cmp	r3, #2
 8007664:	d014      	beq.n	8007690 <USBD_LL_DataOutStage+0x98>
 8007666:	2b02      	cmp	r3, #2
 8007668:	d81d      	bhi.n	80076a6 <USBD_LL_DataOutStage+0xae>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <USBD_LL_DataOutStage+0x7c>
 800766e:	2b01      	cmp	r3, #1
 8007670:	d003      	beq.n	800767a <USBD_LL_DataOutStage+0x82>
 8007672:	e018      	b.n	80076a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	75bb      	strb	r3, [r7, #22]
            break;
 8007678:	e018      	b.n	80076ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fa5e 	bl	8007b46 <USBD_CoreFindIF>
 800768a:	4603      	mov	r3, r0
 800768c:	75bb      	strb	r3, [r7, #22]
            break;
 800768e:	e00d      	b.n	80076ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007696:	b2db      	uxtb	r3, r3
 8007698:	4619      	mov	r1, r3
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fa60 	bl	8007b60 <USBD_CoreFindEP>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75bb      	strb	r3, [r7, #22]
            break;
 80076a4:	e002      	b.n	80076ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	75bb      	strb	r3, [r7, #22]
            break;
 80076aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076ac:	7dbb      	ldrb	r3, [r7, #22]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d119      	bne.n	80076e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d113      	bne.n	80076e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076be:	7dba      	ldrb	r2, [r7, #22]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	32ae      	adds	r2, #174	; 0xae
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076ce:	7dba      	ldrb	r2, [r7, #22]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076d6:	7dba      	ldrb	r2, [r7, #22]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	32ae      	adds	r2, #174	; 0xae
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f001 f94a 	bl	8008980 <USBD_CtlSendStatus>
 80076ec:	e032      	b.n	8007754 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fa31 	bl	8007b60 <USBD_CoreFindEP>
 80076fe:	4603      	mov	r3, r0
 8007700:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007702:	7dbb      	ldrb	r3, [r7, #22]
 8007704:	2bff      	cmp	r3, #255	; 0xff
 8007706:	d025      	beq.n	8007754 <USBD_LL_DataOutStage+0x15c>
 8007708:	7dbb      	ldrb	r3, [r7, #22]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d122      	bne.n	8007754 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d117      	bne.n	800774a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800771a:	7dba      	ldrb	r2, [r7, #22]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	32ae      	adds	r2, #174	; 0xae
 8007720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800772a:	7dba      	ldrb	r2, [r7, #22]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007732:	7dba      	ldrb	r2, [r7, #22]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	32ae      	adds	r2, #174	; 0xae
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	7afa      	ldrb	r2, [r7, #11]
 8007740:	4611      	mov	r1, r2
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	e000      	b.n	8007756 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b086      	sub	sp, #24
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	460b      	mov	r3, r1
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d16f      	bne.n	8007852 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3314      	adds	r3, #20
 8007776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800777e:	2b02      	cmp	r3, #2
 8007780:	d15a      	bne.n	8007838 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d914      	bls.n	80077b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 f8ac 	bl	8008902 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077aa:	2300      	movs	r3, #0
 80077ac:	2200      	movs	r2, #0
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f001 fddd 	bl	8009370 <USBD_LL_PrepareReceive>
 80077b6:	e03f      	b.n	8007838 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d11c      	bne.n	80077fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d316      	bcc.n	80077fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077da:	429a      	cmp	r2, r3
 80077dc:	d20f      	bcs.n	80077fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f001 f88d 	bl	8008902 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077f0:	2300      	movs	r3, #0
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f001 fdba 	bl	8009370 <USBD_LL_PrepareReceive>
 80077fc:	e01c      	b.n	8007838 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b03      	cmp	r3, #3
 8007808:	d10f      	bne.n	800782a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800782a:	2180      	movs	r1, #128	; 0x80
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f001 fcf5 	bl	800921c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f001 f8b7 	bl	80089a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d03a      	beq.n	80078b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff fe42 	bl	80074cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007850:	e032      	b.n	80078b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007858:	b2db      	uxtb	r3, r3
 800785a:	4619      	mov	r1, r3
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f97f 	bl	8007b60 <USBD_CoreFindEP>
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2bff      	cmp	r3, #255	; 0xff
 800786a:	d025      	beq.n	80078b8 <USBD_LL_DataInStage+0x15a>
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d122      	bne.n	80078b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d11c      	bne.n	80078b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800787e:	7dfa      	ldrb	r2, [r7, #23]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	32ae      	adds	r2, #174	; 0xae
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d014      	beq.n	80078b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800788e:	7dfa      	ldrb	r2, [r7, #23]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007896:	7dfa      	ldrb	r2, [r7, #23]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	32ae      	adds	r2, #174	; 0xae
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	7afa      	ldrb	r2, [r7, #11]
 80078a4:	4611      	mov	r1, r2
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078ae:	7dbb      	ldrb	r3, [r7, #22]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078b4:	7dbb      	ldrb	r3, [r7, #22]
 80078b6:	e000      	b.n	80078ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d014      	beq.n	8007928 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00e      	beq.n	8007928 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6852      	ldr	r2, [r2, #4]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	4611      	mov	r1, r2
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007924:	2303      	movs	r3, #3
 8007926:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	2200      	movs	r2, #0
 800792c:	2100      	movs	r1, #0
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fc2f 	bl	8009192 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2240      	movs	r2, #64	; 0x40
 8007940:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	2200      	movs	r2, #0
 8007948:	2180      	movs	r1, #128	; 0x80
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fc21 	bl	8009192 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2240      	movs	r2, #64	; 0x40
 800795a:	621a      	str	r2, [r3, #32]

  return ret;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	b2da      	uxtb	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2204      	movs	r2, #4
 80079a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d106      	bne.n	80079d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d110      	bne.n	8007a18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	32ae      	adds	r2, #174	; 0xae
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e01c      	b.n	8007a7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d115      	bne.n	8007a7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32ae      	adds	r2, #174	; 0xae
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	; 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	4611      	mov	r1, r2
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	32ae      	adds	r2, #174	; 0xae
 8007a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e01c      	b.n	8007ae2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d115      	bne.n	8007ae0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	32ae      	adds	r2, #174	; 0xae
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32ae      	adds	r2, #174	; 0xae
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	4611      	mov	r1, r2
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00e      	beq.n	8007b3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6852      	ldr	r2, [r2, #4]
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b086      	sub	sp, #24
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d920      	bls.n	8007be4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007baa:	e013      	b.n	8007bd4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bac:	f107 030a 	add.w	r3, r7, #10
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f000 f81b 	bl	8007bee <USBD_GetNextDesc>
 8007bb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d108      	bne.n	8007bd4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	789b      	ldrb	r3, [r3, #2]
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d008      	beq.n	8007be2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	885b      	ldrh	r3, [r3, #2]
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	897b      	ldrh	r3, [r7, #10]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d8e5      	bhi.n	8007bac <USBD_GetEpDesc+0x32>
 8007be0:	e000      	b.n	8007be4 <USBD_GetEpDesc+0x6a>
          break;
 8007be2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007be4:	693b      	ldr	r3, [r7, #16]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c46:	8a3b      	ldrh	r3, [r7, #16]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	b21a      	sxth	r2, r3
 8007c4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b21b      	sxth	r3, r3
 8007c54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c56:	89fb      	ldrh	r3, [r7, #14]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d005      	beq.n	8007c8a <USBD_StdDevReq+0x26>
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d857      	bhi.n	8007d32 <USBD_StdDevReq+0xce>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <USBD_StdDevReq+0x42>
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d153      	bne.n	8007d32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	32ae      	adds	r2, #174	; 0xae
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca4:	e04a      	b.n	8007d3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d83b      	bhi.n	8007d26 <USBD_StdDevReq+0xc2>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBD_StdDevReq+0x50>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007d09 	.word	0x08007d09
 8007cb8:	08007d1d 	.word	0x08007d1d
 8007cbc:	08007d27 	.word	0x08007d27
 8007cc0:	08007d13 	.word	0x08007d13
 8007cc4:	08007d27 	.word	0x08007d27
 8007cc8:	08007ce7 	.word	0x08007ce7
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007d27 	.word	0x08007d27
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007cf1 	.word	0x08007cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa3c 	bl	800815c <USBD_GetDescriptor>
          break;
 8007ce4:	e024      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fba1 	bl	8008430 <USBD_SetAddress>
          break;
 8007cee:	e01f      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fbe0 	bl	80084b8 <USBD_SetConfig>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
          break;
 8007cfc:	e018      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc83 	bl	800860c <USBD_GetConfig>
          break;
 8007d06:	e013      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fcb4 	bl	8008678 <USBD_GetStatus>
          break;
 8007d10:	e00e      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fce3 	bl	80086e0 <USBD_SetFeature>
          break;
 8007d1a:	e009      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fd07 	bl	8008732 <USBD_ClrFeature>
          break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fd5e 	bl	80087ea <USBD_CtlError>
          break;
 8007d2e:	bf00      	nop
      }
      break;
 8007d30:	e004      	b.n	8007d3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fd58 	bl	80087ea <USBD_CtlError>
      break;
 8007d3a:	bf00      	nop
  }

  return ret;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d005      	beq.n	8007d6e <USBD_StdItfReq+0x26>
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d852      	bhi.n	8007e0c <USBD_StdItfReq+0xc4>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <USBD_StdItfReq+0x26>
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d14e      	bne.n	8007e0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d840      	bhi.n	8007dfe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	889b      	ldrh	r3, [r3, #4]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d836      	bhi.n	8007df4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	889b      	ldrh	r3, [r3, #4]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff fed9 	bl	8007b46 <USBD_CoreFindIF>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	2bff      	cmp	r3, #255	; 0xff
 8007d9c:	d01d      	beq.n	8007dda <USBD_StdItfReq+0x92>
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11a      	bne.n	8007dda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007da4:	7bba      	ldrb	r2, [r7, #14]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32ae      	adds	r2, #174	; 0xae
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00f      	beq.n	8007dd4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007db4:	7bba      	ldrb	r2, [r7, #14]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dbc:	7bba      	ldrb	r2, [r7, #14]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32ae      	adds	r2, #174	; 0xae
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd2:	e004      	b.n	8007dde <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd8:	e001      	b.n	8007dde <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d110      	bne.n	8007e08 <USBD_StdItfReq+0xc0>
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10d      	bne.n	8007e08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fdc7 	bl	8008980 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007df2:	e009      	b.n	8007e08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fcf7 	bl	80087ea <USBD_CtlError>
          break;
 8007dfc:	e004      	b.n	8007e08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fcf2 	bl	80087ea <USBD_CtlError>
          break;
 8007e06:	e000      	b.n	8007e0a <USBD_StdItfReq+0xc2>
          break;
 8007e08:	bf00      	nop
      }
      break;
 8007e0a:	e004      	b.n	8007e16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fceb 	bl	80087ea <USBD_CtlError>
      break;
 8007e14:	bf00      	nop
  }

  return ret;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	889b      	ldrh	r3, [r3, #4]
 8007e32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e3c:	2b40      	cmp	r3, #64	; 0x40
 8007e3e:	d007      	beq.n	8007e50 <USBD_StdEPReq+0x30>
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	f200 817f 	bhi.w	8008144 <USBD_StdEPReq+0x324>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d02a      	beq.n	8007ea0 <USBD_StdEPReq+0x80>
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	f040 817a 	bne.w	8008144 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fe83 	bl	8007b60 <USBD_CoreFindEP>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e5e:	7b7b      	ldrb	r3, [r7, #13]
 8007e60:	2bff      	cmp	r3, #255	; 0xff
 8007e62:	f000 8174 	beq.w	800814e <USBD_StdEPReq+0x32e>
 8007e66:	7b7b      	ldrb	r3, [r7, #13]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 8170 	bne.w	800814e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e6e:	7b7a      	ldrb	r2, [r7, #13]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e76:	7b7a      	ldrb	r2, [r7, #13]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32ae      	adds	r2, #174	; 0xae
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 8163 	beq.w	800814e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e88:	7b7a      	ldrb	r2, [r7, #13]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32ae      	adds	r2, #174	; 0xae
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e9e:	e156      	b.n	800814e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d008      	beq.n	8007eba <USBD_StdEPReq+0x9a>
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	f300 8145 	bgt.w	8008138 <USBD_StdEPReq+0x318>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 809b 	beq.w	8007fea <USBD_StdEPReq+0x1ca>
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d03c      	beq.n	8007f32 <USBD_StdEPReq+0x112>
 8007eb8:	e13e      	b.n	8008138 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d002      	beq.n	8007ecc <USBD_StdEPReq+0xac>
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d016      	beq.n	8007ef8 <USBD_StdEPReq+0xd8>
 8007eca:	e02c      	b.n	8007f26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <USBD_StdEPReq+0xce>
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d00a      	beq.n	8007eee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 f99d 	bl	800921c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 f999 	bl	800921c <USBD_LL_StallEP>
 8007eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007eec:	e020      	b.n	8007f30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc7a 	bl	80087ea <USBD_CtlError>
              break;
 8007ef6:	e01b      	b.n	8007f30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10e      	bne.n	8007f1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <USBD_StdEPReq+0xfe>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b80      	cmp	r3, #128	; 0x80
 8007f0a:	d008      	beq.n	8007f1e <USBD_StdEPReq+0xfe>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	88db      	ldrh	r3, [r3, #6]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 f97f 	bl	800921c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fd2e 	bl	8008980 <USBD_CtlSendStatus>

              break;
 8007f24:	e004      	b.n	8007f30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc5e 	bl	80087ea <USBD_CtlError>
              break;
 8007f2e:	bf00      	nop
          }
          break;
 8007f30:	e107      	b.n	8008142 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d002      	beq.n	8007f44 <USBD_StdEPReq+0x124>
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d016      	beq.n	8007f70 <USBD_StdEPReq+0x150>
 8007f42:	e04b      	b.n	8007fdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00d      	beq.n	8007f66 <USBD_StdEPReq+0x146>
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b80      	cmp	r3, #128	; 0x80
 8007f4e:	d00a      	beq.n	8007f66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 f961 	bl	800921c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f5a:	2180      	movs	r1, #128	; 0x80
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f95d 	bl	800921c <USBD_LL_StallEP>
 8007f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f64:	e040      	b.n	8007fe8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fc3e 	bl	80087ea <USBD_CtlError>
              break;
 8007f6e:	e03b      	b.n	8007fe8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d136      	bne.n	8007fe6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f967 	bl	800925a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fcf7 	bl	8008980 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fde2 	bl	8007b60 <USBD_CoreFindEP>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fa0:	7b7b      	ldrb	r3, [r7, #13]
 8007fa2:	2bff      	cmp	r3, #255	; 0xff
 8007fa4:	d01f      	beq.n	8007fe6 <USBD_StdEPReq+0x1c6>
 8007fa6:	7b7b      	ldrb	r3, [r7, #13]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11c      	bne.n	8007fe6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fac:	7b7a      	ldrb	r2, [r7, #13]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fb4:	7b7a      	ldrb	r2, [r7, #13]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	32ae      	adds	r2, #174	; 0xae
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d010      	beq.n	8007fe6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fc4:	7b7a      	ldrb	r2, [r7, #13]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	32ae      	adds	r2, #174	; 0xae
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fda:	e004      	b.n	8007fe6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc03 	bl	80087ea <USBD_CtlError>
              break;
 8007fe4:	e000      	b.n	8007fe8 <USBD_StdEPReq+0x1c8>
              break;
 8007fe6:	bf00      	nop
          }
          break;
 8007fe8:	e0ab      	b.n	8008142 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d002      	beq.n	8007ffc <USBD_StdEPReq+0x1dc>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d032      	beq.n	8008060 <USBD_StdEPReq+0x240>
 8007ffa:	e097      	b.n	800812c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <USBD_StdEPReq+0x1f2>
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b80      	cmp	r3, #128	; 0x80
 8008006:	d004      	beq.n	8008012 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fbed 	bl	80087ea <USBD_CtlError>
                break;
 8008010:	e091      	b.n	8008136 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	da0b      	bge.n	8008032 <USBD_StdEPReq+0x212>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	3310      	adds	r3, #16
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	3304      	adds	r3, #4
 8008030:	e00b      	b.n	800804a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	3304      	adds	r3, #4
 800804a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2202      	movs	r2, #2
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc37 	bl	80088cc <USBD_CtlSendData>
              break;
 800805e:	e06a      	b.n	8008136 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	da11      	bge.n	800808c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	f003 020f 	and.w	r2, r3, #15
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	3324      	adds	r3, #36	; 0x24
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d117      	bne.n	80080b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbb0 	bl	80087ea <USBD_CtlError>
                  break;
 800808a:	e054      	b.n	8008136 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 020f 	and.w	r2, r3, #15
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb9d 	bl	80087ea <USBD_CtlError>
                  break;
 80080b0:	e041      	b.n	8008136 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da0b      	bge.n	80080d2 <USBD_StdEPReq+0x2b2>
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	3310      	adds	r3, #16
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	3304      	adds	r3, #4
 80080d0:	e00b      	b.n	80080ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	3304      	adds	r3, #4
 80080ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <USBD_StdEPReq+0x2d8>
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b80      	cmp	r3, #128	; 0x80
 80080f6:	d103      	bne.n	8008100 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	e00e      	b.n	800811e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f8c7 	bl	8009298 <USBD_LL_IsStallEP>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e002      	b.n	800811e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2202      	movs	r2, #2
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fbd1 	bl	80088cc <USBD_CtlSendData>
              break;
 800812a:	e004      	b.n	8008136 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb5b 	bl	80087ea <USBD_CtlError>
              break;
 8008134:	bf00      	nop
          }
          break;
 8008136:	e004      	b.n	8008142 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fb55 	bl	80087ea <USBD_CtlError>
          break;
 8008140:	bf00      	nop
      }
      break;
 8008142:	e005      	b.n	8008150 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fb4f 	bl	80087ea <USBD_CtlError>
      break;
 800814c:	e000      	b.n	8008150 <USBD_StdEPReq+0x330>
      break;
 800814e:	bf00      	nop
  }

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	2b06      	cmp	r3, #6
 800817e:	f200 8128 	bhi.w	80083d2 <USBD_GetDescriptor+0x276>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <USBD_GetDescriptor+0x2c>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081a5 	.word	0x080081a5
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081fd 	.word	0x080081fd
 8008194:	080083d3 	.word	0x080083d3
 8008198:	080083d3 	.word	0x080083d3
 800819c:	08008373 	.word	0x08008373
 80081a0:	0800839f 	.word	0x0800839f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7c12      	ldrb	r2, [r2, #16]
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
      break;
 80081ba:	e112      	b.n	80083e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7c1b      	ldrb	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10d      	bne.n	80081e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	2202      	movs	r2, #2
 80081dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081de:	e100      	b.n	80083e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	f107 0208 	add.w	r2, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	2202      	movs	r2, #2
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e0f2      	b.n	80083e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	885b      	ldrh	r3, [r3, #2]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b05      	cmp	r3, #5
 8008204:	f200 80ac 	bhi.w	8008360 <USBD_GetDescriptor+0x204>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_GetDescriptor+0xb4>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008229 	.word	0x08008229
 8008214:	0800825d 	.word	0x0800825d
 8008218:	08008291 	.word	0x08008291
 800821c:	080082c5 	.word	0x080082c5
 8008220:	080082f9 	.word	0x080082f9
 8008224:	0800832d 	.word	0x0800832d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	7c12      	ldrb	r2, [r2, #16]
 8008240:	f107 0108 	add.w	r1, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824a:	e091      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 facb 	bl	80087ea <USBD_CtlError>
            err++;
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	3301      	adds	r3, #1
 8008258:	72fb      	strb	r3, [r7, #11]
          break;
 800825a:	e089      	b.n	8008370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	f107 0108 	add.w	r1, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827e:	e077      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fab1 	bl	80087ea <USBD_CtlError>
            err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
          break;
 800828e:	e06f      	b.n	8008370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7c12      	ldrb	r2, [r2, #16]
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b2:	e05d      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa97 	bl	80087ea <USBD_CtlError>
            err++;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	3301      	adds	r3, #1
 80082c0:	72fb      	strb	r3, [r7, #11]
          break;
 80082c2:	e055      	b.n	8008370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e6:	e043      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa7d 	bl	80087ea <USBD_CtlError>
            err++;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	3301      	adds	r3, #1
 80082f4:	72fb      	strb	r3, [r7, #11]
          break;
 80082f6:	e03b      	b.n	8008370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e029      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa63 	bl	80087ea <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e021      	b.n	8008370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e00f      	b.n	8008370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa49 	bl	80087ea <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e007      	b.n	8008370 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa41 	bl	80087ea <USBD_CtlError>
          err++;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	3301      	adds	r3, #1
 800836c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800836e:	bf00      	nop
      }
      break;
 8008370:	e037      	b.n	80083e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7c1b      	ldrb	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008382:	f107 0208 	add.w	r2, r7, #8
 8008386:	4610      	mov	r0, r2
 8008388:	4798      	blx	r3
 800838a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800838c:	e029      	b.n	80083e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa2a 	bl	80087ea <USBD_CtlError>
        err++;
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	3301      	adds	r3, #1
 800839a:	72fb      	strb	r3, [r7, #11]
      break;
 800839c:	e021      	b.n	80083e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7c1b      	ldrb	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	f107 0208 	add.w	r2, r7, #8
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	2207      	movs	r2, #7
 80083be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c0:	e00f      	b.n	80083e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa10 	bl	80087ea <USBD_CtlError>
        err++;
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	3301      	adds	r3, #1
 80083ce:	72fb      	strb	r3, [r7, #11]
      break;
 80083d0:	e007      	b.n	80083e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa08 	bl	80087ea <USBD_CtlError>
      err++;
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	3301      	adds	r3, #1
 80083de:	72fb      	strb	r3, [r7, #11]
      break;
 80083e0:	bf00      	nop
  }

  if (err != 0U)
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d11e      	bne.n	8008426 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	88db      	ldrh	r3, [r3, #6]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d016      	beq.n	800841e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083f0:	893b      	ldrh	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00e      	beq.n	8008414 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88da      	ldrh	r2, [r3, #6]
 80083fa:	893b      	ldrh	r3, [r7, #8]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bf28      	it	cs
 8008400:	4613      	movcs	r3, r2
 8008402:	b29b      	uxth	r3, r3
 8008404:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008406:	893b      	ldrh	r3, [r7, #8]
 8008408:	461a      	mov	r2, r3
 800840a:	68f9      	ldr	r1, [r7, #12]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa5d 	bl	80088cc <USBD_CtlSendData>
 8008412:	e009      	b.n	8008428 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9e7 	bl	80087ea <USBD_CtlError>
 800841c:	e004      	b.n	8008428 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 faae 	bl	8008980 <USBD_CtlSendStatus>
 8008424:	e000      	b.n	8008428 <USBD_GetDescriptor+0x2cc>
    return;
 8008426:	bf00      	nop
  }
}
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop

08008430 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d131      	bne.n	80084a6 <USBD_SetAddress+0x76>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d12d      	bne.n	80084a6 <USBD_SetAddress+0x76>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	2b7f      	cmp	r3, #127	; 0x7f
 8008450:	d829      	bhi.n	80084a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800845c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b03      	cmp	r3, #3
 8008468:	d104      	bne.n	8008474 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9bc 	bl	80087ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008472:	e01d      	b.n	80084b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7bfa      	ldrb	r2, [r7, #15]
 8008478:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 ff35 	bl	80092f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa7a 	bl	8008980 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2202      	movs	r2, #2
 8008496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849a:	e009      	b.n	80084b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a4:	e004      	b.n	80084b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f99e 	bl	80087ea <USBD_CtlError>
  }
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	4b4e      	ldr	r3, [pc, #312]	; (8008608 <USBD_SetConfig+0x150>)
 80084ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084d0:	4b4d      	ldr	r3, [pc, #308]	; (8008608 <USBD_SetConfig+0x150>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d905      	bls.n	80084e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f985 	bl	80087ea <USBD_CtlError>
    return USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e08c      	b.n	80085fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d002      	beq.n	80084f6 <USBD_SetConfig+0x3e>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d029      	beq.n	8008548 <USBD_SetConfig+0x90>
 80084f4:	e075      	b.n	80085e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084f6:	4b44      	ldr	r3, [pc, #272]	; (8008608 <USBD_SetConfig+0x150>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d020      	beq.n	8008540 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084fe:	4b42      	ldr	r3, [pc, #264]	; (8008608 <USBD_SetConfig+0x150>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008508:	4b3f      	ldr	r3, [pc, #252]	; (8008608 <USBD_SetConfig+0x150>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fe ffe7 	bl	80074e2 <USBD_SetClassConfig>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d008      	beq.n	8008530 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f962 	bl	80087ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800852e:	e065      	b.n	80085fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa25 	bl	8008980 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2203      	movs	r2, #3
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800853e:	e05d      	b.n	80085fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fa1d 	bl	8008980 <USBD_CtlSendStatus>
      break;
 8008546:	e059      	b.n	80085fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008548:	4b2f      	ldr	r3, [pc, #188]	; (8008608 <USBD_SetConfig+0x150>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d112      	bne.n	8008576 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008558:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <USBD_SetConfig+0x150>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008562:	4b29      	ldr	r3, [pc, #164]	; (8008608 <USBD_SetConfig+0x150>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fe ffd6 	bl	800751a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa06 	bl	8008980 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008574:	e042      	b.n	80085fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <USBD_SetConfig+0x150>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d02a      	beq.n	80085da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7fe ffc4 	bl	800751a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008592:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <USBD_SetConfig+0x150>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <USBD_SetConfig+0x150>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fe ff9d 	bl	80074e2 <USBD_SetClassConfig>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00f      	beq.n	80085d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f918 	bl	80087ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fe ffa9 	bl	800751a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085d0:	e014      	b.n	80085fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9d4 	bl	8008980 <USBD_CtlSendStatus>
      break;
 80085d8:	e010      	b.n	80085fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f9d0 	bl	8008980 <USBD_CtlSendStatus>
      break;
 80085e0:	e00c      	b.n	80085fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f900 	bl	80087ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <USBD_SetConfig+0x150>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7fe ff92 	bl	800751a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	73fb      	strb	r3, [r7, #15]
      break;
 80085fa:	bf00      	nop
  }

  return ret;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000240 	.word	0x20000240

0800860c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	88db      	ldrh	r3, [r3, #6]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d004      	beq.n	8008628 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f8e2 	bl	80087ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008626:	e023      	b.n	8008670 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	dc02      	bgt.n	800863a <USBD_GetConfig+0x2e>
 8008634:	2b00      	cmp	r3, #0
 8008636:	dc03      	bgt.n	8008640 <USBD_GetConfig+0x34>
 8008638:	e015      	b.n	8008666 <USBD_GetConfig+0x5a>
 800863a:	2b03      	cmp	r3, #3
 800863c:	d00b      	beq.n	8008656 <USBD_GetConfig+0x4a>
 800863e:	e012      	b.n	8008666 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3308      	adds	r3, #8
 800864a:	2201      	movs	r2, #1
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f93c 	bl	80088cc <USBD_CtlSendData>
        break;
 8008654:	e00c      	b.n	8008670 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3304      	adds	r3, #4
 800865a:	2201      	movs	r2, #1
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f934 	bl	80088cc <USBD_CtlSendData>
        break;
 8008664:	e004      	b.n	8008670 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f8be 	bl	80087ea <USBD_CtlError>
        break;
 800866e:	bf00      	nop
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008688:	b2db      	uxtb	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	2b02      	cmp	r3, #2
 800868e:	d81e      	bhi.n	80086ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	88db      	ldrh	r3, [r3, #6]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d004      	beq.n	80086a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f8a5 	bl	80087ea <USBD_CtlError>
        break;
 80086a0:	e01a      	b.n	80086d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f043 0202 	orr.w	r2, r3, #2
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	330c      	adds	r3, #12
 80086c2:	2202      	movs	r2, #2
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f900 	bl	80088cc <USBD_CtlSendData>
      break;
 80086cc:	e004      	b.n	80086d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f88a 	bl	80087ea <USBD_CtlError>
      break;
 80086d6:	bf00      	nop
  }
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d107      	bne.n	8008702 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f940 	bl	8008980 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008700:	e013      	b.n	800872a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d10b      	bne.n	8008722 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	889b      	ldrh	r3, [r3, #4]
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	b29b      	uxth	r3, r3
 8008712:	b2da      	uxtb	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f930 	bl	8008980 <USBD_CtlSendStatus>
}
 8008720:	e003      	b.n	800872a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f860 	bl	80087ea <USBD_CtlError>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	3b01      	subs	r3, #1
 8008746:	2b02      	cmp	r3, #2
 8008748:	d80b      	bhi.n	8008762 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10c      	bne.n	800876c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f910 	bl	8008980 <USBD_CtlSendStatus>
      }
      break;
 8008760:	e004      	b.n	800876c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f840 	bl	80087ea <USBD_CtlError>
      break;
 800876a:	e000      	b.n	800876e <USBD_ClrFeature+0x3c>
      break;
 800876c:	bf00      	nop
  }
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	781a      	ldrb	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3301      	adds	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff fa41 	bl	8007c28 <SWAPBYTE>
 80087a6:	4603      	mov	r3, r0
 80087a8:	461a      	mov	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fa34 	bl	8007c28 <SWAPBYTE>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff fa27 	bl	8007c28 <SWAPBYTE>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	80da      	strh	r2, [r3, #6]
}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087f4:	2180      	movs	r1, #128	; 0x80
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fd10 	bl	800921c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fd0c 	bl	800921c <USBD_LL_StallEP>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d036      	beq.n	8008890 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008826:	6938      	ldr	r0, [r7, #16]
 8008828:	f000 f836 	bl	8008898 <USBD_GetLen>
 800882c:	4603      	mov	r3, r0
 800882e:	3301      	adds	r3, #1
 8008830:	b29b      	uxth	r3, r3
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	4413      	add	r3, r2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7812      	ldrb	r2, [r2, #0]
 8008844:	701a      	strb	r2, [r3, #0]
  idx++;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	3301      	adds	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	2203      	movs	r2, #3
 8008854:	701a      	strb	r2, [r3, #0]
  idx++;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	3301      	adds	r3, #1
 800885a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800885c:	e013      	b.n	8008886 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	4413      	add	r3, r2
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	7812      	ldrb	r2, [r2, #0]
 8008868:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3301      	adds	r3, #1
 800886e:	613b      	str	r3, [r7, #16]
    idx++;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	3301      	adds	r3, #1
 8008874:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	4413      	add	r3, r2
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	3301      	adds	r3, #1
 8008884:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e7      	bne.n	800885e <USBD_GetString+0x52>
 800888e:	e000      	b.n	8008892 <USBD_GetString+0x86>
    return;
 8008890:	bf00      	nop
  }
}
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088a8:	e005      	b.n	80088b6 <USBD_GetLen+0x1e>
  {
    len++;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	3301      	adds	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f5      	bne.n	80088aa <USBD_GetLen+0x12>
  }

  return len;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2202      	movs	r2, #2
 80088dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	2100      	movs	r1, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fd1b 	bl	800932e <USBD_LL_Transmit>

  return USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	2100      	movs	r1, #0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fd0a 	bl	800932e <USBD_LL_Transmit>

  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2203      	movs	r2, #3
 8008934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fd0e 	bl	8009370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fcfd 	bl	8009370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fcc9 	bl	800932e <USBD_LL_Transmit>

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2205      	movs	r2, #5
 80089b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089b6:	2300      	movs	r3, #0
 80089b8:	2200      	movs	r2, #0
 80089ba:	2100      	movs	r1, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fcd7 	bl	8009370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089d0:	2200      	movs	r2, #0
 80089d2:	4912      	ldr	r1, [pc, #72]	; (8008a1c <MX_USB_DEVICE_Init+0x50>)
 80089d4:	4812      	ldr	r0, [pc, #72]	; (8008a20 <MX_USB_DEVICE_Init+0x54>)
 80089d6:	f7fe fd07 	bl	80073e8 <USBD_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089e0:	f7f8 f8c2 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089e4:	490f      	ldr	r1, [pc, #60]	; (8008a24 <MX_USB_DEVICE_Init+0x58>)
 80089e6:	480e      	ldr	r0, [pc, #56]	; (8008a20 <MX_USB_DEVICE_Init+0x54>)
 80089e8:	f7fe fd2e 	bl	8007448 <USBD_RegisterClass>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089f2:	f7f8 f8b9 	bl	8000b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089f6:	490c      	ldr	r1, [pc, #48]	; (8008a28 <MX_USB_DEVICE_Init+0x5c>)
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <MX_USB_DEVICE_Init+0x54>)
 80089fa:	f7fe fc1f 	bl	800723c <USBD_CDC_RegisterInterface>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a04:	f7f8 f8b0 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <MX_USB_DEVICE_Init+0x54>)
 8008a0a:	f7fe fd53 	bl	80074b4 <USBD_Start>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a14:	f7f8 f8a8 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a18:	bf00      	nop
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200000bc 	.word	0x200000bc
 8008a20:	20000244 	.word	0x20000244
 8008a24:	20000028 	.word	0x20000028
 8008a28:	200000a8 	.word	0x200000a8

08008a2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	4905      	ldr	r1, [pc, #20]	; (8008a48 <CDC_Init_FS+0x1c>)
 8008a34:	4805      	ldr	r0, [pc, #20]	; (8008a4c <CDC_Init_FS+0x20>)
 8008a36:	f7fe fc1b 	bl	8007270 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a3a:	4905      	ldr	r1, [pc, #20]	; (8008a50 <CDC_Init_FS+0x24>)
 8008a3c:	4803      	ldr	r0, [pc, #12]	; (8008a4c <CDC_Init_FS+0x20>)
 8008a3e:	f7fe fc39 	bl	80072b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000d20 	.word	0x20000d20
 8008a4c:	20000244 	.word	0x20000244
 8008a50:	20000520 	.word	0x20000520

08008a54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
 8008a70:	4613      	mov	r3, r2
 8008a72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	2b23      	cmp	r3, #35	; 0x23
 8008a78:	d84a      	bhi.n	8008b10 <CDC_Control_FS+0xac>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <CDC_Control_FS+0x1c>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008b11 	.word	0x08008b11
 8008a84:	08008b11 	.word	0x08008b11
 8008a88:	08008b11 	.word	0x08008b11
 8008a8c:	08008b11 	.word	0x08008b11
 8008a90:	08008b11 	.word	0x08008b11
 8008a94:	08008b11 	.word	0x08008b11
 8008a98:	08008b11 	.word	0x08008b11
 8008a9c:	08008b11 	.word	0x08008b11
 8008aa0:	08008b11 	.word	0x08008b11
 8008aa4:	08008b11 	.word	0x08008b11
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b11 	.word	0x08008b11
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b11 	.word	0x08008b11
 8008ac0:	08008b11 	.word	0x08008b11
 8008ac4:	08008b11 	.word	0x08008b11
 8008ac8:	08008b11 	.word	0x08008b11
 8008acc:	08008b11 	.word	0x08008b11
 8008ad0:	08008b11 	.word	0x08008b11
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b11 	.word	0x08008b11
 8008adc:	08008b11 	.word	0x08008b11
 8008ae0:	08008b11 	.word	0x08008b11
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	08008b11 	.word	0x08008b11
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b11 	.word	0x08008b11
 8008afc:	08008b11 	.word	0x08008b11
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b11 	.word	0x08008b11
 8008b08:	08008b11 	.word	0x08008b11
 8008b0c:	08008b11 	.word	0x08008b11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b10:	bf00      	nop
  }

  return (USBD_OK);
 8008b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4813      	ldr	r0, [pc, #76]	; (8008b7c <CDC_Receive_FS+0x5c>)
 8008b2e:	f7fe fbc1 	bl	80072b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b32:	4812      	ldr	r0, [pc, #72]	; (8008b7c <CDC_Receive_FS+0x5c>)
 8008b34:	f7fe fc22 	bl	800737c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f81f 	bl	8008b84 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b31      	cmp	r3, #49	; 0x31
 8008b4c:	d106      	bne.n	8008b5c <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b54:	480a      	ldr	r0, [pc, #40]	; (8008b80 <CDC_Receive_FS+0x60>)
 8008b56:	f7f9 fb79 	bl	800224c <HAL_GPIO_WritePin>
 8008b5a:	e009      	b.n	8008b70 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b30      	cmp	r3, #48	; 0x30
 8008b62:	d105      	bne.n	8008b70 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008b64:	2200      	movs	r2, #0
 8008b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b6a:	4805      	ldr	r0, [pc, #20]	; (8008b80 <CDC_Receive_FS+0x60>)
 8008b6c:	f7f9 fb6e 	bl	800224c <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008b70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000244 	.word	0x20000244
 8008b80:	40020c00 	.word	0x40020c00

08008b84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e00b      	b.n	8008bc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008baa:	887b      	ldrh	r3, [r7, #2]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4806      	ldr	r0, [pc, #24]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008bb2:	f7fe fb5d 	bl	8007270 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008bb6:	4805      	ldr	r0, [pc, #20]	; (8008bcc <CDC_Transmit_FS+0x48>)
 8008bb8:	f7fe fb9a 	bl	80072f0 <USBD_CDC_TransmitPacket>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000244 	.word	0x20000244

08008bd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
	...

08008bf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2212      	movs	r2, #18
 8008c04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c06:	4b03      	ldr	r3, [pc, #12]	; (8008c14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	200000d8 	.word	0x200000d8

08008c18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2204      	movs	r2, #4
 8008c28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	200000ec 	.word	0x200000ec

08008c3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4907      	ldr	r1, [pc, #28]	; (8008c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c52:	4808      	ldr	r0, [pc, #32]	; (8008c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c54:	f7ff fdda 	bl	800880c <USBD_GetString>
 8008c58:	e004      	b.n	8008c64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4904      	ldr	r1, [pc, #16]	; (8008c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c60:	f7ff fdd4 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20001520 	.word	0x20001520
 8008c74:	08009ee0 	.word	0x08009ee0

08008c78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	4904      	ldr	r1, [pc, #16]	; (8008c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c88:	4804      	ldr	r0, [pc, #16]	; (8008c9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c8a:	f7ff fdbf 	bl	800880c <USBD_GetString>
  return USBD_StrDesc;
 8008c8e:	4b02      	ldr	r3, [pc, #8]	; (8008c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20001520 	.word	0x20001520
 8008c9c:	08009ef8 	.word	0x08009ef8

08008ca0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	221a      	movs	r2, #26
 8008cb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cb2:	f000 f843 	bl	8008d3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cb6:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	200000f0 	.word	0x200000f0

08008cc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d105      	bne.n	8008ce2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	4907      	ldr	r1, [pc, #28]	; (8008cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cda:	4808      	ldr	r0, [pc, #32]	; (8008cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cdc:	f7ff fd96 	bl	800880c <USBD_GetString>
 8008ce0:	e004      	b.n	8008cec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ce6:	4805      	ldr	r0, [pc, #20]	; (8008cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ce8:	f7ff fd90 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cec:	4b02      	ldr	r3, [pc, #8]	; (8008cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001520 	.word	0x20001520
 8008cfc:	08009f0c 	.word	0x08009f0c

08008d00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	6039      	str	r1, [r7, #0]
 8008d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d105      	bne.n	8008d1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4907      	ldr	r1, [pc, #28]	; (8008d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d16:	4808      	ldr	r0, [pc, #32]	; (8008d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d18:	f7ff fd78 	bl	800880c <USBD_GetString>
 8008d1c:	e004      	b.n	8008d28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4904      	ldr	r1, [pc, #16]	; (8008d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d22:	4805      	ldr	r0, [pc, #20]	; (8008d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d24:	f7ff fd72 	bl	800880c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d28:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20001520 	.word	0x20001520
 8008d38:	08009f18 	.word	0x08009f18

08008d3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d42:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <Get_SerialNum+0x44>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d48:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <Get_SerialNum+0x48>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <Get_SerialNum+0x4c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d62:	2208      	movs	r2, #8
 8008d64:	4909      	ldr	r1, [pc, #36]	; (8008d8c <Get_SerialNum+0x50>)
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f814 	bl	8008d94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	4908      	ldr	r1, [pc, #32]	; (8008d90 <Get_SerialNum+0x54>)
 8008d70:	68b8      	ldr	r0, [r7, #8]
 8008d72:	f000 f80f 	bl	8008d94 <IntToUnicode>
  }
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	1fff7a10 	.word	0x1fff7a10
 8008d84:	1fff7a14 	.word	0x1fff7a14
 8008d88:	1fff7a18 	.word	0x1fff7a18
 8008d8c:	200000f2 	.word	0x200000f2
 8008d90:	20000102 	.word	0x20000102

08008d94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]
 8008daa:	e027      	b.n	8008dfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	0f1b      	lsrs	r3, r3, #28
 8008db0:	2b09      	cmp	r3, #9
 8008db2:	d80b      	bhi.n	8008dcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	0f1b      	lsrs	r3, r3, #28
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	440b      	add	r3, r1
 8008dc4:	3230      	adds	r2, #48	; 0x30
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	e00a      	b.n	8008de2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	0f1b      	lsrs	r3, r3, #28
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	440b      	add	r3, r1
 8008ddc:	3237      	adds	r2, #55	; 0x37
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	3301      	adds	r3, #1
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
 8008dfc:	7dfa      	ldrb	r2, [r7, #23]
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3d3      	bcc.n	8008dac <IntToUnicode+0x18>
  }
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
	...

08008e14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	609a      	str	r2, [r3, #8]
 8008e28:	60da      	str	r2, [r3, #12]
 8008e2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e34:	d14b      	bne.n	8008ece <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e36:	2300      	movs	r3, #0
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	4a26      	ldr	r2, [pc, #152]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	6313      	str	r3, [r2, #48]	; 0x30
 8008e46:	4b24      	ldr	r3, [pc, #144]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e64:	230a      	movs	r3, #10
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	481b      	ldr	r0, [pc, #108]	; (8008edc <HAL_PCD_MspInit+0xc8>)
 8008e70:	f7f9 f838 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e82:	2300      	movs	r3, #0
 8008e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e86:	230a      	movs	r3, #10
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e8a:	f107 0314 	add.w	r3, r7, #20
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4812      	ldr	r0, [pc, #72]	; (8008edc <HAL_PCD_MspInit+0xc8>)
 8008e92:	f7f9 f827 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eaa:	4a0b      	ldr	r2, [pc, #44]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_PCD_MspInit+0xc4>)
 8008eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	2043      	movs	r0, #67	; 0x43
 8008ec4:	f7f8 ff45 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ec8:	2043      	movs	r0, #67	; 0x43
 8008eca:	f7f8 ff5e 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40020000 	.word	0x40020000

08008ee0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fb29 	bl	800754e <USBD_LL_SetupStage>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	440b      	add	r3, r1
 8008f24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7fe fb63 	bl	80075f8 <USBD_LL_DataOutStage>
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	334c      	adds	r3, #76	; 0x4c
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f7fe fbfc 	bl	800775e <USBD_LL_DataInStage>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fd30 	bl	80079e2 <USBD_LL_SOF>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f92:	2301      	movs	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
 8008fa2:	e008      	b.n	8008fb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d102      	bne.n	8008fb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
 8008fb0:	e001      	b.n	8008fb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fb2:	f7f7 fdd9 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fbc:	7bfa      	ldrb	r2, [r7, #15]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fcd0 	bl	8007966 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fc78 	bl	80078c2 <USBD_LL_Reset>
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fccb 	bl	8007986 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009002:	f043 0301 	orr.w	r3, r3, #1
 8009006:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <HAL_PCD_SuspendCallback+0x48>)
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	4a03      	ldr	r2, [pc, #12]	; (8009024 <HAL_PCD_SuspendCallback+0x48>)
 8009016:	f043 0306 	orr.w	r3, r3, #6
 800901a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000ed00 	.word	0xe000ed00

08009028 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fcbb 	bl	80079b2 <USBD_LL_Resume>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fd13 	bl	8007a86 <USBD_LL_IsoOUTIncomplete>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800907a:	78fa      	ldrb	r2, [r7, #3]
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fccf 	bl	8007a22 <USBD_LL_IsoINIncomplete>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fd25 	bl	8007aea <USBD_LL_DevConnected>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fd22 	bl	8007b00 <USBD_LL_DevDisconnected>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d13c      	bne.n	800914e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090d4:	4a20      	ldr	r2, [pc, #128]	; (8009158 <USBD_LL_Init+0x94>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1e      	ldr	r2, [pc, #120]	; (8009158 <USBD_LL_Init+0x94>)
 80090e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090e4:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <USBD_LL_Init+0x94>)
 80090e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80090ec:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <USBD_LL_Init+0x94>)
 80090ee:	2204      	movs	r2, #4
 80090f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090f2:	4b19      	ldr	r3, [pc, #100]	; (8009158 <USBD_LL_Init+0x94>)
 80090f4:	2202      	movs	r2, #2
 80090f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090f8:	4b17      	ldr	r3, [pc, #92]	; (8009158 <USBD_LL_Init+0x94>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090fe:	4b16      	ldr	r3, [pc, #88]	; (8009158 <USBD_LL_Init+0x94>)
 8009100:	2202      	movs	r2, #2
 8009102:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009104:	4b14      	ldr	r3, [pc, #80]	; (8009158 <USBD_LL_Init+0x94>)
 8009106:	2200      	movs	r2, #0
 8009108:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800910a:	4b13      	ldr	r3, [pc, #76]	; (8009158 <USBD_LL_Init+0x94>)
 800910c:	2200      	movs	r2, #0
 800910e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009110:	4b11      	ldr	r3, [pc, #68]	; (8009158 <USBD_LL_Init+0x94>)
 8009112:	2200      	movs	r2, #0
 8009114:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009116:	4b10      	ldr	r3, [pc, #64]	; (8009158 <USBD_LL_Init+0x94>)
 8009118:	2200      	movs	r2, #0
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800911c:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <USBD_LL_Init+0x94>)
 800911e:	2200      	movs	r2, #0
 8009120:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009122:	480d      	ldr	r0, [pc, #52]	; (8009158 <USBD_LL_Init+0x94>)
 8009124:	f7f9 f8ab 	bl	800227e <HAL_PCD_Init>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800912e:	f7f7 fd1b 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009132:	2180      	movs	r1, #128	; 0x80
 8009134:	4808      	ldr	r0, [pc, #32]	; (8009158 <USBD_LL_Init+0x94>)
 8009136:	f7fa fb02 	bl	800373e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800913a:	2240      	movs	r2, #64	; 0x40
 800913c:	2100      	movs	r1, #0
 800913e:	4806      	ldr	r0, [pc, #24]	; (8009158 <USBD_LL_Init+0x94>)
 8009140:	f7fa fab6 	bl	80036b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009144:	2280      	movs	r2, #128	; 0x80
 8009146:	2101      	movs	r1, #1
 8009148:	4803      	ldr	r0, [pc, #12]	; (8009158 <USBD_LL_Init+0x94>)
 800914a:	f7fa fab1 	bl	80036b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001720 	.word	0x20001720

0800915c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009172:	4618      	mov	r0, r3
 8009174:	f7f9 f9a0 	bl	80024b8 <HAL_PCD_Start>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f942 	bl	8009408 <USBD_Get_USB_Status>
 8009184:	4603      	mov	r3, r0
 8009186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009188:	7bbb      	ldrb	r3, [r7, #14]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	461a      	mov	r2, r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	70fb      	strb	r3, [r7, #3]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70bb      	strb	r3, [r7, #2]
 80091a8:	4613      	mov	r3, r2
 80091aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091ba:	78bb      	ldrb	r3, [r7, #2]
 80091bc:	883a      	ldrh	r2, [r7, #0]
 80091be:	78f9      	ldrb	r1, [r7, #3]
 80091c0:	f7f9 fe71 	bl	8002ea6 <HAL_PCD_EP_Open>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f91c 	bl	8009408 <USBD_Get_USB_Status>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091f8:	78fa      	ldrb	r2, [r7, #3]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f9 feba 	bl	8002f76 <HAL_PCD_EP_Close>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f8fd 	bl	8009408 <USBD_Get_USB_Status>
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009212:	7bbb      	ldrb	r3, [r7, #14]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f7f9 ff92 	bl	8003164 <HAL_PCD_EP_SetStall>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f8de 	bl	8009408 <USBD_Get_USB_Status>
 800924c:	4603      	mov	r3, r0
 800924e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009250:	7bbb      	ldrb	r3, [r7, #14]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7f9 ffd7 	bl	800322c <HAL_PCD_EP_ClrStall>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f8bf 	bl	8009408 <USBD_Get_USB_Status>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	da0b      	bge.n	80092cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ba:	68f9      	ldr	r1, [r7, #12]
 80092bc:	4613      	mov	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	333e      	adds	r3, #62	; 0x3e
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	e00b      	b.n	80092e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	4613      	mov	r3, r2
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f7f9 fda4 	bl	8002e5c <HAL_PCD_SetAddress>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f874 	bl	8009408 <USBD_Get_USB_Status>
 8009320:	4603      	mov	r3, r0
 8009322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009324:	7bbb      	ldrb	r3, [r7, #14]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	460b      	mov	r3, r1
 800933c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800934c:	7af9      	ldrb	r1, [r7, #11]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f7f9 febd 	bl	80030d0 <HAL_PCD_EP_Transmit>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f853 	bl	8009408 <USBD_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009366:	7dbb      	ldrb	r3, [r7, #22]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	460b      	mov	r3, r1
 800937e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800938e:	7af9      	ldrb	r1, [r7, #11]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	f7f9 fe39 	bl	800300a <HAL_PCD_EP_Receive>
 8009398:	4603      	mov	r3, r0
 800939a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f832 	bl	8009408 <USBD_Get_USB_Status>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f9 fe69 	bl	80030a0 <HAL_PCD_EP_GetRxCount>
 80093ce:	4603      	mov	r3, r0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093e0:	4b03      	ldr	r3, [pc, #12]	; (80093f0 <USBD_static_malloc+0x18>)
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	20001c2c 	.word	0x20001c2c

080093f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d817      	bhi.n	800944c <USBD_Get_USB_Status+0x44>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <USBD_Get_USB_Status+0x1c>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	0800943b 	.word	0x0800943b
 800942c:	08009441 	.word	0x08009441
 8009430:	08009447 	.word	0x08009447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
    break;
 8009438:	e00b      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
    break;
 800943e:	e008      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	e005      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009446:	2303      	movs	r3, #3
 8009448:	73fb      	strb	r3, [r7, #15]
    break;
 800944a:	e002      	b.n	8009452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800944c:	2303      	movs	r3, #3
 800944e:	73fb      	strb	r3, [r7, #15]
    break;
 8009450:	bf00      	nop
  }
  return usb_status;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <siprintf>:
 8009460:	b40e      	push	{r1, r2, r3}
 8009462:	b500      	push	{lr}
 8009464:	b09c      	sub	sp, #112	; 0x70
 8009466:	ab1d      	add	r3, sp, #116	; 0x74
 8009468:	9002      	str	r0, [sp, #8]
 800946a:	9006      	str	r0, [sp, #24]
 800946c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009470:	4809      	ldr	r0, [pc, #36]	; (8009498 <siprintf+0x38>)
 8009472:	9107      	str	r1, [sp, #28]
 8009474:	9104      	str	r1, [sp, #16]
 8009476:	4909      	ldr	r1, [pc, #36]	; (800949c <siprintf+0x3c>)
 8009478:	f853 2b04 	ldr.w	r2, [r3], #4
 800947c:	9105      	str	r1, [sp, #20]
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	a902      	add	r1, sp, #8
 8009484:	f000 f992 	bl	80097ac <_svfiprintf_r>
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	b01c      	add	sp, #112	; 0x70
 8009490:	f85d eb04 	ldr.w	lr, [sp], #4
 8009494:	b003      	add	sp, #12
 8009496:	4770      	bx	lr
 8009498:	20000158 	.word	0x20000158
 800949c:	ffff0208 	.word	0xffff0208

080094a0 <memset>:
 80094a0:	4402      	add	r2, r0
 80094a2:	4603      	mov	r3, r0
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d100      	bne.n	80094aa <memset+0xa>
 80094a8:	4770      	bx	lr
 80094aa:	f803 1b01 	strb.w	r1, [r3], #1
 80094ae:	e7f9      	b.n	80094a4 <memset+0x4>

080094b0 <__errno>:
 80094b0:	4b01      	ldr	r3, [pc, #4]	; (80094b8 <__errno+0x8>)
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	20000158 	.word	0x20000158

080094bc <__libc_init_array>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4d0d      	ldr	r5, [pc, #52]	; (80094f4 <__libc_init_array+0x38>)
 80094c0:	4c0d      	ldr	r4, [pc, #52]	; (80094f8 <__libc_init_array+0x3c>)
 80094c2:	1b64      	subs	r4, r4, r5
 80094c4:	10a4      	asrs	r4, r4, #2
 80094c6:	2600      	movs	r6, #0
 80094c8:	42a6      	cmp	r6, r4
 80094ca:	d109      	bne.n	80094e0 <__libc_init_array+0x24>
 80094cc:	4d0b      	ldr	r5, [pc, #44]	; (80094fc <__libc_init_array+0x40>)
 80094ce:	4c0c      	ldr	r4, [pc, #48]	; (8009500 <__libc_init_array+0x44>)
 80094d0:	f000 fc6a 	bl	8009da8 <_init>
 80094d4:	1b64      	subs	r4, r4, r5
 80094d6:	10a4      	asrs	r4, r4, #2
 80094d8:	2600      	movs	r6, #0
 80094da:	42a6      	cmp	r6, r4
 80094dc:	d105      	bne.n	80094ea <__libc_init_array+0x2e>
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e4:	4798      	blx	r3
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7ee      	b.n	80094c8 <__libc_init_array+0xc>
 80094ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ee:	4798      	blx	r3
 80094f0:	3601      	adds	r6, #1
 80094f2:	e7f2      	b.n	80094da <__libc_init_array+0x1e>
 80094f4:	08009f7c 	.word	0x08009f7c
 80094f8:	08009f7c 	.word	0x08009f7c
 80094fc:	08009f7c 	.word	0x08009f7c
 8009500:	08009f80 	.word	0x08009f80

08009504 <__retarget_lock_acquire_recursive>:
 8009504:	4770      	bx	lr

08009506 <__retarget_lock_release_recursive>:
 8009506:	4770      	bx	lr

08009508 <_free_r>:
 8009508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800950a:	2900      	cmp	r1, #0
 800950c:	d044      	beq.n	8009598 <_free_r+0x90>
 800950e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009512:	9001      	str	r0, [sp, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f1a1 0404 	sub.w	r4, r1, #4
 800951a:	bfb8      	it	lt
 800951c:	18e4      	addlt	r4, r4, r3
 800951e:	f000 f8df 	bl	80096e0 <__malloc_lock>
 8009522:	4a1e      	ldr	r2, [pc, #120]	; (800959c <_free_r+0x94>)
 8009524:	9801      	ldr	r0, [sp, #4]
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	b933      	cbnz	r3, 8009538 <_free_r+0x30>
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	6014      	str	r4, [r2, #0]
 800952e:	b003      	add	sp, #12
 8009530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009534:	f000 b8da 	b.w	80096ec <__malloc_unlock>
 8009538:	42a3      	cmp	r3, r4
 800953a:	d908      	bls.n	800954e <_free_r+0x46>
 800953c:	6825      	ldr	r5, [r4, #0]
 800953e:	1961      	adds	r1, r4, r5
 8009540:	428b      	cmp	r3, r1
 8009542:	bf01      	itttt	eq
 8009544:	6819      	ldreq	r1, [r3, #0]
 8009546:	685b      	ldreq	r3, [r3, #4]
 8009548:	1949      	addeq	r1, r1, r5
 800954a:	6021      	streq	r1, [r4, #0]
 800954c:	e7ed      	b.n	800952a <_free_r+0x22>
 800954e:	461a      	mov	r2, r3
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	b10b      	cbz	r3, 8009558 <_free_r+0x50>
 8009554:	42a3      	cmp	r3, r4
 8009556:	d9fa      	bls.n	800954e <_free_r+0x46>
 8009558:	6811      	ldr	r1, [r2, #0]
 800955a:	1855      	adds	r5, r2, r1
 800955c:	42a5      	cmp	r5, r4
 800955e:	d10b      	bne.n	8009578 <_free_r+0x70>
 8009560:	6824      	ldr	r4, [r4, #0]
 8009562:	4421      	add	r1, r4
 8009564:	1854      	adds	r4, r2, r1
 8009566:	42a3      	cmp	r3, r4
 8009568:	6011      	str	r1, [r2, #0]
 800956a:	d1e0      	bne.n	800952e <_free_r+0x26>
 800956c:	681c      	ldr	r4, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	6053      	str	r3, [r2, #4]
 8009572:	440c      	add	r4, r1
 8009574:	6014      	str	r4, [r2, #0]
 8009576:	e7da      	b.n	800952e <_free_r+0x26>
 8009578:	d902      	bls.n	8009580 <_free_r+0x78>
 800957a:	230c      	movs	r3, #12
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	e7d6      	b.n	800952e <_free_r+0x26>
 8009580:	6825      	ldr	r5, [r4, #0]
 8009582:	1961      	adds	r1, r4, r5
 8009584:	428b      	cmp	r3, r1
 8009586:	bf04      	itt	eq
 8009588:	6819      	ldreq	r1, [r3, #0]
 800958a:	685b      	ldreq	r3, [r3, #4]
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	bf04      	itt	eq
 8009590:	1949      	addeq	r1, r1, r5
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	6054      	str	r4, [r2, #4]
 8009596:	e7ca      	b.n	800952e <_free_r+0x26>
 8009598:	b003      	add	sp, #12
 800959a:	bd30      	pop	{r4, r5, pc}
 800959c:	20001f8c 	.word	0x20001f8c

080095a0 <sbrk_aligned>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	4e0e      	ldr	r6, [pc, #56]	; (80095dc <sbrk_aligned+0x3c>)
 80095a4:	460c      	mov	r4, r1
 80095a6:	6831      	ldr	r1, [r6, #0]
 80095a8:	4605      	mov	r5, r0
 80095aa:	b911      	cbnz	r1, 80095b2 <sbrk_aligned+0x12>
 80095ac:	f000 fba6 	bl	8009cfc <_sbrk_r>
 80095b0:	6030      	str	r0, [r6, #0]
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 fba1 	bl	8009cfc <_sbrk_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d00a      	beq.n	80095d4 <sbrk_aligned+0x34>
 80095be:	1cc4      	adds	r4, r0, #3
 80095c0:	f024 0403 	bic.w	r4, r4, #3
 80095c4:	42a0      	cmp	r0, r4
 80095c6:	d007      	beq.n	80095d8 <sbrk_aligned+0x38>
 80095c8:	1a21      	subs	r1, r4, r0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 fb96 	bl	8009cfc <_sbrk_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d101      	bne.n	80095d8 <sbrk_aligned+0x38>
 80095d4:	f04f 34ff 	mov.w	r4, #4294967295
 80095d8:	4620      	mov	r0, r4
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	20001f90 	.word	0x20001f90

080095e0 <_malloc_r>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	1ccd      	adds	r5, r1, #3
 80095e6:	f025 0503 	bic.w	r5, r5, #3
 80095ea:	3508      	adds	r5, #8
 80095ec:	2d0c      	cmp	r5, #12
 80095ee:	bf38      	it	cc
 80095f0:	250c      	movcc	r5, #12
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	4607      	mov	r7, r0
 80095f6:	db01      	blt.n	80095fc <_malloc_r+0x1c>
 80095f8:	42a9      	cmp	r1, r5
 80095fa:	d905      	bls.n	8009608 <_malloc_r+0x28>
 80095fc:	230c      	movs	r3, #12
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	2600      	movs	r6, #0
 8009602:	4630      	mov	r0, r6
 8009604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009608:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096dc <_malloc_r+0xfc>
 800960c:	f000 f868 	bl	80096e0 <__malloc_lock>
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	461c      	mov	r4, r3
 8009616:	bb5c      	cbnz	r4, 8009670 <_malloc_r+0x90>
 8009618:	4629      	mov	r1, r5
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff ffc0 	bl	80095a0 <sbrk_aligned>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	4604      	mov	r4, r0
 8009624:	d155      	bne.n	80096d2 <_malloc_r+0xf2>
 8009626:	f8d8 4000 	ldr.w	r4, [r8]
 800962a:	4626      	mov	r6, r4
 800962c:	2e00      	cmp	r6, #0
 800962e:	d145      	bne.n	80096bc <_malloc_r+0xdc>
 8009630:	2c00      	cmp	r4, #0
 8009632:	d048      	beq.n	80096c6 <_malloc_r+0xe6>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	4631      	mov	r1, r6
 8009638:	4638      	mov	r0, r7
 800963a:	eb04 0903 	add.w	r9, r4, r3
 800963e:	f000 fb5d 	bl	8009cfc <_sbrk_r>
 8009642:	4581      	cmp	r9, r0
 8009644:	d13f      	bne.n	80096c6 <_malloc_r+0xe6>
 8009646:	6821      	ldr	r1, [r4, #0]
 8009648:	1a6d      	subs	r5, r5, r1
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa7 	bl	80095a0 <sbrk_aligned>
 8009652:	3001      	adds	r0, #1
 8009654:	d037      	beq.n	80096c6 <_malloc_r+0xe6>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	442b      	add	r3, r5
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	f8d8 3000 	ldr.w	r3, [r8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d038      	beq.n	80096d6 <_malloc_r+0xf6>
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	42a2      	cmp	r2, r4
 8009668:	d12b      	bne.n	80096c2 <_malloc_r+0xe2>
 800966a:	2200      	movs	r2, #0
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	e00f      	b.n	8009690 <_malloc_r+0xb0>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	d41f      	bmi.n	80096b6 <_malloc_r+0xd6>
 8009676:	2a0b      	cmp	r2, #11
 8009678:	d917      	bls.n	80096aa <_malloc_r+0xca>
 800967a:	1961      	adds	r1, r4, r5
 800967c:	42a3      	cmp	r3, r4
 800967e:	6025      	str	r5, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	6059      	strne	r1, [r3, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	bf08      	it	eq
 8009688:	f8c8 1000 	streq.w	r1, [r8]
 800968c:	5162      	str	r2, [r4, r5]
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	4638      	mov	r0, r7
 8009692:	f104 060b 	add.w	r6, r4, #11
 8009696:	f000 f829 	bl	80096ec <__malloc_unlock>
 800969a:	f026 0607 	bic.w	r6, r6, #7
 800969e:	1d23      	adds	r3, r4, #4
 80096a0:	1af2      	subs	r2, r6, r3
 80096a2:	d0ae      	beq.n	8009602 <_malloc_r+0x22>
 80096a4:	1b9b      	subs	r3, r3, r6
 80096a6:	50a3      	str	r3, [r4, r2]
 80096a8:	e7ab      	b.n	8009602 <_malloc_r+0x22>
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	6862      	ldr	r2, [r4, #4]
 80096ae:	d1dd      	bne.n	800966c <_malloc_r+0x8c>
 80096b0:	f8c8 2000 	str.w	r2, [r8]
 80096b4:	e7ec      	b.n	8009690 <_malloc_r+0xb0>
 80096b6:	4623      	mov	r3, r4
 80096b8:	6864      	ldr	r4, [r4, #4]
 80096ba:	e7ac      	b.n	8009616 <_malloc_r+0x36>
 80096bc:	4634      	mov	r4, r6
 80096be:	6876      	ldr	r6, [r6, #4]
 80096c0:	e7b4      	b.n	800962c <_malloc_r+0x4c>
 80096c2:	4613      	mov	r3, r2
 80096c4:	e7cc      	b.n	8009660 <_malloc_r+0x80>
 80096c6:	230c      	movs	r3, #12
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	4638      	mov	r0, r7
 80096cc:	f000 f80e 	bl	80096ec <__malloc_unlock>
 80096d0:	e797      	b.n	8009602 <_malloc_r+0x22>
 80096d2:	6025      	str	r5, [r4, #0]
 80096d4:	e7dc      	b.n	8009690 <_malloc_r+0xb0>
 80096d6:	605b      	str	r3, [r3, #4]
 80096d8:	deff      	udf	#255	; 0xff
 80096da:	bf00      	nop
 80096dc:	20001f8c 	.word	0x20001f8c

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__malloc_lock+0x8>)
 80096e2:	f7ff bf0f 	b.w	8009504 <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	20001f88 	.word	0x20001f88

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f7ff bf0a 	b.w	8009506 <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	20001f88 	.word	0x20001f88

080096f8 <__ssputs_r>:
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	688e      	ldr	r6, [r1, #8]
 80096fe:	461f      	mov	r7, r3
 8009700:	42be      	cmp	r6, r7
 8009702:	680b      	ldr	r3, [r1, #0]
 8009704:	4682      	mov	sl, r0
 8009706:	460c      	mov	r4, r1
 8009708:	4690      	mov	r8, r2
 800970a:	d82c      	bhi.n	8009766 <__ssputs_r+0x6e>
 800970c:	898a      	ldrh	r2, [r1, #12]
 800970e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009712:	d026      	beq.n	8009762 <__ssputs_r+0x6a>
 8009714:	6965      	ldr	r5, [r4, #20]
 8009716:	6909      	ldr	r1, [r1, #16]
 8009718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800971c:	eba3 0901 	sub.w	r9, r3, r1
 8009720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009724:	1c7b      	adds	r3, r7, #1
 8009726:	444b      	add	r3, r9
 8009728:	106d      	asrs	r5, r5, #1
 800972a:	429d      	cmp	r5, r3
 800972c:	bf38      	it	cc
 800972e:	461d      	movcc	r5, r3
 8009730:	0553      	lsls	r3, r2, #21
 8009732:	d527      	bpl.n	8009784 <__ssputs_r+0x8c>
 8009734:	4629      	mov	r1, r5
 8009736:	f7ff ff53 	bl	80095e0 <_malloc_r>
 800973a:	4606      	mov	r6, r0
 800973c:	b360      	cbz	r0, 8009798 <__ssputs_r+0xa0>
 800973e:	6921      	ldr	r1, [r4, #16]
 8009740:	464a      	mov	r2, r9
 8009742:	f000 faeb 	bl	8009d1c <memcpy>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800974c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	6126      	str	r6, [r4, #16]
 8009754:	6165      	str	r5, [r4, #20]
 8009756:	444e      	add	r6, r9
 8009758:	eba5 0509 	sub.w	r5, r5, r9
 800975c:	6026      	str	r6, [r4, #0]
 800975e:	60a5      	str	r5, [r4, #8]
 8009760:	463e      	mov	r6, r7
 8009762:	42be      	cmp	r6, r7
 8009764:	d900      	bls.n	8009768 <__ssputs_r+0x70>
 8009766:	463e      	mov	r6, r7
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	4632      	mov	r2, r6
 800976c:	4641      	mov	r1, r8
 800976e:	f000 faab 	bl	8009cc8 <memmove>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	1b9b      	subs	r3, r3, r6
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	4433      	add	r3, r6
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	2000      	movs	r0, #0
 8009780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009784:	462a      	mov	r2, r5
 8009786:	f000 fad7 	bl	8009d38 <_realloc_r>
 800978a:	4606      	mov	r6, r0
 800978c:	2800      	cmp	r0, #0
 800978e:	d1e0      	bne.n	8009752 <__ssputs_r+0x5a>
 8009790:	6921      	ldr	r1, [r4, #16]
 8009792:	4650      	mov	r0, sl
 8009794:	f7ff feb8 	bl	8009508 <_free_r>
 8009798:	230c      	movs	r3, #12
 800979a:	f8ca 3000 	str.w	r3, [sl]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	f04f 30ff 	mov.w	r0, #4294967295
 80097aa:	e7e9      	b.n	8009780 <__ssputs_r+0x88>

080097ac <_svfiprintf_r>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	4698      	mov	r8, r3
 80097b2:	898b      	ldrh	r3, [r1, #12]
 80097b4:	061b      	lsls	r3, r3, #24
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	4607      	mov	r7, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	4614      	mov	r4, r2
 80097be:	d50e      	bpl.n	80097de <_svfiprintf_r+0x32>
 80097c0:	690b      	ldr	r3, [r1, #16]
 80097c2:	b963      	cbnz	r3, 80097de <_svfiprintf_r+0x32>
 80097c4:	2140      	movs	r1, #64	; 0x40
 80097c6:	f7ff ff0b 	bl	80095e0 <_malloc_r>
 80097ca:	6028      	str	r0, [r5, #0]
 80097cc:	6128      	str	r0, [r5, #16]
 80097ce:	b920      	cbnz	r0, 80097da <_svfiprintf_r+0x2e>
 80097d0:	230c      	movs	r3, #12
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e0d0      	b.n	800997c <_svfiprintf_r+0x1d0>
 80097da:	2340      	movs	r3, #64	; 0x40
 80097dc:	616b      	str	r3, [r5, #20]
 80097de:	2300      	movs	r3, #0
 80097e0:	9309      	str	r3, [sp, #36]	; 0x24
 80097e2:	2320      	movs	r3, #32
 80097e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ec:	2330      	movs	r3, #48	; 0x30
 80097ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009994 <_svfiprintf_r+0x1e8>
 80097f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f6:	f04f 0901 	mov.w	r9, #1
 80097fa:	4623      	mov	r3, r4
 80097fc:	469a      	mov	sl, r3
 80097fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009802:	b10a      	cbz	r2, 8009808 <_svfiprintf_r+0x5c>
 8009804:	2a25      	cmp	r2, #37	; 0x25
 8009806:	d1f9      	bne.n	80097fc <_svfiprintf_r+0x50>
 8009808:	ebba 0b04 	subs.w	fp, sl, r4
 800980c:	d00b      	beq.n	8009826 <_svfiprintf_r+0x7a>
 800980e:	465b      	mov	r3, fp
 8009810:	4622      	mov	r2, r4
 8009812:	4629      	mov	r1, r5
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff ff6f 	bl	80096f8 <__ssputs_r>
 800981a:	3001      	adds	r0, #1
 800981c:	f000 80a9 	beq.w	8009972 <_svfiprintf_r+0x1c6>
 8009820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009822:	445a      	add	r2, fp
 8009824:	9209      	str	r2, [sp, #36]	; 0x24
 8009826:	f89a 3000 	ldrb.w	r3, [sl]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80a1 	beq.w	8009972 <_svfiprintf_r+0x1c6>
 8009830:	2300      	movs	r3, #0
 8009832:	f04f 32ff 	mov.w	r2, #4294967295
 8009836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800983a:	f10a 0a01 	add.w	sl, sl, #1
 800983e:	9304      	str	r3, [sp, #16]
 8009840:	9307      	str	r3, [sp, #28]
 8009842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009846:	931a      	str	r3, [sp, #104]	; 0x68
 8009848:	4654      	mov	r4, sl
 800984a:	2205      	movs	r2, #5
 800984c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009850:	4850      	ldr	r0, [pc, #320]	; (8009994 <_svfiprintf_r+0x1e8>)
 8009852:	f7f6 fcc5 	bl	80001e0 <memchr>
 8009856:	9a04      	ldr	r2, [sp, #16]
 8009858:	b9d8      	cbnz	r0, 8009892 <_svfiprintf_r+0xe6>
 800985a:	06d0      	lsls	r0, r2, #27
 800985c:	bf44      	itt	mi
 800985e:	2320      	movmi	r3, #32
 8009860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009864:	0711      	lsls	r1, r2, #28
 8009866:	bf44      	itt	mi
 8009868:	232b      	movmi	r3, #43	; 0x2b
 800986a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986e:	f89a 3000 	ldrb.w	r3, [sl]
 8009872:	2b2a      	cmp	r3, #42	; 0x2a
 8009874:	d015      	beq.n	80098a2 <_svfiprintf_r+0xf6>
 8009876:	9a07      	ldr	r2, [sp, #28]
 8009878:	4654      	mov	r4, sl
 800987a:	2000      	movs	r0, #0
 800987c:	f04f 0c0a 	mov.w	ip, #10
 8009880:	4621      	mov	r1, r4
 8009882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009886:	3b30      	subs	r3, #48	; 0x30
 8009888:	2b09      	cmp	r3, #9
 800988a:	d94d      	bls.n	8009928 <_svfiprintf_r+0x17c>
 800988c:	b1b0      	cbz	r0, 80098bc <_svfiprintf_r+0x110>
 800988e:	9207      	str	r2, [sp, #28]
 8009890:	e014      	b.n	80098bc <_svfiprintf_r+0x110>
 8009892:	eba0 0308 	sub.w	r3, r0, r8
 8009896:	fa09 f303 	lsl.w	r3, r9, r3
 800989a:	4313      	orrs	r3, r2
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	46a2      	mov	sl, r4
 80098a0:	e7d2      	b.n	8009848 <_svfiprintf_r+0x9c>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	1d19      	adds	r1, r3, #4
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	9103      	str	r1, [sp, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfbb      	ittet	lt
 80098ae:	425b      	neglt	r3, r3
 80098b0:	f042 0202 	orrlt.w	r2, r2, #2
 80098b4:	9307      	strge	r3, [sp, #28]
 80098b6:	9307      	strlt	r3, [sp, #28]
 80098b8:	bfb8      	it	lt
 80098ba:	9204      	strlt	r2, [sp, #16]
 80098bc:	7823      	ldrb	r3, [r4, #0]
 80098be:	2b2e      	cmp	r3, #46	; 0x2e
 80098c0:	d10c      	bne.n	80098dc <_svfiprintf_r+0x130>
 80098c2:	7863      	ldrb	r3, [r4, #1]
 80098c4:	2b2a      	cmp	r3, #42	; 0x2a
 80098c6:	d134      	bne.n	8009932 <_svfiprintf_r+0x186>
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	1d1a      	adds	r2, r3, #4
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	9203      	str	r2, [sp, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bfb8      	it	lt
 80098d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d8:	3402      	adds	r4, #2
 80098da:	9305      	str	r3, [sp, #20]
 80098dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099a4 <_svfiprintf_r+0x1f8>
 80098e0:	7821      	ldrb	r1, [r4, #0]
 80098e2:	2203      	movs	r2, #3
 80098e4:	4650      	mov	r0, sl
 80098e6:	f7f6 fc7b 	bl	80001e0 <memchr>
 80098ea:	b138      	cbz	r0, 80098fc <_svfiprintf_r+0x150>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	eba0 000a 	sub.w	r0, r0, sl
 80098f2:	2240      	movs	r2, #64	; 0x40
 80098f4:	4082      	lsls	r2, r0
 80098f6:	4313      	orrs	r3, r2
 80098f8:	3401      	adds	r4, #1
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009900:	4825      	ldr	r0, [pc, #148]	; (8009998 <_svfiprintf_r+0x1ec>)
 8009902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009906:	2206      	movs	r2, #6
 8009908:	f7f6 fc6a 	bl	80001e0 <memchr>
 800990c:	2800      	cmp	r0, #0
 800990e:	d038      	beq.n	8009982 <_svfiprintf_r+0x1d6>
 8009910:	4b22      	ldr	r3, [pc, #136]	; (800999c <_svfiprintf_r+0x1f0>)
 8009912:	bb1b      	cbnz	r3, 800995c <_svfiprintf_r+0x1b0>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	3307      	adds	r3, #7
 8009918:	f023 0307 	bic.w	r3, r3, #7
 800991c:	3308      	adds	r3, #8
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	4433      	add	r3, r6
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	e768      	b.n	80097fa <_svfiprintf_r+0x4e>
 8009928:	fb0c 3202 	mla	r2, ip, r2, r3
 800992c:	460c      	mov	r4, r1
 800992e:	2001      	movs	r0, #1
 8009930:	e7a6      	b.n	8009880 <_svfiprintf_r+0xd4>
 8009932:	2300      	movs	r3, #0
 8009934:	3401      	adds	r4, #1
 8009936:	9305      	str	r3, [sp, #20]
 8009938:	4619      	mov	r1, r3
 800993a:	f04f 0c0a 	mov.w	ip, #10
 800993e:	4620      	mov	r0, r4
 8009940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009944:	3a30      	subs	r2, #48	; 0x30
 8009946:	2a09      	cmp	r2, #9
 8009948:	d903      	bls.n	8009952 <_svfiprintf_r+0x1a6>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0c6      	beq.n	80098dc <_svfiprintf_r+0x130>
 800994e:	9105      	str	r1, [sp, #20]
 8009950:	e7c4      	b.n	80098dc <_svfiprintf_r+0x130>
 8009952:	fb0c 2101 	mla	r1, ip, r1, r2
 8009956:	4604      	mov	r4, r0
 8009958:	2301      	movs	r3, #1
 800995a:	e7f0      	b.n	800993e <_svfiprintf_r+0x192>
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	462a      	mov	r2, r5
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <_svfiprintf_r+0x1f4>)
 8009964:	a904      	add	r1, sp, #16
 8009966:	4638      	mov	r0, r7
 8009968:	f3af 8000 	nop.w
 800996c:	1c42      	adds	r2, r0, #1
 800996e:	4606      	mov	r6, r0
 8009970:	d1d6      	bne.n	8009920 <_svfiprintf_r+0x174>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	065b      	lsls	r3, r3, #25
 8009976:	f53f af2d 	bmi.w	80097d4 <_svfiprintf_r+0x28>
 800997a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800997c:	b01d      	add	sp, #116	; 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	ab03      	add	r3, sp, #12
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	462a      	mov	r2, r5
 8009988:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <_svfiprintf_r+0x1f4>)
 800998a:	a904      	add	r1, sp, #16
 800998c:	4638      	mov	r0, r7
 800998e:	f000 f879 	bl	8009a84 <_printf_i>
 8009992:	e7eb      	b.n	800996c <_svfiprintf_r+0x1c0>
 8009994:	08009f40 	.word	0x08009f40
 8009998:	08009f4a 	.word	0x08009f4a
 800999c:	00000000 	.word	0x00000000
 80099a0:	080096f9 	.word	0x080096f9
 80099a4:	08009f46 	.word	0x08009f46

080099a8 <_printf_common>:
 80099a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ac:	4616      	mov	r6, r2
 80099ae:	4699      	mov	r9, r3
 80099b0:	688a      	ldr	r2, [r1, #8]
 80099b2:	690b      	ldr	r3, [r1, #16]
 80099b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	bfb8      	it	lt
 80099bc:	4613      	movlt	r3, r2
 80099be:	6033      	str	r3, [r6, #0]
 80099c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099c4:	4607      	mov	r7, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	b10a      	cbz	r2, 80099ce <_printf_common+0x26>
 80099ca:	3301      	adds	r3, #1
 80099cc:	6033      	str	r3, [r6, #0]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	0699      	lsls	r1, r3, #26
 80099d2:	bf42      	ittt	mi
 80099d4:	6833      	ldrmi	r3, [r6, #0]
 80099d6:	3302      	addmi	r3, #2
 80099d8:	6033      	strmi	r3, [r6, #0]
 80099da:	6825      	ldr	r5, [r4, #0]
 80099dc:	f015 0506 	ands.w	r5, r5, #6
 80099e0:	d106      	bne.n	80099f0 <_printf_common+0x48>
 80099e2:	f104 0a19 	add.w	sl, r4, #25
 80099e6:	68e3      	ldr	r3, [r4, #12]
 80099e8:	6832      	ldr	r2, [r6, #0]
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	dc26      	bgt.n	8009a3e <_printf_common+0x96>
 80099f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099f4:	1e13      	subs	r3, r2, #0
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	bf18      	it	ne
 80099fa:	2301      	movne	r3, #1
 80099fc:	0692      	lsls	r2, r2, #26
 80099fe:	d42b      	bmi.n	8009a58 <_printf_common+0xb0>
 8009a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a04:	4649      	mov	r1, r9
 8009a06:	4638      	mov	r0, r7
 8009a08:	47c0      	blx	r8
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d01e      	beq.n	8009a4c <_printf_common+0xa4>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	6922      	ldr	r2, [r4, #16]
 8009a12:	f003 0306 	and.w	r3, r3, #6
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	bf02      	ittt	eq
 8009a1a:	68e5      	ldreq	r5, [r4, #12]
 8009a1c:	6833      	ldreq	r3, [r6, #0]
 8009a1e:	1aed      	subeq	r5, r5, r3
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	bf0c      	ite	eq
 8009a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a28:	2500      	movne	r5, #0
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	bfc4      	itt	gt
 8009a2e:	1a9b      	subgt	r3, r3, r2
 8009a30:	18ed      	addgt	r5, r5, r3
 8009a32:	2600      	movs	r6, #0
 8009a34:	341a      	adds	r4, #26
 8009a36:	42b5      	cmp	r5, r6
 8009a38:	d11a      	bne.n	8009a70 <_printf_common+0xc8>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e008      	b.n	8009a50 <_printf_common+0xa8>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4652      	mov	r2, sl
 8009a42:	4649      	mov	r1, r9
 8009a44:	4638      	mov	r0, r7
 8009a46:	47c0      	blx	r8
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d103      	bne.n	8009a54 <_printf_common+0xac>
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a54:	3501      	adds	r5, #1
 8009a56:	e7c6      	b.n	80099e6 <_printf_common+0x3e>
 8009a58:	18e1      	adds	r1, r4, r3
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	2030      	movs	r0, #48	; 0x30
 8009a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a62:	4422      	add	r2, r4
 8009a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a6c:	3302      	adds	r3, #2
 8009a6e:	e7c7      	b.n	8009a00 <_printf_common+0x58>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4622      	mov	r2, r4
 8009a74:	4649      	mov	r1, r9
 8009a76:	4638      	mov	r0, r7
 8009a78:	47c0      	blx	r8
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d0e6      	beq.n	8009a4c <_printf_common+0xa4>
 8009a7e:	3601      	adds	r6, #1
 8009a80:	e7d9      	b.n	8009a36 <_printf_common+0x8e>
	...

08009a84 <_printf_i>:
 8009a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	7e0f      	ldrb	r7, [r1, #24]
 8009a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a8c:	2f78      	cmp	r7, #120	; 0x78
 8009a8e:	4691      	mov	r9, r2
 8009a90:	4680      	mov	r8, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	469a      	mov	sl, r3
 8009a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a9a:	d807      	bhi.n	8009aac <_printf_i+0x28>
 8009a9c:	2f62      	cmp	r7, #98	; 0x62
 8009a9e:	d80a      	bhi.n	8009ab6 <_printf_i+0x32>
 8009aa0:	2f00      	cmp	r7, #0
 8009aa2:	f000 80d4 	beq.w	8009c4e <_printf_i+0x1ca>
 8009aa6:	2f58      	cmp	r7, #88	; 0x58
 8009aa8:	f000 80c0 	beq.w	8009c2c <_printf_i+0x1a8>
 8009aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ab4:	e03a      	b.n	8009b2c <_printf_i+0xa8>
 8009ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aba:	2b15      	cmp	r3, #21
 8009abc:	d8f6      	bhi.n	8009aac <_printf_i+0x28>
 8009abe:	a101      	add	r1, pc, #4	; (adr r1, 8009ac4 <_printf_i+0x40>)
 8009ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ac4:	08009b1d 	.word	0x08009b1d
 8009ac8:	08009b31 	.word	0x08009b31
 8009acc:	08009aad 	.word	0x08009aad
 8009ad0:	08009aad 	.word	0x08009aad
 8009ad4:	08009aad 	.word	0x08009aad
 8009ad8:	08009aad 	.word	0x08009aad
 8009adc:	08009b31 	.word	0x08009b31
 8009ae0:	08009aad 	.word	0x08009aad
 8009ae4:	08009aad 	.word	0x08009aad
 8009ae8:	08009aad 	.word	0x08009aad
 8009aec:	08009aad 	.word	0x08009aad
 8009af0:	08009c35 	.word	0x08009c35
 8009af4:	08009b5d 	.word	0x08009b5d
 8009af8:	08009bef 	.word	0x08009bef
 8009afc:	08009aad 	.word	0x08009aad
 8009b00:	08009aad 	.word	0x08009aad
 8009b04:	08009c57 	.word	0x08009c57
 8009b08:	08009aad 	.word	0x08009aad
 8009b0c:	08009b5d 	.word	0x08009b5d
 8009b10:	08009aad 	.word	0x08009aad
 8009b14:	08009aad 	.word	0x08009aad
 8009b18:	08009bf7 	.word	0x08009bf7
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	602a      	str	r2, [r5, #0]
 8009b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e09f      	b.n	8009c70 <_printf_i+0x1ec>
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	0607      	lsls	r7, r0, #24
 8009b36:	f103 0104 	add.w	r1, r3, #4
 8009b3a:	6029      	str	r1, [r5, #0]
 8009b3c:	d501      	bpl.n	8009b42 <_printf_i+0xbe>
 8009b3e:	681e      	ldr	r6, [r3, #0]
 8009b40:	e003      	b.n	8009b4a <_printf_i+0xc6>
 8009b42:	0646      	lsls	r6, r0, #25
 8009b44:	d5fb      	bpl.n	8009b3e <_printf_i+0xba>
 8009b46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	da03      	bge.n	8009b56 <_printf_i+0xd2>
 8009b4e:	232d      	movs	r3, #45	; 0x2d
 8009b50:	4276      	negs	r6, r6
 8009b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b56:	485a      	ldr	r0, [pc, #360]	; (8009cc0 <_printf_i+0x23c>)
 8009b58:	230a      	movs	r3, #10
 8009b5a:	e012      	b.n	8009b82 <_printf_i+0xfe>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	6820      	ldr	r0, [r4, #0]
 8009b60:	1d19      	adds	r1, r3, #4
 8009b62:	6029      	str	r1, [r5, #0]
 8009b64:	0605      	lsls	r5, r0, #24
 8009b66:	d501      	bpl.n	8009b6c <_printf_i+0xe8>
 8009b68:	681e      	ldr	r6, [r3, #0]
 8009b6a:	e002      	b.n	8009b72 <_printf_i+0xee>
 8009b6c:	0641      	lsls	r1, r0, #25
 8009b6e:	d5fb      	bpl.n	8009b68 <_printf_i+0xe4>
 8009b70:	881e      	ldrh	r6, [r3, #0]
 8009b72:	4853      	ldr	r0, [pc, #332]	; (8009cc0 <_printf_i+0x23c>)
 8009b74:	2f6f      	cmp	r7, #111	; 0x6f
 8009b76:	bf0c      	ite	eq
 8009b78:	2308      	moveq	r3, #8
 8009b7a:	230a      	movne	r3, #10
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b82:	6865      	ldr	r5, [r4, #4]
 8009b84:	60a5      	str	r5, [r4, #8]
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	bfa2      	ittt	ge
 8009b8a:	6821      	ldrge	r1, [r4, #0]
 8009b8c:	f021 0104 	bicge.w	r1, r1, #4
 8009b90:	6021      	strge	r1, [r4, #0]
 8009b92:	b90e      	cbnz	r6, 8009b98 <_printf_i+0x114>
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	d04b      	beq.n	8009c30 <_printf_i+0x1ac>
 8009b98:	4615      	mov	r5, r2
 8009b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009ba2:	5dc7      	ldrb	r7, [r0, r7]
 8009ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ba8:	4637      	mov	r7, r6
 8009baa:	42bb      	cmp	r3, r7
 8009bac:	460e      	mov	r6, r1
 8009bae:	d9f4      	bls.n	8009b9a <_printf_i+0x116>
 8009bb0:	2b08      	cmp	r3, #8
 8009bb2:	d10b      	bne.n	8009bcc <_printf_i+0x148>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	07de      	lsls	r6, r3, #31
 8009bb8:	d508      	bpl.n	8009bcc <_printf_i+0x148>
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	6861      	ldr	r1, [r4, #4]
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	bfde      	ittt	le
 8009bc2:	2330      	movle	r3, #48	; 0x30
 8009bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bcc:	1b52      	subs	r2, r2, r5
 8009bce:	6122      	str	r2, [r4, #16]
 8009bd0:	f8cd a000 	str.w	sl, [sp]
 8009bd4:	464b      	mov	r3, r9
 8009bd6:	aa03      	add	r2, sp, #12
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4640      	mov	r0, r8
 8009bdc:	f7ff fee4 	bl	80099a8 <_printf_common>
 8009be0:	3001      	adds	r0, #1
 8009be2:	d14a      	bne.n	8009c7a <_printf_i+0x1f6>
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	b004      	add	sp, #16
 8009bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	f043 0320 	orr.w	r3, r3, #32
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	4833      	ldr	r0, [pc, #204]	; (8009cc4 <_printf_i+0x240>)
 8009bf8:	2778      	movs	r7, #120	; 0x78
 8009bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	6829      	ldr	r1, [r5, #0]
 8009c02:	061f      	lsls	r7, r3, #24
 8009c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c08:	d402      	bmi.n	8009c10 <_printf_i+0x18c>
 8009c0a:	065f      	lsls	r7, r3, #25
 8009c0c:	bf48      	it	mi
 8009c0e:	b2b6      	uxthmi	r6, r6
 8009c10:	07df      	lsls	r7, r3, #31
 8009c12:	bf48      	it	mi
 8009c14:	f043 0320 	orrmi.w	r3, r3, #32
 8009c18:	6029      	str	r1, [r5, #0]
 8009c1a:	bf48      	it	mi
 8009c1c:	6023      	strmi	r3, [r4, #0]
 8009c1e:	b91e      	cbnz	r6, 8009c28 <_printf_i+0x1a4>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	f023 0320 	bic.w	r3, r3, #32
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	2310      	movs	r3, #16
 8009c2a:	e7a7      	b.n	8009b7c <_printf_i+0xf8>
 8009c2c:	4824      	ldr	r0, [pc, #144]	; (8009cc0 <_printf_i+0x23c>)
 8009c2e:	e7e4      	b.n	8009bfa <_printf_i+0x176>
 8009c30:	4615      	mov	r5, r2
 8009c32:	e7bd      	b.n	8009bb0 <_printf_i+0x12c>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	6826      	ldr	r6, [r4, #0]
 8009c38:	6961      	ldr	r1, [r4, #20]
 8009c3a:	1d18      	adds	r0, r3, #4
 8009c3c:	6028      	str	r0, [r5, #0]
 8009c3e:	0635      	lsls	r5, r6, #24
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	d501      	bpl.n	8009c48 <_printf_i+0x1c4>
 8009c44:	6019      	str	r1, [r3, #0]
 8009c46:	e002      	b.n	8009c4e <_printf_i+0x1ca>
 8009c48:	0670      	lsls	r0, r6, #25
 8009c4a:	d5fb      	bpl.n	8009c44 <_printf_i+0x1c0>
 8009c4c:	8019      	strh	r1, [r3, #0]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	6123      	str	r3, [r4, #16]
 8009c52:	4615      	mov	r5, r2
 8009c54:	e7bc      	b.n	8009bd0 <_printf_i+0x14c>
 8009c56:	682b      	ldr	r3, [r5, #0]
 8009c58:	1d1a      	adds	r2, r3, #4
 8009c5a:	602a      	str	r2, [r5, #0]
 8009c5c:	681d      	ldr	r5, [r3, #0]
 8009c5e:	6862      	ldr	r2, [r4, #4]
 8009c60:	2100      	movs	r1, #0
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7f6 fabc 	bl	80001e0 <memchr>
 8009c68:	b108      	cbz	r0, 8009c6e <_printf_i+0x1ea>
 8009c6a:	1b40      	subs	r0, r0, r5
 8009c6c:	6060      	str	r0, [r4, #4]
 8009c6e:	6863      	ldr	r3, [r4, #4]
 8009c70:	6123      	str	r3, [r4, #16]
 8009c72:	2300      	movs	r3, #0
 8009c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c78:	e7aa      	b.n	8009bd0 <_printf_i+0x14c>
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	47d0      	blx	sl
 8009c84:	3001      	adds	r0, #1
 8009c86:	d0ad      	beq.n	8009be4 <_printf_i+0x160>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	079b      	lsls	r3, r3, #30
 8009c8c:	d413      	bmi.n	8009cb6 <_printf_i+0x232>
 8009c8e:	68e0      	ldr	r0, [r4, #12]
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	4298      	cmp	r0, r3
 8009c94:	bfb8      	it	lt
 8009c96:	4618      	movlt	r0, r3
 8009c98:	e7a6      	b.n	8009be8 <_printf_i+0x164>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	47d0      	blx	sl
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d09d      	beq.n	8009be4 <_printf_i+0x160>
 8009ca8:	3501      	adds	r5, #1
 8009caa:	68e3      	ldr	r3, [r4, #12]
 8009cac:	9903      	ldr	r1, [sp, #12]
 8009cae:	1a5b      	subs	r3, r3, r1
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	dcf2      	bgt.n	8009c9a <_printf_i+0x216>
 8009cb4:	e7eb      	b.n	8009c8e <_printf_i+0x20a>
 8009cb6:	2500      	movs	r5, #0
 8009cb8:	f104 0619 	add.w	r6, r4, #25
 8009cbc:	e7f5      	b.n	8009caa <_printf_i+0x226>
 8009cbe:	bf00      	nop
 8009cc0:	08009f51 	.word	0x08009f51
 8009cc4:	08009f62 	.word	0x08009f62

08009cc8 <memmove>:
 8009cc8:	4288      	cmp	r0, r1
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	eb01 0402 	add.w	r4, r1, r2
 8009cd0:	d902      	bls.n	8009cd8 <memmove+0x10>
 8009cd2:	4284      	cmp	r4, r0
 8009cd4:	4623      	mov	r3, r4
 8009cd6:	d807      	bhi.n	8009ce8 <memmove+0x20>
 8009cd8:	1e43      	subs	r3, r0, #1
 8009cda:	42a1      	cmp	r1, r4
 8009cdc:	d008      	beq.n	8009cf0 <memmove+0x28>
 8009cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ce6:	e7f8      	b.n	8009cda <memmove+0x12>
 8009ce8:	4402      	add	r2, r0
 8009cea:	4601      	mov	r1, r0
 8009cec:	428a      	cmp	r2, r1
 8009cee:	d100      	bne.n	8009cf2 <memmove+0x2a>
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cfa:	e7f7      	b.n	8009cec <memmove+0x24>

08009cfc <_sbrk_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_sbrk_r+0x1c>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	f7f7 f870 	bl	8000dec <_sbrk>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_sbrk_r+0x1a>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_sbrk_r+0x1a>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	20001f84 	.word	0x20001f84

08009d1c <memcpy>:
 8009d1c:	440a      	add	r2, r1
 8009d1e:	4291      	cmp	r1, r2
 8009d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d24:	d100      	bne.n	8009d28 <memcpy+0xc>
 8009d26:	4770      	bx	lr
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d32:	4291      	cmp	r1, r2
 8009d34:	d1f9      	bne.n	8009d2a <memcpy+0xe>
 8009d36:	bd10      	pop	{r4, pc}

08009d38 <_realloc_r>:
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	4614      	mov	r4, r2
 8009d40:	460e      	mov	r6, r1
 8009d42:	b921      	cbnz	r1, 8009d4e <_realloc_r+0x16>
 8009d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d48:	4611      	mov	r1, r2
 8009d4a:	f7ff bc49 	b.w	80095e0 <_malloc_r>
 8009d4e:	b92a      	cbnz	r2, 8009d5c <_realloc_r+0x24>
 8009d50:	f7ff fbda 	bl	8009508 <_free_r>
 8009d54:	4625      	mov	r5, r4
 8009d56:	4628      	mov	r0, r5
 8009d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5c:	f000 f81b 	bl	8009d96 <_malloc_usable_size_r>
 8009d60:	4284      	cmp	r4, r0
 8009d62:	4607      	mov	r7, r0
 8009d64:	d802      	bhi.n	8009d6c <_realloc_r+0x34>
 8009d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d6a:	d812      	bhi.n	8009d92 <_realloc_r+0x5a>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4640      	mov	r0, r8
 8009d70:	f7ff fc36 	bl	80095e0 <_malloc_r>
 8009d74:	4605      	mov	r5, r0
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d0ed      	beq.n	8009d56 <_realloc_r+0x1e>
 8009d7a:	42bc      	cmp	r4, r7
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4631      	mov	r1, r6
 8009d80:	bf28      	it	cs
 8009d82:	463a      	movcs	r2, r7
 8009d84:	f7ff ffca 	bl	8009d1c <memcpy>
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	f7ff fbbc 	bl	8009508 <_free_r>
 8009d90:	e7e1      	b.n	8009d56 <_realloc_r+0x1e>
 8009d92:	4635      	mov	r5, r6
 8009d94:	e7df      	b.n	8009d56 <_realloc_r+0x1e>

08009d96 <_malloc_usable_size_r>:
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	1f18      	subs	r0, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bfbc      	itt	lt
 8009da0:	580b      	ldrlt	r3, [r1, r0]
 8009da2:	18c0      	addlt	r0, r0, r3
 8009da4:	4770      	bx	lr
	...

08009da8 <_init>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	bf00      	nop
 8009dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dae:	bc08      	pop	{r3}
 8009db0:	469e      	mov	lr, r3
 8009db2:	4770      	bx	lr

08009db4 <_fini>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	bf00      	nop
 8009db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dba:	bc08      	pop	{r3}
 8009dbc:	469e      	mov	lr, r3
 8009dbe:	4770      	bx	lr
