
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800809c  0800809c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c5c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001d58  20001d58  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fbc8  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f74  00000000  00000000  0002fd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc8  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000973  00000000  00000000  00033978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023121  00000000  00000000  000342eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001103e  00000000  00000000  0005740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c624e  00000000  00000000  0006844a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003314  00000000  00000000  0012e698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001319ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f7c 	.word	0x08007f7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007f7c 	.word	0x08007f7c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_HandleTypeDef hcan1;

uint8_t data[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead;
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80004dc:	f107 020c 	add.w	r2, r7, #12
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004e6:	f000 fe62 	bl	80011ae <HAL_CAN_GetRxMessage>
	  CDC_Transmit_FS(data, 8);
 80004ea:	2108      	movs	r1, #8
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004ee:	f007 f8ab 	bl	8007648 <CDC_Transmit_FS>

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000118 	.word	0x20000118
 8000500:	20000120 	.word	0x20000120

08000504 <getState>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t* getState(){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	  switch(HAL_CAN_GetState(&hcan1)){
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <getState+0x48>)
 800050a:	f001 f9b7 	bl	800187c <HAL_CAN_GetState>
 800050e:	4603      	mov	r3, r0
 8000510:	2b04      	cmp	r3, #4
 8000512:	d817      	bhi.n	8000544 <getState+0x40>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <getState+0x18>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000531 	.word	0x08000531
 8000520:	08000535 	.word	0x08000535
 8000524:	08000539 	.word	0x08000539
 8000528:	0800053d 	.word	0x0800053d
 800052c:	08000541 	.word	0x08000541
	  	  case 0x00U:
	  		  return (uint8_t*)"HAL_CAN_STATE_RESET\n";
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <getState+0x4c>)
 8000532:	e008      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x01U:
	  		  return (uint8_t*)"HAL_CAN_STATE_READY\n";
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <getState+0x50>)
 8000536:	e006      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x02U:
	  		  return (uint8_t*)"HAL_CAN_STATE_LISTENING\n";
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <getState+0x54>)
 800053a:	e004      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x03U:
	  		  return (uint8_t*)"HAL_CAN_STATE_SLEEP_PENDING\n";
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <getState+0x58>)
 800053e:	e002      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  case 0x04U:
	  		  return (uint8_t*)"HAL_CAN_STATE_SLEEP_ACTIVE\n";
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <getState+0x5c>)
 8000542:	e000      	b.n	8000546 <getState+0x42>
	  		  break;
	  	  default:
	  		  return (uint8_t*)"HAL_CAN_STATE_ERROR\n";
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <getState+0x60>)
	  		  break;
	  }
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000120 	.word	0x20000120
 8000550:	08007f94 	.word	0x08007f94
 8000554:	08007fac 	.word	0x08007fac
 8000558:	08007fc4 	.word	0x08007fc4
 800055c:	08007fe0 	.word	0x08007fe0
 8000560:	08008000 	.word	0x08008000
 8000564:	0800801c 	.word	0x0800801c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa8d 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f85b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f90d 	bl	8000794 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800057a:	f006 ff89 	bl	8007490 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 800057e:	f000 f8bf 	bl	8000700 <MX_CAN1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000582:	e005      	b.n	8000590 <main+0x28>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4824      	ldr	r0, [pc, #144]	; (800061c <main+0xb4>)
 800058c:	f001 fc64 	bl	8001e58 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000590:	2101      	movs	r1, #1
 8000592:	4823      	ldr	r0, [pc, #140]	; (8000620 <main+0xb8>)
 8000594:	f001 fc48 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f2      	beq.n	8000584 <main+0x1c>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	481d      	ldr	r0, [pc, #116]	; (800061c <main+0xb4>)
 80005a6:	f001 fc57 	bl	8001e58 <HAL_GPIO_WritePin>

  if(HAL_CAN_Start(&hcan1) != HAL_OK){
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <main+0xbc>)
 80005ac:	f000 fce0 	bl	8000f70 <HAL_CAN_Start>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d005      	beq.n	80005c2 <main+0x5a>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005bc:	4817      	ldr	r0, [pc, #92]	; (800061c <main+0xb4>)
 80005be:	f001 fc4b 	bl	8001e58 <HAL_GPIO_WritePin>
  }
  uint8_t* smth = getState();
 80005c2:	f7ff ff9f 	bl	8000504 <getState>
 80005c6:	63f8      	str	r0, [r7, #60]	; 0x3c

  CDC_Transmit_FS(smth, strlen((char*)smth));
 80005c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005ca:	f7ff fdfd 	bl	80001c8 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005d6:	f007 f837 	bl	8007648 <CDC_Transmit_FS>

  uint32_t mailbox;
  CAN_TxHeaderTypeDef pHead;
  pHead.StdId = 0x100;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	623b      	str	r3, [r7, #32]
  pHead.IDE = CAN_ID_STD;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pHead.RTR = CAN_RTR_DATA;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pHead.DLC = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_CAN_AddTxMessage(&hcan1, &pHead, (uint8_t*)"HEWWO", &mailbox);
 80005ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f0:	f107 0120 	add.w	r1, r7, #32
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <main+0xc0>)
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0xbc>)
 80005f8:	f000 fcfe 	bl	8000ff8 <HAL_CAN_AddTxMessage>

  smth = getState();
 80005fc:	f7ff ff82 	bl	8000504 <getState>
 8000600:	63f8      	str	r0, [r7, #60]	; 0x3c

  CDC_Transmit_FS(smth, strlen((char*)smth));
 8000602:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000604:	f7ff fde0 	bl	80001c8 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000610:	f007 f81a 	bl	8007648 <CDC_Transmit_FS>
//	  CDC_Transmit_FS(data, 8);
//	  smth = getState();

//	  CDC_Transmit_FS(smth, strlen((char*)smth));

	  HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 faab 	bl	8000b70 <HAL_Delay>
  {
 800061a:	e7fb      	b.n	8000614 <main+0xac>
 800061c:	40020c00 	.word	0x40020c00
 8000620:	40020000 	.word	0x40020000
 8000624:	20000120 	.word	0x20000120
 8000628:	08008034 	.word	0x08008034

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f007 fc72 	bl	8007f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fe66 	bl	8003384 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f8c9 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2105      	movs	r1, #5
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f8c7 	bl	8003874 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 f8b2 	bl	8000854 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_CAN1_Init+0x8c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_CAN1_Init+0x90>)
 800070a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_CAN1_Init+0x8c>)
 800070e:	2215      	movs	r2, #21
 8000710:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_CAN1_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_CAN1_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_CAN1_Init+0x8c>)
 8000720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000724:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_CAN1_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_CAN1_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_CAN1_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_CAN1_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_CAN1_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_CAN1_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000750:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_CAN1_Init+0x8c>)
 8000752:	f000 fa31 	bl	8000bb8 <HAL_CAN_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f87a 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_CAN1_Init+0x8c>)
 8000766:	f000 fe34 	bl	80013d2 <HAL_CAN_ActivateNotification>
  CAN_FilterTypeDef filters = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2228      	movs	r2, #40	; 0x28
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f007 fbd7 	bl	8007f24 <memset>
  filters.FilterActivation = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
//  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_CAN1_Init+0x8c>)
 8000780:	f000 fb16 	bl	8000db0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000120 	.word	0x20000120
 8000790:	40006400 	.word	0x40006400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a25      	ldr	r2, [pc, #148]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_GPIO_Init+0xb8>)
 8000806:	f001 fb27 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_GPIO_Init+0xbc>)
 800081e:	f001 f967 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000822:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xb8>)
 800083c:	f001 f958 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40020000 	.word	0x40020000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a25      	ldr	r2, [pc, #148]	; (8000964 <HAL_CAN_MspInit+0xb4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d143      	bne.n	800095a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 80008dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_CAN_MspInit+0xb8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800090a:	2303      	movs	r3, #3
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800091a:	2309      	movs	r3, #9
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <HAL_CAN_MspInit+0xbc>)
 8000926:	f001 f8e3 	bl	8001af0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2013      	movs	r0, #19
 8000930:	f001 f8a7 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000934:	2013      	movs	r0, #19
 8000936:	f001 f8c0 	bl	8001aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2014      	movs	r0, #20
 8000940:	f001 f89f 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000944:	2014      	movs	r0, #20
 8000946:	f001 f8b8 	bl	8001aba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2015      	movs	r0, #21
 8000950:	f001 f897 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000954:	2015      	movs	r0, #21
 8000956:	f001 f8b0 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40006400 	.word	0x40006400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020c00 	.word	0x40020c00

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8b8 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <CAN1_TX_IRQHandler+0x10>)
 80009ca:	f000 fd28 	bl	800141e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000120 	.word	0x20000120

080009d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <CAN1_RX0_IRQHandler+0x10>)
 80009de:	f000 fd1e 	bl	800141e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000120 	.word	0x20000120

080009ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <CAN1_RX1_IRQHandler+0x10>)
 80009f2:	f000 fd14 	bl	800141e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000120 	.word	0x20000120

08000a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <OTG_FS_IRQHandler+0x10>)
 8000a06:	f001 fb90 	bl	800212a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000162c 	.word	0x2000162c

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f007 fa65 	bl	8007f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd7d 	bl	8000568 <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a7c:	080080a4 	.word	0x080080a4
  ldr r2, =_sbss
 8000a80:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a84:	20001d58 	.word	0x20001d58

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 ffd9 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fece 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fff1 	bl	8001ad6 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 ffb9 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000148 	.word	0x20000148

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000148 	.word	0x20000148

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0ed      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fe6a 	bl	80008b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff ffb4 	bl	8000b58 <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff ffb0 	bl	8000b58 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0c5      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e5      	beq.n	8000bf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0202 	bic.w	r2, r2, #2
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c38:	f7ff ff8e 	bl	8000b58 <HAL_GetTick>
 8000c3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c3e:	e012      	b.n	8000c66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c40:	f7ff ff8a 	bl	8000b58 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	d90b      	bls.n	8000c66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e09f      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e5      	bne.n	8000c40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7e1b      	ldrb	r3, [r3, #24]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d108      	bne.n	8000c8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e007      	b.n	8000c9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7e5b      	ldrb	r3, [r3, #25]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d108      	bne.n	8000cb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7e9b      	ldrb	r3, [r3, #26]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e007      	b.n	8000cf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0220 	bic.w	r2, r2, #32
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7edb      	ldrb	r3, [r3, #27]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d108      	bne.n	8000d0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0210 	bic.w	r2, r2, #16
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e007      	b.n	8000d1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0210 	orr.w	r2, r2, #16
 8000d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7f1b      	ldrb	r3, [r3, #28]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d108      	bne.n	8000d36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e007      	b.n	8000d46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0208 	bic.w	r2, r2, #8
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7f5b      	ldrb	r3, [r3, #29]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d108      	bne.n	8000d60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0204 	orr.w	r2, r2, #4
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e007      	b.n	8000d70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0204 	bic.w	r2, r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	ea42 0103 	orr.w	r1, r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d003      	beq.n	8000dd6 <HAL_CAN_ConfigFilter+0x26>
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	f040 80be 	bne.w	8000f52 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000dd6:	4b65      	ldr	r3, [pc, #404]	; (8000f6c <HAL_CAN_ConfigFilter+0x1bc>)
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000de0:	f043 0201 	orr.w	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	431a      	orrs	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	2201      	movs	r2, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	401a      	ands	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d123      	bne.n	8000e80 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3248      	adds	r2, #72	; 0x48
 8000e60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e76:	6979      	ldr	r1, [r7, #20]
 8000e78:	3348      	adds	r3, #72	; 0x48
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d122      	bne.n	8000ece <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3248      	adds	r2, #72	; 0x48
 8000eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ec4:	6979      	ldr	r1, [r7, #20]
 8000ec6:	3348      	adds	r3, #72	; 0x48
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ee8:	e007      	b.n	8000efa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f14:	e007      	b.n	8000f26 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d107      	bne.n	8000f3e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f44:	f023 0201 	bic.w	r2, r3, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e006      	b.n	8000f60 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
  }
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40006400 	.word	0x40006400

08000f70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d12e      	bne.n	8000fe2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fddc 	bl	8000b58 <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fa2:	e012      	b.n	8000fca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fa4:	f7ff fdd8 	bl	8000b58 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b0a      	cmp	r3, #10
 8000fb0:	d90b      	bls.n	8000fca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e012      	b.n	8000ff0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e5      	bne.n	8000fa4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e006      	b.n	8000ff0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
  }
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d003      	beq.n	8001024 <HAL_CAN_AddTxMessage+0x2c>
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	2b02      	cmp	r3, #2
 8001020:	f040 80b8 	bne.w	8001194 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10a      	bne.n	8001044 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80a0 	beq.w	8001184 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	0e1b      	lsrs	r3, r3, #24
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d907      	bls.n	8001064 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e09e      	b.n	80011a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001064:	2201      	movs	r2, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	409a      	lsls	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10d      	bne.n	8001092 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	6809      	ldr	r1, [r1, #0]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	440b      	add	r3, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e00f      	b.n	80010b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800109c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a2:	68f9      	ldr	r1, [r7, #12]
 80010a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3318      	adds	r3, #24
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	440b      	add	r3, r1
 80010b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3318      	adds	r3, #24
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	3304      	adds	r3, #4
 80010c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	7d1b      	ldrb	r3, [r3, #20]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d111      	bne.n	80010f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3318      	adds	r3, #24
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4413      	add	r3, r2
 80010da:	3304      	adds	r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6811      	ldr	r1, [r2, #0]
 80010e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	3304      	adds	r3, #4
 80010f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3307      	adds	r3, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	061a      	lsls	r2, r3, #24
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3306      	adds	r3, #6
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3305      	adds	r3, #5
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	4313      	orrs	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	3204      	adds	r2, #4
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	4610      	mov	r0, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6811      	ldr	r1, [r2, #0]
 800111a:	ea43 0200 	orr.w	r2, r3, r0
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	440b      	add	r3, r1
 8001124:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001128:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3303      	adds	r3, #3
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	061a      	lsls	r2, r3, #24
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3302      	adds	r3, #2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	041b      	lsls	r3, r3, #16
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	4610      	mov	r0, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	6811      	ldr	r1, [r2, #0]
 8001150:	ea43 0200 	orr.w	r2, r3, r0
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	440b      	add	r3, r1
 800115a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800115e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3318      	adds	r3, #24
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6811      	ldr	r1, [r2, #0]
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3318      	adds	r3, #24
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	e00e      	b.n	80011a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e006      	b.n	80011a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
  }
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011ae:	b480      	push	{r7}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d003      	beq.n	80011d2 <HAL_CAN_GetRxMessage+0x24>
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	f040 80f3 	bne.w	80013b8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10e      	bne.n	80011f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e0e7      	b.n	80013c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0d8      	b.n	80013c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	331b      	adds	r3, #27
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0204 	and.w	r2, r3, #4
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	331b      	adds	r3, #27
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0d5b      	lsrs	r3, r3, #21
 8001242:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e00b      	b.n	8001264 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	331b      	adds	r3, #27
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	331b      	adds	r3, #27
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0202 	and.w	r2, r3, #2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	331b      	adds	r3, #27
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 020f 	and.w	r2, r3, #15
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	331b      	adds	r3, #27
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	3304      	adds	r3, #4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	331b      	adds	r3, #27
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0c1b      	lsrs	r3, r3, #16
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0a1a      	lsrs	r2, r3, #8
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0c1a      	lsrs	r2, r3, #16
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3302      	adds	r3, #2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0e1a      	lsrs	r2, r3, #24
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3303      	adds	r3, #3
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3304      	adds	r3, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0a1a      	lsrs	r2, r3, #8
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3305      	adds	r3, #5
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1a      	lsrs	r2, r3, #16
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3306      	adds	r3, #6
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0e1a      	lsrs	r2, r3, #24
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3307      	adds	r3, #7
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]

//    CDC_Transmit_FS(aData, 8);

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e006      	b.n	80013c6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d002      	beq.n	80013f0 <HAL_CAN_ActivateNotification+0x1e>
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d109      	bne.n	8001404 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6959      	ldr	r1, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	e006      	b.n	8001412 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b08a      	sub	sp, #40	; 0x28
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d07c      	beq.n	800155e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d023      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f983 	bl	800178c <HAL_CAN_TxMailbox0CompleteCallback>
 8001486:	e016      	b.n	80014b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	e00c      	b.n	80014b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e002      	b.n	80014b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f989 	bl	80017c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d024      	beq.n	800150a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f963 	bl	80017a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80014da:	e016      	b.n	800150a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	e00c      	b.n	800150a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	e002      	b.n	800150a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f969 	bl	80017dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d024      	beq.n	800155e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800151c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f943 	bl	80017b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800152e:	e016      	b.n	800155e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e00c      	b.n	800155e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	e002      	b.n	800155e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f949 	bl	80017f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00c      	beq.n	8001582 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2210      	movs	r2, #16
 8001580:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2208      	movs	r2, #8
 800159c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f930 	bl	8001804 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7fe ff89 	bl	80004d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2210      	movs	r2, #16
 80015e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2208      	movs	r2, #8
 8001600:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f912 	bl	800182c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f8f9 	bl	8001818 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2210      	movs	r2, #16
 8001640:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8fc 	bl	8001840 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2208      	movs	r2, #8
 8001662:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f8f5 	bl	8001854 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d07b      	beq.n	800176c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d072      	beq.n	8001764 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d043      	beq.n	8001764 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03e      	beq.n	8001764 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016ec:	2b60      	cmp	r3, #96	; 0x60
 80016ee:	d02b      	beq.n	8001748 <HAL_CAN_IRQHandler+0x32a>
 80016f0:	2b60      	cmp	r3, #96	; 0x60
 80016f2:	d82e      	bhi.n	8001752 <HAL_CAN_IRQHandler+0x334>
 80016f4:	2b50      	cmp	r3, #80	; 0x50
 80016f6:	d022      	beq.n	800173e <HAL_CAN_IRQHandler+0x320>
 80016f8:	2b50      	cmp	r3, #80	; 0x50
 80016fa:	d82a      	bhi.n	8001752 <HAL_CAN_IRQHandler+0x334>
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	d019      	beq.n	8001734 <HAL_CAN_IRQHandler+0x316>
 8001700:	2b40      	cmp	r3, #64	; 0x40
 8001702:	d826      	bhi.n	8001752 <HAL_CAN_IRQHandler+0x334>
 8001704:	2b30      	cmp	r3, #48	; 0x30
 8001706:	d010      	beq.n	800172a <HAL_CAN_IRQHandler+0x30c>
 8001708:	2b30      	cmp	r3, #48	; 0x30
 800170a:	d822      	bhi.n	8001752 <HAL_CAN_IRQHandler+0x334>
 800170c:	2b10      	cmp	r3, #16
 800170e:	d002      	beq.n	8001716 <HAL_CAN_IRQHandler+0x2f8>
 8001710:	2b20      	cmp	r3, #32
 8001712:	d005      	beq.n	8001720 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001714:	e01d      	b.n	8001752 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800171e:	e019      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001728:	e014      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001732:	e00f      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173c:	e00a      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001746:	e005      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001750:	e000      	b.n	8001754 <HAL_CAN_IRQHandler+0x336>
            break;
 8001752:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001762:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2204      	movs	r2, #4
 800176a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f872 	bl	8001868 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188a:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d002      	beq.n	8001898 <HAL_CAN_GetState+0x1c>
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d112      	bne.n	80018be <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 80018a6:	2304      	movs	r3, #4
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e008      	b.n	80018be <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 80018ba:	2303      	movs	r3, #3
 80018bc:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e16b      	b.n	8001de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 815a 	bne.w	8001dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80b4 	beq.w	8001dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d025      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00e      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x228>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f ae90 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40021800 	.word	0x40021800
 8001e20:	40021c00 	.word	0x40021c00
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e001      	b.n	8001e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8c:	b08f      	sub	sp, #60	; 0x3c
 8001e8e:	af0a      	add	r7, sp, #40	; 0x28
 8001e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e10f      	b.n	80020bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f005 fd0e 	bl	80078d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 ffd7 	bl	8003e8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f001 feae 	bl	8003c64 <USB_CoreInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0d0      	b.n	80020bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 ffc5 	bl	8003eb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e04a      	b.n	8001fc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333d      	adds	r3, #61	; 0x3d
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	333c      	adds	r3, #60	; 0x3c
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3344      	adds	r3, #68	; 0x44
 8001f68:	4602      	mov	r2, r0
 8001f6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3340      	adds	r3, #64	; 0x40
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3348      	adds	r3, #72	; 0x48
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	334c      	adds	r3, #76	; 0x4c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3354      	adds	r3, #84	; 0x54
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3af      	bcc.n	8001f2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e044      	b.n	800205c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3b5      	bcc.n	8001fd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	687e      	ldr	r6, [r7, #4]
 800206e:	466d      	mov	r5, sp
 8002070:	f106 0410 	add.w	r4, r6, #16
 8002074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002080:	e885 0003 	stmia.w	r5, {r0, r1}
 8002084:	1d33      	adds	r3, r6, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	6838      	ldr	r0, [r7, #0]
 800208a:	f001 ff5d 	bl	8003f48 <USB_DevInit>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00d      	b.n	80020bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 f8ac 	bl	8005212 <USB_DevDisconnect>

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_PCD_Start+0x1c>
 80020dc:	2302      	movs	r3, #2
 80020de:	e020      	b.n	8002122 <HAL_PCD_Start+0x5e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d109      	bne.n	8002104 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d005      	beq.n	8002104 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f001 feaf 	bl	8003e6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 f85c 	bl	80051d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b08d      	sub	sp, #52	; 0x34
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 f91a 	bl	800537a <USB_GetMode>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 848a 	bne.w	8002a62 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 f87e 	bl	8005254 <USB_ReadInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8480 	beq.w	8002a60 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 f86b 	bl	8005254 <USB_ReadInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b02      	cmp	r3, #2
 8002186:	d107      	bne.n	8002198 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f002 0202 	and.w	r2, r2, #2
 8002196:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 f859 	bl	8005254 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d161      	bne.n	8002270 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0210 	bic.w	r2, r2, #16
 80021ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d124      	bne.n	8002232 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d035      	beq.n	8002260 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6a38      	ldr	r0, [r7, #32]
 8002208:	f002 fe90 	bl	8004f2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002218:	441a      	add	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	441a      	add	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	e016      	b.n	8002260 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	0c5b      	lsrs	r3, r3, #17
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	2b06      	cmp	r3, #6
 800223c:	d110      	bne.n	8002260 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002244:	2208      	movs	r2, #8
 8002246:	4619      	mov	r1, r3
 8002248:	6a38      	ldr	r0, [r7, #32]
 800224a:	f002 fe6f 	bl	8004f2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225a:	441a      	add	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0210 	orr.w	r2, r2, #16
 800226e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ffed 	bl	8005254 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002280:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002284:	f040 80a7 	bne.w	80023d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fff2 	bl	800527a <USB_ReadDevAllOutEpInterrupt>
 8002296:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002298:	e099      	b.n	80023ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 808e 	beq.w	80023c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 f816 	bl	80052e2 <USB_ReadDevOutEPInterrupt>
 80022b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fec2 	bl	8003060 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2308      	movs	r3, #8
 80022f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 ff98 	bl	8003230 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2310      	movs	r3, #16
 800231a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d030      	beq.n	8002388 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d109      	bne.n	8002346 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002344:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f005 fbc9 	bl	8007b08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	461a      	mov	r2, r3
 8002384:	2302      	movs	r3, #2
 8002386:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	461a      	mov	r2, r3
 80023a0:	2320      	movs	r3, #32
 80023a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3301      	adds	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f af62 	bne.w	800229a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 ff3a 	bl	8005254 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ea:	f040 80db 	bne.w	80025a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 ff5b 	bl	80052ae <USB_ReadDevAllInEpInterrupt>
 80023f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023fe:	e0cd      	b.n	800259c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80c2 	beq.w	8002590 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 ff81 	bl	800531e <USB_ReadDevInEPInterrupt>
 800241c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d057      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	69f9      	ldr	r1, [r7, #28]
 8002444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002448:	4013      	ands	r3, r2
 800244a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002458:	461a      	mov	r2, r3
 800245a:	2301      	movs	r3, #1
 800245c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d132      	bne.n	80024cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	334c      	adds	r3, #76	; 0x4c
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4403      	add	r3, r0
 8002486:	3348      	adds	r3, #72	; 0x48
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4419      	add	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4403      	add	r3, r0
 800249a:	334c      	adds	r3, #76	; 0x4c
 800249c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <HAL_PCD_IRQHandler+0x3a2>
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3354      	adds	r3, #84	; 0x54
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	f002 ff88 	bl	80053dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f005 fa93 	bl	80079fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ee:	461a      	mov	r2, r3
 80024f0:	2308      	movs	r3, #8
 80024f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2310      	movs	r3, #16
 800250e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2340      	movs	r3, #64	; 0x40
 800252a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d023      	beq.n	800257e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002538:	6a38      	ldr	r0, [r7, #32]
 800253a:	f001 fe69 	bl	8004210 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800253e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	3338      	adds	r3, #56	; 0x38
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	78db      	ldrb	r3, [r3, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 fae0 	bl	8007b2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002578:	461a      	mov	r2, r3
 800257a:	2302      	movs	r3, #2
 800257c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fcdb 	bl	8002f46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3301      	adds	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f af2e 	bne.w	8002400 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fe53 	bl	8005254 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b8:	d122      	bne.n	8002600 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025e0:	2100      	movs	r1, #0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fec2 	bl	800336c <HAL_PCDEx_LPM_Callback>
 80025e8:	e002      	b.n	80025f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f005 fa7e 	bl	8007aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fe25 	bl	8005254 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002614:	d112      	bne.n	800263c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f005 fa3a 	bl	8007aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800263a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fe07 	bl	8005254 <USB_ReadInterrupts>
 8002646:	4603      	mov	r3, r0
 8002648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	f040 80b7 	bne.w	80027c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2110      	movs	r1, #16
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fdce 	bl	8004210 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002678:	e046      	b.n	8002708 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002686:	461a      	mov	r2, r3
 8002688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800268c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f2:	0151      	lsls	r1, r2, #5
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	440a      	add	r2, r1
 80026f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002700:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	3301      	adds	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	429a      	cmp	r2, r3
 8002710:	d3b3      	bcc.n	800267a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002720:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002724:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273e:	f043 030b 	orr.w	r3, r3, #11
 8002742:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002754:	f043 030b 	orr.w	r3, r3, #11
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	e015      	b.n	8002788 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800276e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002772:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f043 030b 	orr.w	r3, r3, #11
 8002786:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002796:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800279a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ac:	461a      	mov	r2, r3
 80027ae:	f002 fe15 	bl	80053dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fd44 	bl	8005254 <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d124      	bne.n	8002822 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fdda 	bl	8005396 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fd8f 	bl	800430a <USB_GetDevSpeed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	f001 fa28 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 80027fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4620      	mov	r0, r4
 8002808:	f001 fa8e 	bl	8003d28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f005 f91e 	bl	8007a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fd14 	bl	8005254 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d10a      	bne.n	800284c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f005 f8fb 	bl	8007a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f002 0208 	and.w	r2, r2, #8
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fcff 	bl	8005254 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d122      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286c:	2301      	movs	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	e014      	b.n	800289c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fb27 	bl	8002ee4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	3301      	adds	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d3e5      	bcc.n	8002872 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fcd2 	bl	8005254 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ba:	d13b      	bne.n	8002934 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	e02b      	b.n	800291a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3340      	adds	r3, #64	; 0x40
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d115      	bne.n	8002914 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da12      	bge.n	8002914 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	333f      	adds	r3, #63	; 0x3f
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fae8 	bl	8002ee4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	3301      	adds	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	429a      	cmp	r2, r3
 8002922:	d3ce      	bcc.n	80028c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 fc8b 	bl	8005254 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002948:	d155      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	e045      	b.n	80029dc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d12e      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002978:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	da2b      	bge.n	80029d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800298a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800298e:	429a      	cmp	r2, r3
 8002990:	d121      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d2:	6053      	str	r3, [r2, #4]
            break;
 80029d4:	e007      	b.n	80029e6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	3301      	adds	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3b4      	bcc.n	8002950 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fc2a 	bl	8005254 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d10a      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f005 f89f 	bl	8007b50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fc14 	bl	8005254 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d115      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f005 f88f 	bl	8007b6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e000      	b.n	8002a62 <HAL_PCD_IRQHandler+0x938>
      return;
 8002a60:	bf00      	nop
    }
  }
}
 8002a62:	3734      	adds	r7, #52	; 0x34
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_PCD_SetAddress+0x1a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e013      	b.n	8002aaa <HAL_PCD_SetAddress+0x42>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 fb72 	bl	8005184 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	4608      	mov	r0, r1
 8002abc:	4611      	mov	r1, r2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	70fb      	strb	r3, [r7, #3]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	803b      	strh	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da0f      	bge.n	8002af8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	3338      	adds	r3, #56	; 0x38
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	705a      	strb	r2, [r3, #1]
 8002af6:	e00f      	b.n	8002b18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b24:	883a      	ldrh	r2, [r7, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	78ba      	ldrb	r2, [r7, #2]
 8002b2e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b42:	78bb      	ldrb	r3, [r7, #2]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_EP_Open+0xaa>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e00e      	b.n	8002b7a <HAL_PCD_EP_Open+0xc8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fbf2 	bl	8004354 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b78:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da0f      	bge.n	8002bb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3338      	adds	r3, #56	; 0x38
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_PCD_EP_Close+0x6e>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e00e      	b.n	8002c0e <HAL_PCD_EP_Close+0x8c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 fc30 	bl	8004464 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	460b      	mov	r3, r1
 8002c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6979      	ldr	r1, [r7, #20]
 8002c8a:	f001 ff0f 	bl	8004aac <USB_EP0StartXfer>
 8002c8e:	e008      	b.n	8002ca2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	f001 fcbd 	bl	800461c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cec:	7afb      	ldrb	r3, [r7, #11]
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3338      	adds	r3, #56	; 0x38
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	f001 fead 	bl	8004aac <USB_EP0StartXfer>
 8002d52:	e008      	b.n	8002d66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6979      	ldr	r1, [r7, #20]
 8002d62:	f001 fc5b 	bl	800461c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d901      	bls.n	8002d8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e050      	b.n	8002e30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0f      	bge.n	8002db6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3338      	adds	r3, #56	; 0x38
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
 8002db4:	e00d      	b.n	8002dd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_EP_SetStall+0x82>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e01e      	b.n	8002e30 <HAL_PCD_EP_SetStall+0xc0>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 f8eb 	bl	8004fdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	b2d9      	uxtb	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e20:	461a      	mov	r2, r3
 8002e22:	f002 fadb 	bl	80053dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d901      	bls.n	8002e56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e042      	b.n	8002edc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da0f      	bge.n	8002e7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00f      	b.n	8002e9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_PCD_EP_ClrStall+0x86>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e00e      	b.n	8002edc <HAL_PCD_EP_ClrStall+0xa4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f002 f8f3 	bl	80050b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da0c      	bge.n	8002f12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3338      	adds	r3, #56	; 0x38
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e00c      	b.n	8002f2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68f9      	ldr	r1, [r7, #12]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 ff12 	bl	8004d5c <USB_EPStopXfer>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08a      	sub	sp, #40	; 0x28
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d901      	bls.n	8002f7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06c      	b.n	8003058 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d902      	bls.n	8002f9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa2:	e02b      	b.n	8002ffc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d902      	bls.n	8002fc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3303      	adds	r3, #3
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6919      	ldr	r1, [r3, #16]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f001 ff66 	bl	8004eb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	441a      	add	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	429a      	cmp	r2, r3
 8003010:	d809      	bhi.n	8003026 <PCD_WriteEmptyTxFifo+0xe0>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800301a:	429a      	cmp	r2, r3
 800301c:	d203      	bcs.n	8003026 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1be      	bne.n	8002fa4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	429a      	cmp	r2, r3
 8003030:	d811      	bhi.n	8003056 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	2201      	movs	r2, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	43db      	mvns	r3, r3
 800304c:	6939      	ldr	r1, [r7, #16]
 800304e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003052:	4013      	ands	r3, r2
 8003054:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	333c      	adds	r3, #60	; 0x3c
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d17b      	bne.n	800318e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	4a61      	ldr	r2, [pc, #388]	; (8003228 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f240 80b9 	bls.w	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80b3 	beq.w	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	e0a7      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e2:	461a      	mov	r2, r3
 80030e4:	2320      	movs	r3, #32
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e098      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 8093 	bne.w	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4a4b      	ldr	r2, [pc, #300]	; (8003228 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d90f      	bls.n	800311e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e07e      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	0159      	lsls	r1, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	440b      	add	r3, r1
 8003140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d114      	bne.n	8003180 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003168:	461a      	mov	r2, r3
 800316a:	2101      	movs	r1, #1
 800316c:	f002 f936 	bl	80053dc <USB_EP0_OutStart>
 8003170:	e006      	b.n	8003180 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f004 fc1e 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 800318c:	e046      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d124      	bne.n	80031e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e032      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	2320      	movs	r3, #32
 80031d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f004 fbf5 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
 80031de:	e01d      	b.n	800321c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d114      	bne.n	8003210 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003208:	461a      	mov	r2, r3
 800320a:	2100      	movs	r1, #0
 800320c:	f002 f8e6 	bl	80053dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f004 fbd6 	bl	80079c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	4f54300a 	.word	0x4f54300a
 800322c:	4f54310a 	.word	0x4f54310a

08003230 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	333c      	adds	r3, #60	; 0x3c
 8003248:	3304      	adds	r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d90e      	bls.n	8003284 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f004 fb8d 	bl	80079a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d90c      	bls.n	80032ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d108      	bne.n	80032ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032a4:	461a      	mov	r2, r3
 80032a6:	2101      	movs	r1, #1
 80032a8:	f002 f898 	bl	80053dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	4f54300a 	.word	0x4f54300a

080032bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
 80032c8:	4613      	mov	r3, r2
 80032ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032da:	883b      	ldrh	r3, [r7, #0]
 80032dc:	0419      	lsls	r1, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
 80032e8:	e028      	b.n	800333c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e00d      	b.n	800331a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3340      	adds	r3, #64	; 0x40
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	3b01      	subs	r3, #1
 8003320:	429a      	cmp	r2, r3
 8003322:	d3ec      	bcc.n	80032fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003324:	883b      	ldrh	r3, [r7, #0]
 8003326:	0418      	lsls	r0, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	3b01      	subs	r3, #1
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4302      	orrs	r2, r0
 8003334:	3340      	adds	r3, #64	; 0x40
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	460b      	mov	r3, r1
 8003354:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e267      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d075      	beq.n	800348e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d00c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d112      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b82      	ldr	r3, [pc, #520]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05b      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d157      	bne.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e242      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e8:	d106      	bne.n	80033f8 <HAL_RCC_OscConfig+0x74>
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a75      	ldr	r2, [pc, #468]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e01d      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x98>
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6c      	ldr	r2, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0xb0>
 800341c:	4b69      	ldr	r3, [pc, #420]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a68      	ldr	r2, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fb8c 	bl	8000b58 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fb88 	bl	8000b58 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e207      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0xc0>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd fb78 	bl	8000b58 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7fd fb74 	bl	8000b58 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1f3      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349a:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d11c      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e1c7      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4937      	ldr	r1, [pc, #220]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	e03a      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f4:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_OscConfig+0x244>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd fb2d 	bl	8000b58 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003502:	f7fd fb29 	bl	8000b58 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1a8      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4925      	ldr	r1, [pc, #148]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
 8003534:	e015      	b.n	8003562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_OscConfig+0x244>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fb0c 	bl	8000b58 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fb08 	bl	8000b58 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e187      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d036      	beq.n	80035dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x248>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd faec 	bl	8000b58 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003584:	f7fd fae8 	bl	8000b58 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e167      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_OscConfig+0x240>)
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x200>
 80035a2:	e01b      	b.n	80035dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_OscConfig+0x248>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fd fad5 	bl	8000b58 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	e00e      	b.n	80035d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fd fad1 	bl	8000b58 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d907      	bls.n	80035d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e150      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	42470000 	.word	0x42470000
 80035cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ea      	bne.n	80035b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8097 	beq.w	8003718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a7c      	ldr	r2, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b77      	ldr	r3, [pc, #476]	; (80037f8 <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b74      	ldr	r3, [pc, #464]	; (80037f8 <HAL_RCC_OscConfig+0x474>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a73      	ldr	r2, [pc, #460]	; (80037f8 <HAL_RCC_OscConfig+0x474>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fd fa91 	bl	8000b58 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fd fa8d 	bl	8000b58 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e10c      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_OscConfig+0x474>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x2ea>
 8003660:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a63      	ldr	r2, [pc, #396]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	e01c      	b.n	80036a8 <HAL_RCC_OscConfig+0x324>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b05      	cmp	r3, #5
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x30c>
 8003676:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	4b5c      	ldr	r3, [pc, #368]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a5b      	ldr	r2, [pc, #364]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0x324>
 8003690:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a57      	ldr	r2, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a54      	ldr	r2, [pc, #336]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036a2:	f023 0304 	bic.w	r3, r3, #4
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fa52 	bl	8000b58 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fa4e 	bl	8000b58 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0cb      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ee      	beq.n	80036b8 <HAL_RCC_OscConfig+0x334>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fa3c 	bl	8000b58 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fd fa38 	bl	8000b58 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0b5      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ee      	bne.n	80036e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	4a38      	ldr	r2, [pc, #224]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a1 	beq.w	8003864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b08      	cmp	r3, #8
 800372c:	d05c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d141      	bne.n	80037ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_OscConfig+0x478>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fa0c 	bl	8000b58 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003744:	f7fd fa08 	bl	8000b58 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e087      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69da      	ldr	r2, [r3, #28]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x478>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fd f9e1 	bl	8000b58 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379a:	f7fd f9dd 	bl	8000b58 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e05c      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x416>
 80037b8:	e054      	b.n	8003864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_OscConfig+0x478>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd f9ca 	bl	8000b58 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd f9c6 	bl	8000b58 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e045      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x444>
 80037e6:	e03d      	b.n	8003864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e038      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x4ec>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d028      	beq.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d121      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d11a      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cc      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d90c      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d044      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d119      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	2b03      	cmp	r3, #3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e067      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fd f8f8 	bl	8000b58 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fd f8f4 	bl	8000b58 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20c      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490a      	ldr	r1, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f858 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08008084 	.word	0x08008084
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b094      	sub	sp, #80	; 0x50
 8003a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	2300      	movs	r3, #0
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a58:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d00d      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x40>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	f200 80e1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a72:	e0db      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a78:	e0db      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a7e:	e0d8      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8a:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
 8003aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	f04f 0000 	mov.w	r0, #0
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	0159      	lsls	r1, r3, #5
 8003ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac4:	0150      	lsls	r0, r2, #5
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4621      	mov	r1, r4
 8003acc:	1a51      	subs	r1, r2, r1
 8003ace:	6139      	str	r1, [r7, #16]
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	018b      	lsls	r3, r1, #6
 8003ae8:	4651      	mov	r1, sl
 8003aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aee:	4651      	mov	r1, sl
 8003af0:	018a      	lsls	r2, r1, #6
 8003af2:	4651      	mov	r1, sl
 8003af4:	ebb2 0801 	subs.w	r8, r2, r1
 8003af8:	4659      	mov	r1, fp
 8003afa:	eb63 0901 	sbc.w	r9, r3, r1
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b12:	4690      	mov	r8, r2
 8003b14:	4699      	mov	r9, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	eb18 0303 	adds.w	r3, r8, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	462b      	mov	r3, r5
 8003b20:	eb49 0303 	adc.w	r3, r9, r3
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b32:	4629      	mov	r1, r5
 8003b34:	024b      	lsls	r3, r1, #9
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	024a      	lsls	r2, r1, #9
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b50:	f7fc fb42 	bl	80001d8 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5c:	e058      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	099b      	lsrs	r3, r3, #6
 8003b64:	2200      	movs	r2, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	4611      	mov	r1, r2
 8003b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8a:	0150      	lsls	r0, r2, #5
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4641      	mov	r1, r8
 8003b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b96:	4649      	mov	r1, r9
 8003b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	00eb      	lsls	r3, r5, #3
 8003bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc6:	00e2      	lsls	r2, r4, #3
 8003bc8:	4614      	mov	r4, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	4643      	mov	r3, r8
 8003bce:	18e3      	adds	r3, r4, r3
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	eb45 0303 	adc.w	r3, r5, r3
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	61fa      	str	r2, [r7, #28]
 8003c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c04:	f7fc fae8 	bl	80001d8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3750      	adds	r7, #80	; 0x50
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000

08003c64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c64:	b084      	sub	sp, #16
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	f107 001c 	add.w	r0, r7, #28
 8003c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d122      	bne.n	8003cc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f001 fbee 	bl	8005498 <USB_CoreReset>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e01a      	b.n	8003cf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f001 fbe2 	bl	8005498 <USB_CoreReset>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cea:	e005      	b.n	8003cf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10b      	bne.n	8003d16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f043 0206 	orr.w	r2, r3, #6
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d22:	b004      	add	sp, #16
 8003d24:	4770      	bx	lr
	...

08003d28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d165      	bne.n	8003e08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <USB_SetTurnaroundTime+0x11c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d906      	bls.n	8003d52 <USB_SetTurnaroundTime+0x2a>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <USB_SetTurnaroundTime+0x120>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d202      	bcs.n	8003d52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d4c:	230f      	movs	r3, #15
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e062      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <USB_SetTurnaroundTime+0x120>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d306      	bcc.n	8003d68 <USB_SetTurnaroundTime+0x40>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a3b      	ldr	r2, [pc, #236]	; (8003e4c <USB_SetTurnaroundTime+0x124>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d202      	bcs.n	8003d68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d62:	230e      	movs	r3, #14
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e057      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <USB_SetTurnaroundTime+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d306      	bcc.n	8003d7e <USB_SetTurnaroundTime+0x56>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a37      	ldr	r2, [pc, #220]	; (8003e50 <USB_SetTurnaroundTime+0x128>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d202      	bcs.n	8003d7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d78:	230d      	movs	r3, #13
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e04c      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <USB_SetTurnaroundTime+0x128>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d306      	bcc.n	8003d94 <USB_SetTurnaroundTime+0x6c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <USB_SetTurnaroundTime+0x12c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d802      	bhi.n	8003d94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d8e:	230c      	movs	r3, #12
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e041      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <USB_SetTurnaroundTime+0x12c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d906      	bls.n	8003daa <USB_SetTurnaroundTime+0x82>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <USB_SetTurnaroundTime+0x130>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d802      	bhi.n	8003daa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003da4:	230b      	movs	r3, #11
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e036      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <USB_SetTurnaroundTime+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d906      	bls.n	8003dc0 <USB_SetTurnaroundTime+0x98>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <USB_SetTurnaroundTime+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d802      	bhi.n	8003dc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dba:	230a      	movs	r3, #10
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e02b      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <USB_SetTurnaroundTime+0x134>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d906      	bls.n	8003dd6 <USB_SetTurnaroundTime+0xae>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <USB_SetTurnaroundTime+0x138>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d202      	bcs.n	8003dd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003dd0:	2309      	movs	r3, #9
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e020      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <USB_SetTurnaroundTime+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d306      	bcc.n	8003dec <USB_SetTurnaroundTime+0xc4>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <USB_SetTurnaroundTime+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d802      	bhi.n	8003dec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003de6:	2308      	movs	r3, #8
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e015      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <USB_SetTurnaroundTime+0x13c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d906      	bls.n	8003e02 <USB_SetTurnaroundTime+0xda>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <USB_SetTurnaroundTime+0x140>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d202      	bcs.n	8003e02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e00a      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e02:	2306      	movs	r3, #6
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e007      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e0e:	2309      	movs	r3, #9
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e001      	b.n	8003e18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e14:	2309      	movs	r3, #9
 8003e16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	00d8acbf 	.word	0x00d8acbf
 8003e48:	00e4e1c0 	.word	0x00e4e1c0
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	01067380 	.word	0x01067380
 8003e54:	011a499f 	.word	0x011a499f
 8003e58:	01312cff 	.word	0x01312cff
 8003e5c:	014ca43f 	.word	0x014ca43f
 8003e60:	016e3600 	.word	0x016e3600
 8003e64:	01a6ab1f 	.word	0x01a6ab1f
 8003e68:	01e84800 	.word	0x01e84800

08003e6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d115      	bne.n	8003efe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7fc fe46 	bl	8000b70 <HAL_Delay>
      ms++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f001 fa45 	bl	800537a <USB_GetMode>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d01e      	beq.n	8003f34 <USB_SetCurrentMode+0x84>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b31      	cmp	r3, #49	; 0x31
 8003efa:	d9f0      	bls.n	8003ede <USB_SetCurrentMode+0x2e>
 8003efc:	e01a      	b.n	8003f34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d115      	bne.n	8003f30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fc fe2d 	bl	8000b70 <HAL_Delay>
      ms++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 fa2c 	bl	800537a <USB_GetMode>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <USB_SetCurrentMode+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b31      	cmp	r3, #49	; 0x31
 8003f2c:	d9f0      	bls.n	8003f10 <USB_SetCurrentMode+0x60>
 8003f2e:	e001      	b.n	8003f34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e005      	b.n	8003f40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b32      	cmp	r3, #50	; 0x32
 8003f38:	d101      	bne.n	8003f3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f48:	b084      	sub	sp, #16
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e009      	b.n	8003f7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3340      	adds	r3, #64	; 0x40
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	2200      	movs	r2, #0
 8003f74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b0e      	cmp	r3, #14
 8003f80:	d9f2      	bls.n	8003f68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11c      	bne.n	8003fc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f96:	f043 0302 	orr.w	r3, r3, #2
 8003f9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8003fc0:	e00b      	b.n	8003fda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	4619      	mov	r1, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	680b      	ldr	r3, [r1, #0]
 8003ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10c      	bne.n	800401a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004006:	2100      	movs	r1, #0
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f965 	bl	80042d8 <USB_SetDevSpeed>
 800400e:	e008      	b.n	8004022 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004010:	2101      	movs	r1, #1
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f960 	bl	80042d8 <USB_SetDevSpeed>
 8004018:	e003      	b.n	8004022 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800401a:	2103      	movs	r1, #3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f95b 	bl	80042d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004022:	2110      	movs	r1, #16
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8f3 	bl	8004210 <USB_FlushTxFifo>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f91f 	bl	8004278 <USB_FlushRxFifo>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e043      	b.n	80040f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004084:	d118      	bne.n	80040b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e013      	b.n	80040ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e008      	b.n	80040ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3301      	adds	r3, #1
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3b7      	bcc.n	800406e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e043      	b.n	800418c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411a:	d118      	bne.n	800414e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e013      	b.n	8004160 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	461a      	mov	r2, r3
 8004146:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e008      	b.n	8004160 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	461a      	mov	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	461a      	mov	r2, r3
 8004180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3301      	adds	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d3b7      	bcc.n	8004104 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f043 0210 	orr.w	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <USB_DevInit+0x2c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f043 0208 	orr.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004208:	b004      	add	sp, #16
 800420a:	4770      	bx	lr
 800420c:	803c3800 	.word	0x803c3800

08004210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a13      	ldr	r2, [pc, #76]	; (8004274 <USB_FlushTxFifo+0x64>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e01b      	b.n	8004268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	daf2      	bge.n	800421e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	019b      	lsls	r3, r3, #6
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <USB_FlushTxFifo+0x64>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e006      	b.n	8004268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d0f0      	beq.n	8004248 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	00030d40 	.word	0x00030d40

08004278 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <USB_FlushRxFifo+0x5c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e018      	b.n	80042c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	daf2      	bge.n	8004284 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2210      	movs	r2, #16
 80042a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <USB_FlushRxFifo+0x5c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e006      	b.n	80042c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d0f0      	beq.n	80042a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	00030d40 	.word	0x00030d40

080042d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	68f9      	ldr	r1, [r7, #12]
 80042f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0306 	and.w	r3, r3, #6
 8004322:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
 800432e:	e00a      	b.n	8004346 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d002      	beq.n	800433c <USB_GetDevSpeed+0x32>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b06      	cmp	r3, #6
 800433a:	d102      	bne.n	8004342 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800433c:	2302      	movs	r3, #2
 800433e:	75fb      	strb	r3, [r7, #23]
 8004340:	e001      	b.n	8004346 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004342:	230f      	movs	r3, #15
 8004344:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d13a      	bne.n	80043e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	2101      	movs	r1, #1
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	b29b      	uxth	r3, r3
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438e:	4313      	orrs	r3, r2
 8004390:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d155      	bne.n	8004454 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	791b      	ldrb	r3, [r3, #4]
 80043c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	059b      	lsls	r3, r3, #22
 80043ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043cc:	4313      	orrs	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e036      	b.n	8004454 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004404:	4313      	orrs	r3, r2
 8004406:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11a      	bne.n	8004454 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	791b      	ldrb	r3, [r3, #4]
 8004438:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800443a:	430b      	orrs	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004452:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d161      	bne.n	8004544 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004496:	d11f      	bne.n	80044d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f8:	4013      	ands	r3, r2
 80044fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	b29b      	uxth	r3, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800451c:	4013      	ands	r3, r2
 800451e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0159      	lsls	r1, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	440b      	add	r3, r1
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	4619      	mov	r1, r3
 800453c:	4b35      	ldr	r3, [pc, #212]	; (8004614 <USB_DeactivateEndpoint+0x1b0>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
 8004542:	e060      	b.n	8004606 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800455a:	d11f      	bne.n	800459c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800457a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	440a      	add	r2, r1
 8004592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800459a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	43db      	mvns	r3, r3
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045bc:	4013      	ands	r3, r2
 80045be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	2101      	movs	r1, #1
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	43db      	mvns	r3, r3
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e0:	4013      	ands	r3, r2
 80045e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	0159      	lsls	r1, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	4619      	mov	r1, r3
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <USB_DeactivateEndpoint+0x1b4>)
 8004602:	4013      	ands	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	ec337800 	.word	0xec337800
 8004618:	eff37800 	.word	0xeff37800

0800461c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b01      	cmp	r3, #1
 800463a:	f040 815c 	bne.w	80048f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d132      	bne.n	80046ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	0cdb      	lsrs	r3, r3, #19
 80046a6:	04db      	lsls	r3, r3, #19
 80046a8:	6113      	str	r3, [r2, #16]
 80046aa:	e074      	b.n	8004796 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c6:	0cdb      	lsrs	r3, r3, #19
 80046c8:	04db      	lsls	r3, r3, #19
 80046ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	440b      	add	r3, r1
 8004708:	1e59      	subs	r1, r3, #1
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004712:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004714:	4b9d      	ldr	r3, [pc, #628]	; (800498c <USB_EPStartXfer+0x370>)
 8004716:	400b      	ands	r3, r1
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	0148      	lsls	r0, r1, #5
 800471c:	69f9      	ldr	r1, [r7, #28]
 800471e:	4401      	add	r1, r0
 8004720:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473e:	69b9      	ldr	r1, [r7, #24]
 8004740:	0148      	lsls	r0, r1, #5
 8004742:	69f9      	ldr	r1, [r7, #28]
 8004744:	4401      	add	r1, r0
 8004746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800474a:	4313      	orrs	r3, r2
 800474c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	791b      	ldrb	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d11f      	bne.n	8004796 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004770:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004774:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004794:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d14b      	bne.n	8004834 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	791b      	ldrb	r3, [r3, #4]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d128      	bne.n	8004812 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e00f      	b.n	8004812 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004810:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e133      	b.n	8004a9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004852:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d015      	beq.n	8004888 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 811b 	beq.w	8004a9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	2101      	movs	r1, #1
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	69f9      	ldr	r1, [r7, #28]
 800487e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004882:	4313      	orrs	r3, r2
 8004884:	634b      	str	r3, [r1, #52]	; 0x34
 8004886:	e109      	b.n	8004a9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d110      	bne.n	80048ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e00f      	b.n	80048da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	b298      	uxth	r0, r3
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	4603      	mov	r3, r0
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fade 	bl	8004eb0 <USB_WritePacket>
 80048f4:	e0d2      	b.n	8004a9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	0cdb      	lsrs	r3, r3, #19
 8004912:	04db      	lsls	r3, r3, #19
 8004914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004938:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d126      	bne.n	8004990 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	0148      	lsls	r0, r1, #5
 800495c:	69f9      	ldr	r1, [r7, #28]
 800495e:	4401      	add	r1, r0
 8004960:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004986:	6113      	str	r3, [r2, #16]
 8004988:	e03a      	b.n	8004a00 <USB_EPStartXfer+0x3e4>
 800498a:	bf00      	nop
 800498c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4413      	add	r3, r2
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	8afa      	ldrh	r2, [r7, #22]
 80049ac:	fb03 f202 	mul.w	r2, r3, r2
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	04d9      	lsls	r1, r3, #19
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <USB_EPStartXfer+0x48c>)
 80049c8:	400b      	ands	r3, r1
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	0148      	lsls	r0, r1, #5
 80049ce:	69f9      	ldr	r1, [r7, #28]
 80049d0:	4401      	add	r1, r0
 80049d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	0148      	lsls	r0, r1, #5
 80049f4:	69f9      	ldr	r1, [r7, #28]
 80049f6:	4401      	add	r1, r0
 80049f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049fc:	4313      	orrs	r3, r2
 80049fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10d      	bne.n	8004a22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	460a      	mov	r2, r1
 8004a20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	791b      	ldrb	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d128      	bne.n	8004a7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00f      	b.n	8004a7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	1ff80000 	.word	0x1ff80000

08004aac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 80ce 	bne.w	8004c6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d132      	bne.n	8004b3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b34:	0cdb      	lsrs	r3, r3, #19
 8004b36:	04db      	lsls	r3, r3, #19
 8004b38:	6113      	str	r3, [r2, #16]
 8004b3a:	e04e      	b.n	8004bda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	0cdb      	lsrs	r3, r3, #19
 8004b58:	04db      	lsls	r3, r3, #19
 8004b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d903      	bls.n	8004b94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	0148      	lsls	r0, r1, #5
 8004bce:	6979      	ldr	r1, [r7, #20]
 8004bd0:	4401      	add	r1, r0
 8004bd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d11e      	bne.n	8004c1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e097      	b.n	8004d4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8083 	beq.w	8004d4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c64:	4313      	orrs	r3, r2
 8004c66:	634b      	str	r3, [r1, #52]	; 0x34
 8004c68:	e071      	b.n	8004d4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	0cdb      	lsrs	r3, r3, #19
 8004c86:	04db      	lsls	r3, r3, #19
 8004c88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ca8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	6939      	ldr	r1, [r7, #16]
 8004cfe:	0148      	lsls	r0, r1, #5
 8004d00:	6979      	ldr	r1, [r7, #20]
 8004d02:	4401      	add	r1, r0
 8004d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10d      	bne.n	8004d2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6919      	ldr	r1, [r3, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d14a      	bne.n	8004e10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d92:	f040 8086 	bne.w	8004ea2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004db8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ddc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d902      	bls.n	8004df4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
          break;
 8004df2:	e056      	b.n	8004ea2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0c:	d0e7      	beq.n	8004dde <USB_EPStopXfer+0x82>
 8004e0e:	e048      	b.n	8004ea2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e28:	d13b      	bne.n	8004ea2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d902      	bls.n	8004e88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
          break;
 8004e86:	e00c      	b.n	8004ea2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea0:	d0e7      	beq.n	8004e72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	; 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d123      	bne.n	8004f1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ed6:	88bb      	ldrh	r3, [r7, #4]
 8004ed8:	3303      	adds	r3, #3
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e018      	b.n	8004f16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	031a      	lsls	r2, r3, #12
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3301      	adds	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d3e2      	bcc.n	8004ee4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3724      	adds	r7, #36	; 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	e014      	b.n	8004f82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	3301      	adds	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	3301      	adds	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	3301      	adds	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d3e6      	bcc.n	8004f58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f8a:	8bfb      	ldrh	r3, [r7, #30]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01e      	beq.n	8004fce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f107 0310 	add.w	r3, r7, #16
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	701a      	strb	r2, [r3, #0]
      i++;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fc2:	8bfb      	ldrh	r3, [r7, #30]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fc8:	8bfb      	ldrh	r3, [r7, #30]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ea      	bne.n	8004fa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	372c      	adds	r7, #44	; 0x2c
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d12c      	bne.n	8005052 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	db12      	blt.n	8005030 <USB_EPSetStall+0x54>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00f      	beq.n	8005030 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800502e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e02b      	b.n	80050aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db12      	blt.n	800508a <USB_EPSetStall+0xae>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00f      	beq.n	800508a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005088:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d128      	bne.n	8005126 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	791b      	ldrb	r3, [r3, #4]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <USB_EPClearStall+0x4c>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	791b      	ldrb	r3, [r3, #4]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d138      	bne.n	8005176 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e027      	b.n	8005176 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005144:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d003      	beq.n	8005156 <USB_EPClearStall+0x9e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d10f      	bne.n	8005176 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051fe:	f023 0302 	bic.w	r3, r3, #2
 8005202:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800522c:	f023 0303 	bic.w	r3, r3, #3
 8005230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005240:	f043 0302 	orr.w	r3, r3, #2
 8005244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0c1b      	lsrs	r3, r3, #16
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4013      	ands	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	b29b      	uxth	r3, r3
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005310:	68bb      	ldr	r3, [r7, #8]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800531e:	b480      	push	{r7}
 8005320:	b087      	sub	sp, #28
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	b2db      	uxtb	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4013      	ands	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800536c:	68bb      	ldr	r3, [r7, #8]
}
 800536e:	4618      	mov	r0, r3
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0301 	and.w	r3, r3, #1
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053b4:	f023 0307 	bic.w	r3, r3, #7
 80053b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	460b      	mov	r3, r1
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	333c      	adds	r3, #60	; 0x3c
 80053f2:	3304      	adds	r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4a26      	ldr	r2, [pc, #152]	; (8005494 <USB_EP0_OutStart+0xb8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d90a      	bls.n	8005416 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005410:	d101      	bne.n	8005416 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	e037      	b.n	8005486 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	f043 0318 	orr.w	r3, r3, #24
 8005448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800545c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10f      	bne.n	8005484 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	461a      	mov	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	4f54300a 	.word	0x4f54300a

08005498 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a13      	ldr	r2, [pc, #76]	; (80054fc <USB_CoreReset+0x64>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e01b      	b.n	80054ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	daf2      	bge.n	80054a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <USB_CoreReset+0x64>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e006      	b.n	80054ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d0f0      	beq.n	80054ce <USB_CoreReset+0x36>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	00030d40 	.word	0x00030d40

08005500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800550c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005510:	f002 fcc4 	bl	8007e9c <USBD_static_malloc>
 8005514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	32b0      	adds	r2, #176	; 0xb0
 8005526:	2100      	movs	r1, #0
 8005528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800552c:	2302      	movs	r3, #2
 800552e:	e0d4      	b.n	80056da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005530:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005534:	2100      	movs	r1, #0
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f002 fcf4 	bl	8007f24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	32b0      	adds	r2, #176	; 0xb0
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	32b0      	adds	r2, #176	; 0xb0
 8005556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7c1b      	ldrb	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d138      	bne.n	80055da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005568:	4b5e      	ldr	r3, [pc, #376]	; (80056e4 <USBD_CDC_Init+0x1e4>)
 800556a:	7819      	ldrb	r1, [r3, #0]
 800556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005570:	2202      	movs	r2, #2
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f002 fb6f 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005578:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <USBD_CDC_Init+0x1e4>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3324      	adds	r3, #36	; 0x24
 800558e:	2201      	movs	r2, #1
 8005590:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005592:	4b55      	ldr	r3, [pc, #340]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 8005594:	7819      	ldrb	r1, [r3, #0]
 8005596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800559a:	2202      	movs	r2, #2
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f002 fb5a 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f003 020f 	and.w	r2, r3, #15
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055ba:	2201      	movs	r2, #1
 80055bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055be:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <USBD_CDC_Init+0x1ec>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f003 020f 	and.w	r2, r3, #15
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	3326      	adds	r3, #38	; 0x26
 80055d4:	2210      	movs	r2, #16
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	e035      	b.n	8005646 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055da:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <USBD_CDC_Init+0x1e4>)
 80055dc:	7819      	ldrb	r1, [r3, #0]
 80055de:	2340      	movs	r3, #64	; 0x40
 80055e0:	2202      	movs	r2, #2
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f002 fb37 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055e8:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <USBD_CDC_Init+0x1e4>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	3324      	adds	r3, #36	; 0x24
 80055fe:	2201      	movs	r2, #1
 8005600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 8005604:	7819      	ldrb	r1, [r3, #0]
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	2202      	movs	r2, #2
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f002 fb23 	bl	8007c56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005610:	4b35      	ldr	r3, [pc, #212]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 020f 	and.w	r2, r3, #15
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005628:	2201      	movs	r2, #1
 800562a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800562c:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <USBD_CDC_Init+0x1ec>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 020f 	and.w	r2, r3, #15
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3326      	adds	r3, #38	; 0x26
 8005642:	2210      	movs	r2, #16
 8005644:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005646:	4b29      	ldr	r3, [pc, #164]	; (80056ec <USBD_CDC_Init+0x1ec>)
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	2308      	movs	r3, #8
 800564c:	2203      	movs	r2, #3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 fb01 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <USBD_CDC_Init+0x1ec>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3324      	adds	r3, #36	; 0x24
 800566a:	2201      	movs	r2, #1
 800566c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	33b0      	adds	r3, #176	; 0xb0
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056a4:	2302      	movs	r3, #2
 80056a6:	e018      	b.n	80056da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7c1b      	ldrb	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 80056b2:	7819      	ldrb	r1, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f002 fbb8 	bl	8007e34 <USBD_LL_PrepareReceive>
 80056c4:	e008      	b.n	80056d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <USBD_CDC_Init+0x1e8>)
 80056c8:	7819      	ldrb	r1, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056d0:	2340      	movs	r3, #64	; 0x40
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f002 fbae 	bl	8007e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000093 	.word	0x20000093
 80056e8:	20000094 	.word	0x20000094
 80056ec:	20000095 	.word	0x20000095

080056f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <USBD_CDC_DeInit+0xf8>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f002 facd 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005708:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <USBD_CDC_DeInit+0xf8>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 020f 	and.w	r2, r3, #15
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3324      	adds	r3, #36	; 0x24
 800571e:	2200      	movs	r2, #0
 8005720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005722:	4b32      	ldr	r3, [pc, #200]	; (80057ec <USBD_CDC_DeInit+0xfc>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f002 faba 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800572e:	4b2f      	ldr	r3, [pc, #188]	; (80057ec <USBD_CDC_DeInit+0xfc>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 020f 	and.w	r2, r3, #15
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005746:	2200      	movs	r2, #0
 8005748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <USBD_CDC_DeInit+0x100>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f002 faa6 	bl	8007ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <USBD_CDC_DeInit+0x100>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	2200      	movs	r2, #0
 800576e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <USBD_CDC_DeInit+0x100>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	3326      	adds	r3, #38	; 0x26
 8005786:	2200      	movs	r2, #0
 8005788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	32b0      	adds	r2, #176	; 0xb0
 8005794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	33b0      	adds	r3, #176	; 0xb0
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	32b0      	adds	r2, #176	; 0xb0
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	4618      	mov	r0, r3
 80057c0:	f002 fb7a 	bl	8007eb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32b0      	adds	r2, #176	; 0xb0
 80057ce:	2100      	movs	r1, #0
 80057d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000093 	.word	0x20000093
 80057ec:	20000094 	.word	0x20000094
 80057f0:	20000095 	.word	0x20000095

080057f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32b0      	adds	r2, #176	; 0xb0
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e0bf      	b.n	80059a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582c:	2b00      	cmp	r3, #0
 800582e:	d050      	beq.n	80058d2 <USBD_CDC_Setup+0xde>
 8005830:	2b20      	cmp	r3, #32
 8005832:	f040 80af 	bne.w	8005994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d03a      	beq.n	80058b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b25b      	sxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	da1b      	bge.n	8005880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	33b0      	adds	r3, #176	; 0xb0
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800585e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	88d2      	ldrh	r2, [r2, #6]
 8005864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	88db      	ldrh	r3, [r3, #6]
 800586a:	2b07      	cmp	r3, #7
 800586c:	bf28      	it	cs
 800586e:	2307      	movcs	r3, #7
 8005870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	89fa      	ldrh	r2, [r7, #14]
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fd89 	bl	8007390 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800587e:	e090      	b.n	80059a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785a      	ldrb	r2, [r3, #1]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	88db      	ldrh	r3, [r3, #6]
 800588e:	2b3f      	cmp	r3, #63	; 0x3f
 8005890:	d803      	bhi.n	800589a <USBD_CDC_Setup+0xa6>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	e000      	b.n	800589c <USBD_CDC_Setup+0xa8>
 800589a:	2240      	movs	r2, #64	; 0x40
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058a2:	6939      	ldr	r1, [r7, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058aa:	461a      	mov	r2, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 fd9b 	bl	80073e8 <USBD_CtlPrepareRx>
      break;
 80058b2:	e076      	b.n	80059a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	33b0      	adds	r3, #176	; 0xb0
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	7850      	ldrb	r0, [r2, #1]
 80058ca:	2200      	movs	r2, #0
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	4798      	blx	r3
      break;
 80058d0:	e067      	b.n	80059a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d851      	bhi.n	800597e <USBD_CDC_Setup+0x18a>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <USBD_CDC_Setup+0xec>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005911 	.word	0x08005911
 80058e4:	0800598d 	.word	0x0800598d
 80058e8:	0800597f 	.word	0x0800597f
 80058ec:	0800597f 	.word	0x0800597f
 80058f0:	0800597f 	.word	0x0800597f
 80058f4:	0800597f 	.word	0x0800597f
 80058f8:	0800597f 	.word	0x0800597f
 80058fc:	0800597f 	.word	0x0800597f
 8005900:	0800597f 	.word	0x0800597f
 8005904:	0800597f 	.word	0x0800597f
 8005908:	0800593b 	.word	0x0800593b
 800590c:	08005965 	.word	0x08005965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b03      	cmp	r3, #3
 800591a:	d107      	bne.n	800592c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800591c:	f107 030a 	add.w	r3, r7, #10
 8005920:	2202      	movs	r2, #2
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fd33 	bl	8007390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800592a:	e032      	b.n	8005992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fcbd 	bl	80072ae <USBD_CtlError>
            ret = USBD_FAIL;
 8005934:	2303      	movs	r3, #3
 8005936:	75fb      	strb	r3, [r7, #23]
          break;
 8005938:	e02b      	b.n	8005992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005946:	f107 030d 	add.w	r3, r7, #13
 800594a:	2201      	movs	r2, #1
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fd1e 	bl	8007390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005954:	e01d      	b.n	8005992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fca8 	bl	80072ae <USBD_CtlError>
            ret = USBD_FAIL;
 800595e:	2303      	movs	r3, #3
 8005960:	75fb      	strb	r3, [r7, #23]
          break;
 8005962:	e016      	b.n	8005992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d00f      	beq.n	8005990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 fc9b 	bl	80072ae <USBD_CtlError>
            ret = USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800597c:	e008      	b.n	8005990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fc94 	bl	80072ae <USBD_CtlError>
          ret = USBD_FAIL;
 8005986:	2303      	movs	r3, #3
 8005988:	75fb      	strb	r3, [r7, #23]
          break;
 800598a:	e002      	b.n	8005992 <USBD_CDC_Setup+0x19e>
          break;
 800598c:	bf00      	nop
 800598e:	e008      	b.n	80059a2 <USBD_CDC_Setup+0x1ae>
          break;
 8005990:	bf00      	nop
      }
      break;
 8005992:	e006      	b.n	80059a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fc89 	bl	80072ae <USBD_CtlError>
      ret = USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	75fb      	strb	r3, [r7, #23]
      break;
 80059a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	32b0      	adds	r2, #176	; 0xb0
 80059ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e065      	b.n	8005aa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	32b0      	adds	r2, #176	; 0xb0
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3318      	adds	r3, #24
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02f      	beq.n	8005a60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	f003 020f 	and.w	r2, r3, #15
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	3318      	adds	r3, #24
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	f003 010f 	and.w	r1, r3, #15
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4403      	add	r3, r0
 8005a28:	3348      	adds	r3, #72	; 0x48
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d112      	bne.n	8005a60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a52:	78f9      	ldrb	r1, [r7, #3]
 8005a54:	2300      	movs	r3, #0
 8005a56:	2200      	movs	r2, #0
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f002 f9ca 	bl	8007df2 <USBD_LL_Transmit>
 8005a5e:	e01f      	b.n	8005aa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	33b0      	adds	r3, #176	; 0xb0
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	33b0      	adds	r3, #176	; 0xb0
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	32b0      	adds	r2, #176	; 0xb0
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32b0      	adds	r2, #176	; 0xb0
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e01a      	b.n	8005b12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f002 f9c8 	bl	8007e76 <USBD_LL_GetRxDataSize>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	33b0      	adds	r3, #176	; 0xb0
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32b0      	adds	r2, #176	; 0xb0
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e025      	b.n	8005b88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	33b0      	adds	r3, #176	; 0xb0
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <USBD_CDC_EP0_RxReady+0x6c>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b56:	2bff      	cmp	r3, #255	; 0xff
 8005b58:	d015      	beq.n	8005b86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	33b0      	adds	r3, #176	; 0xb0
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	22ff      	movs	r2, #255	; 0xff
 8005b82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b98:	2182      	movs	r1, #130	; 0x82
 8005b9a:	4818      	ldr	r0, [pc, #96]	; (8005bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b9c:	f000 fd4f 	bl	800663e <USBD_GetEpDesc>
 8005ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4815      	ldr	r0, [pc, #84]	; (8005bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ba6:	f000 fd4a 	bl	800663e <USBD_GetEpDesc>
 8005baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bac:	2181      	movs	r1, #129	; 0x81
 8005bae:	4813      	ldr	r0, [pc, #76]	; (8005bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bb0:	f000 fd45 	bl	800663e <USBD_GetEpDesc>
 8005bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd0:	711a      	strb	r2, [r3, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be4:	711a      	strb	r2, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2243      	movs	r2, #67	; 0x43
 8005bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000050 	.word	0x20000050

08005c00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c08:	2182      	movs	r1, #130	; 0x82
 8005c0a:	4818      	ldr	r0, [pc, #96]	; (8005c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c0c:	f000 fd17 	bl	800663e <USBD_GetEpDesc>
 8005c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c12:	2101      	movs	r1, #1
 8005c14:	4815      	ldr	r0, [pc, #84]	; (8005c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c16:	f000 fd12 	bl	800663e <USBD_GetEpDesc>
 8005c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c1c:	2181      	movs	r1, #129	; 0x81
 8005c1e:	4813      	ldr	r0, [pc, #76]	; (8005c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c20:	f000 fd0d 	bl	800663e <USBD_GetEpDesc>
 8005c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2210      	movs	r2, #16
 8005c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	711a      	strb	r2, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f042 0202 	orr.w	r2, r2, #2
 8005c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	711a      	strb	r2, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f042 0202 	orr.w	r2, r2, #2
 8005c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2243      	movs	r2, #67	; 0x43
 8005c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000050 	.word	0x20000050

08005c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c78:	2182      	movs	r1, #130	; 0x82
 8005c7a:	4818      	ldr	r0, [pc, #96]	; (8005cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c7c:	f000 fcdf 	bl	800663e <USBD_GetEpDesc>
 8005c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c82:	2101      	movs	r1, #1
 8005c84:	4815      	ldr	r0, [pc, #84]	; (8005cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c86:	f000 fcda 	bl	800663e <USBD_GetEpDesc>
 8005c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c8c:	2181      	movs	r1, #129	; 0x81
 8005c8e:	4813      	ldr	r0, [pc, #76]	; (8005cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c90:	f000 fcd5 	bl	800663e <USBD_GetEpDesc>
 8005c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb0:	711a      	strb	r2, [r3, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	711a      	strb	r2, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2243      	movs	r2, #67	; 0x43
 8005cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000050 	.word	0x20000050

08005ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	220a      	movs	r2, #10
 8005cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	2000000c 	.word	0x2000000c

08005d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e009      	b.n	8005d28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	33b0      	adds	r3, #176	; 0xb0
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	32b0      	adds	r2, #176	; 0xb0
 8005d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e008      	b.n	8005d6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	32b0      	adds	r2, #176	; 0xb0
 8005d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e004      	b.n	8005da6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32b0      	adds	r2, #176	; 0xb0
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32b0      	adds	r2, #176	; 0xb0
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e025      	b.n	8005e32 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11f      	bne.n	8005e30 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005df8:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <USBD_CDC_TransmitPacket+0x88>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 020f 	and.w	r2, r3, #15
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4403      	add	r3, r0
 8005e12:	3318      	adds	r3, #24
 8005e14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <USBD_CDC_TransmitPacket+0x88>)
 8005e18:	7819      	ldrb	r1, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 ffe3 	bl	8007df2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000093 	.word	0x20000093

08005e40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32b0      	adds	r2, #176	; 0xb0
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	32b0      	adds	r2, #176	; 0xb0
 8005e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e018      	b.n	8005ea0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7c1b      	ldrb	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <USBD_CDC_ReceivePacket+0x68>)
 8005e78:	7819      	ldrb	r1, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 ffd5 	bl	8007e34 <USBD_LL_PrepareReceive>
 8005e8a:	e008      	b.n	8005e9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <USBD_CDC_ReceivePacket+0x68>)
 8005e8e:	7819      	ldrb	r1, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e96:	2340      	movs	r3, #64	; 0x40
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 ffcb 	bl	8007e34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000094 	.word	0x20000094

08005eac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e01f      	b.n	8005f04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	79fa      	ldrb	r2, [r7, #7]
 8005ef6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f001 fe45 	bl	8007b88 <USBD_LL_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e025      	b.n	8005f70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32ae      	adds	r2, #174	; 0xae
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00f      	beq.n	8005f60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	32ae      	adds	r2, #174	; 0xae
 8005f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f107 020e 	add.w	r2, r7, #14
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fe4d 	bl	8007c20 <USBD_LL_Start>
 8005f86:	4603      	mov	r3, r0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f908 	bl	800723a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b02      	cmp	r3, #2
 800604c:	d01a      	beq.n	8006084 <USBD_LL_SetupStage+0x72>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d822      	bhi.n	8006098 <USBD_LL_SetupStage+0x86>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <USBD_LL_SetupStage+0x4a>
 8006056:	2b01      	cmp	r3, #1
 8006058:	d00a      	beq.n	8006070 <USBD_LL_SetupStage+0x5e>
 800605a:	e01d      	b.n	8006098 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fb5f 	bl	8006728 <USBD_StdDevReq>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]
      break;
 800606e:	e020      	b.n	80060b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fbc7 	bl	800680c <USBD_StdItfReq>
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
      break;
 8006082:	e016      	b.n	80060b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc29 	bl	80068e4 <USBD_StdEPReq>
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
      break;
 8006096:	e00c      	b.n	80060b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800609e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fe1a 	bl	8007ce0 <USBD_LL_StallEP>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	bf00      	nop
  }

  return ret;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	460b      	mov	r3, r1
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d16e      	bne.n	80061b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	f040 8098 	bne.w	8006218 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d913      	bls.n	800611c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	1ad2      	subs	r2, r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4293      	cmp	r3, r2
 800610c:	bf28      	it	cs
 800610e:	4613      	movcs	r3, r2
 8006110:	461a      	mov	r2, r3
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f001 f984 	bl	8007422 <USBD_CtlContinueRx>
 800611a:	e07d      	b.n	8006218 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2b02      	cmp	r3, #2
 8006128:	d014      	beq.n	8006154 <USBD_LL_DataOutStage+0x98>
 800612a:	2b02      	cmp	r3, #2
 800612c:	d81d      	bhi.n	800616a <USBD_LL_DataOutStage+0xae>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <USBD_LL_DataOutStage+0x7c>
 8006132:	2b01      	cmp	r3, #1
 8006134:	d003      	beq.n	800613e <USBD_LL_DataOutStage+0x82>
 8006136:	e018      	b.n	800616a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	75bb      	strb	r3, [r7, #22]
            break;
 800613c:	e018      	b.n	8006170 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006144:	b2db      	uxtb	r3, r3
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fa5e 	bl	800660a <USBD_CoreFindIF>
 800614e:	4603      	mov	r3, r0
 8006150:	75bb      	strb	r3, [r7, #22]
            break;
 8006152:	e00d      	b.n	8006170 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800615a:	b2db      	uxtb	r3, r3
 800615c:	4619      	mov	r1, r3
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fa60 	bl	8006624 <USBD_CoreFindEP>
 8006164:	4603      	mov	r3, r0
 8006166:	75bb      	strb	r3, [r7, #22]
            break;
 8006168:	e002      	b.n	8006170 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	75bb      	strb	r3, [r7, #22]
            break;
 800616e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006170:	7dbb      	ldrb	r3, [r7, #22]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d119      	bne.n	80061aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b03      	cmp	r3, #3
 8006180:	d113      	bne.n	80061aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006182:	7dba      	ldrb	r2, [r7, #22]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	32ae      	adds	r2, #174	; 0xae
 8006188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006192:	7dba      	ldrb	r2, [r7, #22]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800619a:	7dba      	ldrb	r2, [r7, #22]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	32ae      	adds	r2, #174	; 0xae
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f001 f94a 	bl	8007444 <USBD_CtlSendStatus>
 80061b0:	e032      	b.n	8006218 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fa31 	bl	8006624 <USBD_CoreFindEP>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c6:	7dbb      	ldrb	r3, [r7, #22]
 80061c8:	2bff      	cmp	r3, #255	; 0xff
 80061ca:	d025      	beq.n	8006218 <USBD_LL_DataOutStage+0x15c>
 80061cc:	7dbb      	ldrb	r3, [r7, #22]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d122      	bne.n	8006218 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d117      	bne.n	800620e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061de:	7dba      	ldrb	r2, [r7, #22]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	32ae      	adds	r2, #174	; 0xae
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00f      	beq.n	800620e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061ee:	7dba      	ldrb	r2, [r7, #22]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80061f6:	7dba      	ldrb	r2, [r7, #22]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	32ae      	adds	r2, #174	; 0xae
 80061fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	7afa      	ldrb	r2, [r7, #11]
 8006204:	4611      	mov	r1, r2
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	4798      	blx	r3
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	e000      	b.n	800621a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	460b      	mov	r3, r1
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006230:	7afb      	ldrb	r3, [r7, #11]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d16f      	bne.n	8006316 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3314      	adds	r3, #20
 800623a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006242:	2b02      	cmp	r3, #2
 8006244:	d15a      	bne.n	80062fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	429a      	cmp	r2, r3
 8006250:	d914      	bls.n	800627c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	461a      	mov	r2, r3
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f001 f8ac 	bl	80073c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800626e:	2300      	movs	r3, #0
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f001 fddd 	bl	8007e34 <USBD_LL_PrepareReceive>
 800627a:	e03f      	b.n	80062fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	429a      	cmp	r2, r3
 8006286:	d11c      	bne.n	80062c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006290:	429a      	cmp	r2, r3
 8006292:	d316      	bcc.n	80062c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800629e:	429a      	cmp	r2, r3
 80062a0:	d20f      	bcs.n	80062c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f001 f88d 	bl	80073c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 fdba 	bl	8007e34 <USBD_LL_PrepareReceive>
 80062c0:	e01c      	b.n	80062fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d10f      	bne.n	80062ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 fcf5 	bl	8007ce0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f001 f8b7 	bl	800746a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d03a      	beq.n	800637c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fe42 	bl	8005f90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006314:	e032      	b.n	800637c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800631c:	b2db      	uxtb	r3, r3
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f97f 	bl	8006624 <USBD_CoreFindEP>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	d025      	beq.n	800637c <USBD_LL_DataInStage+0x15a>
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d122      	bne.n	800637c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d11c      	bne.n	800637c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006342:	7dfa      	ldrb	r2, [r7, #23]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	32ae      	adds	r2, #174	; 0xae
 8006348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d014      	beq.n	800637c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006352:	7dfa      	ldrb	r2, [r7, #23]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800635a:	7dfa      	ldrb	r2, [r7, #23]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	32ae      	adds	r2, #174	; 0xae
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	7afa      	ldrb	r2, [r7, #11]
 8006368:	4611      	mov	r1, r2
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
 800636e:	4603      	mov	r3, r0
 8006370:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006372:	7dbb      	ldrb	r3, [r7, #22]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006378:	7dbb      	ldrb	r3, [r7, #22]
 800637a:	e000      	b.n	800637e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d014      	beq.n	80063ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6852      	ldr	r2, [r2, #4]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	4611      	mov	r1, r2
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	2200      	movs	r2, #0
 80063f0:	2100      	movs	r1, #0
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fc2f 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2240      	movs	r2, #64	; 0x40
 8006404:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	2200      	movs	r2, #0
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 fc21 	bl	8007c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2240      	movs	r2, #64	; 0x40
 800641e:	621a      	str	r2, [r3, #32]

  return ret;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	b2da      	uxtb	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2204      	movs	r2, #4
 8006464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b04      	cmp	r3, #4
 8006488:	d106      	bne.n	8006498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d110      	bne.n	80064dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	32ae      	adds	r2, #174	; 0xae
 80064fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e01c      	b.n	8006542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b03      	cmp	r3, #3
 8006512:	d115      	bne.n	8006540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	32ae      	adds	r2, #174	; 0xae
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	32ae      	adds	r2, #174	; 0xae
 8006532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	78fa      	ldrb	r2, [r7, #3]
 800653a:	4611      	mov	r1, r2
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32ae      	adds	r2, #174	; 0xae
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006568:	2303      	movs	r3, #3
 800656a:	e01c      	b.n	80065a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b03      	cmp	r3, #3
 8006576:	d115      	bne.n	80065a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	32ae      	adds	r2, #174	; 0xae
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	32ae      	adds	r2, #174	; 0xae
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	4611      	mov	r1, r2
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6852      	ldr	r2, [r2, #4]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	4611      	mov	r1, r2
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	885b      	ldrh	r3, [r3, #2]
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	429a      	cmp	r2, r3
 8006664:	d920      	bls.n	80066a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800666e:	e013      	b.n	8006698 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006670:	f107 030a 	add.w	r3, r7, #10
 8006674:	4619      	mov	r1, r3
 8006676:	6978      	ldr	r0, [r7, #20]
 8006678:	f000 f81b 	bl	80066b2 <USBD_GetNextDesc>
 800667c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	2b05      	cmp	r3, #5
 8006684:	d108      	bne.n	8006698 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	789b      	ldrb	r3, [r3, #2]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	429a      	cmp	r2, r3
 8006692:	d008      	beq.n	80066a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	885b      	ldrh	r3, [r3, #2]
 800669c:	b29a      	uxth	r2, r3
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d8e5      	bhi.n	8006670 <USBD_GetEpDesc+0x32>
 80066a4:	e000      	b.n	80066a8 <USBD_GetEpDesc+0x6a>
          break;
 80066a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066a8:	693b      	ldr	r3, [r7, #16]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	881a      	ldrh	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	4413      	add	r3, r2
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4413      	add	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	3301      	adds	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800670a:	8a3b      	ldrh	r3, [r7, #16]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	b21a      	sxth	r2, r3
 8006710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006714:	4313      	orrs	r3, r2
 8006716:	b21b      	sxth	r3, r3
 8006718:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800671a:	89fb      	ldrh	r3, [r7, #14]
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d005      	beq.n	800674e <USBD_StdDevReq+0x26>
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d857      	bhi.n	80067f6 <USBD_StdDevReq+0xce>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00f      	beq.n	800676a <USBD_StdDevReq+0x42>
 800674a:	2b20      	cmp	r3, #32
 800674c:	d153      	bne.n	80067f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	32ae      	adds	r2, #174	; 0xae
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
      break;
 8006768:	e04a      	b.n	8006800 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b09      	cmp	r3, #9
 8006770:	d83b      	bhi.n	80067ea <USBD_StdDevReq+0xc2>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <USBD_StdDevReq+0x50>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067cd 	.word	0x080067cd
 800677c:	080067e1 	.word	0x080067e1
 8006780:	080067eb 	.word	0x080067eb
 8006784:	080067d7 	.word	0x080067d7
 8006788:	080067eb 	.word	0x080067eb
 800678c:	080067ab 	.word	0x080067ab
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067eb 	.word	0x080067eb
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067b5 	.word	0x080067b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa3c 	bl	8006c20 <USBD_GetDescriptor>
          break;
 80067a8:	e024      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fba1 	bl	8006ef4 <USBD_SetAddress>
          break;
 80067b2:	e01f      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fbe0 	bl	8006f7c <USBD_SetConfig>
 80067bc:	4603      	mov	r3, r0
 80067be:	73fb      	strb	r3, [r7, #15]
          break;
 80067c0:	e018      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc83 	bl	80070d0 <USBD_GetConfig>
          break;
 80067ca:	e013      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fcb4 	bl	800713c <USBD_GetStatus>
          break;
 80067d4:	e00e      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fce3 	bl	80071a4 <USBD_SetFeature>
          break;
 80067de:	e009      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fd07 	bl	80071f6 <USBD_ClrFeature>
          break;
 80067e8:	e004      	b.n	80067f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fd5e 	bl	80072ae <USBD_CtlError>
          break;
 80067f2:	bf00      	nop
      }
      break;
 80067f4:	e004      	b.n	8006800 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fd58 	bl	80072ae <USBD_CtlError>
      break;
 80067fe:	bf00      	nop
  }

  return ret;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop

0800680c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d005      	beq.n	8006832 <USBD_StdItfReq+0x26>
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d852      	bhi.n	80068d0 <USBD_StdItfReq+0xc4>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <USBD_StdItfReq+0x26>
 800682e:	2b20      	cmp	r3, #32
 8006830:	d14e      	bne.n	80068d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	2b02      	cmp	r3, #2
 800683e:	d840      	bhi.n	80068c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	889b      	ldrh	r3, [r3, #4]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	d836      	bhi.n	80068b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fed9 	bl	800660a <USBD_CoreFindIF>
 8006858:	4603      	mov	r3, r0
 800685a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2bff      	cmp	r3, #255	; 0xff
 8006860:	d01d      	beq.n	800689e <USBD_StdItfReq+0x92>
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11a      	bne.n	800689e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006868:	7bba      	ldrb	r2, [r7, #14]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006878:	7bba      	ldrb	r2, [r7, #14]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006880:	7bba      	ldrb	r2, [r7, #14]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	32ae      	adds	r2, #174	; 0xae
 8006886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006896:	e004      	b.n	80068a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006898:	2303      	movs	r3, #3
 800689a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800689c:	e001      	b.n	80068a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <USBD_StdItfReq+0xc0>
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fdc7 	bl	8007444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068b6:	e009      	b.n	80068cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fcf7 	bl	80072ae <USBD_CtlError>
          break;
 80068c0:	e004      	b.n	80068cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fcf2 	bl	80072ae <USBD_CtlError>
          break;
 80068ca:	e000      	b.n	80068ce <USBD_StdItfReq+0xc2>
          break;
 80068cc:	bf00      	nop
      }
      break;
 80068ce:	e004      	b.n	80068da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fceb 	bl	80072ae <USBD_CtlError>
      break;
 80068d8:	bf00      	nop
  }

  return ret;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d007      	beq.n	8006914 <USBD_StdEPReq+0x30>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	f200 817f 	bhi.w	8006c08 <USBD_StdEPReq+0x324>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02a      	beq.n	8006964 <USBD_StdEPReq+0x80>
 800690e:	2b20      	cmp	r3, #32
 8006910:	f040 817a 	bne.w	8006c08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fe83 	bl	8006624 <USBD_CoreFindEP>
 800691e:	4603      	mov	r3, r0
 8006920:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006922:	7b7b      	ldrb	r3, [r7, #13]
 8006924:	2bff      	cmp	r3, #255	; 0xff
 8006926:	f000 8174 	beq.w	8006c12 <USBD_StdEPReq+0x32e>
 800692a:	7b7b      	ldrb	r3, [r7, #13]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8170 	bne.w	8006c12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006932:	7b7a      	ldrb	r2, [r7, #13]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800693a:	7b7a      	ldrb	r2, [r7, #13]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	32ae      	adds	r2, #174	; 0xae
 8006940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8163 	beq.w	8006c12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800694c:	7b7a      	ldrb	r2, [r7, #13]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32ae      	adds	r2, #174	; 0xae
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006962:	e156      	b.n	8006c12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d008      	beq.n	800697e <USBD_StdEPReq+0x9a>
 800696c:	2b03      	cmp	r3, #3
 800696e:	f300 8145 	bgt.w	8006bfc <USBD_StdEPReq+0x318>
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 809b 	beq.w	8006aae <USBD_StdEPReq+0x1ca>
 8006978:	2b01      	cmp	r3, #1
 800697a:	d03c      	beq.n	80069f6 <USBD_StdEPReq+0x112>
 800697c:	e13e      	b.n	8006bfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d002      	beq.n	8006990 <USBD_StdEPReq+0xac>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d016      	beq.n	80069bc <USBD_StdEPReq+0xd8>
 800698e:	e02c      	b.n	80069ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <USBD_StdEPReq+0xce>
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d00a      	beq.n	80069b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f99d 	bl	8007ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 f999 	bl	8007ce0 <USBD_LL_StallEP>
 80069ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069b0:	e020      	b.n	80069f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc7a 	bl	80072ae <USBD_CtlError>
              break;
 80069ba:	e01b      	b.n	80069f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	885b      	ldrh	r3, [r3, #2]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10e      	bne.n	80069e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <USBD_StdEPReq+0xfe>
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d008      	beq.n	80069e2 <USBD_StdEPReq+0xfe>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	88db      	ldrh	r3, [r3, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d104      	bne.n	80069e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f97f 	bl	8007ce0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fd2e 	bl	8007444 <USBD_CtlSendStatus>

              break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc5e 	bl	80072ae <USBD_CtlError>
              break;
 80069f2:	bf00      	nop
          }
          break;
 80069f4:	e107      	b.n	8006c06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d002      	beq.n	8006a08 <USBD_StdEPReq+0x124>
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d016      	beq.n	8006a34 <USBD_StdEPReq+0x150>
 8006a06:	e04b      	b.n	8006aa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <USBD_StdEPReq+0x146>
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d00a      	beq.n	8006a2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f961 	bl	8007ce0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f95d 	bl	8007ce0 <USBD_LL_StallEP>
 8006a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a28:	e040      	b.n	8006aac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc3e 	bl	80072ae <USBD_CtlError>
              break;
 8006a32:	e03b      	b.n	8006aac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	885b      	ldrh	r3, [r3, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d136      	bne.n	8006aaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f967 	bl	8007d1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fcf7 	bl	8007444 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff fde2 	bl	8006624 <USBD_CoreFindEP>
 8006a60:	4603      	mov	r3, r0
 8006a62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a64:	7b7b      	ldrb	r3, [r7, #13]
 8006a66:	2bff      	cmp	r3, #255	; 0xff
 8006a68:	d01f      	beq.n	8006aaa <USBD_StdEPReq+0x1c6>
 8006a6a:	7b7b      	ldrb	r3, [r7, #13]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d11c      	bne.n	8006aaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a70:	7b7a      	ldrb	r2, [r7, #13]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a78:	7b7a      	ldrb	r2, [r7, #13]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32ae      	adds	r2, #174	; 0xae
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d010      	beq.n	8006aaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a88:	7b7a      	ldrb	r2, [r7, #13]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	32ae      	adds	r2, #174	; 0xae
 8006a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a9e:	e004      	b.n	8006aaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc03 	bl	80072ae <USBD_CtlError>
              break;
 8006aa8:	e000      	b.n	8006aac <USBD_StdEPReq+0x1c8>
              break;
 8006aaa:	bf00      	nop
          }
          break;
 8006aac:	e0ab      	b.n	8006c06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d002      	beq.n	8006ac0 <USBD_StdEPReq+0x1dc>
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d032      	beq.n	8006b24 <USBD_StdEPReq+0x240>
 8006abe:	e097      	b.n	8006bf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <USBD_StdEPReq+0x1f2>
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d004      	beq.n	8006ad6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fbed 	bl	80072ae <USBD_CtlError>
                break;
 8006ad4:	e091      	b.n	8006bfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da0b      	bge.n	8006af6 <USBD_StdEPReq+0x212>
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	3310      	adds	r3, #16
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	3304      	adds	r3, #4
 8006af4:	e00b      	b.n	8006b0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc37 	bl	8007390 <USBD_CtlSendData>
              break;
 8006b22:	e06a      	b.n	8006bfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da11      	bge.n	8006b50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	f003 020f 	and.w	r2, r3, #15
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3324      	adds	r3, #36	; 0x24
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d117      	bne.n	8006b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fbb0 	bl	80072ae <USBD_CtlError>
                  break;
 8006b4e:	e054      	b.n	8006bfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	f003 020f 	and.w	r2, r3, #15
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb9d 	bl	80072ae <USBD_CtlError>
                  break;
 8006b74:	e041      	b.n	8006bfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da0b      	bge.n	8006b96 <USBD_StdEPReq+0x2b2>
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4413      	add	r3, r2
 8006b92:	3304      	adds	r3, #4
 8006b94:	e00b      	b.n	8006bae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	3304      	adds	r3, #4
 8006bae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USBD_StdEPReq+0x2d8>
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b80      	cmp	r3, #128	; 0x80
 8006bba:	d103      	bne.n	8006bc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e00e      	b.n	8006be2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 f8c7 	bl	8007d5c <USBD_LL_IsStallEP>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2202      	movs	r2, #2
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fbd1 	bl	8007390 <USBD_CtlSendData>
              break;
 8006bee:	e004      	b.n	8006bfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb5b 	bl	80072ae <USBD_CtlError>
              break;
 8006bf8:	bf00      	nop
          }
          break;
 8006bfa:	e004      	b.n	8006c06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb55 	bl	80072ae <USBD_CtlError>
          break;
 8006c04:	bf00      	nop
      }
      break;
 8006c06:	e005      	b.n	8006c14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb4f 	bl	80072ae <USBD_CtlError>
      break;
 8006c10:	e000      	b.n	8006c14 <USBD_StdEPReq+0x330>
      break;
 8006c12:	bf00      	nop
  }

  return ret;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2b06      	cmp	r3, #6
 8006c42:	f200 8128 	bhi.w	8006e96 <USBD_GetDescriptor+0x276>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <USBD_GetDescriptor+0x2c>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006e97 	.word	0x08006e97
 8006c5c:	08006e97 	.word	0x08006e97
 8006c60:	08006e37 	.word	0x08006e37
 8006c64:	08006e63 	.word	0x08006e63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	7c12      	ldrb	r2, [r2, #16]
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	60f8      	str	r0, [r7, #12]
      break;
 8006c7e:	e112      	b.n	8006ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7c1b      	ldrb	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	f107 0208 	add.w	r2, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ca2:	e100      	b.n	8006ea6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	f107 0208 	add.w	r2, r7, #8
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	2202      	movs	r2, #2
 8006cbc:	701a      	strb	r2, [r3, #0]
      break;
 8006cbe:	e0f2      	b.n	8006ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	f200 80ac 	bhi.w	8006e24 <USBD_GetDescriptor+0x204>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USBD_GetDescriptor+0xb4>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006d21 	.word	0x08006d21
 8006cdc:	08006d55 	.word	0x08006d55
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006dbd 	.word	0x08006dbd
 8006ce8:	08006df1 	.word	0x08006df1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e091      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 facb 	bl	80072ae <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e089      	b.n	8006e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d42:	e077      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fab1 	bl	80072ae <USBD_CtlError>
            err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
          break;
 8006d52:	e06f      	b.n	8006e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e05d      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa97 	bl	80072ae <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e055      	b.n	8006e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e043      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa7d 	bl	80072ae <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e03b      	b.n	8006e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e029      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa63 	bl	80072ae <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e021      	b.n	8006e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e12:	e00f      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa49 	bl	80072ae <USBD_CtlError>
            err++;
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	72fb      	strb	r3, [r7, #11]
          break;
 8006e22:	e007      	b.n	8006e34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa41 	bl	80072ae <USBD_CtlError>
          err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e32:	bf00      	nop
      }
      break;
 8006e34:	e037      	b.n	8006ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4798      	blx	r3
 8006e4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e50:	e029      	b.n	8006ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa2a 	bl	80072ae <USBD_CtlError>
        err++;
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e60:	e021      	b.n	8006ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7c1b      	ldrb	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	f107 0208 	add.w	r2, r7, #8
 8006e76:	4610      	mov	r0, r2
 8006e78:	4798      	blx	r3
 8006e7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	2207      	movs	r2, #7
 8006e82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e84:	e00f      	b.n	8006ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa10 	bl	80072ae <USBD_CtlError>
        err++;
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	3301      	adds	r3, #1
 8006e92:	72fb      	strb	r3, [r7, #11]
      break;
 8006e94:	e007      	b.n	8006ea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa08 	bl	80072ae <USBD_CtlError>
      err++;
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea4:	bf00      	nop
  }

  if (err != 0U)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d11e      	bne.n	8006eea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	88db      	ldrh	r3, [r3, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d016      	beq.n	8006ee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88da      	ldrh	r2, [r3, #6]
 8006ebe:	893b      	ldrh	r3, [r7, #8]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf28      	it	cs
 8006ec4:	4613      	movcs	r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa5d 	bl	8007390 <USBD_CtlSendData>
 8006ed6:	e009      	b.n	8006eec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f9e7 	bl	80072ae <USBD_CtlError>
 8006ee0:	e004      	b.n	8006eec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 faae 	bl	8007444 <USBD_CtlSendStatus>
 8006ee8:	e000      	b.n	8006eec <USBD_GetDescriptor+0x2cc>
    return;
 8006eea:	bf00      	nop
  }
}
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop

08006ef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	889b      	ldrh	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d131      	bne.n	8006f6a <USBD_SetAddress+0x76>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d12d      	bne.n	8006f6a <USBD_SetAddress+0x76>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	885b      	ldrh	r3, [r3, #2]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d829      	bhi.n	8006f6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d104      	bne.n	8006f38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f9bc 	bl	80072ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	e01d      	b.n	8006f74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 ff35 	bl	8007db4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa7a 	bl	8007444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	e009      	b.n	8006f74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	e004      	b.n	8006f74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f99e 	bl	80072ae <USBD_CtlError>
  }
}
 8006f72:	bf00      	nop
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	4b4e      	ldr	r3, [pc, #312]	; (80070cc <USBD_SetConfig+0x150>)
 8006f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f94:	4b4d      	ldr	r3, [pc, #308]	; (80070cc <USBD_SetConfig+0x150>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d905      	bls.n	8006fa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f985 	bl	80072ae <USBD_CtlError>
    return USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e08c      	b.n	80070c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d002      	beq.n	8006fba <USBD_SetConfig+0x3e>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d029      	beq.n	800700c <USBD_SetConfig+0x90>
 8006fb8:	e075      	b.n	80070a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006fba:	4b44      	ldr	r3, [pc, #272]	; (80070cc <USBD_SetConfig+0x150>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d020      	beq.n	8007004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006fc2:	4b42      	ldr	r3, [pc, #264]	; (80070cc <USBD_SetConfig+0x150>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fcc:	4b3f      	ldr	r3, [pc, #252]	; (80070cc <USBD_SetConfig+0x150>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fe ffe7 	bl	8005fa6 <USBD_SetClassConfig>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f962 	bl	80072ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ff2:	e065      	b.n	80070c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa25 	bl	8007444 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007002:	e05d      	b.n	80070c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa1d 	bl	8007444 <USBD_CtlSendStatus>
      break;
 800700a:	e059      	b.n	80070c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800700c:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <USBD_SetConfig+0x150>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d112      	bne.n	800703a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800701c:	4b2b      	ldr	r3, [pc, #172]	; (80070cc <USBD_SetConfig+0x150>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <USBD_SetConfig+0x150>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe ffd6 	bl	8005fde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fa06 	bl	8007444 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007038:	e042      	b.n	80070c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <USBD_SetConfig+0x150>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d02a      	beq.n	800709e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe ffc4 	bl	8005fde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007056:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <USBD_SetConfig+0x150>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <USBD_SetConfig+0x150>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fe ff9d 	bl	8005fa6 <USBD_SetClassConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00f      	beq.n	8007096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f918 	bl	80072ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe ffa9 	bl	8005fde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007094:	e014      	b.n	80070c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9d4 	bl	8007444 <USBD_CtlSendStatus>
      break;
 800709c:	e010      	b.n	80070c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9d0 	bl	8007444 <USBD_CtlSendStatus>
      break;
 80070a4:	e00c      	b.n	80070c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f900 	bl	80072ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <USBD_SetConfig+0x150>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe ff92 	bl	8005fde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070ba:	2303      	movs	r3, #3
 80070bc:	73fb      	strb	r3, [r7, #15]
      break;
 80070be:	bf00      	nop
  }

  return ret;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	2000014c 	.word	0x2000014c

080070d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d004      	beq.n	80070ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8e2 	bl	80072ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070ea:	e023      	b.n	8007134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	dc02      	bgt.n	80070fe <USBD_GetConfig+0x2e>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dc03      	bgt.n	8007104 <USBD_GetConfig+0x34>
 80070fc:	e015      	b.n	800712a <USBD_GetConfig+0x5a>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d00b      	beq.n	800711a <USBD_GetConfig+0x4a>
 8007102:	e012      	b.n	800712a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3308      	adds	r3, #8
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f93c 	bl	8007390 <USBD_CtlSendData>
        break;
 8007118:	e00c      	b.n	8007134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2201      	movs	r2, #1
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f934 	bl	8007390 <USBD_CtlSendData>
        break;
 8007128:	e004      	b.n	8007134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8be 	bl	80072ae <USBD_CtlError>
        break;
 8007132:	bf00      	nop
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	b2db      	uxtb	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	2b02      	cmp	r3, #2
 8007152:	d81e      	bhi.n	8007192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	88db      	ldrh	r3, [r3, #6]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d004      	beq.n	8007166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8a5 	bl	80072ae <USBD_CtlError>
        break;
 8007164:	e01a      	b.n	800719c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f043 0202 	orr.w	r2, r3, #2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	330c      	adds	r3, #12
 8007186:	2202      	movs	r2, #2
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f900 	bl	8007390 <USBD_CtlSendData>
      break;
 8007190:	e004      	b.n	800719c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f88a 	bl	80072ae <USBD_CtlError>
      break;
 800719a:	bf00      	nop
  }
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d107      	bne.n	80071c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f940 	bl	8007444 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80071c4:	e013      	b.n	80071ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	885b      	ldrh	r3, [r3, #2]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d10b      	bne.n	80071e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	889b      	ldrh	r3, [r3, #4]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f930 	bl	8007444 <USBD_CtlSendStatus>
}
 80071e4:	e003      	b.n	80071ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f860 	bl	80072ae <USBD_CtlError>
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	2b02      	cmp	r3, #2
 800720c:	d80b      	bhi.n	8007226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10c      	bne.n	8007230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f910 	bl	8007444 <USBD_CtlSendStatus>
      }
      break;
 8007224:	e004      	b.n	8007230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f840 	bl	80072ae <USBD_CtlError>
      break;
 800722e:	e000      	b.n	8007232 <USBD_ClrFeature+0x3c>
      break;
 8007230:	bf00      	nop
  }
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff fa41 	bl	80066ec <SWAPBYTE>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fa34 	bl	80066ec <SWAPBYTE>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fa27 	bl	80066ec <SWAPBYTE>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	80da      	strh	r2, [r3, #6]
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072b8:	2180      	movs	r1, #128	; 0x80
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fd10 	bl	8007ce0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fd0c 	bl	8007ce0 <USBD_LL_StallEP>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d036      	beq.n	8007354 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f836 	bl	800735c <USBD_GetLen>
 80072f0:	4603      	mov	r3, r0
 80072f2:	3301      	adds	r3, #1
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4413      	add	r3, r2
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	701a      	strb	r2, [r3, #0]
  idx++;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	3301      	adds	r3, #1
 800730e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	4413      	add	r3, r2
 8007316:	2203      	movs	r2, #3
 8007318:	701a      	strb	r2, [r3, #0]
  idx++;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	3301      	adds	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007320:	e013      	b.n	800734a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4413      	add	r3, r2
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
    idx++;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	3301      	adds	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4413      	add	r3, r2
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
    idx++;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	3301      	adds	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e7      	bne.n	8007322 <USBD_GetString+0x52>
 8007352:	e000      	b.n	8007356 <USBD_GetString+0x86>
    return;
 8007354:	bf00      	nop
  }
}
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800736c:	e005      	b.n	800737a <USBD_GetLen+0x1e>
  {
    len++;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	3301      	adds	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3301      	adds	r3, #1
 8007378:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f5      	bne.n	800736e <USBD_GetLen+0x12>
  }

  return len;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2202      	movs	r2, #2
 80073a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fd1b 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	2100      	movs	r1, #0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fd0a 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	2100      	movs	r1, #0
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fd0e 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	2100      	movs	r1, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fcfd 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2204      	movs	r2, #4
 8007450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007454:	2300      	movs	r3, #0
 8007456:	2200      	movs	r2, #0
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fcc9 	bl	8007df2 <USBD_LL_Transmit>

  return USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2205      	movs	r2, #5
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fcd7 	bl	8007e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007494:	2200      	movs	r2, #0
 8007496:	4912      	ldr	r1, [pc, #72]	; (80074e0 <MX_USB_DEVICE_Init+0x50>)
 8007498:	4812      	ldr	r0, [pc, #72]	; (80074e4 <MX_USB_DEVICE_Init+0x54>)
 800749a:	f7fe fd07 	bl	8005eac <USBD_Init>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074a4:	f7f9 f9d6 	bl	8000854 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074a8:	490f      	ldr	r1, [pc, #60]	; (80074e8 <MX_USB_DEVICE_Init+0x58>)
 80074aa:	480e      	ldr	r0, [pc, #56]	; (80074e4 <MX_USB_DEVICE_Init+0x54>)
 80074ac:	f7fe fd2e 	bl	8005f0c <USBD_RegisterClass>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074b6:	f7f9 f9cd 	bl	8000854 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074ba:	490c      	ldr	r1, [pc, #48]	; (80074ec <MX_USB_DEVICE_Init+0x5c>)
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <MX_USB_DEVICE_Init+0x54>)
 80074be:	f7fe fc1f 	bl	8005d00 <USBD_CDC_RegisterInterface>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074c8:	f7f9 f9c4 	bl	8000854 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <MX_USB_DEVICE_Init+0x54>)
 80074ce:	f7fe fd53 	bl	8005f78 <USBD_Start>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074d8:	f7f9 f9bc 	bl	8000854 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200000ac 	.word	0x200000ac
 80074e4:	20000150 	.word	0x20000150
 80074e8:	20000018 	.word	0x20000018
 80074ec:	20000098 	.word	0x20000098

080074f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	4905      	ldr	r1, [pc, #20]	; (800750c <CDC_Init_FS+0x1c>)
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <CDC_Init_FS+0x20>)
 80074fa:	f7fe fc1b 	bl	8005d34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074fe:	4905      	ldr	r1, [pc, #20]	; (8007514 <CDC_Init_FS+0x24>)
 8007500:	4803      	ldr	r0, [pc, #12]	; (8007510 <CDC_Init_FS+0x20>)
 8007502:	f7fe fc39 	bl	8005d78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007506:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000c2c 	.word	0x20000c2c
 8007510:	20000150 	.word	0x20000150
 8007514:	2000042c 	.word	0x2000042c

08007518 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800751c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800751e:	4618      	mov	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
 8007534:	4613      	mov	r3, r2
 8007536:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b23      	cmp	r3, #35	; 0x23
 800753c:	d84a      	bhi.n	80075d4 <CDC_Control_FS+0xac>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <CDC_Control_FS+0x1c>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	080075d5 	.word	0x080075d5
 8007548:	080075d5 	.word	0x080075d5
 800754c:	080075d5 	.word	0x080075d5
 8007550:	080075d5 	.word	0x080075d5
 8007554:	080075d5 	.word	0x080075d5
 8007558:	080075d5 	.word	0x080075d5
 800755c:	080075d5 	.word	0x080075d5
 8007560:	080075d5 	.word	0x080075d5
 8007564:	080075d5 	.word	0x080075d5
 8007568:	080075d5 	.word	0x080075d5
 800756c:	080075d5 	.word	0x080075d5
 8007570:	080075d5 	.word	0x080075d5
 8007574:	080075d5 	.word	0x080075d5
 8007578:	080075d5 	.word	0x080075d5
 800757c:	080075d5 	.word	0x080075d5
 8007580:	080075d5 	.word	0x080075d5
 8007584:	080075d5 	.word	0x080075d5
 8007588:	080075d5 	.word	0x080075d5
 800758c:	080075d5 	.word	0x080075d5
 8007590:	080075d5 	.word	0x080075d5
 8007594:	080075d5 	.word	0x080075d5
 8007598:	080075d5 	.word	0x080075d5
 800759c:	080075d5 	.word	0x080075d5
 80075a0:	080075d5 	.word	0x080075d5
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	080075d5 	.word	0x080075d5
 80075b0:	080075d5 	.word	0x080075d5
 80075b4:	080075d5 	.word	0x080075d5
 80075b8:	080075d5 	.word	0x080075d5
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075d5 	.word	0x080075d5
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075d5 	.word	0x080075d5
 80075cc:	080075d5 	.word	0x080075d5
 80075d0:	080075d5 	.word	0x080075d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075d4:	bf00      	nop
  }

  return (USBD_OK);
 80075d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4813      	ldr	r0, [pc, #76]	; (8007640 <CDC_Receive_FS+0x5c>)
 80075f2:	f7fe fbc1 	bl	8005d78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075f6:	4812      	ldr	r0, [pc, #72]	; (8007640 <CDC_Receive_FS+0x5c>)
 80075f8:	f7fe fc22 	bl	8005e40 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f81f 	bl	8007648 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b31      	cmp	r3, #49	; 0x31
 8007610:	d106      	bne.n	8007620 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007612:	2201      	movs	r2, #1
 8007614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007618:	480a      	ldr	r0, [pc, #40]	; (8007644 <CDC_Receive_FS+0x60>)
 800761a:	f7fa fc1d 	bl	8001e58 <HAL_GPIO_WritePin>
 800761e:	e009      	b.n	8007634 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d105      	bne.n	8007634 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800762e:	4805      	ldr	r0, [pc, #20]	; (8007644 <CDC_Receive_FS+0x60>)
 8007630:	f7fa fc12 	bl	8001e58 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8007634:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000150 	.word	0x20000150
 8007644:	40020c00 	.word	0x40020c00

08007648 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007658:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <CDC_Transmit_FS+0x48>)
 800765a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800766a:	2301      	movs	r3, #1
 800766c:	e00b      	b.n	8007686 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800766e:	887b      	ldrh	r3, [r7, #2]
 8007670:	461a      	mov	r2, r3
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4806      	ldr	r0, [pc, #24]	; (8007690 <CDC_Transmit_FS+0x48>)
 8007676:	f7fe fb5d 	bl	8005d34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800767a:	4805      	ldr	r0, [pc, #20]	; (8007690 <CDC_Transmit_FS+0x48>)
 800767c:	f7fe fb9a 	bl	8005db4 <USBD_CDC_TransmitPacket>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000150 	.word	0x20000150

08007694 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2212      	movs	r2, #18
 80076c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076ca:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	200000c8 	.word	0x200000c8

080076dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2204      	movs	r2, #4
 80076ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	200000dc 	.word	0x200000dc

08007700 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4907      	ldr	r1, [pc, #28]	; (8007734 <USBD_FS_ProductStrDescriptor+0x34>)
 8007716:	4808      	ldr	r0, [pc, #32]	; (8007738 <USBD_FS_ProductStrDescriptor+0x38>)
 8007718:	f7ff fdda 	bl	80072d0 <USBD_GetString>
 800771c:	e004      	b.n	8007728 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4904      	ldr	r1, [pc, #16]	; (8007734 <USBD_FS_ProductStrDescriptor+0x34>)
 8007722:	4805      	ldr	r0, [pc, #20]	; (8007738 <USBD_FS_ProductStrDescriptor+0x38>)
 8007724:	f7ff fdd4 	bl	80072d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007728:	4b02      	ldr	r3, [pc, #8]	; (8007734 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000142c 	.word	0x2000142c
 8007738:	0800803c 	.word	0x0800803c

0800773c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	6039      	str	r1, [r7, #0]
 8007746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	4904      	ldr	r1, [pc, #16]	; (800775c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800774c:	4804      	ldr	r0, [pc, #16]	; (8007760 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800774e:	f7ff fdbf 	bl	80072d0 <USBD_GetString>
  return USBD_StrDesc;
 8007752:	4b02      	ldr	r3, [pc, #8]	; (800775c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2000142c 	.word	0x2000142c
 8007760:	08008054 	.word	0x08008054

08007764 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	221a      	movs	r2, #26
 8007774:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007776:	f000 f843 	bl	8007800 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800777a:	4b02      	ldr	r3, [pc, #8]	; (8007784 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	200000e0 	.word	0x200000e0

08007788 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	6039      	str	r1, [r7, #0]
 8007792:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	4907      	ldr	r1, [pc, #28]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800779e:	4808      	ldr	r0, [pc, #32]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077a0:	f7ff fd96 	bl	80072d0 <USBD_GetString>
 80077a4:	e004      	b.n	80077b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4904      	ldr	r1, [pc, #16]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80077aa:	4805      	ldr	r0, [pc, #20]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ac:	f7ff fd90 	bl	80072d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	2000142c 	.word	0x2000142c
 80077c0:	08008068 	.word	0x08008068

080077c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4907      	ldr	r1, [pc, #28]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077da:	4808      	ldr	r0, [pc, #32]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077dc:	f7ff fd78 	bl	80072d0 <USBD_GetString>
 80077e0:	e004      	b.n	80077ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4904      	ldr	r1, [pc, #16]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e6:	4805      	ldr	r0, [pc, #20]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e8:	f7ff fd72 	bl	80072d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2000142c 	.word	0x2000142c
 80077fc:	08008074 	.word	0x08008074

08007800 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007806:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <Get_SerialNum+0x44>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800780c:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <Get_SerialNum+0x48>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <Get_SerialNum+0x4c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007826:	2208      	movs	r2, #8
 8007828:	4909      	ldr	r1, [pc, #36]	; (8007850 <Get_SerialNum+0x50>)
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f814 	bl	8007858 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007830:	2204      	movs	r2, #4
 8007832:	4908      	ldr	r1, [pc, #32]	; (8007854 <Get_SerialNum+0x54>)
 8007834:	68b8      	ldr	r0, [r7, #8]
 8007836:	f000 f80f 	bl	8007858 <IntToUnicode>
  }
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	1fff7a10 	.word	0x1fff7a10
 8007848:	1fff7a14 	.word	0x1fff7a14
 800784c:	1fff7a18 	.word	0x1fff7a18
 8007850:	200000e2 	.word	0x200000e2
 8007854:	200000f2 	.word	0x200000f2

08007858 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
 800786e:	e027      	b.n	80078c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	0f1b      	lsrs	r3, r3, #28
 8007874:	2b09      	cmp	r3, #9
 8007876:	d80b      	bhi.n	8007890 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	0f1b      	lsrs	r3, r3, #28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4619      	mov	r1, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	440b      	add	r3, r1
 8007888:	3230      	adds	r2, #48	; 0x30
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e00a      	b.n	80078a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	0f1b      	lsrs	r3, r3, #28
 8007894:	b2da      	uxtb	r2, r3
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	4619      	mov	r1, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	440b      	add	r3, r1
 80078a0:	3237      	adds	r2, #55	; 0x37
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	3301      	adds	r3, #1
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4413      	add	r3, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	3301      	adds	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
 80078c0:	7dfa      	ldrb	r2, [r7, #23]
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d3d3      	bcc.n	8007870 <IntToUnicode+0x18>
  }
}
 80078c8:	bf00      	nop
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f8:	d14b      	bne.n	8007992 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	4b27      	ldr	r3, [pc, #156]	; (800799c <HAL_PCD_MspInit+0xc4>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	4a26      	ldr	r2, [pc, #152]	; (800799c <HAL_PCD_MspInit+0xc4>)
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	6313      	str	r3, [r2, #48]	; 0x30
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <HAL_PCD_MspInit+0xc4>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800791a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791c:	2302      	movs	r3, #2
 800791e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007924:	2300      	movs	r3, #0
 8007926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007928:	230a      	movs	r3, #10
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792c:	f107 0314 	add.w	r3, r7, #20
 8007930:	4619      	mov	r1, r3
 8007932:	481b      	ldr	r0, [pc, #108]	; (80079a0 <HAL_PCD_MspInit+0xc8>)
 8007934:	f7fa f8dc 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800793c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800793e:	2302      	movs	r3, #2
 8007940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007942:	2301      	movs	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007946:	2300      	movs	r3, #0
 8007948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800794a:	230a      	movs	r3, #10
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800794e:	f107 0314 	add.w	r3, r7, #20
 8007952:	4619      	mov	r1, r3
 8007954:	4812      	ldr	r0, [pc, #72]	; (80079a0 <HAL_PCD_MspInit+0xc8>)
 8007956:	f7fa f8cb 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <HAL_PCD_MspInit+0xc4>)
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	4a0f      	ldr	r2, [pc, #60]	; (800799c <HAL_PCD_MspInit+0xc4>)
 8007960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007964:	6353      	str	r3, [r2, #52]	; 0x34
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <HAL_PCD_MspInit+0xc4>)
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	4a0b      	ldr	r2, [pc, #44]	; (800799c <HAL_PCD_MspInit+0xc4>)
 8007970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007974:	6453      	str	r3, [r2, #68]	; 0x44
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_PCD_MspInit+0xc4>)
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	2043      	movs	r0, #67	; 0x43
 8007988:	f7fa f87b 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800798c:	2043      	movs	r0, #67	; 0x43
 800798e:	f7fa f894 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007992:	bf00      	nop
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020000 	.word	0x40020000

080079a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fb29 	bl	8006012 <USBD_LL_SetupStage>
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fb63 	bl	80060bc <USBD_LL_DataOutStage>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	334c      	adds	r3, #76	; 0x4c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe fbfc 	bl	8006222 <USBD_LL_DataInStage>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fd30 	bl	80064a6 <USBD_LL_SOF>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	e008      	b.n	8007a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d102      	bne.n	8007a76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e001      	b.n	8007a7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a76:	f7f8 feed 	bl	8000854 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a80:	7bfa      	ldrb	r2, [r7, #15]
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fcd0 	bl	800642a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fc78 	bl	8006386 <USBD_LL_Reset>
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fccb 	bl	800644a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac6:	f043 0301 	orr.w	r3, r3, #1
 8007aca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <HAL_PCD_SuspendCallback+0x48>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4a03      	ldr	r2, [pc, #12]	; (8007ae8 <HAL_PCD_SuspendCallback+0x48>)
 8007ada:	f043 0306 	orr.w	r3, r3, #6
 8007ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fcbb 	bl	8006476 <USBD_LL_Resume>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fd13 	bl	800654a <USBD_LL_IsoOUTIncomplete>
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fccf 	bl	80064e6 <USBD_LL_IsoINIncomplete>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd25 	bl	80065ae <USBD_LL_DevConnected>
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fd22 	bl	80065c4 <USBD_LL_DevDisconnected>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d13c      	bne.n	8007c12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b98:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <USBD_LL_Init+0x94>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <USBD_LL_Init+0x94>)
 8007ba4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ba8:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <USBD_LL_Init+0x94>)
 8007baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bb6:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bb8:	2202      	movs	r2, #2
 8007bba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bc2:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bc8:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bda:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007be0:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <USBD_LL_Init+0x94>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007be6:	480d      	ldr	r0, [pc, #52]	; (8007c1c <USBD_LL_Init+0x94>)
 8007be8:	f7fa f94f 	bl	8001e8a <HAL_PCD_Init>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bf2:	f7f8 fe2f 	bl	8000854 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bf6:	2180      	movs	r1, #128	; 0x80
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <USBD_LL_Init+0x94>)
 8007bfa:	f7fb fba6 	bl	800334a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	2100      	movs	r1, #0
 8007c02:	4806      	ldr	r0, [pc, #24]	; (8007c1c <USBD_LL_Init+0x94>)
 8007c04:	f7fb fb5a 	bl	80032bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c08:	2280      	movs	r2, #128	; 0x80
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	4803      	ldr	r0, [pc, #12]	; (8007c1c <USBD_LL_Init+0x94>)
 8007c0e:	f7fb fb55 	bl	80032bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	2000162c 	.word	0x2000162c

08007c20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fa fa44 	bl	80020c4 <HAL_PCD_Start>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f942 	bl	8007ecc <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	461a      	mov	r2, r3
 8007c64:	4603      	mov	r3, r0
 8007c66:	70fb      	strb	r3, [r7, #3]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70bb      	strb	r3, [r7, #2]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c7e:	78bb      	ldrb	r3, [r7, #2]
 8007c80:	883a      	ldrh	r2, [r7, #0]
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	f7fa ff15 	bl	8002ab2 <HAL_PCD_EP_Open>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f91c 	bl	8007ecc <USBD_Get_USB_Status>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fa ff5e 	bl	8002b82 <HAL_PCD_EP_Close>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8fd 	bl	8007ecc <USBD_Get_USB_Status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fb f836 	bl	8002d70 <HAL_PCD_EP_SetStall>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f8de 	bl	8007ecc <USBD_Get_USB_Status>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fb f87b 	bl	8002e38 <HAL_PCD_EP_ClrStall>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f8bf 	bl	8007ecc <USBD_Get_USB_Status>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da0b      	bge.n	8007d90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	333e      	adds	r3, #62	; 0x3e
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	e00b      	b.n	8007da8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007da6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fa fe48 	bl	8002a68 <HAL_PCD_SetAddress>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 f874 	bl	8007ecc <USBD_Get_USB_Status>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e10:	7af9      	ldrb	r1, [r7, #11]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f7fa ff61 	bl	8002cdc <HAL_PCD_EP_Transmit>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f853 	bl	8007ecc <USBD_Get_USB_Status>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	460b      	mov	r3, r1
 8007e42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e52:	7af9      	ldrb	r1, [r7, #11]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	f7fa fedd 	bl	8002c16 <HAL_PCD_EP_Receive>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f832 	bl	8007ecc <USBD_Get_USB_Status>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e88:	78fa      	ldrb	r2, [r7, #3]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fa ff0d 	bl	8002cac <HAL_PCD_EP_GetRxCount>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <USBD_static_malloc+0x18>)
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20001b38 	.word	0x20001b38

08007eb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d817      	bhi.n	8007f10 <USBD_Get_USB_Status+0x44>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_Get_USB_Status+0x1c>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007eff 	.word	0x08007eff
 8007ef0:	08007f05 	.word	0x08007f05
 8007ef4:	08007f0b 	.word	0x08007f0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
    break;
 8007efc:	e00b      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	73fb      	strb	r3, [r7, #15]
    break;
 8007f02:	e008      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
    break;
 8007f08:	e005      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0e:	e002      	b.n	8007f16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	73fb      	strb	r3, [r7, #15]
    break;
 8007f14:	bf00      	nop
  }
  return usb_status;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <memset>:
 8007f24:	4402      	add	r2, r0
 8007f26:	4603      	mov	r3, r0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d100      	bne.n	8007f2e <memset+0xa>
 8007f2c:	4770      	bx	lr
 8007f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f32:	e7f9      	b.n	8007f28 <memset+0x4>

08007f34 <__libc_init_array>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4d0d      	ldr	r5, [pc, #52]	; (8007f6c <__libc_init_array+0x38>)
 8007f38:	4c0d      	ldr	r4, [pc, #52]	; (8007f70 <__libc_init_array+0x3c>)
 8007f3a:	1b64      	subs	r4, r4, r5
 8007f3c:	10a4      	asrs	r4, r4, #2
 8007f3e:	2600      	movs	r6, #0
 8007f40:	42a6      	cmp	r6, r4
 8007f42:	d109      	bne.n	8007f58 <__libc_init_array+0x24>
 8007f44:	4d0b      	ldr	r5, [pc, #44]	; (8007f74 <__libc_init_array+0x40>)
 8007f46:	4c0c      	ldr	r4, [pc, #48]	; (8007f78 <__libc_init_array+0x44>)
 8007f48:	f000 f818 	bl	8007f7c <_init>
 8007f4c:	1b64      	subs	r4, r4, r5
 8007f4e:	10a4      	asrs	r4, r4, #2
 8007f50:	2600      	movs	r6, #0
 8007f52:	42a6      	cmp	r6, r4
 8007f54:	d105      	bne.n	8007f62 <__libc_init_array+0x2e>
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5c:	4798      	blx	r3
 8007f5e:	3601      	adds	r6, #1
 8007f60:	e7ee      	b.n	8007f40 <__libc_init_array+0xc>
 8007f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f66:	4798      	blx	r3
 8007f68:	3601      	adds	r6, #1
 8007f6a:	e7f2      	b.n	8007f52 <__libc_init_array+0x1e>
 8007f6c:	0800809c 	.word	0x0800809c
 8007f70:	0800809c 	.word	0x0800809c
 8007f74:	0800809c 	.word	0x0800809c
 8007f78:	080080a0 	.word	0x080080a0

08007f7c <_init>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr

08007f88 <_fini>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr
