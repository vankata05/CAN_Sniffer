
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a01c  0800a01c  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a024  0800a024  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002015c  2**0
                  CONTENTS
 10 .bss          00001e38  2000015c  2000015c  0002015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001f94  20001f94  0002015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014d9f  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003737  00000000  00000000  00034f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe0  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c00  00000000  00000000  00039688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c92  00000000  00000000  0003a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015759  00000000  00000000  0005df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c92a5  00000000  00000000  00073673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045c4  00000000  00000000  0013c918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00140edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e50 	.word	0x08009e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08009e50 	.word	0x08009e50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[64];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b093      	sub	sp, #76	; 0x4c
 8000580:	af08      	add	r7, sp, #32
 8000582:	6078      	str	r0, [r7, #4]
	if(BDTKTD == 1){
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d141      	bne.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	  CAN_RxHeaderTypeDef rxPHead = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80005ac:	f000 ffe3 	bl	8001576 <HAL_CAN_GetRxMessage>
	  if(rxPHead.StdId == 0x7E8)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80005b6:	d102      	bne.n	80005be <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		  IRQTX = 1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(data1, "0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", (unsigned int)rxPHead.StdId, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	469c      	mov	ip, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461d      	mov	r5, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	461e      	mov	r6, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80005ec:	79db      	ldrb	r3, [r3, #7]
 80005ee:	9306      	str	r3, [sp, #24]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	9305      	str	r3, [sp, #20]
 80005f4:	9604      	str	r6, [sp, #16]
 80005f6:	9503      	str	r5, [sp, #12]
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	4663      	mov	r3, ip
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000604:	f008 ff80 	bl	8009508 <siprintf>
	//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	//	  if(rxPHead.StdId == 0x7E8){
	  memcpy(LPLD, data, 8);
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	6010      	str	r0, [r2, #0]
 8000610:	6051      	str	r1, [r2, #4]

	//	  }
	//	  CDC_Transmit_FS(data, 8);
	//	  CDC_Transmit_FS((uint8_t)rxPHead.StdId, 2);
	}
}
 8000612:	bf00      	nop
 8000614:	372c      	adds	r7, #44	; 0x2c
 8000616:	46bd      	mov	sp, r7
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	bf00      	nop
 800061c:	2000022f 	.word	0x2000022f
 8000620:	20000178 	.word	0x20000178
 8000624:	200001c0 	.word	0x200001c0
 8000628:	2000022e 	.word	0x2000022e
 800062c:	08009e68 	.word	0x08009e68
 8000630:	20000180 	.word	0x20000180
 8000634:	20000230 	.word	0x20000230

08000638 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	466b      	mov	r3, sp
 8000648:	461e      	mov	r6, r3
	uint8_t pData[Size];
 800064a:	8879      	ldrh	r1, [r7, #2]
 800064c:	460b      	mov	r3, r1
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	b28b      	uxth	r3, r1
 8000654:	2200      	movs	r2, #0
 8000656:	4698      	mov	r8, r3
 8000658:	4691      	mov	r9, r2
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800066a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800066e:	b28b      	uxth	r3, r1
 8000670:	2200      	movs	r2, #0
 8000672:	461c      	mov	r4, r3
 8000674:	4615      	mov	r5, r2
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	00eb      	lsls	r3, r5, #3
 8000680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000684:	00e2      	lsls	r2, r4, #3
 8000686:	460b      	mov	r3, r1
 8000688:	3307      	adds	r3, #7
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	ebad 0d03 	sub.w	sp, sp, r3
 8000692:	466b      	mov	r3, sp
 8000694:	3300      	adds	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	HAL_UART_Receive(&huart, (uint8_t*)pData, Size, 100);
 8000698:	887a      	ldrh	r2, [r7, #2]
 800069a:	1d38      	adds	r0, r7, #4
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	f003 fda3 	bl	80041ea <HAL_UART_Receive>

	CDC_Transmit_FS(pData, Size);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68b8      	ldr	r0, [r7, #8]
 80006aa:	f008 fabf 	bl	8008c2c <CDC_Transmit_FS>
 80006ae:	46b5      	mov	sp, r6
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080006bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, (uint8_t*)data1, 64);
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	4906      	ldr	r1, [pc, #24]	; (80006e0 <HAL_UART_RxCpltCallback+0x24>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f003 fe30 	bl	800432e <HAL_UART_Receive_IT>
  CDC_Transmit_FS((uint8_t*)data1, 64);
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <HAL_UART_RxCpltCallback+0x24>)
 80006d2:	f008 faab 	bl	8008c2c <CDC_Transmit_FS>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000180 	.word	0x20000180

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b092      	sub	sp, #72	; 0x48
 80006e8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80006ea:	f000 fc45 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f91f 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fa2d 	bl	8000b50 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006f6:	f008 f9bd 	bl	8008a74 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80006fa:	f000 f9ff 	bl	8000afc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 80006fe:	f000 f839 	bl	8000774 <HODL_Till_BTN>

  Auto_Baudrate_Setup(PRE);
 8000702:	481a      	ldr	r0, [pc, #104]	; (800076c <main+0x88>)
 8000704:	f000 f852 	bl	80007ac <Auto_Baudrate_Setup>
//		  Capture_PID(&PIDs[i]);
//	  CDC_Transmit_FS((uint8_t*)PIDs[0].LastVal, 4);
//		HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//	  HAL_UART_Transmit(&huart5, (uint8_t*)"HEWWO", 5, 100);
//	  /*
	  HAL_UART_Receive_STR(&huart3, data, 64, 50);
 8000708:	1d39      	adds	r1, r7, #4
 800070a:	2332      	movs	r3, #50	; 0x32
 800070c:	2240      	movs	r2, #64	; 0x40
 800070e:	4818      	ldr	r0, [pc, #96]	; (8000770 <main+0x8c>)
 8000710:	f000 f8de 	bl	80008d0 <HAL_UART_Receive_STR>
//	  strcat(data, "\n----------");
//	  GNGLL
	  if(data[1] == 'G' && data[2] == 'N' && data[4] == 'L' && data[5] == 'L'){
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	2b47      	cmp	r3, #71	; 0x47
 8000718:	d1f6      	bne.n	8000708 <main+0x24>
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	2b4e      	cmp	r3, #78	; 0x4e
 800071e:	d1f3      	bne.n	8000708 <main+0x24>
 8000720:	7a3b      	ldrb	r3, [r7, #8]
 8000722:	2b4c      	cmp	r3, #76	; 0x4c
 8000724:	d1f0      	bne.n	8000708 <main+0x24>
 8000726:	7a7b      	ldrb	r3, [r7, #9]
 8000728:	2b4c      	cmp	r3, #76	; 0x4c
 800072a:	d1ed      	bne.n	8000708 <main+0x24>
		  for(int i = 0; i < 64 && data[i] != '\0'; i++){
 800072c:	2300      	movs	r3, #0
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
 8000730:	e00d      	b.n	800074e <main+0x6a>
			  data[i] = data[i+6];
 8000732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000734:	3306      	adds	r3, #6
 8000736:	3348      	adds	r3, #72	; 0x48
 8000738:	443b      	add	r3, r7
 800073a:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 64 && data[i] != '\0'; i++){
 8000748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800074a:	3301      	adds	r3, #1
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
 800074e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000750:	2b3f      	cmp	r3, #63	; 0x3f
 8000752:	dc05      	bgt.n	8000760 <main+0x7c>
 8000754:	1d3a      	adds	r2, r7, #4
 8000756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1e8      	bne.n	8000732 <main+0x4e>
		  }
		  CDC_Transmit_FS(data, 64);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	4618      	mov	r0, r3
 8000766:	f008 fa61 	bl	8008c2c <CDC_Transmit_FS>
	  HAL_UART_Receive_STR(&huart3, data, 64, 50);
 800076a:	e7cd      	b.n	8000708 <main+0x24>
 800076c:	20000000 	.word	0x20000000
 8000770:	200001e8 	.word	0x200001e8

08000774 <HODL_Till_BTN>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000778:	e005      	b.n	8000786 <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <HODL_Till_BTN+0x30>)
 8000782:	f001 fdb7 	bl	80022f4 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000786:	2101      	movs	r1, #1
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <HODL_Till_BTN+0x34>)
 800078a:	f001 fd9b 	bl	80022c4 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f2      	beq.n	800077a <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079a:	4802      	ldr	r0, [pc, #8]	; (80007a4 <HODL_Till_BTN+0x30>)
 800079c:	f001 fdaa 	bl	80022f4 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40020000 	.word	0x40020000

080007ac <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 4; i++){
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007ba:	e034      	b.n	8000826 <Auto_Baudrate_Setup+0x7a>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 80007bc:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <Auto_Baudrate_Setup+0x110>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d133      	bne.n	800082e <Auto_Baudrate_Setup+0x82>
 80007c6:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <Auto_Baudrate_Setup+0x114>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d12e      	bne.n	800082e <Auto_Baudrate_Setup+0x82>
		  if(i == 0){
 80007d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10d      	bne.n	80007f4 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f93d 	bl	8000a60 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80007e6:	4837      	ldr	r0, [pc, #220]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 80007e8:	f000 fe38 	bl	800145c <HAL_CAN_Start>
			  HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 fc35 	bl	800105c <HAL_Delay>
 80007f2:	e013      	b.n	800081c <Auto_Baudrate_Setup+0x70>
		  }else{
			  HAL_CAN_Stop(&hcan1);
 80007f4:	4833      	ldr	r0, [pc, #204]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 80007f6:	f000 fe75 	bl	80014e4 <HAL_CAN_Stop>
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 80007fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f928 	bl	8000a60 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 8000812:	f000 fe23 	bl	800145c <HAL_CAN_Start>
			  HAL_Delay(100);
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f000 fc20 	bl	800105c <HAL_Delay>
  for(i = 0; i < 4; i++){
 800081c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000820:	3301      	adds	r3, #1
 8000822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800082a:	2b03      	cmp	r3, #3
 800082c:	d9c6      	bls.n	80007bc <Auto_Baudrate_Setup+0x10>
	  }else{
		  break;
	  }
  }

  if(IRQRX1 >= 1 || IRQRX0 >= 1){
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <Auto_Baudrate_Setup+0x110>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <Auto_Baudrate_Setup+0x96>
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <Auto_Baudrate_Setup+0x114>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d029      	beq.n	8000896 <Auto_Baudrate_Setup+0xea>
	  char str[42];
	  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800084a:	3b01      	subs	r3, #1
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	491b      	ldr	r1, [pc, #108]	; (80008c8 <Auto_Baudrate_Setup+0x11c>)
 800085a:	4618      	mov	r0, r3
 800085c:	f008 fe54 	bl	8009508 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f008 f9d9 	bl	8008c2c <CDC_Transmit_FS>
	  HAL_CAN_Stop(&hcan1);
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 800087c:	f000 fe32 	bl	80014e4 <HAL_CAN_Stop>
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
	  HAL_CAN_Init(&hcan1);
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 8000888:	f000 fc0c 	bl	80010a4 <HAL_CAN_Init>
	  CAN1_Filter_Config();
 800088c:	f000 f8ba 	bl	8000a04 <CAN1_Filter_Config>
	  HAL_CAN_Start(&hcan1);
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <Auto_Baudrate_Setup+0x118>)
 8000892:	f000 fde3 	bl	800145c <HAL_CAN_Start>
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <Auto_Baudrate_Setup+0x110>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d108      	bne.n	80008b2 <Auto_Baudrate_Setup+0x106>
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <Auto_Baudrate_Setup+0x114>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d103      	bne.n	80008b2 <Auto_Baudrate_Setup+0x106>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 80008aa:	2118      	movs	r1, #24
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <Auto_Baudrate_Setup+0x120>)
 80008ae:	f008 f9bd 	bl	8008c2c <CDC_Transmit_FS>
//	  Error_Handler();
  }
}
 80008b2:	bf00      	nop
 80008b4:	3738      	adds	r7, #56	; 0x38
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000022d 	.word	0x2000022d
 80008c0:	2000022c 	.word	0x2000022c
 80008c4:	200001c0 	.word	0x200001c0
 80008c8:	08009f40 	.word	0x08009f40
 80008cc:	08009f6c 	.word	0x08009f6c

080008d0 <HAL_UART_Receive_STR>:

	  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);

}

void HAL_UART_Receive_STR(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size, uint32_t Timeout){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4613      	mov	r3, r2
 80008de:	71fb      	strb	r3, [r7, #7]
	memset(pData, 0, Size);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	f008 fe2e 	bl	8009548 <memset>
	uint8_t buff[2] = {0};
 80008ec:	2300      	movs	r3, #0
 80008ee:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	75fb      	strb	r3, [r7, #23]
 80008f4:	e011      	b.n	800091a <HAL_UART_Receive_STR+0x4a>
		HAL_UART_Receive(&huart3, buff, 1, Timeout);
 80008f6:	f107 0114 	add.w	r1, r7, #20
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <HAL_UART_Receive_STR+0x5c>)
 8000900:	f003 fc73 	bl	80041ea <HAL_UART_Receive>
		pData[Size - i] = buff[0];
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	461a      	mov	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4413      	add	r3, r2
 8000910:	7d3a      	ldrb	r2, [r7, #20]
 8000912:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = Size; buff[0] != '\n' && Size >= 0; i--){
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	3b01      	subs	r3, #1
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	7d3b      	ldrb	r3, [r7, #20]
 800091c:	2b0a      	cmp	r3, #10
 800091e:	d1ea      	bne.n	80008f6 <HAL_UART_Receive_STR+0x26>
	}
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001e8 	.word	0x200001e8

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f008 fe02 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a0:	2308      	movs	r3, #8
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ae:	2307      	movs	r3, #7
 80009b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 ff32 	bl	8003820 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c2:	f000 f925 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2105      	movs	r1, #5
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f993 	bl	8003d10 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f0:	f000 f90e 	bl	8000c10 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2228      	movs	r2, #40	; 0x28
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f008 fd99 	bl	8009548 <memset>

  filters.FilterActivation = ENABLE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 8000a2a:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000a2e:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000a34:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8000a38:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <CAN1_Filter_Config+0x58>)
 8000a44:	f000 fc2a 	bl	800129c <HAL_CAN_ConfigFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000a4e:	f000 f8df 	bl	8000c10 <Error_Handler>
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001c0 	.word	0x200001c0

08000a60 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a6c:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <MX_CAN1_Init+0x98>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a88:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000ab6:	f000 faf5 	bl	80010a4 <HAL_CAN_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000ac0:	f000 f8a6 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000aca:	f000 fe66 	bl	800179a <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 fd36 	bl	8009548 <memset>
  filters.FilterActivation = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_CAN1_Init+0x94>)
 8000ae8:	f000 fbd8 	bl	800129c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001c0 	.word	0x200001c0
 8000af8:	40006400 	.word	0x40006400

08000afc <MX_USART3_UART_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART3_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART3_UART_Init+0x4c>)
 8000b34:	f003 fb0c 	bl	8004150 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f867 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001e8 	.word	0x200001e8
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a25      	ldr	r2, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_GPIO_Init+0xb4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_GPIO_Init+0xb8>)
 8000bc2:	f001 fb97 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_GPIO_Init+0xbc>)
 8000bda:	f001 f9d7 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bde:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_GPIO_Init+0xb8>)
 8000bf8:	f001 f9c8 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40020000 	.word	0x40020000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_CAN_MspInit+0xb4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d143      	bne.n	8000d16 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_CAN_MspInit+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <HAL_CAN_MspInit+0xbc>)
 8000ce2:	f001 f953 	bl	8001f8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2013      	movs	r0, #19
 8000cec:	f001 f885 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000cf0:	2013      	movs	r0, #19
 8000cf2:	f001 f89e 	bl	8001e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2014      	movs	r0, #20
 8000cfc:	f001 f87d 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d00:	2014      	movs	r0, #20
 8000d02:	f001 f896 	bl	8001e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2015      	movs	r0, #21
 8000d0c:	f001 f875 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d10:	2015      	movs	r0, #21
 8000d12:	f001 f88e 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40006400 	.word	0x40006400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d134      	bne.n	8000db8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <HAL_UART_MspInit+0x9c>)
 8000da4:	f001 f8f2 	bl	8001f8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	2027      	movs	r0, #39	; 0x27
 8000dae:	f001 f824 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000db2:	2027      	movs	r0, #39	; 0x27
 8000db4:	f001 f83d 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f900 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <CAN1_TX_IRQHandler+0x10>)
 8000e26:	f000 fcde 	bl	80017e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001c0 	.word	0x200001c0

08000e34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	IRQRX0 = 1;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <CAN1_RX0_IRQHandler+0x14>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <CAN1_RX0_IRQHandler+0x18>)
 8000e40:	f000 fcd1 	bl	80017e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000022c 	.word	0x2000022c
 8000e4c:	200001c0 	.word	0x200001c0

08000e50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	IRQRX1 = 1;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <CAN1_RX1_IRQHandler+0x14>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <CAN1_RX1_IRQHandler+0x18>)
 8000e5c:	f000 fcc3 	bl	80017e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000022d 	.word	0x2000022d
 8000e68:	200001c0 	.word	0x200001c0

08000e6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USART3_IRQHandler+0x10>)
 8000e72:	f003 fa8d 	bl	8004390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001e8 	.word	0x200001e8

08000e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <OTG_FS_IRQHandler+0x10>)
 8000e86:	f001 fb9e 	bl	80025c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20001720 	.word	0x20001720

08000e94 <_sbrk>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
 8000ec4:	f008 fb48 	bl	8009558 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20020000 	.word	0x20020000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	20000238 	.word	0x20000238
 8000efc:	20001f98 	.word	0x20001f98

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:
 8000f32:	58d4      	ldr	r4, [r2, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:
 8000f38:	18c4      	adds	r4, r0, r3
 8000f3a:	428c      	cmp	r4, r1
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
 8000f42:	2300      	movs	r3, #0
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:
 8000f4a:	42a2      	cmp	r2, r4
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
 8000f52:	f008 fb07 	bl	8009564 <__libc_init_array>
 8000f56:	f7ff fbc5 	bl	80006e4 <main>
 8000f5a:	4770      	bx	lr
 8000f5c:	20020000 	.word	0x20020000
 8000f60:	20000000 	.word	0x20000000
 8000f64:	2000015c 	.word	0x2000015c
 8000f68:	0800a02c 	.word	0x0800a02c
 8000f6c:	2000015c 	.word	0x2000015c
 8000f70:	20001f94 	.word	0x20001f94

08000f74 <ADC_IRQHandler>:
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 ff1f 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe36 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff37 	bl	8001e4e <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 feff 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000010 	.word	0x20000010
 8001014:	20000018 	.word	0x20000018
 8001018:	20000014 	.word	0x20000014

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000018 	.word	0x20000018
 8001040:	2000023c 	.word	0x2000023c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000023c 	.word	0x2000023c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000018 	.word	0x20000018

080010a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0ed      	b.n	8001292 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fdd2 	bl	8000c6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d8:	f7ff ffb4 	bl	8001044 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010de:	e012      	b.n	8001106 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e0:	f7ff ffb0 	bl	8001044 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90b      	bls.n	8001106 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2205      	movs	r2, #5
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0c5      	b.n	8001292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e5      	beq.n	80010e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0202 	bic.w	r2, r2, #2
 8001122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001124:	f7ff ff8e 	bl	8001044 <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800112a:	e012      	b.n	8001152 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800112c:	f7ff ff8a 	bl	8001044 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b0a      	cmp	r3, #10
 8001138:	d90b      	bls.n	8001152 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e09f      	b.n	8001292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e5      	bne.n	800112c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e1b      	ldrb	r3, [r3, #24]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e5b      	ldrb	r3, [r3, #25]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e9b      	ldrb	r3, [r3, #26]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0220 	orr.w	r2, r2, #32
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0220 	bic.w	r2, r2, #32
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7edb      	ldrb	r3, [r3, #27]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0210 	bic.w	r2, r2, #16
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0210 	orr.w	r2, r2, #16
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7f1b      	ldrb	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0208 	orr.w	r2, r2, #8
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0208 	bic.w	r2, r2, #8
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7f5b      	ldrb	r3, [r3, #29]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0204 	orr.w	r2, r2, #4
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	ea42 0103 	orr.w	r1, r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012b4:	7cfb      	ldrb	r3, [r7, #19]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d003      	beq.n	80012c2 <HAL_CAN_ConfigFilter+0x26>
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	f040 80be 	bne.w	800143e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_CAN_ConfigFilter+0x1bc>)
 80012c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	401a      	ands	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d123      	bne.n	800136c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001346:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3248      	adds	r2, #72	; 0x48
 800134c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001360:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001362:	6979      	ldr	r1, [r7, #20]
 8001364:	3348      	adds	r3, #72	; 0x48
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d122      	bne.n	80013ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001394:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3248      	adds	r2, #72	; 0x48
 800139a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b0:	6979      	ldr	r1, [r7, #20]
 80013b2:	3348      	adds	r3, #72	; 0x48
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013d4:	e007      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	431a      	orrs	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001400:	e007      	b.n	8001412 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001430:	f023 0201 	bic.w	r2, r3, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e006      	b.n	800144c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40006400 	.word	0x40006400

0800145c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d12e      	bne.n	80014ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff fddc 	bl	8001044 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800148e:	e012      	b.n	80014b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001490:	f7ff fdd8 	bl	8001044 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b0a      	cmp	r3, #10
 800149c:	d90b      	bls.n	80014b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2205      	movs	r2, #5
 80014ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e012      	b.n	80014dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e5      	bne.n	8001490 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e006      	b.n	80014dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d133      	bne.n	8001560 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fd9c 	bl	8001044 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150e:	e012      	b.n	8001536 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001510:	f7ff fd98 	bl	8001044 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d90b      	bls.n	8001536 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e01b      	b.n	800156e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0e5      	beq.n	8001510 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0202 	bic.w	r2, r2, #2
 8001552:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e006      	b.n	800156e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <HAL_CAN_GetRxMessage+0x24>
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80f3 	bne.w	8001780 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10e      	bne.n	80015be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0d8      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	331b      	adds	r3, #27
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0204 	and.w	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	331b      	adds	r3, #27
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0d5b      	lsrs	r3, r3, #21
 800160a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e00b      	b.n	800162c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	331b      	adds	r3, #27
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	331b      	adds	r3, #27
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0202 	and.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	331b      	adds	r3, #27
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 020f 	and.w	r2, r3, #15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	331b      	adds	r3, #27
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	3304      	adds	r3, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	331b      	adds	r3, #27
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0a1a      	lsrs	r2, r3, #8
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0c1a      	lsrs	r2, r3, #16
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3302      	adds	r3, #2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0e1a      	lsrs	r2, r3, #24
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3303      	adds	r3, #3
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0a1a      	lsrs	r2, r3, #8
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3305      	adds	r3, #5
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0c1a      	lsrs	r2, r3, #16
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3306      	adds	r3, #6
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0e1a      	lsrs	r2, r3, #24
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3307      	adds	r3, #7
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e007      	b.n	800177c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	e006      	b.n	800178e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <HAL_CAN_ActivateNotification+0x1e>
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d109      	bne.n	80017cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6959      	ldr	r1, [r3, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e006      	b.n	80017da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d07c      	beq.n	8001926 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d023      	beq.n	800187e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f983 	bl	8001b54 <HAL_CAN_TxMailbox0CompleteCallback>
 800184e:	e016      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e00c      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	e002      	b.n	800187e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f989 	bl	8001b90 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d024      	beq.n	80018d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001890:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f963 	bl	8001b68 <HAL_CAN_TxMailbox1CompleteCallback>
 80018a2:	e016      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e00c      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e002      	b.n	80018d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f969 	bl	8001ba4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d024      	beq.n	8001926 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f943 	bl	8001b7c <HAL_CAN_TxMailbox2CompleteCallback>
 80018f6:	e016      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	e00c      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e002      	b.n	8001926 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f949 	bl	8001bb8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00c      	beq.n	800194a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2210      	movs	r2, #16
 8001948:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2208      	movs	r2, #8
 8001964:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f930 	bl	8001bcc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7fe fdf9 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2210      	movs	r2, #16
 80019ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2208      	movs	r2, #8
 80019c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f912 	bl	8001bf4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8f9 	bl	8001be0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2210      	movs	r2, #16
 8001a08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8fc 	bl	8001c08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8f5 	bl	8001c1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d07b      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d072      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d043      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03e      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab4:	2b60      	cmp	r3, #96	; 0x60
 8001ab6:	d02b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x32a>
 8001ab8:	2b60      	cmp	r3, #96	; 0x60
 8001aba:	d82e      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001abc:	2b50      	cmp	r3, #80	; 0x50
 8001abe:	d022      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x320>
 8001ac0:	2b50      	cmp	r3, #80	; 0x50
 8001ac2:	d82a      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d019      	beq.n	8001afc <HAL_CAN_IRQHandler+0x316>
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d826      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001acc:	2b30      	cmp	r3, #48	; 0x30
 8001ace:	d010      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x30c>
 8001ad0:	2b30      	cmp	r3, #48	; 0x30
 8001ad2:	d822      	bhi.n	8001b1a <HAL_CAN_IRQHandler+0x334>
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_IRQHandler+0x2f8>
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d005      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001adc:	e01d      	b.n	8001b1a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ae6:	e019      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001af0:	e014      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001afa:	e00f      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b04:	e00a      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b0e:	e005      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b18:	e000      	b.n	8001b1c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b1a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b2a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f872 	bl	8001c30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff f8e6 	bl	8001044 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d008      	beq.n	8001e98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e052      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0216 	bic.w	r2, r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <HAL_DMA_Abort+0x62>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	e013      	b.n	8001f12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eea:	f7ff f8ab 	bl	8001044 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d90c      	bls.n	8001f12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e015      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e4      	bne.n	8001eea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00c      	b.n	8001f7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2205      	movs	r2, #5
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e16b      	b.n	8002280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 815a 	bne.w	800227a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80b4 	beq.w	800227a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b60      	ldr	r3, [pc, #384]	; (8002298 <HAL_GPIO_Init+0x30c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a5f      	ldr	r2, [pc, #380]	; (8002298 <HAL_GPIO_Init+0x30c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_GPIO_Init+0x30c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a5b      	ldr	r2, [pc, #364]	; (800229c <HAL_GPIO_Init+0x310>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_GPIO_Init+0x314>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_GPIO_Init+0x318>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a50      	ldr	r2, [pc, #320]	; (80022a8 <HAL_GPIO_Init+0x31c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <HAL_GPIO_Init+0x320>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x328>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x212>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x20a>
 8002192:	2307      	movs	r3, #7
 8002194:	e00e      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 8002196:	2308      	movs	r3, #8
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219a:	2306      	movs	r3, #6
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x310>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_GPIO_Init+0x334>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae90 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002328:	b08f      	sub	sp, #60	; 0x3c
 800232a:	af0a      	add	r7, sp, #40	; 0x28
 800232c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e10f      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 fdb2 	bl	8008ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f87b 	bl	8005472 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	687e      	ldr	r6, [r7, #4]
 8002384:	466d      	mov	r5, sp
 8002386:	f106 0410 	add.w	r4, r6, #16
 800238a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002396:	e885 0003 	stmia.w	r5, {r0, r1}
 800239a:	1d33      	adds	r3, r6, #4
 800239c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f002 ff52 	bl	8005248 <USB_CoreInit>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0d0      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 f869 	bl	8005494 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e04a      	b.n	800245e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	333d      	adds	r3, #61	; 0x3d
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	333c      	adds	r3, #60	; 0x3c
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	b298      	uxth	r0, r3
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3344      	adds	r3, #68	; 0x44
 8002404:	4602      	mov	r2, r0
 8002406:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3340      	adds	r3, #64	; 0x40
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3348      	adds	r3, #72	; 0x48
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	334c      	adds	r3, #76	; 0x4c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3354      	adds	r3, #84	; 0x54
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3af      	bcc.n	80023c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e044      	b.n	80024f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3b5      	bcc.n	800246e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	687e      	ldr	r6, [r7, #4]
 800250a:	466d      	mov	r5, sp
 800250c:	f106 0410 	add.w	r4, r6, #16
 8002510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	e894 0003 	ldmia.w	r4, {r0, r1}
 800251c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002520:	1d33      	adds	r3, r6, #4
 8002522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	f003 f801 	bl	800552c <USB_DevInit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00d      	b.n	8002558 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f004 f950 	bl	80067f6 <USB_DevDisconnect>

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002560 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_PCD_Start+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e020      	b.n	80025be <HAL_PCD_Start+0x5e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	2b01      	cmp	r3, #1
 800258a:	d109      	bne.n	80025a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002590:	2b01      	cmp	r3, #1
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 ff53 	bl	8005450 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 f900 	bl	80067b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c6:	b590      	push	{r4, r7, lr}
 80025c8:	b08d      	sub	sp, #52	; 0x34
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 f9be 	bl	800695e <USB_GetMode>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 848a 	bne.w	8002efe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f922 	bl	8006838 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8480 	beq.w	8002efc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f004 f90f 	bl	8006838 <USB_ReadInterrupts>
 800261a:	4603      	mov	r3, r0
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d107      	bne.n	8002634 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f002 0202 	and.w	r2, r2, #2
 8002632:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f004 f8fd 	bl	8006838 <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d161      	bne.n	800270c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0210 	bic.w	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 020f 	and.w	r2, r3, #15
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	2b02      	cmp	r3, #2
 8002682:	d124      	bne.n	80026ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d035      	beq.n	80026fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800269a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6a38      	ldr	r0, [r7, #32]
 80026a4:	f003 ff34 	bl	8006510 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b4:	441a      	add	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c6:	441a      	add	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	621a      	str	r2, [r3, #32]
 80026cc:	e016      	b.n	80026fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	0c5b      	lsrs	r3, r3, #17
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d110      	bne.n	80026fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026e0:	2208      	movs	r2, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	6a38      	ldr	r0, [r7, #32]
 80026e6:	f003 ff13 	bl	8006510 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f6:	441a      	add	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0210 	orr.w	r2, r2, #16
 800270a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f004 f891 	bl	8006838 <USB_ReadInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002720:	f040 80a7 	bne.w	8002872 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f896 	bl	800685e <USB_ReadDevAllOutEpInterrupt>
 8002732:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002734:	e099      	b.n	800286a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 808e 	beq.w	800285e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f004 f8ba 	bl	80068c6 <USB_ReadDevOutEPInterrupt>
 8002752:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	461a      	mov	r2, r3
 800276c:	2301      	movs	r3, #1
 800276e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fec2 	bl	80034fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	461a      	mov	r2, r3
 8002790:	2308      	movs	r3, #8
 8002792:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 ff98 	bl	80036cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	461a      	mov	r2, r3
 80027b4:	2310      	movs	r3, #16
 80027b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d030      	beq.n	8002824 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d109      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	3304      	adds	r3, #4
 80027f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d108      	bne.n	8002812 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f006 fc6d 	bl	80090ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281e:	461a      	mov	r2, r3
 8002820:	2302      	movs	r3, #2
 8002822:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	2320      	movs	r3, #32
 800283e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002856:	461a      	mov	r2, r3
 8002858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f af62 	bne.w	8002736 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 ffde 	bl	8006838 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002886:	f040 80db 	bne.w	8002a40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ffff 	bl	8006892 <USB_ReadDevAllInEpInterrupt>
 8002894:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800289a:	e0cd      	b.n	8002a38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80c2 	beq.w	8002a2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 f825 	bl	8006902 <USB_ReadDevInEPInterrupt>
 80028b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d057      	beq.n	8002974 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2201      	movs	r2, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e4:	4013      	ands	r3, r2
 80028e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	461a      	mov	r2, r3
 80028f6:	2301      	movs	r3, #1
 80028f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d132      	bne.n	8002968 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	334c      	adds	r3, #76	; 0x4c
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4403      	add	r3, r0
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4419      	add	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4403      	add	r3, r0
 8002936:	334c      	adds	r3, #76	; 0x4c
 8002938:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <HAL_PCD_IRQHandler+0x3a2>
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3354      	adds	r3, #84	; 0x54
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002960:	461a      	mov	r2, r3
 8002962:	2101      	movs	r1, #1
 8002964:	f004 f82c 	bl	80069c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f006 fb37 	bl	8008fe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	461a      	mov	r2, r3
 800298c:	2308      	movs	r3, #8
 800298e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a6:	461a      	mov	r2, r3
 80029a8:	2310      	movs	r3, #16
 80029aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c2:	461a      	mov	r2, r3
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d023      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d4:	6a38      	ldr	r0, [r7, #32]
 80029d6:	f002 ff0d 	bl	80057f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	3338      	adds	r3, #56	; 0x38
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	3304      	adds	r3, #4
 80029ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	78db      	ldrb	r3, [r3, #3]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f006 fb84 	bl	8009110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	2302      	movs	r3, #2
 8002a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fcdb 	bl	80033e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	3301      	adds	r3, #1
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f47f af2e 	bne.w	800289c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fef7 	bl	8006838 <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a54:	d122      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d108      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fec2 	bl	8003808 <HAL_PCDEx_LPM_Callback>
 8002a84:	e002      	b.n	8002a8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f006 fb22 	bl	80090d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fec9 	bl	8006838 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	d112      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f006 fade 	bl	8009084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ad6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 feab 	bl	8006838 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	f040 80b7 	bne.w	8002c5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2110      	movs	r1, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 fe72 	bl	80057f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b14:	e046      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b22:	461a      	mov	r2, r3
 8002b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3a:	0151      	lsls	r1, r2, #5
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	440a      	add	r2, r1
 8002b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8e:	0151      	lsls	r1, r2, #5
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	440a      	add	r2, r1
 8002b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3b3      	bcc.n	8002b16 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bda:	f043 030b 	orr.w	r3, r3, #11
 8002bde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf0:	f043 030b 	orr.w	r3, r3, #11
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	e015      	b.n	8002c24 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c0a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1e:	f043 030b 	orr.w	r3, r3, #11
 8002c22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f003 feb9 	bl	80069c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fde8 	bl	8006838 <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	d124      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fe7e 	bl	800697a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fe33 	bl	80058ee <USB_GetDevSpeed>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681c      	ldr	r4, [r3, #0]
 8002c94:	f001 fa28 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8002c98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f002 fb32 	bl	800530c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f006 f9c2 	bl	8009032 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fdb8 	bl	8006838 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f006 f99f 	bl	8009016 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f002 0208 	and.w	r2, r2, #8
 8002ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fda3 	bl	8006838 <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d122      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d08:	2301      	movs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e014      	b.n	8002d38 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb27 	bl	8003380 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	3301      	adds	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3e5      	bcc.n	8002d0e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fd76 	bl	8006838 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d56:	d13b      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e02b      	b.n	8002db6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3340      	adds	r3, #64	; 0x40
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d115      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da12      	bge.n	8002db0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fae8 	bl	8003380 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3ce      	bcc.n	8002d5e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fd2f 	bl	8006838 <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de4:	d155      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de6:	2301      	movs	r3, #1
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e045      	b.n	8002e78 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d12e      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da2b      	bge.n	8002e72 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d121      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	6053      	str	r3, [r2, #4]
            break;
 8002e70:	e007      	b.n	8002e82 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	3301      	adds	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3b4      	bcc.n	8002dec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fcce 	bl	8006838 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d10a      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f006 f943 	bl	8009134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fcb8 	bl	8006838 <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d115      	bne.n	8002efe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f006 f933 	bl	8009150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	e000      	b.n	8002efe <HAL_PCD_IRQHandler+0x938>
      return;
 8002efc:	bf00      	nop
    }
  }
}
 8002efe:	3734      	adds	r7, #52	; 0x34
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_PCD_SetAddress+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e013      	b.n	8002f46 <HAL_PCD_SetAddress+0x42>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fc16 	bl	8006768 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	4608      	mov	r0, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	70fb      	strb	r3, [r7, #3]
 8002f60:	460b      	mov	r3, r1
 8002f62:	803b      	strh	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da0f      	bge.n	8002f94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3338      	adds	r3, #56	; 0x38
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	705a      	strb	r2, [r3, #1]
 8002f92:	e00f      	b.n	8002fb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fc0:	883a      	ldrh	r2, [r7, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	78ba      	ldrb	r2, [r7, #2]
 8002fca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fde:	78bb      	ldrb	r3, [r7, #2]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d102      	bne.n	8002fea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_PCD_EP_Open+0xaa>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e00e      	b.n	8003016 <HAL_PCD_EP_Open+0xc8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68f9      	ldr	r1, [r7, #12]
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fc96 	bl	8005938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003014:	7afb      	ldrb	r3, [r7, #11]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da0f      	bge.n	8003052 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3338      	adds	r3, #56	; 0x38
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	705a      	strb	r2, [r3, #1]
 8003050:	e00f      	b.n	8003072 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_PCD_EP_Close+0x6e>
 8003088:	2302      	movs	r3, #2
 800308a:	e00e      	b.n	80030aa <HAL_PCD_EP_Close+0x8c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fcd4 	bl	8005a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	460b      	mov	r3, r1
 80030c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2200      	movs	r2, #0
 80030ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f4:	7afb      	ldrb	r3, [r7, #11]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	6979      	ldr	r1, [r7, #20]
 8003126:	f002 ffb3 	bl	8006090 <USB_EP0StartXfer>
 800312a:	e008      	b.n	800313e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	f002 fd61 	bl	8005c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	460b      	mov	r3, r1
 8003186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3338      	adds	r3, #56	; 0x38
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2201      	movs	r2, #1
 80031b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b8:	7afb      	ldrb	r3, [r7, #11]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d102      	bne.n	80031d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	6979      	ldr	r1, [r7, #20]
 80031ea:	f002 ff51 	bl	8006090 <USB_EP0StartXfer>
 80031ee:	e008      	b.n	8003202 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	6979      	ldr	r1, [r7, #20]
 80031fe:	f002 fcff 	bl	8005c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d901      	bls.n	800322a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e050      	b.n	80032cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800322a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322e:	2b00      	cmp	r3, #0
 8003230:	da0f      	bge.n	8003252 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 020f 	and.w	r2, r3, #15
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3338      	adds	r3, #56	; 0x38
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	705a      	strb	r2, [r3, #1]
 8003250:	e00d      	b.n	800326e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_PCD_EP_SetStall+0x82>
 800328a:	2302      	movs	r3, #2
 800328c:	e01e      	b.n	80032cc <HAL_PCD_EP_SetStall+0xc0>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 f98f 	bl	80065c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	b2d9      	uxtb	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032bc:	461a      	mov	r2, r3
 80032be:	f003 fb7f 	bl	80069c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 020f 	and.w	r2, r3, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d901      	bls.n	80032f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e042      	b.n	8003378 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0f      	bge.n	800331a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3338      	adds	r3, #56	; 0x38
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
 8003318:	e00f      	b.n	800333a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_ClrStall+0x86>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_ClrStall+0xa4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 f997 	bl	800669c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800338c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	da0c      	bge.n	80033ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 020f 	and.w	r2, r3, #15
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e00c      	b.n	80033c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 ffb6 	bl	8006340 <USB_EPStopXfer>
 80033d4:	4603      	mov	r3, r0
 80033d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033d8:	7afb      	ldrb	r3, [r7, #11]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b08a      	sub	sp, #40	; 0x28
 80033e6:	af02      	add	r7, sp, #8
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	3338      	adds	r3, #56	; 0x38
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	429a      	cmp	r2, r3
 8003414:	d901      	bls.n	800341a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06c      	b.n	80034f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	429a      	cmp	r2, r3
 800342e:	d902      	bls.n	8003436 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3303      	adds	r3, #3
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800343e:	e02b      	b.n	8003498 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	429a      	cmp	r2, r3
 8003454:	d902      	bls.n	800345c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3303      	adds	r3, #3
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6919      	ldr	r1, [r3, #16]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003474:	b2db      	uxtb	r3, r3
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	4603      	mov	r3, r0
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f003 f80a 	bl	8006494 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	441a      	add	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d809      	bhi.n	80034c2 <PCD_WriteEmptyTxFifo+0xe0>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d203      	bcs.n	80034c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1be      	bne.n	8003440 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d811      	bhi.n	80034f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2201      	movs	r2, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	6939      	ldr	r1, [r7, #16]
 80034ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ee:	4013      	ands	r3, r2
 80034f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	333c      	adds	r3, #60	; 0x3c
 8003514:	3304      	adds	r3, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d17b      	bne.n	800362a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	4a61      	ldr	r2, [pc, #388]	; (80036c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	f240 80b9 	bls.w	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80b3 	beq.w	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	e0a7      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	2320      	movs	r3, #32
 8003582:	6093      	str	r3, [r2, #8]
 8003584:	e098      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	f040 8093 	bne.w	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	4a4b      	ldr	r2, [pc, #300]	; (80036c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d90f      	bls.n	80035ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	e07e      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	0159      	lsls	r1, r3, #5
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	440b      	add	r3, r1
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d114      	bne.n	800361c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003604:	461a      	mov	r2, r3
 8003606:	2101      	movs	r1, #1
 8003608:	f003 f9da 	bl	80069c0 <USB_EP0_OutStart>
 800360c:	e006      	b.n	800361c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	441a      	add	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f005 fcc2 	bl	8008fac <HAL_PCD_DataOutStageCallback>
 8003628:	e046      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d124      	bne.n	800367c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	e032      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	461a      	mov	r2, r3
 800366a:	2320      	movs	r3, #32
 800366c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fc99 	bl	8008fac <HAL_PCD_DataOutStageCallback>
 800367a:	e01d      	b.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d114      	bne.n	80036ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036a4:	461a      	mov	r2, r3
 80036a6:	2100      	movs	r1, #0
 80036a8:	f003 f98a 	bl	80069c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f005 fc7a 	bl	8008fac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	4f54300a 	.word	0x4f54300a
 80036c8:	4f54310a 	.word	0x4f54310a

080036cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	3304      	adds	r3, #4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <PCD_EP_OutSetupPacket_int+0x88>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d90e      	bls.n	8003720 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	461a      	mov	r2, r3
 800371a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f005 fc31 	bl	8008f88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <PCD_EP_OutSetupPacket_int+0x88>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d90c      	bls.n	8003748 <PCD_EP_OutSetupPacket_int+0x7c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	f003 f93c 	bl	80069c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	4f54300a 	.word	0x4f54300a

08003758 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003776:	883b      	ldrh	r3, [r7, #0]
 8003778:	0419      	lsls	r1, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	430a      	orrs	r2, r1
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
 8003784:	e028      	b.n	80037d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e00d      	b.n	80037b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	3340      	adds	r3, #64	; 0x40
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3301      	adds	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3ec      	bcc.n	800379a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037c0:	883b      	ldrh	r3, [r7, #0]
 80037c2:	0418      	lsls	r0, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	4302      	orrs	r2, r0
 80037d0:	3340      	adds	r3, #64	; 0x40
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e267      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383e:	4b88      	ldr	r3, [pc, #544]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b04      	cmp	r3, #4
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b85      	ldr	r3, [pc, #532]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d112      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003862:	d10b      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05b      	beq.n	8003928 <HAL_RCC_OscConfig+0x108>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d157      	bne.n	8003928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e242      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x74>
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6f      	ldr	r2, [pc, #444]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6c      	ldr	r2, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 80038b8:	4b69      	ldr	r3, [pc, #420]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a68      	ldr	r2, [pc, #416]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fd fbb4 	bl	8001044 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fbb0 	bl	8001044 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e207      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xc0>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fba0 	bl	8001044 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fb9c 	bl	8001044 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1f3      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0xe8>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1c7      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e03a      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd fb55 	bl	8001044 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399e:	f7fd fb51 	bl	8001044 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1a8      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4925      	ldr	r1, [pc, #148]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fb34 	bl	8001044 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fd fb30 	bl	8001044 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e187      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd fb14 	bl	8001044 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fd fb10 	bl	8001044 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e167      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x200>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fafd 	bl	8001044 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fd faf9 	bl	8001044 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d907      	bls.n	8003a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e150      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	42470000 	.word	0x42470000
 8003a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8097 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac2:	4b74      	ldr	r3, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fd fab9 	bl	8001044 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fd fab5 	bl	8001044 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e10c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2ea>
 8003afc:	4b64      	ldr	r3, [pc, #400]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a63      	ldr	r2, [pc, #396]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x30c>
 8003b12:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a5b      	ldr	r2, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b2c:	4b58      	ldr	r3, [pc, #352]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
 8003b38:	4b55      	ldr	r3, [pc, #340]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a54      	ldr	r2, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fa7a 	bl	8001044 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fa76 	bl	8001044 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0cb      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fd fa64 	bl	8001044 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd fa60 	bl	8001044 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0b5      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a1 	beq.w	8003d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d05c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d141      	bne.n	8003c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fa34 	bl	8001044 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd fa30 	bl	8001044 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e087      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	491b      	ldr	r1, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fa09 	bl	8001044 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd fa05 	bl	8001044 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e05c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x416>
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd f9f2 	bl	8001044 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd f9ee 	bl	8001044 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e045      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e038      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x4ec>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d121      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0cc      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b68      	ldr	r3, [pc, #416]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90c      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494d      	ldr	r1, [pc, #308]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d044      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e067      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4934      	ldr	r1, [pc, #208]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd f920 	bl	8001044 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd f91c 	bl	8001044 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20c      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4916      	ldr	r1, [pc, #88]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490e      	ldr	r1, [pc, #56]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f821 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	490a      	ldr	r1, [pc, #40]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd f880 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023c00 	.word	0x40023c00
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08009fd0 	.word	0x08009fd0
 8003ed4:	20000010 	.word	0x20000010
 8003ed8:	20000014 	.word	0x20000014

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee0:	b094      	sub	sp, #80	; 0x50
 8003ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	2300      	movs	r3, #0
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef4:	4b79      	ldr	r3, [pc, #484]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d00d      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x40>
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	f200 80e1 	bhi.w	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0e:	e0db      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f14:	e0db      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f16:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1a:	e0d8      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	2300      	movs	r3, #0
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f60:	0150      	lsls	r0, r2, #5
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4621      	mov	r1, r4
 8003f68:	1a51      	subs	r1, r2, r1
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f80:	4659      	mov	r1, fp
 8003f82:	018b      	lsls	r3, r1, #6
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	018a      	lsls	r2, r1, #6
 8003f8e:	4651      	mov	r1, sl
 8003f90:	ebb2 0801 	subs.w	r8, r2, r1
 8003f94:	4659      	mov	r1, fp
 8003f96:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fae:	4690      	mov	r8, r2
 8003fb0:	4699      	mov	r9, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	eb18 0303 	adds.w	r3, r8, r3
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	462b      	mov	r3, r5
 8003fbc:	eb49 0303 	adc.w	r3, r9, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	024b      	lsls	r3, r1, #9
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd8:	4621      	mov	r1, r4
 8003fda:	024a      	lsls	r2, r1, #9
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fec:	f7fc f948 	bl	8000280 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	e058      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	4618      	mov	r0, r3
 8004004:	4611      	mov	r1, r2
 8004006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	0159      	lsls	r1, r3, #5
 8004022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004026:	0150      	lsls	r0, r2, #5
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4641      	mov	r1, r8
 800402e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb63 0b01 	sbc.w	fp, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800404c:	ebb2 040a 	subs.w	r4, r2, sl
 8004050:	eb63 050b 	sbc.w	r5, r3, fp
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	00eb      	lsls	r3, r5, #3
 800405e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004062:	00e2      	lsls	r2, r4, #3
 8004064:	4614      	mov	r4, r2
 8004066:	461d      	mov	r5, r3
 8004068:	4643      	mov	r3, r8
 800406a:	18e3      	adds	r3, r4, r3
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	464b      	mov	r3, r9
 8004070:	eb45 0303 	adc.w	r3, r5, r3
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004082:	4629      	mov	r1, r5
 8004084:	028b      	lsls	r3, r1, #10
 8004086:	4621      	mov	r1, r4
 8004088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800408c:	4621      	mov	r1, r4
 800408e:	028a      	lsls	r2, r1, #10
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004096:	2200      	movs	r2, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	61fa      	str	r2, [r7, #28]
 800409c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a0:	f7fc f8ee 	bl	8000280 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4613      	mov	r3, r2
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3750      	adds	r7, #80	; 0x50
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000010 	.word	0x20000010

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0a9b      	lsrs	r3, r3, #10
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	08009fe0 	.word	0x08009fe0

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800412c:	f7ff ffdc 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0b5b      	lsrs	r3, r3, #13
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK2Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	08009fe0 	.word	0x08009fe0

08004150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e03f      	b.n	80041e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fdd8 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fde3 	bl	8004d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b08a      	sub	sp, #40	; 0x28
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	f040 808c 	bne.w	8004324 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Receive+0x2e>
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e084      	b.n	8004326 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_UART_Receive+0x40>
 8004226:	2302      	movs	r3, #2
 8004228:	e07d      	b.n	8004326 <HAL_UART_Receive+0x13c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2222      	movs	r2, #34	; 0x22
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004246:	f7fc fefd 	bl	8001044 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d108      	bne.n	8004274 <HAL_UART_Receive+0x8a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e003      	b.n	800427c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004284:	e043      	b.n	800430e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2120      	movs	r1, #32
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb1f 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e042      	b.n	8004326 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	3302      	adds	r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	e01f      	b.n	8004300 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d007      	beq.n	80042da <HAL_UART_Receive+0xf0>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <HAL_UART_Receive+0xfe>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e008      	b.n	80042fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3301      	adds	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1b6      	bne.n	8004286 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b20      	cmp	r3, #32
 8004346:	d11d      	bne.n	8004384 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Receive_IT+0x26>
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e016      	b.n	8004386 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_UART_Receive_IT+0x38>
 8004362:	2302      	movs	r3, #2
 8004364:	e00f      	b.n	8004386 <HAL_UART_Receive_IT+0x58>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	461a      	mov	r2, r3
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb18 	bl	80049b0 <UART_Start_Receive_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	e000      	b.n	8004386 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0ba      	sub	sp, #232	; 0xe8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_UART_IRQHandler+0x66>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fbfb 	bl	8004bea <UART_Receive_IT>
      return;
 80043f4:	e256      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80de 	beq.w	80045bc <HAL_UART_IRQHandler+0x22c>
 8004400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004410:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80d1 	beq.w	80045bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_UART_IRQHandler+0xae>
 8004426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_UART_IRQHandler+0xd2>
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0202 	orr.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_UART_IRQHandler+0xf6>
 800446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <HAL_UART_IRQHandler+0x126>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800449e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0208 	orr.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 81ed 	beq.w	800489a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_UART_IRQHandler+0x14e>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb86 	bl	8004bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_UART_IRQHandler+0x17a>
 8004502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04f      	beq.n	80045aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa8e 	bl	8004a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d141      	bne.n	80045a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800454a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1d9      	bne.n	800451e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4a7d      	ldr	r2, [pc, #500]	; (800476c <HAL_UART_IRQHandler+0x3dc>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fce1 	bl	8001f46 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00e      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f990 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e00a      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f98c 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e006      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f988 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045b6:	e170      	b.n	800489a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	bf00      	nop
    return;
 80045ba:	e16e      	b.n	800489a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 814a 	bne.w	800485a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8143 	beq.w	800485a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 813c 	beq.w	800485a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	f040 80b4 	bne.w	8004770 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004614:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8140 	beq.w	800489e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004626:	429a      	cmp	r2, r3
 8004628:	f080 8139 	bcs.w	800489e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004632:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	f000 8088 	beq.w	8004752 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800466e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800467a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1d9      	bne.n	8004642 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800469e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e1      	bne.n	800468e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004734:	65ba      	str	r2, [r7, #88]	; 0x58
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800473a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e3      	bne.n	8004710 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fb8a 	bl	8001e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475a:	b29b      	uxth	r3, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fb ff68 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004768:	e099      	b.n	800489e <HAL_UART_IRQHandler+0x50e>
 800476a:	bf00      	nop
 800476c:	08004af3 	.word	0x08004af3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004778:	b29b      	uxth	r3, r3
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 808b 	beq.w	80048a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800478c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8086 	beq.w	80048a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ba:	647a      	str	r2, [r7, #68]	; 0x44
 80047bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e3      	bne.n	8004796 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	623b      	str	r3, [r7, #32]
   return(result);
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047f2:	633a      	str	r2, [r7, #48]	; 0x30
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60fb      	str	r3, [r7, #12]
   return(result);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004838:	61fa      	str	r2, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	69b9      	ldr	r1, [r7, #24]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	617b      	str	r3, [r7, #20]
   return(result);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e3      	bne.n	8004814 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fb fef0 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004858:	e023      	b.n	80048a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_UART_IRQHandler+0x4ea>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f951 	bl	8004b1a <UART_Transmit_IT>
    return;
 8004878:	e014      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <HAL_UART_IRQHandler+0x514>
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f991 	bl	8004bba <UART_EndTransmit_IT>
    return;
 8004898:	e004      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
    return;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
      return;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
      return;
 80048a2:	bf00      	nop
  }
}
 80048a4:	37e8      	adds	r7, #232	; 0xe8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop

080048ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b090      	sub	sp, #64	; 0x40
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e050      	b.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d04c      	beq.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f4:	f7fc fba6 	bl	8001044 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004900:	429a      	cmp	r2, r3
 8004902:	d241      	bcs.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004924:	637a      	str	r2, [r7, #52]	; 0x34
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800492a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	613b      	str	r3, [r7, #16]
   return(result);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004958:	623a      	str	r2, [r7, #32]
 800495a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69f9      	ldr	r1, [r7, #28]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	61bb      	str	r3, [r7, #24]
   return(result);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e00f      	b.n	80049a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d09f      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3740      	adds	r7, #64	; 0x40
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2222      	movs	r2, #34	; 0x22
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0220 	orr.w	r2, r2, #32
 8004a1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b095      	sub	sp, #84	; 0x54
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a54:	643a      	str	r2, [r7, #64]	; 0x40
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d119      	bne.n	8004ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac4:	61ba      	str	r2, [r7, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ae6:	bf00      	nop
 8004ae8:	3754      	adds	r7, #84	; 0x54
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fed7 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b21      	cmp	r3, #33	; 0x21
 8004b2c:	d13e      	bne.n	8004bac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d114      	bne.n	8004b62 <UART_Transmit_IT+0x48>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d110      	bne.n	8004b62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]
 8004b60:	e008      	b.n	8004b74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	1c59      	adds	r1, r3, #1
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6211      	str	r1, [r2, #32]
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4619      	mov	r1, r3
 8004b82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10f      	bne.n	8004ba8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fe66 	bl	80048ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b08c      	sub	sp, #48	; 0x30
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b22      	cmp	r3, #34	; 0x22
 8004bfc:	f040 80ab 	bne.w	8004d56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d117      	bne.n	8004c3a <UART_Receive_IT+0x50>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d113      	bne.n	8004c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
 8004c38:	e026      	b.n	8004c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d007      	beq.n	8004c5e <UART_Receive_IT+0x74>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <UART_Receive_IT+0x82>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e008      	b.n	8004c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4619      	mov	r1, r3
 8004c96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d15a      	bne.n	8004d52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0220 	bic.w	r2, r2, #32
 8004caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d135      	bne.n	8004d48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	623a      	str	r2, [r7, #32]
 8004d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	69f9      	ldr	r1, [r7, #28]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d10a      	bne.n	8004d3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fb fc79 	bl	8000638 <HAL_UARTEx_RxEventCallback>
 8004d46:	e002      	b.n	8004d4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fb fcb7 	bl	80006bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e002      	b.n	8004d58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3730      	adds	r7, #48	; 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b0c0      	sub	sp, #256	; 0x100
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	ea40 0301 	orr.w	r3, r0, r1
 8004d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004db8:	f021 010c 	bic.w	r1, r1, #12
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	6999      	ldr	r1, [r3, #24]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	ea40 0301 	orr.w	r3, r0, r1
 8004de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b8f      	ldr	r3, [pc, #572]	; (800502c <UART_SetConfig+0x2cc>)
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d005      	beq.n	8004e00 <UART_SetConfig+0xa0>
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	; (8005030 <UART_SetConfig+0x2d0>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d104      	bne.n	8004e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7ff f992 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8004e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e08:	e003      	b.n	8004e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e0a:	f7ff f979 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8004e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	f040 810c 	bne.w	8005038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e42:	4621      	mov	r1, r4
 8004e44:	eb12 0801 	adds.w	r8, r2, r1
 8004e48:	4629      	mov	r1, r5
 8004e4a:	eb43 0901 	adc.w	r9, r3, r1
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e62:	4690      	mov	r8, r2
 8004e64:	4699      	mov	r9, r3
 8004e66:	4623      	mov	r3, r4
 8004e68:	eb18 0303 	adds.w	r3, r8, r3
 8004e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e70:	462b      	mov	r3, r5
 8004e72:	eb49 0303 	adc.w	r3, r9, r3
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e8e:	460b      	mov	r3, r1
 8004e90:	18db      	adds	r3, r3, r3
 8004e92:	653b      	str	r3, [r7, #80]	; 0x50
 8004e94:	4613      	mov	r3, r2
 8004e96:	eb42 0303 	adc.w	r3, r2, r3
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ea4:	f7fb f9ec 	bl	8000280 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4b61      	ldr	r3, [pc, #388]	; (8005034 <UART_SetConfig+0x2d4>)
 8004eae:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	011c      	lsls	r4, r3, #4
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ed8:	4641      	mov	r1, r8
 8004eda:	eb12 0a01 	adds.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	4692      	mov	sl, r2
 8004efa:	469b      	mov	fp, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	eb1a 0303 	adds.w	r3, sl, r3
 8004f02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f06:	464b      	mov	r3, r9
 8004f08:	eb4b 0303 	adc.w	r3, fp, r3
 8004f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f24:	460b      	mov	r3, r1
 8004f26:	18db      	adds	r3, r3, r3
 8004f28:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
 8004f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f3a:	f7fb f9a1 	bl	8000280 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <UART_SetConfig+0x2d4>)
 8004f46:	fba3 2301 	umull	r2, r3, r3, r1
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2264      	movs	r2, #100	; 0x64
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	1acb      	subs	r3, r1, r3
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f68:	441c      	add	r4, r3
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f84:	415b      	adcs	r3, r3
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	1851      	adds	r1, r2, r1
 8004f90:	6339      	str	r1, [r7, #48]	; 0x30
 8004f92:	4649      	mov	r1, r9
 8004f94:	414b      	adcs	r3, r1
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4651      	mov	r1, sl
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ff6:	f7fb f943 	bl	8000280 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <UART_SetConfig+0x2d4>)
 8005000:	fba3 1302 	umull	r1, r3, r3, r2
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	2164      	movs	r1, #100	; 0x64
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3332      	adds	r3, #50	; 0x32
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <UART_SetConfig+0x2d4>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 0207 	and.w	r2, r3, #7
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4422      	add	r2, r4
 8005026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005028:	e106      	b.n	8005238 <UART_SetConfig+0x4d8>
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005042:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	1891      	adds	r1, r2, r2
 8005050:	6239      	str	r1, [r7, #32]
 8005052:	415b      	adcs	r3, r3
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
 8005056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505a:	4641      	mov	r1, r8
 800505c:	1854      	adds	r4, r2, r1
 800505e:	4649      	mov	r1, r9
 8005060:	eb43 0501 	adc.w	r5, r3, r1
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	00eb      	lsls	r3, r5, #3
 800506e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005072:	00e2      	lsls	r2, r4, #3
 8005074:	4614      	mov	r4, r2
 8005076:	461d      	mov	r5, r3
 8005078:	4643      	mov	r3, r8
 800507a:	18e3      	adds	r3, r4, r3
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005080:	464b      	mov	r3, r9
 8005082:	eb45 0303 	adc.w	r3, r5, r3
 8005086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050a6:	4629      	mov	r1, r5
 80050a8:	008b      	lsls	r3, r1, #2
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b0:	4621      	mov	r1, r4
 80050b2:	008a      	lsls	r2, r1, #2
 80050b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050b8:	f7fb f8e2 	bl	8000280 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4b60      	ldr	r3, [pc, #384]	; (8005244 <UART_SetConfig+0x4e4>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	011c      	lsls	r4, r3, #4
 80050ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	61b9      	str	r1, [r7, #24]
 80050e4:	415b      	adcs	r3, r3
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ec:	4641      	mov	r1, r8
 80050ee:	1851      	adds	r1, r2, r1
 80050f0:	6139      	str	r1, [r7, #16]
 80050f2:	4649      	mov	r1, r9
 80050f4:	414b      	adcs	r3, r1
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005104:	4659      	mov	r1, fp
 8005106:	00cb      	lsls	r3, r1, #3
 8005108:	4651      	mov	r1, sl
 800510a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510e:	4651      	mov	r1, sl
 8005110:	00ca      	lsls	r2, r1, #3
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	4603      	mov	r3, r0
 8005118:	4642      	mov	r2, r8
 800511a:	189b      	adds	r3, r3, r2
 800511c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005120:	464b      	mov	r3, r9
 8005122:	460a      	mov	r2, r1
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	67bb      	str	r3, [r7, #120]	; 0x78
 8005136:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005156:	f7fb f893 	bl	8000280 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4611      	mov	r1, r2
 8005160:	4b38      	ldr	r3, [pc, #224]	; (8005244 <UART_SetConfig+0x4e4>)
 8005162:	fba3 2301 	umull	r2, r3, r3, r1
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2264      	movs	r2, #100	; 0x64
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	1acb      	subs	r3, r1, r3
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	3332      	adds	r3, #50	; 0x32
 8005174:	4a33      	ldr	r2, [pc, #204]	; (8005244 <UART_SetConfig+0x4e4>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005180:	441c      	add	r4, r3
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	673b      	str	r3, [r7, #112]	; 0x70
 800518a:	677a      	str	r2, [r7, #116]	; 0x74
 800518c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	415b      	adcs	r3, r3
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a0:	4641      	mov	r1, r8
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	4649      	mov	r1, r9
 80051a8:	414b      	adcs	r3, r1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b8:	4659      	mov	r1, fp
 80051ba:	00cb      	lsls	r3, r1, #3
 80051bc:	4651      	mov	r1, sl
 80051be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c2:	4651      	mov	r1, sl
 80051c4:	00ca      	lsls	r2, r1, #3
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	4642      	mov	r2, r8
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d2:	464b      	mov	r3, r9
 80051d4:	460a      	mov	r2, r1
 80051d6:	eb42 0303 	adc.w	r3, r2, r3
 80051da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	663b      	str	r3, [r7, #96]	; 0x60
 80051e6:	667a      	str	r2, [r7, #100]	; 0x64
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051f4:	4649      	mov	r1, r9
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fe:	4641      	mov	r1, r8
 8005200:	008a      	lsls	r2, r1, #2
 8005202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005206:	f7fb f83b 	bl	8000280 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <UART_SetConfig+0x4e4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	3332      	adds	r3, #50	; 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <UART_SetConfig+0x4e4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 020f 	and.w	r2, r3, #15
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005244:	51eb851f 	.word	0x51eb851f

08005248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005248:	b084      	sub	sp, #16
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	f107 001c 	add.w	r0, r7, #28
 8005256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	d122      	bne.n	80052a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fbee 	bl	8006a7c <USB_CoreReset>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	e01a      	b.n	80052dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fbe2 	bl	8006a7c <USB_CoreReset>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
 80052ce:	e005      	b.n	80052dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10b      	bne.n	80052fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f043 0206 	orr.w	r2, r3, #6
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005306:	b004      	add	sp, #16
 8005308:	4770      	bx	lr
	...

0800530c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d165      	bne.n	80053ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a41      	ldr	r2, [pc, #260]	; (8005428 <USB_SetTurnaroundTime+0x11c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d906      	bls.n	8005336 <USB_SetTurnaroundTime+0x2a>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a40      	ldr	r2, [pc, #256]	; (800542c <USB_SetTurnaroundTime+0x120>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d202      	bcs.n	8005336 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005330:	230f      	movs	r3, #15
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e062      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a3c      	ldr	r2, [pc, #240]	; (800542c <USB_SetTurnaroundTime+0x120>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d306      	bcc.n	800534c <USB_SetTurnaroundTime+0x40>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a3b      	ldr	r2, [pc, #236]	; (8005430 <USB_SetTurnaroundTime+0x124>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d202      	bcs.n	800534c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005346:	230e      	movs	r3, #14
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e057      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a38      	ldr	r2, [pc, #224]	; (8005430 <USB_SetTurnaroundTime+0x124>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d306      	bcc.n	8005362 <USB_SetTurnaroundTime+0x56>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a37      	ldr	r2, [pc, #220]	; (8005434 <USB_SetTurnaroundTime+0x128>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d202      	bcs.n	8005362 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800535c:	230d      	movs	r3, #13
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e04c      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <USB_SetTurnaroundTime+0x128>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d306      	bcc.n	8005378 <USB_SetTurnaroundTime+0x6c>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a32      	ldr	r2, [pc, #200]	; (8005438 <USB_SetTurnaroundTime+0x12c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d802      	bhi.n	8005378 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005372:	230c      	movs	r3, #12
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e041      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <USB_SetTurnaroundTime+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d906      	bls.n	800538e <USB_SetTurnaroundTime+0x82>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a2e      	ldr	r2, [pc, #184]	; (800543c <USB_SetTurnaroundTime+0x130>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d802      	bhi.n	800538e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005388:	230b      	movs	r3, #11
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e036      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <USB_SetTurnaroundTime+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d906      	bls.n	80053a4 <USB_SetTurnaroundTime+0x98>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <USB_SetTurnaroundTime+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d802      	bhi.n	80053a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800539e:	230a      	movs	r3, #10
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e02b      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a26      	ldr	r2, [pc, #152]	; (8005440 <USB_SetTurnaroundTime+0x134>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d906      	bls.n	80053ba <USB_SetTurnaroundTime+0xae>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <USB_SetTurnaroundTime+0x138>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d202      	bcs.n	80053ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053b4:	2309      	movs	r3, #9
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e020      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4a21      	ldr	r2, [pc, #132]	; (8005444 <USB_SetTurnaroundTime+0x138>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d306      	bcc.n	80053d0 <USB_SetTurnaroundTime+0xc4>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <USB_SetTurnaroundTime+0x13c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d802      	bhi.n	80053d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053ca:	2308      	movs	r3, #8
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e015      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <USB_SetTurnaroundTime+0x13c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d906      	bls.n	80053e6 <USB_SetTurnaroundTime+0xda>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a1c      	ldr	r2, [pc, #112]	; (800544c <USB_SetTurnaroundTime+0x140>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d202      	bcs.n	80053e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053e0:	2307      	movs	r3, #7
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e00a      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053e6:	2306      	movs	r3, #6
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e007      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053f2:	2309      	movs	r3, #9
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e001      	b.n	80053fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053f8:	2309      	movs	r3, #9
 80053fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	00d8acbf 	.word	0x00d8acbf
 800542c:	00e4e1c0 	.word	0x00e4e1c0
 8005430:	00f42400 	.word	0x00f42400
 8005434:	01067380 	.word	0x01067380
 8005438:	011a499f 	.word	0x011a499f
 800543c:	01312cff 	.word	0x01312cff
 8005440:	014ca43f 	.word	0x014ca43f
 8005444:	016e3600 	.word	0x016e3600
 8005448:	01a6ab1f 	.word	0x01a6ab1f
 800544c:	01e84800 	.word	0x01e84800

08005450 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f043 0201 	orr.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d115      	bne.n	80054e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054c2:	2001      	movs	r0, #1
 80054c4:	f7fb fdca 	bl	800105c <HAL_Delay>
      ms++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 fa45 	bl	800695e <USB_GetMode>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d01e      	beq.n	8005518 <USB_SetCurrentMode+0x84>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b31      	cmp	r3, #49	; 0x31
 80054de:	d9f0      	bls.n	80054c2 <USB_SetCurrentMode+0x2e>
 80054e0:	e01a      	b.n	8005518 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d115      	bne.n	8005514 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054f4:	2001      	movs	r0, #1
 80054f6:	f7fb fdb1 	bl	800105c <HAL_Delay>
      ms++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 fa2c 	bl	800695e <USB_GetMode>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <USB_SetCurrentMode+0x84>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b31      	cmp	r3, #49	; 0x31
 8005510:	d9f0      	bls.n	80054f4 <USB_SetCurrentMode+0x60>
 8005512:	e001      	b.n	8005518 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e005      	b.n	8005524 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b32      	cmp	r3, #50	; 0x32
 800551c:	d101      	bne.n	8005522 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800552c:	b084      	sub	sp, #16
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800553a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e009      	b.n	8005560 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	3340      	adds	r3, #64	; 0x40
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	2200      	movs	r2, #0
 8005558:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b0e      	cmp	r3, #14
 8005564:	d9f2      	bls.n	800554c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11c      	bne.n	80055a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557a:	f043 0302 	orr.w	r3, r3, #2
 800557e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
 80055a4:	e00b      	b.n	80055be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	4619      	mov	r1, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	461a      	mov	r2, r3
 80055da:	680b      	ldr	r3, [r1, #0]
 80055dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10c      	bne.n	80055fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f965 	bl	80058bc <USB_SetDevSpeed>
 80055f2:	e008      	b.n	8005606 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f960 	bl	80058bc <USB_SetDevSpeed>
 80055fc:	e003      	b.n	8005606 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055fe:	2103      	movs	r1, #3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f95b 	bl	80058bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005606:	2110      	movs	r1, #16
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8f3 	bl	80057f4 <USB_FlushTxFifo>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f91f 	bl	800585c <USB_FlushRxFifo>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	461a      	mov	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	461a      	mov	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e043      	b.n	80056da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d118      	bne.n	800569c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e013      	b.n	80056ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e008      	b.n	80056ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3301      	adds	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3b7      	bcc.n	8005652 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e043      	b.n	8005770 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056fe:	d118      	bne.n	8005732 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e013      	b.n	8005744 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e008      	b.n	8005744 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005768:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3301      	adds	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d3b7      	bcc.n	80056e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800578a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <USB_DevInit+0x2c4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f043 0208 	orr.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr
 80057f0:	803c3800 	.word	0x803c3800

080057f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <USB_FlushTxFifo+0x64>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e01b      	b.n	800584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	daf2      	bge.n	8005802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	019b      	lsls	r3, r3, #6
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <USB_FlushTxFifo+0x64>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e006      	b.n	800584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	d0f0      	beq.n	800582c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	00030d40 	.word	0x00030d40

0800585c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <USB_FlushRxFifo+0x5c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e018      	b.n	80058ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	daf2      	bge.n	8005868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2210      	movs	r2, #16
 800588a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <USB_FlushRxFifo+0x5c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d901      	bls.n	800589e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e006      	b.n	80058ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d0f0      	beq.n	800588c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	00030d40 	.word	0x00030d40

080058bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b087      	sub	sp, #28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0306 	and.w	r3, r3, #6
 8005906:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
 8005912:	e00a      	b.n	800592a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d002      	beq.n	8005920 <USB_GetDevSpeed+0x32>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b06      	cmp	r3, #6
 800591e:	d102      	bne.n	8005926 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005920:	2302      	movs	r3, #2
 8005922:	75fb      	strb	r3, [r7, #23]
 8005924:	e001      	b.n	800592a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005926:	230f      	movs	r3, #15
 8005928:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d13a      	bne.n	80059ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005972:	4313      	orrs	r3, r2
 8005974:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d155      	bne.n	8005a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	791b      	ldrb	r3, [r3, #4]
 80059a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	059b      	lsls	r3, r3, #22
 80059ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b0:	4313      	orrs	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e036      	b.n	8005a38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11a      	bne.n	8005a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	791b      	ldrb	r3, [r3, #4]
 8005a1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d161      	bne.n	8005b28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7a:	d11f      	bne.n	8005abc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005adc:	4013      	ands	r3, r2
 8005ade:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b00:	4013      	ands	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0159      	lsls	r1, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4b35      	ldr	r3, [pc, #212]	; (8005bf8 <USB_DeactivateEndpoint+0x1b0>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
 8005b26:	e060      	b.n	8005bea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3e:	d11f      	bne.n	8005b80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0159      	lsls	r1, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	440b      	add	r3, r1
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	4619      	mov	r1, r3
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <USB_DeactivateEndpoint+0x1b4>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	ec337800 	.word	0xec337800
 8005bfc:	eff37800 	.word	0xeff37800

08005c00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	f040 815c 	bne.w	8005eda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d132      	bne.n	8005c90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c88:	0cdb      	lsrs	r3, r3, #19
 8005c8a:	04db      	lsls	r3, r3, #19
 8005c8c:	6113      	str	r3, [r2, #16]
 8005c8e:	e074      	b.n	8005d7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005caa:	0cdb      	lsrs	r3, r3, #19
 8005cac:	04db      	lsls	r3, r3, #19
 8005cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6999      	ldr	r1, [r3, #24]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	440b      	add	r3, r1
 8005cec:	1e59      	subs	r1, r3, #1
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cf6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cf8:	4b9d      	ldr	r3, [pc, #628]	; (8005f70 <USB_EPStartXfer+0x370>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	69b9      	ldr	r1, [r7, #24]
 8005cfe:	0148      	lsls	r0, r1, #5
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	4401      	add	r1, r0
 8005d04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	0148      	lsls	r0, r1, #5
 8005d26:	69f9      	ldr	r1, [r7, #28]
 8005d28:	4401      	add	r1, r0
 8005d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	791b      	ldrb	r3, [r3, #4]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d11f      	bne.n	8005d7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d14b      	bne.n	8005e18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	461a      	mov	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	791b      	ldrb	r3, [r3, #4]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d128      	bne.n	8005df6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e00f      	b.n	8005df6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e133      	b.n	8006080 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	791b      	ldrb	r3, [r3, #4]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d015      	beq.n	8005e6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 811b 	beq.w	8006080 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e66:	4313      	orrs	r3, r2
 8005e68:	634b      	str	r3, [r1, #52]	; 0x34
 8005e6a:	e109      	b.n	8006080 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d110      	bne.n	8005e9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e00f      	b.n	8005ebe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6919      	ldr	r1, [r3, #16]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781a      	ldrb	r2, [r3, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	b298      	uxth	r0, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fade 	bl	8006494 <USB_WritePacket>
 8005ed8:	e0d2      	b.n	8006080 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef4:	0cdb      	lsrs	r3, r3, #19
 8005ef6:	04db      	lsls	r3, r3, #19
 8005ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d126      	bne.n	8005f74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	0148      	lsls	r0, r1, #5
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	4401      	add	r1, r0
 8005f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f6a:	6113      	str	r3, [r2, #16]
 8005f6c:	e03a      	b.n	8005fe4 <USB_EPStartXfer+0x3e4>
 8005f6e:	bf00      	nop
 8005f70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	1e5a      	subs	r2, r3, #1
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	8afa      	ldrh	r2, [r7, #22]
 8005f90:	fb03 f202 	mul.w	r2, r3, r2
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	8afb      	ldrh	r3, [r7, #22]
 8005fa8:	04d9      	lsls	r1, r3, #19
 8005faa:	4b38      	ldr	r3, [pc, #224]	; (800608c <USB_EPStartXfer+0x48c>)
 8005fac:	400b      	ands	r3, r1
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	0148      	lsls	r0, r1, #5
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	4401      	add	r1, r0
 8005fb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	0148      	lsls	r0, r1, #5
 8005fd8:	69f9      	ldr	r1, [r7, #28]
 8005fda:	4401      	add	r1, r0
 8005fdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10d      	bne.n	8006006 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6919      	ldr	r1, [r3, #16]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	460a      	mov	r2, r1
 8006004:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d128      	bne.n	8006060 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d110      	bne.n	8006040 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e00f      	b.n	8006060 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800607e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	1ff80000 	.word	0x1ff80000

08006090 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 80ce 	bne.w	800624e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d132      	bne.n	8006120 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006118:	0cdb      	lsrs	r3, r3, #19
 800611a:	04db      	lsls	r3, r3, #19
 800611c:	6113      	str	r3, [r2, #16]
 800611e:	e04e      	b.n	80061be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	0cdb      	lsrs	r3, r3, #19
 800613c:	04db      	lsls	r3, r3, #19
 800613e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800615e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006162:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d903      	bls.n	8006178 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	0148      	lsls	r0, r1, #5
 80061b2:	6979      	ldr	r1, [r7, #20]
 80061b4:	4401      	add	r1, r0
 80061b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d11e      	bne.n	8006202 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	461a      	mov	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e097      	b.n	8006332 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006220:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8083 	beq.w	8006332 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	2101      	movs	r1, #1
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4313      	orrs	r3, r2
 800624a:	634b      	str	r3, [r1, #52]	; 0x34
 800624c:	e071      	b.n	8006332 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006268:	0cdb      	lsrs	r3, r3, #19
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800628c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006290:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e0:	6939      	ldr	r1, [r7, #16]
 80062e2:	0148      	lsls	r0, r1, #5
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	4401      	add	r1, r0
 80062e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ec:	4313      	orrs	r3, r2
 80062ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10d      	bne.n	8006312 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6919      	ldr	r1, [r3, #16]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	460a      	mov	r2, r1
 8006310:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d14a      	bne.n	80063f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006376:	f040 8086 	bne.w	8006486 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800639c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d902      	bls.n	80063d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	75fb      	strb	r3, [r7, #23]
          break;
 80063d6:	e056      	b.n	8006486 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f0:	d0e7      	beq.n	80063c2 <USB_EPStopXfer+0x82>
 80063f2:	e048      	b.n	8006486 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800640c:	d13b      	bne.n	8006486 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006430:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006454:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006462:	4293      	cmp	r3, r2
 8006464:	d902      	bls.n	800646c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
          break;
 800646a:	e00c      	b.n	8006486 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006484:	d0e7      	beq.n	8006456 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006494:	b480      	push	{r7}
 8006496:	b089      	sub	sp, #36	; 0x24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	460b      	mov	r3, r1
 80064a4:	71fb      	strb	r3, [r7, #7]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d123      	bne.n	8006502 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064ba:	88bb      	ldrh	r3, [r7, #4]
 80064bc:	3303      	adds	r3, #3
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e018      	b.n	80064fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	031a      	lsls	r2, r3, #12
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	461a      	mov	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	3301      	adds	r3, #1
 80064f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3e2      	bcc.n	80064c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3724      	adds	r7, #36	; 0x24
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006510:	b480      	push	{r7}
 8006512:	b08b      	sub	sp, #44	; 0x2c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	089b      	lsrs	r3, r3, #2
 800652a:	b29b      	uxth	r3, r3
 800652c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e014      	b.n	8006566 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	601a      	str	r2, [r3, #0]
    pDest++;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	3301      	adds	r3, #1
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	3301      	adds	r3, #1
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	3301      	adds	r3, #1
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	3301      	adds	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	3301      	adds	r3, #1
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	6a3a      	ldr	r2, [r7, #32]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	429a      	cmp	r2, r3
 800656c:	d3e6      	bcc.n	800653c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800656e:	8bfb      	ldrh	r3, [r7, #30]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01e      	beq.n	80065b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657e:	461a      	mov	r2, r3
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	b2da      	uxtb	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	701a      	strb	r2, [r3, #0]
      i++;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	3301      	adds	r3, #1
 800659e:	623b      	str	r3, [r7, #32]
      pDest++;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	3301      	adds	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065a6:	8bfb      	ldrh	r3, [r7, #30]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065ac:	8bfb      	ldrh	r3, [r7, #30]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ea      	bne.n	8006588 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	372c      	adds	r7, #44	; 0x2c
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d12c      	bne.n	8006636 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	db12      	blt.n	8006614 <USB_EPSetStall+0x54>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006612:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e02b      	b.n	800668e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db12      	blt.n	800666e <USB_EPSetStall+0xae>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00f      	beq.n	800666e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800666c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d128      	bne.n	800670a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	791b      	ldrb	r3, [r3, #4]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d003      	beq.n	80066e8 <USB_EPClearStall+0x4c>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	791b      	ldrb	r3, [r3, #4]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d138      	bne.n	800675a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e027      	b.n	800675a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006728:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	791b      	ldrb	r3, [r3, #4]
 800672e:	2b03      	cmp	r3, #3
 8006730:	d003      	beq.n	800673a <USB_EPClearStall+0x9e>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	791b      	ldrb	r3, [r3, #4]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d10f      	bne.n	800675a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006786:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800678a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800679c:	68f9      	ldr	r1, [r7, #12]
 800679e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e2:	f023 0302 	bic.w	r3, r3, #2
 80067e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006810:	f023 0303 	bic.w	r3, r3, #3
 8006814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4013      	ands	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	0c1b      	lsrs	r3, r3, #16
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	4013      	ands	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	b29b      	uxth	r3, r3
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068f4:	68bb      	ldr	r3, [r7, #8]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	01db      	lsls	r3, r3, #7
 8006934:	b2db      	uxtb	r3, r3
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006950:	68bb      	ldr	r3, [r7, #8]
}
 8006952:	4618      	mov	r0, r3
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0301 	and.w	r3, r3, #1
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006994:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006998:	f023 0307 	bic.w	r3, r3, #7
 800699c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	460b      	mov	r3, r1
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	333c      	adds	r3, #60	; 0x3c
 80069d6:	3304      	adds	r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <USB_EP0_OutStart+0xb8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d90a      	bls.n	80069fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f4:	d101      	bne.n	80069fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e037      	b.n	8006a6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f043 0318 	orr.w	r3, r3, #24
 8006a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10f      	bne.n	8006a68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	4f54300a 	.word	0x4f54300a

08006a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4a13      	ldr	r2, [pc, #76]	; (8006ae0 <USB_CoreReset+0x64>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e01b      	b.n	8006ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	daf2      	bge.n	8006a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <USB_CoreReset+0x64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e006      	b.n	8006ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d0f0      	beq.n	8006ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	00030d40 	.word	0x00030d40

08006ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006af4:	f002 fcc4 	bl	8009480 <USBD_static_malloc>
 8006af8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32b0      	adds	r2, #176	; 0xb0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0d4      	b.n	8006cbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b18:	2100      	movs	r1, #0
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f002 fd14 	bl	8009548 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32b0      	adds	r2, #176	; 0xb0
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	32b0      	adds	r2, #176	; 0xb0
 8006b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7c1b      	ldrb	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d138      	bne.n	8006bbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <USBD_CDC_Init+0x1e4>)
 8006b4e:	7819      	ldrb	r1, [r3, #0]
 8006b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b54:	2202      	movs	r2, #2
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f002 fb6f 	bl	800923a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b5c:	4b5a      	ldr	r3, [pc, #360]	; (8006cc8 <USBD_CDC_Init+0x1e4>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f003 020f 	and.w	r2, r3, #15
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3324      	adds	r3, #36	; 0x24
 8006b72:	2201      	movs	r2, #1
 8006b74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b76:	4b55      	ldr	r3, [pc, #340]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006b78:	7819      	ldrb	r1, [r3, #0]
 8006b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7e:	2202      	movs	r2, #2
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f002 fb5a 	bl	800923a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b86:	4b51      	ldr	r3, [pc, #324]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 020f 	and.w	r2, r3, #15
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ba2:	4b4b      	ldr	r3, [pc, #300]	; (8006cd0 <USBD_CDC_Init+0x1ec>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3326      	adds	r3, #38	; 0x26
 8006bb8:	2210      	movs	r2, #16
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e035      	b.n	8006c2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bbe:	4b42      	ldr	r3, [pc, #264]	; (8006cc8 <USBD_CDC_Init+0x1e4>)
 8006bc0:	7819      	ldrb	r1, [r3, #0]
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f002 fb37 	bl	800923a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bcc:	4b3e      	ldr	r3, [pc, #248]	; (8006cc8 <USBD_CDC_Init+0x1e4>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f003 020f 	and.w	r2, r3, #15
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	3324      	adds	r3, #36	; 0x24
 8006be2:	2201      	movs	r2, #1
 8006be4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006be6:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	2202      	movs	r2, #2
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f002 fb23 	bl	800923a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bf4:	4b35      	ldr	r3, [pc, #212]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c10:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <USBD_CDC_Init+0x1ec>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3326      	adds	r3, #38	; 0x26
 8006c26:	2210      	movs	r2, #16
 8006c28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c2a:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <USBD_CDC_Init+0x1ec>)
 8006c2c:	7819      	ldrb	r1, [r3, #0]
 8006c2e:	2308      	movs	r3, #8
 8006c30:	2203      	movs	r2, #3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f002 fb01 	bl	800923a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <USBD_CDC_Init+0x1ec>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2201      	movs	r2, #1
 8006c50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	33b0      	adds	r3, #176	; 0xb0
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e018      	b.n	8006cbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c94:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006c96:	7819      	ldrb	r1, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 fbb8 	bl	8009418 <USBD_LL_PrepareReceive>
 8006ca8:	e008      	b.n	8006cbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <USBD_CDC_Init+0x1e8>)
 8006cac:	7819      	ldrb	r1, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fbae 	bl	8009418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200000a3 	.word	0x200000a3
 8006ccc:	200000a4 	.word	0x200000a4
 8006cd0:	200000a5 	.word	0x200000a5

08006cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ce0:	4b3a      	ldr	r3, [pc, #232]	; (8006dcc <USBD_CDC_DeInit+0xf8>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f002 facd 	bl	8009286 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006cec:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <USBD_CDC_DeInit+0xf8>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3324      	adds	r3, #36	; 0x24
 8006d02:	2200      	movs	r2, #0
 8006d04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d06:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <USBD_CDC_DeInit+0xfc>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f002 faba 	bl	8009286 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <USBD_CDC_DeInit+0xfc>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 020f 	and.w	r2, r3, #15
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <USBD_CDC_DeInit+0x100>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f002 faa6 	bl	8009286 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <USBD_CDC_DeInit+0x100>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f003 020f 	and.w	r2, r3, #15
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3324      	adds	r3, #36	; 0x24
 8006d50:	2200      	movs	r2, #0
 8006d52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d54:	4b1f      	ldr	r3, [pc, #124]	; (8006dd4 <USBD_CDC_DeInit+0x100>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	3326      	adds	r3, #38	; 0x26
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	32b0      	adds	r2, #176	; 0xb0
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01f      	beq.n	8006dc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	33b0      	adds	r3, #176	; 0xb0
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32b0      	adds	r2, #176	; 0xb0
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f002 fb7a 	bl	800949c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32b0      	adds	r2, #176	; 0xb0
 8006db2:	2100      	movs	r1, #0
 8006db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200000a3 	.word	0x200000a3
 8006dd0:	200000a4 	.word	0x200000a4
 8006dd4:	200000a5 	.word	0x200000a5

08006dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	; 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e0bf      	b.n	8006f88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d050      	beq.n	8006eb6 <USBD_CDC_Setup+0xde>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	f040 80af 	bne.w	8006f78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d03a      	beq.n	8006e98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da1b      	bge.n	8006e64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	33b0      	adds	r3, #176	; 0xb0
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	88d2      	ldrh	r2, [r2, #6]
 8006e48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88db      	ldrh	r3, [r3, #6]
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	bf28      	it	cs
 8006e52:	2307      	movcs	r3, #7
 8006e54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	89fa      	ldrh	r2, [r7, #14]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fd89 	bl	8008974 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e62:	e090      	b.n	8006f86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	785a      	ldrb	r2, [r3, #1]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	2b3f      	cmp	r3, #63	; 0x3f
 8006e74:	d803      	bhi.n	8006e7e <USBD_CDC_Setup+0xa6>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	e000      	b.n	8006e80 <USBD_CDC_Setup+0xa8>
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fd9b 	bl	80089cc <USBD_CtlPrepareRx>
      break;
 8006e96:	e076      	b.n	8006f86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	33b0      	adds	r3, #176	; 0xb0
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7850      	ldrb	r0, [r2, #1]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	4798      	blx	r3
      break;
 8006eb4:	e067      	b.n	8006f86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b0b      	cmp	r3, #11
 8006ebc:	d851      	bhi.n	8006f62 <USBD_CDC_Setup+0x18a>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <USBD_CDC_Setup+0xec>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ef5 	.word	0x08006ef5
 8006ec8:	08006f71 	.word	0x08006f71
 8006ecc:	08006f63 	.word	0x08006f63
 8006ed0:	08006f63 	.word	0x08006f63
 8006ed4:	08006f63 	.word	0x08006f63
 8006ed8:	08006f63 	.word	0x08006f63
 8006edc:	08006f63 	.word	0x08006f63
 8006ee0:	08006f63 	.word	0x08006f63
 8006ee4:	08006f63 	.word	0x08006f63
 8006ee8:	08006f63 	.word	0x08006f63
 8006eec:	08006f1f 	.word	0x08006f1f
 8006ef0:	08006f49 	.word	0x08006f49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d107      	bne.n	8006f10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f00:	f107 030a 	add.w	r3, r7, #10
 8006f04:	2202      	movs	r2, #2
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fd33 	bl	8008974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f0e:	e032      	b.n	8006f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fcbd 	bl	8008892 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f1c:	e02b      	b.n	8006f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d107      	bne.n	8006f3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f2a:	f107 030d 	add.w	r3, r7, #13
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 fd1e 	bl	8008974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f38:	e01d      	b.n	8006f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 fca8 	bl	8008892 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	e016      	b.n	8006f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d00f      	beq.n	8006f74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fc9b 	bl	8008892 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f60:	e008      	b.n	8006f74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fc94 	bl	8008892 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f6e:	e002      	b.n	8006f76 <USBD_CDC_Setup+0x19e>
          break;
 8006f70:	bf00      	nop
 8006f72:	e008      	b.n	8006f86 <USBD_CDC_Setup+0x1ae>
          break;
 8006f74:	bf00      	nop
      }
      break;
 8006f76:	e006      	b.n	8006f86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fc89 	bl	8008892 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	75fb      	strb	r3, [r7, #23]
      break;
 8006f84:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32b0      	adds	r2, #176	; 0xb0
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e065      	b.n	8007086 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32b0      	adds	r2, #176	; 0xb0
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	3318      	adds	r3, #24
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02f      	beq.n	8007044 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	f003 020f 	and.w	r2, r3, #15
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	3318      	adds	r3, #24
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	f003 010f 	and.w	r1, r3, #15
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	460b      	mov	r3, r1
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	440b      	add	r3, r1
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4403      	add	r3, r0
 800700c:	3348      	adds	r3, #72	; 0x48
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	fbb2 f1f3 	udiv	r1, r2, r3
 8007014:	fb01 f303 	mul.w	r3, r1, r3
 8007018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800701a:	2b00      	cmp	r3, #0
 800701c:	d112      	bne.n	8007044 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3318      	adds	r3, #24
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f002 f9ca 	bl	80093d6 <USBD_LL_Transmit>
 8007042:	e01f      	b.n	8007084 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	33b0      	adds	r3, #176	; 0xb0
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d010      	beq.n	8007084 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	33b0      	adds	r3, #176	; 0xb0
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	32b0      	adds	r2, #176	; 0xb0
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	32b0      	adds	r2, #176	; 0xb0
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e01a      	b.n	80070f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f002 f9c8 	bl	800945a <USBD_LL_GetRxDataSize>
 80070ca:	4602      	mov	r2, r0
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	33b0      	adds	r3, #176	; 0xb0
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070f0:	4611      	mov	r1, r2
 80070f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	32b0      	adds	r2, #176	; 0xb0
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	e025      	b.n	800716c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	33b0      	adds	r3, #176	; 0xb0
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <USBD_CDC_EP0_RxReady+0x6c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800713a:	2bff      	cmp	r3, #255	; 0xff
 800713c:	d015      	beq.n	800716a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	33b0      	adds	r3, #176	; 0xb0
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007156:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800715e:	b292      	uxth	r2, r2
 8007160:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	22ff      	movs	r2, #255	; 0xff
 8007166:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800717c:	2182      	movs	r1, #130	; 0x82
 800717e:	4818      	ldr	r0, [pc, #96]	; (80071e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007180:	f000 fd4f 	bl	8007c22 <USBD_GetEpDesc>
 8007184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007186:	2101      	movs	r1, #1
 8007188:	4815      	ldr	r0, [pc, #84]	; (80071e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800718a:	f000 fd4a 	bl	8007c22 <USBD_GetEpDesc>
 800718e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007190:	2181      	movs	r1, #129	; 0x81
 8007192:	4813      	ldr	r0, [pc, #76]	; (80071e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007194:	f000 fd45 	bl	8007c22 <USBD_GetEpDesc>
 8007198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2210      	movs	r2, #16
 80071a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d006      	beq.n	80071ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b4:	711a      	strb	r2, [r3, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c8:	711a      	strb	r2, [r3, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2243      	movs	r2, #67	; 0x43
 80071d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000060 	.word	0x20000060

080071e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071ec:	2182      	movs	r1, #130	; 0x82
 80071ee:	4818      	ldr	r0, [pc, #96]	; (8007250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071f0:	f000 fd17 	bl	8007c22 <USBD_GetEpDesc>
 80071f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071f6:	2101      	movs	r1, #1
 80071f8:	4815      	ldr	r0, [pc, #84]	; (8007250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071fa:	f000 fd12 	bl	8007c22 <USBD_GetEpDesc>
 80071fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007200:	2181      	movs	r1, #129	; 0x81
 8007202:	4813      	ldr	r0, [pc, #76]	; (8007250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007204:	f000 fd0d 	bl	8007c22 <USBD_GetEpDesc>
 8007208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2210      	movs	r2, #16
 8007214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2200      	movs	r2, #0
 8007220:	711a      	strb	r2, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f042 0202 	orr.w	r2, r2, #2
 8007228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	711a      	strb	r2, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f042 0202 	orr.w	r2, r2, #2
 800723c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2243      	movs	r2, #67	; 0x43
 8007242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000060 	.word	0x20000060

08007254 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800725c:	2182      	movs	r1, #130	; 0x82
 800725e:	4818      	ldr	r0, [pc, #96]	; (80072c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007260:	f000 fcdf 	bl	8007c22 <USBD_GetEpDesc>
 8007264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007266:	2101      	movs	r1, #1
 8007268:	4815      	ldr	r0, [pc, #84]	; (80072c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800726a:	f000 fcda 	bl	8007c22 <USBD_GetEpDesc>
 800726e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007270:	2181      	movs	r1, #129	; 0x81
 8007272:	4813      	ldr	r0, [pc, #76]	; (80072c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007274:	f000 fcd5 	bl	8007c22 <USBD_GetEpDesc>
 8007278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2210      	movs	r2, #16
 8007284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2200      	movs	r2, #0
 8007290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007294:	711a      	strb	r2, [r3, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a8:	711a      	strb	r2, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2243      	movs	r2, #67	; 0x43
 80072b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000060 	.word	0x20000060

080072c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	220a      	movs	r2, #10
 80072d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072d2:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	2000001c 	.word	0x2000001c

080072e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e009      	b.n	800730c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	33b0      	adds	r3, #176	; 0xb0
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	32b0      	adds	r2, #176	; 0xb0
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800733a:	2303      	movs	r3, #3
 800733c:	e008      	b.n	8007350 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	32b0      	adds	r2, #176	; 0xb0
 8007370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007374:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e004      	b.n	800738a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32b0      	adds	r2, #176	; 0xb0
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32b0      	adds	r2, #176	; 0xb0
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e025      	b.n	8007416 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11f      	bne.n	8007414 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <USBD_CDC_TransmitPacket+0x88>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4403      	add	r3, r0
 80073f6:	3318      	adds	r3, #24
 80073f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <USBD_CDC_TransmitPacket+0x88>)
 80073fc:	7819      	ldrb	r1, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 ffe3 	bl	80093d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200000a3 	.word	0x200000a3

08007424 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32b0      	adds	r2, #176	; 0xb0
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32b0      	adds	r2, #176	; 0xb0
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	e018      	b.n	8007484 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7c1b      	ldrb	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <USBD_CDC_ReceivePacket+0x68>)
 800745c:	7819      	ldrb	r1, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 ffd5 	bl	8009418 <USBD_LL_PrepareReceive>
 800746e:	e008      	b.n	8007482 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <USBD_CDC_ReceivePacket+0x68>)
 8007472:	7819      	ldrb	r1, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 ffcb 	bl	8009418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200000a4 	.word	0x200000a4

08007490 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e01f      	b.n	80074e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	79fa      	ldrb	r2, [r7, #7]
 80074da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 fe45 	bl	800916c <USBD_LL_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e025      	b.n	8007554 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32ae      	adds	r2, #174	; 0xae
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32ae      	adds	r2, #174	; 0xae
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f107 020e 	add.w	r2, r7, #14
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	4602      	mov	r2, r0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 fe4d 	bl	8009204 <USBD_LL_Start>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	4611      	mov	r1, r2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075e8:	2303      	movs	r3, #3
 80075ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f908 	bl	800881e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2b02      	cmp	r3, #2
 8007630:	d01a      	beq.n	8007668 <USBD_LL_SetupStage+0x72>
 8007632:	2b02      	cmp	r3, #2
 8007634:	d822      	bhi.n	800767c <USBD_LL_SetupStage+0x86>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <USBD_LL_SetupStage+0x4a>
 800763a:	2b01      	cmp	r3, #1
 800763c:	d00a      	beq.n	8007654 <USBD_LL_SetupStage+0x5e>
 800763e:	e01d      	b.n	800767c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb5f 	bl	8007d0c <USBD_StdDevReq>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e020      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fbc7 	bl	8007df0 <USBD_StdItfReq>
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]
      break;
 8007666:	e016      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fc29 	bl	8007ec8 <USBD_StdEPReq>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
      break;
 800767a:	e00c      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fe1a 	bl	80092c4 <USBD_LL_StallEP>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	bf00      	nop
  }

  return ret;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	460b      	mov	r3, r1
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d16e      	bne.n	8007796 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	f040 8098 	bne.w	80077fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d913      	bls.n	8007700 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	bf28      	it	cs
 80076f2:	4613      	movcs	r3, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 f984 	bl	8008a06 <USBD_CtlContinueRx>
 80076fe:	e07d      	b.n	80077fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2b02      	cmp	r3, #2
 800770c:	d014      	beq.n	8007738 <USBD_LL_DataOutStage+0x98>
 800770e:	2b02      	cmp	r3, #2
 8007710:	d81d      	bhi.n	800774e <USBD_LL_DataOutStage+0xae>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <USBD_LL_DataOutStage+0x7c>
 8007716:	2b01      	cmp	r3, #1
 8007718:	d003      	beq.n	8007722 <USBD_LL_DataOutStage+0x82>
 800771a:	e018      	b.n	800774e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	75bb      	strb	r3, [r7, #22]
            break;
 8007720:	e018      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007728:	b2db      	uxtb	r3, r3
 800772a:	4619      	mov	r1, r3
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fa5e 	bl	8007bee <USBD_CoreFindIF>
 8007732:	4603      	mov	r3, r0
 8007734:	75bb      	strb	r3, [r7, #22]
            break;
 8007736:	e00d      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800773e:	b2db      	uxtb	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa60 	bl	8007c08 <USBD_CoreFindEP>
 8007748:	4603      	mov	r3, r0
 800774a:	75bb      	strb	r3, [r7, #22]
            break;
 800774c:	e002      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	75bb      	strb	r3, [r7, #22]
            break;
 8007752:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007754:	7dbb      	ldrb	r3, [r7, #22]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d119      	bne.n	800778e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d113      	bne.n	800778e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007766:	7dba      	ldrb	r2, [r7, #22]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	32ae      	adds	r2, #174	; 0xae
 800776c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007776:	7dba      	ldrb	r2, [r7, #22]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800777e:	7dba      	ldrb	r2, [r7, #22]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	32ae      	adds	r2, #174	; 0xae
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f001 f94a 	bl	8008a28 <USBD_CtlSendStatus>
 8007794:	e032      	b.n	80077fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779c:	b2db      	uxtb	r3, r3
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa31 	bl	8007c08 <USBD_CoreFindEP>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2bff      	cmp	r3, #255	; 0xff
 80077ae:	d025      	beq.n	80077fc <USBD_LL_DataOutStage+0x15c>
 80077b0:	7dbb      	ldrb	r3, [r7, #22]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d122      	bne.n	80077fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d117      	bne.n	80077f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077c2:	7dba      	ldrb	r2, [r7, #22]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	32ae      	adds	r2, #174	; 0xae
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077d2:	7dba      	ldrb	r2, [r7, #22]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	32ae      	adds	r2, #174	; 0xae
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	7afa      	ldrb	r2, [r7, #11]
 80077e8:	4611      	mov	r1, r2
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	e000      	b.n	80077fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	460b      	mov	r3, r1
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d16f      	bne.n	80078fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3314      	adds	r3, #20
 800781e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007826:	2b02      	cmp	r3, #2
 8007828:	d15a      	bne.n	80078e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	429a      	cmp	r2, r3
 8007834:	d914      	bls.n	8007860 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f001 f8ac 	bl	80089aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f001 fddd 	bl	8009418 <USBD_LL_PrepareReceive>
 800785e:	e03f      	b.n	80078e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d11c      	bne.n	80078a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007874:	429a      	cmp	r2, r3
 8007876:	d316      	bcc.n	80078a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007882:	429a      	cmp	r2, r3
 8007884:	d20f      	bcs.n	80078a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f001 f88d 	bl	80089aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f001 fdba 	bl	8009418 <USBD_LL_PrepareReceive>
 80078a4:	e01c      	b.n	80078e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d10f      	bne.n	80078d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fcf5 	bl	80092c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 f8b7 	bl	8008a4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d03a      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fe42 	bl	8007574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078f8:	e032      	b.n	8007960 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f97f 	bl	8007c08 <USBD_CoreFindEP>
 800790a:	4603      	mov	r3, r0
 800790c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	2bff      	cmp	r3, #255	; 0xff
 8007912:	d025      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d122      	bne.n	8007960 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d11c      	bne.n	8007960 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007926:	7dfa      	ldrb	r2, [r7, #23]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	32ae      	adds	r2, #174	; 0xae
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d014      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007936:	7dfa      	ldrb	r2, [r7, #23]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800793e:	7dfa      	ldrb	r2, [r7, #23]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	32ae      	adds	r2, #174	; 0xae
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	7afa      	ldrb	r2, [r7, #11]
 800794c:	4611      	mov	r1, r2
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007956:	7dbb      	ldrb	r3, [r7, #22]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800795c:	7dbb      	ldrb	r3, [r7, #22]
 800795e:	e000      	b.n	8007962 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d014      	beq.n	80079d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00e      	beq.n	80079d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6852      	ldr	r2, [r2, #4]
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	4611      	mov	r1, r2
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2200      	movs	r2, #0
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fc2f 	bl	800923a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fc21 	bl	800923a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2240      	movs	r2, #64	; 0x40
 8007a02:	621a      	str	r2, [r3, #32]

  return ret;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2204      	movs	r2, #4
 8007a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d106      	bne.n	8007a7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d110      	bne.n	8007ac0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	32ae      	adds	r2, #174	; 0xae
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e01c      	b.n	8007b26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d115      	bne.n	8007b24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32ae      	adds	r2, #174	; 0xae
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	32ae      	adds	r2, #174	; 0xae
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e01c      	b.n	8007b8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d115      	bne.n	8007b88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	32ae      	adds	r2, #174	; 0xae
 8007b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32ae      	adds	r2, #174	; 0xae
 8007b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	4611      	mov	r1, r2
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00e      	beq.n	8007be4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6852      	ldr	r2, [r2, #4]
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d920      	bls.n	8007c8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c52:	e013      	b.n	8007c7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c54:	f107 030a 	add.w	r3, r7, #10
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f000 f81b 	bl	8007c96 <USBD_GetNextDesc>
 8007c60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	d108      	bne.n	8007c7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	789b      	ldrb	r3, [r3, #2]
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d008      	beq.n	8007c8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	885b      	ldrh	r3, [r3, #2]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d8e5      	bhi.n	8007c54 <USBD_GetEpDesc+0x32>
 8007c88:	e000      	b.n	8007c8c <USBD_GetEpDesc+0x6a>
          break;
 8007c8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c8c:	693b      	ldr	r3, [r7, #16]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	881a      	ldrh	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cee:	8a3b      	ldrh	r3, [r7, #16]
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	b21a      	sxth	r2, r3
 8007cf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d005      	beq.n	8007d32 <USBD_StdDevReq+0x26>
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d857      	bhi.n	8007dda <USBD_StdDevReq+0xce>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00f      	beq.n	8007d4e <USBD_StdDevReq+0x42>
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d153      	bne.n	8007dda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	32ae      	adds	r2, #174	; 0xae
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	e04a      	b.n	8007de4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d83b      	bhi.n	8007dce <USBD_StdDevReq+0xc2>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <USBD_StdDevReq+0x50>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007dc5 	.word	0x08007dc5
 8007d64:	08007dcf 	.word	0x08007dcf
 8007d68:	08007dbb 	.word	0x08007dbb
 8007d6c:	08007dcf 	.word	0x08007dcf
 8007d70:	08007d8f 	.word	0x08007d8f
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007dcf 	.word	0x08007dcf
 8007d7c:	08007da7 	.word	0x08007da7
 8007d80:	08007d99 	.word	0x08007d99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa3c 	bl	8008204 <USBD_GetDescriptor>
          break;
 8007d8c:	e024      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fba1 	bl	80084d8 <USBD_SetAddress>
          break;
 8007d96:	e01f      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fbe0 	bl	8008560 <USBD_SetConfig>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
          break;
 8007da4:	e018      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fc83 	bl	80086b4 <USBD_GetConfig>
          break;
 8007dae:	e013      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fcb4 	bl	8008720 <USBD_GetStatus>
          break;
 8007db8:	e00e      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fce3 	bl	8008788 <USBD_SetFeature>
          break;
 8007dc2:	e009      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd07 	bl	80087da <USBD_ClrFeature>
          break;
 8007dcc:	e004      	b.n	8007dd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fd5e 	bl	8008892 <USBD_CtlError>
          break;
 8007dd6:	bf00      	nop
      }
      break;
 8007dd8:	e004      	b.n	8007de4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fd58 	bl	8008892 <USBD_CtlError>
      break;
 8007de2:	bf00      	nop
  }

  return ret;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d005      	beq.n	8007e16 <USBD_StdItfReq+0x26>
 8007e0a:	2b40      	cmp	r3, #64	; 0x40
 8007e0c:	d852      	bhi.n	8007eb4 <USBD_StdItfReq+0xc4>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <USBD_StdItfReq+0x26>
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d14e      	bne.n	8007eb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d840      	bhi.n	8007ea6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	889b      	ldrh	r3, [r3, #4]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d836      	bhi.n	8007e9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	889b      	ldrh	r3, [r3, #4]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fed9 	bl	8007bee <USBD_CoreFindIF>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2bff      	cmp	r3, #255	; 0xff
 8007e44:	d01d      	beq.n	8007e82 <USBD_StdItfReq+0x92>
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11a      	bne.n	8007e82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e4c:	7bba      	ldrb	r2, [r7, #14]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	32ae      	adds	r2, #174	; 0xae
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00f      	beq.n	8007e7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e5c:	7bba      	ldrb	r2, [r7, #14]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e64:	7bba      	ldrb	r2, [r7, #14]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	32ae      	adds	r2, #174	; 0xae
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e7a:	e004      	b.n	8007e86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e80:	e001      	b.n	8007e86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	88db      	ldrh	r3, [r3, #6]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d110      	bne.n	8007eb0 <USBD_StdItfReq+0xc0>
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10d      	bne.n	8007eb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fdc7 	bl	8008a28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e9a:	e009      	b.n	8007eb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fcf7 	bl	8008892 <USBD_CtlError>
          break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fcf2 	bl	8008892 <USBD_CtlError>
          break;
 8007eae:	e000      	b.n	8007eb2 <USBD_StdItfReq+0xc2>
          break;
 8007eb0:	bf00      	nop
      }
      break;
 8007eb2:	e004      	b.n	8007ebe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fceb 	bl	8008892 <USBD_CtlError>
      break;
 8007ebc:	bf00      	nop
  }

  return ret;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	889b      	ldrh	r3, [r3, #4]
 8007eda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d007      	beq.n	8007ef8 <USBD_StdEPReq+0x30>
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	f200 817f 	bhi.w	80081ec <USBD_StdEPReq+0x324>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d02a      	beq.n	8007f48 <USBD_StdEPReq+0x80>
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	f040 817a 	bne.w	80081ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fe83 	bl	8007c08 <USBD_CoreFindEP>
 8007f02:	4603      	mov	r3, r0
 8007f04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f06:	7b7b      	ldrb	r3, [r7, #13]
 8007f08:	2bff      	cmp	r3, #255	; 0xff
 8007f0a:	f000 8174 	beq.w	80081f6 <USBD_StdEPReq+0x32e>
 8007f0e:	7b7b      	ldrb	r3, [r7, #13]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 8170 	bne.w	80081f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f16:	7b7a      	ldrb	r2, [r7, #13]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f1e:	7b7a      	ldrb	r2, [r7, #13]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	32ae      	adds	r2, #174	; 0xae
 8007f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8163 	beq.w	80081f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f30:	7b7a      	ldrb	r2, [r7, #13]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32ae      	adds	r2, #174	; 0xae
 8007f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f46:	e156      	b.n	80081f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d008      	beq.n	8007f62 <USBD_StdEPReq+0x9a>
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	f300 8145 	bgt.w	80081e0 <USBD_StdEPReq+0x318>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 809b 	beq.w	8008092 <USBD_StdEPReq+0x1ca>
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d03c      	beq.n	8007fda <USBD_StdEPReq+0x112>
 8007f60:	e13e      	b.n	80081e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d002      	beq.n	8007f74 <USBD_StdEPReq+0xac>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d016      	beq.n	8007fa0 <USBD_StdEPReq+0xd8>
 8007f72:	e02c      	b.n	8007fce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <USBD_StdEPReq+0xce>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d00a      	beq.n	8007f96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f99d 	bl	80092c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f999 	bl	80092c4 <USBD_LL_StallEP>
 8007f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e020      	b.n	8007fd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc7a 	bl	8008892 <USBD_CtlError>
              break;
 8007f9e:	e01b      	b.n	8007fd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <USBD_StdEPReq+0xfe>
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b80      	cmp	r3, #128	; 0x80
 8007fb2:	d008      	beq.n	8007fc6 <USBD_StdEPReq+0xfe>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	88db      	ldrh	r3, [r3, #6]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f97f 	bl	80092c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fd2e 	bl	8008a28 <USBD_CtlSendStatus>

              break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fc5e 	bl	8008892 <USBD_CtlError>
              break;
 8007fd6:	bf00      	nop
          }
          break;
 8007fd8:	e107      	b.n	80081ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d002      	beq.n	8007fec <USBD_StdEPReq+0x124>
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d016      	beq.n	8008018 <USBD_StdEPReq+0x150>
 8007fea:	e04b      	b.n	8008084 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00d      	beq.n	800800e <USBD_StdEPReq+0x146>
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d00a      	beq.n	800800e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f961 	bl	80092c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008002:	2180      	movs	r1, #128	; 0x80
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 f95d 	bl	80092c4 <USBD_LL_StallEP>
 800800a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800800c:	e040      	b.n	8008090 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc3e 	bl	8008892 <USBD_CtlError>
              break;
 8008016:	e03b      	b.n	8008090 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	885b      	ldrh	r3, [r3, #2]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d136      	bne.n	800808e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f967 	bl	8009302 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fcf7 	bl	8008a28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fde2 	bl	8007c08 <USBD_CoreFindEP>
 8008044:	4603      	mov	r3, r0
 8008046:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008048:	7b7b      	ldrb	r3, [r7, #13]
 800804a:	2bff      	cmp	r3, #255	; 0xff
 800804c:	d01f      	beq.n	800808e <USBD_StdEPReq+0x1c6>
 800804e:	7b7b      	ldrb	r3, [r7, #13]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d11c      	bne.n	800808e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008054:	7b7a      	ldrb	r2, [r7, #13]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800805c:	7b7a      	ldrb	r2, [r7, #13]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32ae      	adds	r2, #174	; 0xae
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d010      	beq.n	800808e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800806c:	7b7a      	ldrb	r2, [r7, #13]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	32ae      	adds	r2, #174	; 0xae
 8008072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008082:	e004      	b.n	800808e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fc03 	bl	8008892 <USBD_CtlError>
              break;
 800808c:	e000      	b.n	8008090 <USBD_StdEPReq+0x1c8>
              break;
 800808e:	bf00      	nop
          }
          break;
 8008090:	e0ab      	b.n	80081ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d002      	beq.n	80080a4 <USBD_StdEPReq+0x1dc>
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d032      	beq.n	8008108 <USBD_StdEPReq+0x240>
 80080a2:	e097      	b.n	80081d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <USBD_StdEPReq+0x1f2>
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b80      	cmp	r3, #128	; 0x80
 80080ae:	d004      	beq.n	80080ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fbed 	bl	8008892 <USBD_CtlError>
                break;
 80080b8:	e091      	b.n	80081de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da0b      	bge.n	80080da <USBD_StdEPReq+0x212>
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	3310      	adds	r3, #16
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	3304      	adds	r3, #4
 80080d8:	e00b      	b.n	80080f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	3304      	adds	r3, #4
 80080f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2202      	movs	r2, #2
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fc37 	bl	8008974 <USBD_CtlSendData>
              break;
 8008106:	e06a      	b.n	80081de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	da11      	bge.n	8008134 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 020f 	and.w	r2, r3, #15
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d117      	bne.n	800815a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbb0 	bl	8008892 <USBD_CtlError>
                  break;
 8008132:	e054      	b.n	80081de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fb9d 	bl	8008892 <USBD_CtlError>
                  break;
 8008158:	e041      	b.n	80081de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da0b      	bge.n	800817a <USBD_StdEPReq+0x2b2>
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	3310      	adds	r3, #16
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	e00b      	b.n	8008192 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <USBD_StdEPReq+0x2d8>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b80      	cmp	r3, #128	; 0x80
 800819e:	d103      	bne.n	80081a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	e00e      	b.n	80081c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f8c7 	bl	8009340 <USBD_LL_IsStallEP>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e002      	b.n	80081c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2202      	movs	r2, #2
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbd1 	bl	8008974 <USBD_CtlSendData>
              break;
 80081d2:	e004      	b.n	80081de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fb5b 	bl	8008892 <USBD_CtlError>
              break;
 80081dc:	bf00      	nop
          }
          break;
 80081de:	e004      	b.n	80081ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fb55 	bl	8008892 <USBD_CtlError>
          break;
 80081e8:	bf00      	nop
      }
      break;
 80081ea:	e005      	b.n	80081f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fb4f 	bl	8008892 <USBD_CtlError>
      break;
 80081f4:	e000      	b.n	80081f8 <USBD_StdEPReq+0x330>
      break;
 80081f6:	bf00      	nop
  }

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	2b06      	cmp	r3, #6
 8008226:	f200 8128 	bhi.w	800847a <USBD_GetDescriptor+0x276>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <USBD_GetDescriptor+0x2c>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	0800824d 	.word	0x0800824d
 8008234:	08008265 	.word	0x08008265
 8008238:	080082a5 	.word	0x080082a5
 800823c:	0800847b 	.word	0x0800847b
 8008240:	0800847b 	.word	0x0800847b
 8008244:	0800841b 	.word	0x0800841b
 8008248:	08008447 	.word	0x08008447
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
      break;
 8008262:	e112      	b.n	800848a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7c1b      	ldrb	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10d      	bne.n	8008288 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	f107 0208 	add.w	r2, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	2202      	movs	r2, #2
 8008284:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008286:	e100      	b.n	800848a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	f107 0208 	add.w	r2, r7, #8
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
 8008298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	2202      	movs	r2, #2
 80082a0:	701a      	strb	r2, [r3, #0]
      break;
 80082a2:	e0f2      	b.n	800848a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	885b      	ldrh	r3, [r3, #2]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	f200 80ac 	bhi.w	8008408 <USBD_GetDescriptor+0x204>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <USBD_GetDescriptor+0xb4>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082d1 	.word	0x080082d1
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008339 	.word	0x08008339
 80082c4:	0800836d 	.word	0x0800836d
 80082c8:	080083a1 	.word	0x080083a1
 80082cc:	080083d5 	.word	0x080083d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c12      	ldrb	r2, [r2, #16]
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f2:	e091      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 facb 	bl	8008892 <USBD_CtlError>
            err++;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	3301      	adds	r3, #1
 8008300:	72fb      	strb	r3, [r7, #11]
          break;
 8008302:	e089      	b.n	8008418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008326:	e077      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fab1 	bl	8008892 <USBD_CtlError>
            err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
          break;
 8008336:	e06f      	b.n	8008418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7c12      	ldrb	r2, [r2, #16]
 8008350:	f107 0108 	add.w	r1, r7, #8
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835a:	e05d      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa97 	bl	8008892 <USBD_CtlError>
            err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
          break;
 800836a:	e055      	b.n	8008418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838e:	e043      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa7d 	bl	8008892 <USBD_CtlError>
            err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
          break;
 800839e:	e03b      	b.n	8008418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e029      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa63 	bl	8008892 <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e021      	b.n	8008418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f6:	e00f      	b.n	8008418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa49 	bl	8008892 <USBD_CtlError>
            err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
          break;
 8008406:	e007      	b.n	8008418 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa41 	bl	8008892 <USBD_CtlError>
          err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008416:	bf00      	nop
      }
      break;
 8008418:	e037      	b.n	800848a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7c1b      	ldrb	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	f107 0208 	add.w	r2, r7, #8
 800842e:	4610      	mov	r0, r2
 8008430:	4798      	blx	r3
 8008432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008434:	e029      	b.n	800848a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa2a 	bl	8008892 <USBD_CtlError>
        err++;
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	3301      	adds	r3, #1
 8008442:	72fb      	strb	r3, [r7, #11]
      break;
 8008444:	e021      	b.n	800848a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7c1b      	ldrb	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10d      	bne.n	800846a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f107 0208 	add.w	r2, r7, #8
 800845a:	4610      	mov	r0, r2
 800845c:	4798      	blx	r3
 800845e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	2207      	movs	r2, #7
 8008466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008468:	e00f      	b.n	800848a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa10 	bl	8008892 <USBD_CtlError>
        err++;
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	3301      	adds	r3, #1
 8008476:	72fb      	strb	r3, [r7, #11]
      break;
 8008478:	e007      	b.n	800848a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa08 	bl	8008892 <USBD_CtlError>
      err++;
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	3301      	adds	r3, #1
 8008486:	72fb      	strb	r3, [r7, #11]
      break;
 8008488:	bf00      	nop
  }

  if (err != 0U)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11e      	bne.n	80084ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	88db      	ldrh	r3, [r3, #6]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d016      	beq.n	80084c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008498:	893b      	ldrh	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00e      	beq.n	80084bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88da      	ldrh	r2, [r3, #6]
 80084a2:	893b      	ldrh	r3, [r7, #8]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	bf28      	it	cs
 80084a8:	4613      	movcs	r3, r2
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ae:	893b      	ldrh	r3, [r7, #8]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fa5d 	bl	8008974 <USBD_CtlSendData>
 80084ba:	e009      	b.n	80084d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9e7 	bl	8008892 <USBD_CtlError>
 80084c4:	e004      	b.n	80084d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 faae 	bl	8008a28 <USBD_CtlSendStatus>
 80084cc:	e000      	b.n	80084d0 <USBD_GetDescriptor+0x2cc>
    return;
 80084ce:	bf00      	nop
  }
}
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d131      	bne.n	800854e <USBD_SetAddress+0x76>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d12d      	bne.n	800854e <USBD_SetAddress+0x76>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	2b7f      	cmp	r3, #127	; 0x7f
 80084f8:	d829      	bhi.n	800854e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d104      	bne.n	800851c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f9bc 	bl	8008892 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851a:	e01d      	b.n	8008558 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7bfa      	ldrb	r2, [r7, #15]
 8008520:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 ff35 	bl	8009398 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa7a 	bl	8008a28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2202      	movs	r2, #2
 800853e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	e009      	b.n	8008558 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854c:	e004      	b.n	8008558 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f99e 	bl	8008892 <USBD_CtlError>
  }
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	4b4e      	ldr	r3, [pc, #312]	; (80086b0 <USBD_SetConfig+0x150>)
 8008576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008578:	4b4d      	ldr	r3, [pc, #308]	; (80086b0 <USBD_SetConfig+0x150>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d905      	bls.n	800858c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f985 	bl	8008892 <USBD_CtlError>
    return USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e08c      	b.n	80086a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d002      	beq.n	800859e <USBD_SetConfig+0x3e>
 8008598:	2b03      	cmp	r3, #3
 800859a:	d029      	beq.n	80085f0 <USBD_SetConfig+0x90>
 800859c:	e075      	b.n	800868a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800859e:	4b44      	ldr	r3, [pc, #272]	; (80086b0 <USBD_SetConfig+0x150>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d020      	beq.n	80085e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085a6:	4b42      	ldr	r3, [pc, #264]	; (80086b0 <USBD_SetConfig+0x150>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085b0:	4b3f      	ldr	r3, [pc, #252]	; (80086b0 <USBD_SetConfig+0x150>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7fe ffe7 	bl	800758a <USBD_SetClassConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d008      	beq.n	80085d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f962 	bl	8008892 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085d6:	e065      	b.n	80086a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa25 	bl	8008a28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2203      	movs	r2, #3
 80085e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085e6:	e05d      	b.n	80086a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fa1d 	bl	8008a28 <USBD_CtlSendStatus>
      break;
 80085ee:	e059      	b.n	80086a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085f0:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <USBD_SetConfig+0x150>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d112      	bne.n	800861e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008600:	4b2b      	ldr	r3, [pc, #172]	; (80086b0 <USBD_SetConfig+0x150>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <USBD_SetConfig+0x150>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fe ffd6 	bl	80075c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa06 	bl	8008a28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800861c:	e042      	b.n	80086a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800861e:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <USBD_SetConfig+0x150>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d02a      	beq.n	8008682 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fe ffc4 	bl	80075c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <USBD_SetConfig+0x150>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008644:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <USBD_SetConfig+0x150>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7fe ff9d 	bl	800758a <USBD_SetClassConfig>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f918 	bl	8008892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fe ffa9 	bl	80075c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008678:	e014      	b.n	80086a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f9d4 	bl	8008a28 <USBD_CtlSendStatus>
      break;
 8008680:	e010      	b.n	80086a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9d0 	bl	8008a28 <USBD_CtlSendStatus>
      break;
 8008688:	e00c      	b.n	80086a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f900 	bl	8008892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <USBD_SetConfig+0x150>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7fe ff92 	bl	80075c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	bf00      	nop
  }

  return ret;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000240 	.word	0x20000240

080086b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	88db      	ldrh	r3, [r3, #6]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d004      	beq.n	80086d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8e2 	bl	8008892 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086ce:	e023      	b.n	8008718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	dc02      	bgt.n	80086e2 <USBD_GetConfig+0x2e>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dc03      	bgt.n	80086e8 <USBD_GetConfig+0x34>
 80086e0:	e015      	b.n	800870e <USBD_GetConfig+0x5a>
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d00b      	beq.n	80086fe <USBD_GetConfig+0x4a>
 80086e6:	e012      	b.n	800870e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3308      	adds	r3, #8
 80086f2:	2201      	movs	r2, #1
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f93c 	bl	8008974 <USBD_CtlSendData>
        break;
 80086fc:	e00c      	b.n	8008718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3304      	adds	r3, #4
 8008702:	2201      	movs	r2, #1
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f934 	bl	8008974 <USBD_CtlSendData>
        break;
 800870c:	e004      	b.n	8008718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f8be 	bl	8008892 <USBD_CtlError>
        break;
 8008716:	bf00      	nop
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	b2db      	uxtb	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	2b02      	cmp	r3, #2
 8008736:	d81e      	bhi.n	8008776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	88db      	ldrh	r3, [r3, #6]
 800873c:	2b02      	cmp	r3, #2
 800873e:	d004      	beq.n	800874a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f8a5 	bl	8008892 <USBD_CtlError>
        break;
 8008748:	e01a      	b.n	8008780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f043 0202 	orr.w	r2, r3, #2
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	330c      	adds	r3, #12
 800876a:	2202      	movs	r2, #2
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f900 	bl	8008974 <USBD_CtlSendData>
      break;
 8008774:	e004      	b.n	8008780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f88a 	bl	8008892 <USBD_CtlError>
      break;
 800877e:	bf00      	nop
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d107      	bne.n	80087aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f940 	bl	8008a28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087a8:	e013      	b.n	80087d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d10b      	bne.n	80087ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	889b      	ldrh	r3, [r3, #4]
 80087b6:	0a1b      	lsrs	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f930 	bl	8008a28 <USBD_CtlSendStatus>
}
 80087c8:	e003      	b.n	80087d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f860 	bl	8008892 <USBD_CtlError>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d80b      	bhi.n	800880a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	885b      	ldrh	r3, [r3, #2]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d10c      	bne.n	8008814 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f910 	bl	8008a28 <USBD_CtlSendStatus>
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f840 	bl	8008892 <USBD_CtlError>
      break;
 8008812:	e000      	b.n	8008816 <USBD_ClrFeature+0x3c>
      break;
 8008814:	bf00      	nop
  }
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781a      	ldrb	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff fa41 	bl	8007cd0 <SWAPBYTE>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff fa34 	bl	8007cd0 <SWAPBYTE>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff fa27 	bl	8007cd0 <SWAPBYTE>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	80da      	strh	r2, [r3, #6]
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800889c:	2180      	movs	r1, #128	; 0x80
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fd10 	bl	80092c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fd0c 	bl	80092c4 <USBD_LL_StallEP>
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d036      	beq.n	8008938 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088ce:	6938      	ldr	r0, [r7, #16]
 80088d0:	f000 f836 	bl	8008940 <USBD_GetLen>
 80088d4:	4603      	mov	r3, r0
 80088d6:	3301      	adds	r3, #1
 80088d8:	b29b      	uxth	r3, r3
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	4413      	add	r3, r2
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	2203      	movs	r2, #3
 80088fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	3301      	adds	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008904:	e013      	b.n	800892e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	4413      	add	r3, r2
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3301      	adds	r3, #1
 8008916:	613b      	str	r3, [r7, #16]
    idx++;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	3301      	adds	r3, #1
 800891c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	4413      	add	r3, r2
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]
    idx++;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	3301      	adds	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e7      	bne.n	8008906 <USBD_GetString+0x52>
 8008936:	e000      	b.n	800893a <USBD_GetString+0x86>
    return;
 8008938:	bf00      	nop
  }
}
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008950:	e005      	b.n	800895e <USBD_GetLen+0x1e>
  {
    len++;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	3301      	adds	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	3301      	adds	r3, #1
 800895c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f5      	bne.n	8008952 <USBD_GetLen+0x12>
  }

  return len;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2202      	movs	r2, #2
 8008984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	2100      	movs	r1, #0
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fd1b 	bl	80093d6 <USBD_LL_Transmit>

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	2100      	movs	r1, #0
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fd0a 	bl	80093d6 <USBD_LL_Transmit>

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2203      	movs	r2, #3
 80089dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	2100      	movs	r1, #0
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fd0e 	bl	8009418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	2100      	movs	r1, #0
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fcfd 	bl	8009418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2204      	movs	r2, #4
 8008a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fcc9 	bl	80093d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2205      	movs	r2, #5
 8008a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fcd7 	bl	8009418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4912      	ldr	r1, [pc, #72]	; (8008ac4 <MX_USB_DEVICE_Init+0x50>)
 8008a7c:	4812      	ldr	r0, [pc, #72]	; (8008ac8 <MX_USB_DEVICE_Init+0x54>)
 8008a7e:	f7fe fd07 	bl	8007490 <USBD_Init>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a88:	f7f8 f8c2 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a8c:	490f      	ldr	r1, [pc, #60]	; (8008acc <MX_USB_DEVICE_Init+0x58>)
 8008a8e:	480e      	ldr	r0, [pc, #56]	; (8008ac8 <MX_USB_DEVICE_Init+0x54>)
 8008a90:	f7fe fd2e 	bl	80074f0 <USBD_RegisterClass>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a9a:	f7f8 f8b9 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a9e:	490c      	ldr	r1, [pc, #48]	; (8008ad0 <MX_USB_DEVICE_Init+0x5c>)
 8008aa0:	4809      	ldr	r0, [pc, #36]	; (8008ac8 <MX_USB_DEVICE_Init+0x54>)
 8008aa2:	f7fe fc1f 	bl	80072e4 <USBD_CDC_RegisterInterface>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008aac:	f7f8 f8b0 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ab0:	4805      	ldr	r0, [pc, #20]	; (8008ac8 <MX_USB_DEVICE_Init+0x54>)
 8008ab2:	f7fe fd53 	bl	800755c <USBD_Start>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008abc:	f7f8 f8a8 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ac0:	bf00      	nop
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	200000bc 	.word	0x200000bc
 8008ac8:	20000244 	.word	0x20000244
 8008acc:	20000028 	.word	0x20000028
 8008ad0:	200000a8 	.word	0x200000a8

08008ad4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4905      	ldr	r1, [pc, #20]	; (8008af0 <CDC_Init_FS+0x1c>)
 8008adc:	4805      	ldr	r0, [pc, #20]	; (8008af4 <CDC_Init_FS+0x20>)
 8008ade:	f7fe fc1b 	bl	8007318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ae2:	4905      	ldr	r1, [pc, #20]	; (8008af8 <CDC_Init_FS+0x24>)
 8008ae4:	4803      	ldr	r0, [pc, #12]	; (8008af4 <CDC_Init_FS+0x20>)
 8008ae6:	f7fe fc39 	bl	800735c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008aea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000d20 	.word	0x20000d20
 8008af4:	20000244 	.word	0x20000244
 8008af8:	20000520 	.word	0x20000520

08008afc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	2b23      	cmp	r3, #35	; 0x23
 8008b20:	d84a      	bhi.n	8008bb8 <CDC_Control_FS+0xac>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <CDC_Control_FS+0x1c>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008bb9 	.word	0x08008bb9
 8008b2c:	08008bb9 	.word	0x08008bb9
 8008b30:	08008bb9 	.word	0x08008bb9
 8008b34:	08008bb9 	.word	0x08008bb9
 8008b38:	08008bb9 	.word	0x08008bb9
 8008b3c:	08008bb9 	.word	0x08008bb9
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008bb9 	.word	0x08008bb9
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008bb9 	.word	0x08008bb9
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bb9 	.word	0x08008bb9
 8008b7c:	08008bb9 	.word	0x08008bb9
 8008b80:	08008bb9 	.word	0x08008bb9
 8008b84:	08008bb9 	.word	0x08008bb9
 8008b88:	08008bb9 	.word	0x08008bb9
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bb9 	.word	0x08008bb9
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bb9 	.word	0x08008bb9
 8008ba0:	08008bb9 	.word	0x08008bb9
 8008ba4:	08008bb9 	.word	0x08008bb9
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bb9 	.word	0x08008bb9
 8008bb0:	08008bb9 	.word	0x08008bb9
 8008bb4:	08008bb9 	.word	0x08008bb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bb8:	bf00      	nop
  }

  return (USBD_OK);
 8008bba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4813      	ldr	r0, [pc, #76]	; (8008c24 <CDC_Receive_FS+0x5c>)
 8008bd6:	f7fe fbc1 	bl	800735c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bda:	4812      	ldr	r0, [pc, #72]	; (8008c24 <CDC_Receive_FS+0x5c>)
 8008bdc:	f7fe fc22 	bl	8007424 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f81f 	bl	8008c2c <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b31      	cmp	r3, #49	; 0x31
 8008bf4:	d106      	bne.n	8008c04 <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008bfc:	480a      	ldr	r0, [pc, #40]	; (8008c28 <CDC_Receive_FS+0x60>)
 8008bfe:	f7f9 fb79 	bl	80022f4 <HAL_GPIO_WritePin>
 8008c02:	e009      	b.n	8008c18 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b30      	cmp	r3, #48	; 0x30
 8008c0a:	d105      	bne.n	8008c18 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008c12:	4805      	ldr	r0, [pc, #20]	; (8008c28 <CDC_Receive_FS+0x60>)
 8008c14:	f7f9 fb6e 	bl	80022f4 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8008c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000244 	.word	0x20000244
 8008c28:	40020c00 	.word	0x40020c00

08008c2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00b      	b.n	8008c6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	461a      	mov	r2, r3
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c5a:	f7fe fb5d 	bl	8007318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <CDC_Transmit_FS+0x48>)
 8008c60:	f7fe fb9a 	bl	8007398 <USBD_CDC_TransmitPacket>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000244 	.word	0x20000244

08008c78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2212      	movs	r2, #18
 8008cac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	200000d8 	.word	0x200000d8

08008cc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	200000ec 	.word	0x200000ec

08008ce4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	6039      	str	r1, [r7, #0]
 8008cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d105      	bne.n	8008d02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4907      	ldr	r1, [pc, #28]	; (8008d18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cfa:	4808      	ldr	r0, [pc, #32]	; (8008d1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008cfc:	f7ff fdda 	bl	80088b4 <USBD_GetString>
 8008d00:	e004      	b.n	8008d0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	4904      	ldr	r1, [pc, #16]	; (8008d18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d06:	4805      	ldr	r0, [pc, #20]	; (8008d1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d08:	f7ff fdd4 	bl	80088b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d0c:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20001520 	.word	0x20001520
 8008d1c:	08009f88 	.word	0x08009f88

08008d20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	4904      	ldr	r1, [pc, #16]	; (8008d40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d30:	4804      	ldr	r0, [pc, #16]	; (8008d44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d32:	f7ff fdbf 	bl	80088b4 <USBD_GetString>
  return USBD_StrDesc;
 8008d36:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20001520 	.word	0x20001520
 8008d44:	08009fa0 	.word	0x08009fa0

08008d48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	221a      	movs	r2, #26
 8008d58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d5a:	f000 f843 	bl	8008de4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d5e:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200000f0 	.word	0x200000f0

08008d6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	6039      	str	r1, [r7, #0]
 8008d76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	4907      	ldr	r1, [pc, #28]	; (8008da0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d82:	4808      	ldr	r0, [pc, #32]	; (8008da4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d84:	f7ff fd96 	bl	80088b4 <USBD_GetString>
 8008d88:	e004      	b.n	8008d94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	4904      	ldr	r1, [pc, #16]	; (8008da0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d8e:	4805      	ldr	r0, [pc, #20]	; (8008da4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d90:	f7ff fd90 	bl	80088b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001520 	.word	0x20001520
 8008da4:	08009fb4 	.word	0x08009fb4

08008da8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4907      	ldr	r1, [pc, #28]	; (8008ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dbe:	4808      	ldr	r0, [pc, #32]	; (8008de0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dc0:	f7ff fd78 	bl	80088b4 <USBD_GetString>
 8008dc4:	e004      	b.n	8008dd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	4904      	ldr	r1, [pc, #16]	; (8008ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dca:	4805      	ldr	r0, [pc, #20]	; (8008de0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dcc:	f7ff fd72 	bl	80088b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dd0:	4b02      	ldr	r3, [pc, #8]	; (8008ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20001520 	.word	0x20001520
 8008de0:	08009fc0 	.word	0x08009fc0

08008de4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dea:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <Get_SerialNum+0x44>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <Get_SerialNum+0x48>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008df6:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <Get_SerialNum+0x4c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	4909      	ldr	r1, [pc, #36]	; (8008e34 <Get_SerialNum+0x50>)
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 f814 	bl	8008e3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e14:	2204      	movs	r2, #4
 8008e16:	4908      	ldr	r1, [pc, #32]	; (8008e38 <Get_SerialNum+0x54>)
 8008e18:	68b8      	ldr	r0, [r7, #8]
 8008e1a:	f000 f80f 	bl	8008e3c <IntToUnicode>
  }
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	1fff7a10 	.word	0x1fff7a10
 8008e2c:	1fff7a14 	.word	0x1fff7a14
 8008e30:	1fff7a18 	.word	0x1fff7a18
 8008e34:	200000f2 	.word	0x200000f2
 8008e38:	20000102 	.word	0x20000102

08008e3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75fb      	strb	r3, [r7, #23]
 8008e52:	e027      	b.n	8008ea4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	0f1b      	lsrs	r3, r3, #28
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d80b      	bhi.n	8008e74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	0f1b      	lsrs	r3, r3, #28
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	4619      	mov	r1, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	440b      	add	r3, r1
 8008e6c:	3230      	adds	r2, #48	; 0x30
 8008e6e:	b2d2      	uxtb	r2, r2
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	e00a      	b.n	8008e8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	3237      	adds	r2, #55	; 0x37
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	3301      	adds	r3, #1
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	4413      	add	r3, r2
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	7dfa      	ldrb	r2, [r7, #23]
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d3d3      	bcc.n	8008e54 <IntToUnicode+0x18>
  }
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	; 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	609a      	str	r2, [r3, #8]
 8008ed0:	60da      	str	r2, [r3, #12]
 8008ed2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008edc:	d14b      	bne.n	8008f76 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ede:	2300      	movs	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]
 8008ee2:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	6313      	str	r3, [r2, #48]	; 0x30
 8008eee:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f00:	2302      	movs	r3, #2
 8008f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f0c:	230a      	movs	r3, #10
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	4619      	mov	r1, r3
 8008f16:	481b      	ldr	r0, [pc, #108]	; (8008f84 <HAL_PCD_MspInit+0xc8>)
 8008f18:	f7f9 f838 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f22:	2302      	movs	r3, #2
 8008f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f26:	2301      	movs	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f2e:	230a      	movs	r3, #10
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f32:	f107 0314 	add.w	r3, r7, #20
 8008f36:	4619      	mov	r1, r3
 8008f38:	4812      	ldr	r0, [pc, #72]	; (8008f84 <HAL_PCD_MspInit+0xc8>)
 8008f3a:	f7f9 f827 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	4a0f      	ldr	r2, [pc, #60]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	6353      	str	r3, [r2, #52]	; 0x34
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	4a0b      	ldr	r2, [pc, #44]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f58:	6453      	str	r3, [r2, #68]	; 0x44
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_PCD_MspInit+0xc4>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	2043      	movs	r0, #67	; 0x43
 8008f6c:	f7f8 ff45 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f70:	2043      	movs	r0, #67	; 0x43
 8008f72:	f7f8 ff5e 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f76:	bf00      	nop
 8008f78:	3728      	adds	r7, #40	; 0x28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40023800 	.word	0x40023800
 8008f84:	40020000 	.word	0x40020000

08008f88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f7fe fb29 	bl	80075f6 <USBD_LL_SetupStage>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f7fe fb63 	bl	80076a0 <USBD_LL_DataOutStage>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	460b      	mov	r3, r1
 8008fec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	334c      	adds	r3, #76	; 0x4c
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	4619      	mov	r1, r3
 800900a:	f7fe fbfc 	bl	8007806 <USBD_LL_DataInStage>
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fd30 	bl	8007a8a <USBD_LL_SOF>
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800903a:	2301      	movs	r3, #1
 800903c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
 800904a:	e008      	b.n	800905e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d102      	bne.n	800905a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009054:	2301      	movs	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
 8009058:	e001      	b.n	800905e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800905a:	f7f7 fdd9 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009064:	7bfa      	ldrb	r2, [r7, #15]
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fcd0 	bl	8007a0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fc78 	bl	800796a <USBD_LL_Reset>
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fccb 	bl	8007a2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090aa:	f043 0301 	orr.w	r3, r3, #1
 80090ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <HAL_PCD_SuspendCallback+0x48>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	4a03      	ldr	r2, [pc, #12]	; (80090cc <HAL_PCD_SuspendCallback+0x48>)
 80090be:	f043 0306 	orr.w	r3, r3, #6
 80090c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed00 	.word	0xe000ed00

080090d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fcbb 	bl	8007a5a <USBD_LL_Resume>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fd13 	bl	8007b2e <USBD_LL_IsoOUTIncomplete>
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fccf 	bl	8007aca <USBD_LL_IsoINIncomplete>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fd25 	bl	8007b92 <USBD_LL_DevConnected>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fd22 	bl	8007ba8 <USBD_LL_DevDisconnected>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d13c      	bne.n	80091f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800917c:	4a20      	ldr	r2, [pc, #128]	; (8009200 <USBD_LL_Init+0x94>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a1e      	ldr	r2, [pc, #120]	; (8009200 <USBD_LL_Init+0x94>)
 8009188:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800918c:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <USBD_LL_Init+0x94>)
 800918e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009194:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <USBD_LL_Init+0x94>)
 8009196:	2204      	movs	r2, #4
 8009198:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800919a:	4b19      	ldr	r3, [pc, #100]	; (8009200 <USBD_LL_Init+0x94>)
 800919c:	2202      	movs	r2, #2
 800919e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091a0:	4b17      	ldr	r3, [pc, #92]	; (8009200 <USBD_LL_Init+0x94>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <USBD_LL_Init+0x94>)
 80091a8:	2202      	movs	r2, #2
 80091aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091ac:	4b14      	ldr	r3, [pc, #80]	; (8009200 <USBD_LL_Init+0x94>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091b2:	4b13      	ldr	r3, [pc, #76]	; (8009200 <USBD_LL_Init+0x94>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091b8:	4b11      	ldr	r3, [pc, #68]	; (8009200 <USBD_LL_Init+0x94>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091be:	4b10      	ldr	r3, [pc, #64]	; (8009200 <USBD_LL_Init+0x94>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091c4:	4b0e      	ldr	r3, [pc, #56]	; (8009200 <USBD_LL_Init+0x94>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091ca:	480d      	ldr	r0, [pc, #52]	; (8009200 <USBD_LL_Init+0x94>)
 80091cc:	f7f9 f8ab 	bl	8002326 <HAL_PCD_Init>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091d6:	f7f7 fd1b 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091da:	2180      	movs	r1, #128	; 0x80
 80091dc:	4808      	ldr	r0, [pc, #32]	; (8009200 <USBD_LL_Init+0x94>)
 80091de:	f7fa fb02 	bl	80037e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091e2:	2240      	movs	r2, #64	; 0x40
 80091e4:	2100      	movs	r1, #0
 80091e6:	4806      	ldr	r0, [pc, #24]	; (8009200 <USBD_LL_Init+0x94>)
 80091e8:	f7fa fab6 	bl	8003758 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091ec:	2280      	movs	r2, #128	; 0x80
 80091ee:	2101      	movs	r1, #1
 80091f0:	4803      	ldr	r0, [pc, #12]	; (8009200 <USBD_LL_Init+0x94>)
 80091f2:	f7fa fab1 	bl	8003758 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20001720 	.word	0x20001720

08009204 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800921a:	4618      	mov	r0, r3
 800921c:	f7f9 f9a0 	bl	8002560 <HAL_PCD_Start>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 f942 	bl	80094b0 <USBD_Get_USB_Status>
 800922c:	4603      	mov	r3, r0
 800922e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009230:	7bbb      	ldrb	r3, [r7, #14]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	461a      	mov	r2, r3
 8009248:	4603      	mov	r3, r0
 800924a:	70fb      	strb	r3, [r7, #3]
 800924c:	460b      	mov	r3, r1
 800924e:	70bb      	strb	r3, [r7, #2]
 8009250:	4613      	mov	r3, r2
 8009252:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009262:	78bb      	ldrb	r3, [r7, #2]
 8009264:	883a      	ldrh	r2, [r7, #0]
 8009266:	78f9      	ldrb	r1, [r7, #3]
 8009268:	f7f9 fe71 	bl	8002f4e <HAL_PCD_EP_Open>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f91c 	bl	80094b0 <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f9 feba 	bl	800301e <HAL_PCD_EP_Close>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f8fd 	bl	80094b0 <USBD_Get_USB_Status>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7f9 ff92 	bl	800320c <HAL_PCD_EP_SetStall>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f8de 	bl	80094b0 <USBD_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f7f9 ffd7 	bl	80032d4 <HAL_PCD_EP_ClrStall>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f8bf 	bl	80094b0 <USBD_Get_USB_Status>
 8009332:	4603      	mov	r3, r0
 8009334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009336:	7bbb      	ldrb	r3, [r7, #14]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009352:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009358:	2b00      	cmp	r3, #0
 800935a:	da0b      	bge.n	8009374 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009362:	68f9      	ldr	r1, [r7, #12]
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	333e      	adds	r3, #62	; 0x3e
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	e00b      	b.n	800938c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	4613      	mov	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800938a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7f9 fda4 	bl	8002f04 <HAL_PCD_SetAddress>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f874 	bl	80094b0 <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
 80093e2:	460b      	mov	r3, r1
 80093e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093f4:	7af9      	ldrb	r1, [r7, #11]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	f7f9 febd 	bl	8003178 <HAL_PCD_EP_Transmit>
 80093fe:	4603      	mov	r3, r0
 8009400:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f853 	bl	80094b0 <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800940e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	607a      	str	r2, [r7, #4]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	460b      	mov	r3, r1
 8009426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009436:	7af9      	ldrb	r1, [r7, #11]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	f7f9 fe39 	bl	80030b2 <HAL_PCD_EP_Receive>
 8009440:	4603      	mov	r3, r0
 8009442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f832 	bl	80094b0 <USBD_Get_USB_Status>
 800944c:	4603      	mov	r3, r0
 800944e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009450:	7dbb      	ldrb	r3, [r7, #22]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	460b      	mov	r3, r1
 8009464:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800946c:	78fa      	ldrb	r2, [r7, #3]
 800946e:	4611      	mov	r1, r2
 8009470:	4618      	mov	r0, r3
 8009472:	f7f9 fe69 	bl	8003148 <HAL_PCD_EP_GetRxCount>
 8009476:	4603      	mov	r3, r0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <USBD_static_malloc+0x18>)
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20001c2c 	.word	0x20001c2c

0800949c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d817      	bhi.n	80094f4 <USBD_Get_USB_Status+0x44>
 80094c4:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <USBD_Get_USB_Status+0x1c>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	080094e3 	.word	0x080094e3
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094ef 	.word	0x080094ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	e00b      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	73fb      	strb	r3, [r7, #15]
    break;
 80094e6:	e008      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e005      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ee:	2303      	movs	r3, #3
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	e002      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	bf00      	nop
  }
  return usb_status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <siprintf>:
 8009508:	b40e      	push	{r1, r2, r3}
 800950a:	b500      	push	{lr}
 800950c:	b09c      	sub	sp, #112	; 0x70
 800950e:	ab1d      	add	r3, sp, #116	; 0x74
 8009510:	9002      	str	r0, [sp, #8]
 8009512:	9006      	str	r0, [sp, #24]
 8009514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <siprintf+0x38>)
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	9104      	str	r1, [sp, #16]
 800951e:	4909      	ldr	r1, [pc, #36]	; (8009544 <siprintf+0x3c>)
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	6800      	ldr	r0, [r0, #0]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	a902      	add	r1, sp, #8
 800952c:	f000 f992 	bl	8009854 <_svfiprintf_r>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	b01c      	add	sp, #112	; 0x70
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	b003      	add	sp, #12
 800953e:	4770      	bx	lr
 8009540:	20000158 	.word	0x20000158
 8009544:	ffff0208 	.word	0xffff0208

08009548 <memset>:
 8009548:	4402      	add	r2, r0
 800954a:	4603      	mov	r3, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <__errno>:
 8009558:	4b01      	ldr	r3, [pc, #4]	; (8009560 <__errno+0x8>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20000158 	.word	0x20000158

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	; (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	; (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	; (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	; (80095a8 <__libc_init_array+0x44>)
 8009578:	f000 fc6a 	bl	8009e50 <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	0800a024 	.word	0x0800a024
 80095a0:	0800a024 	.word	0x0800a024
 80095a4:	0800a024 	.word	0x0800a024
 80095a8:	0800a028 	.word	0x0800a028

080095ac <__retarget_lock_acquire_recursive>:
 80095ac:	4770      	bx	lr

080095ae <__retarget_lock_release_recursive>:
 80095ae:	4770      	bx	lr

080095b0 <_free_r>:
 80095b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095b2:	2900      	cmp	r1, #0
 80095b4:	d044      	beq.n	8009640 <_free_r+0x90>
 80095b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ba:	9001      	str	r0, [sp, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f1a1 0404 	sub.w	r4, r1, #4
 80095c2:	bfb8      	it	lt
 80095c4:	18e4      	addlt	r4, r4, r3
 80095c6:	f000 f8df 	bl	8009788 <__malloc_lock>
 80095ca:	4a1e      	ldr	r2, [pc, #120]	; (8009644 <_free_r+0x94>)
 80095cc:	9801      	ldr	r0, [sp, #4]
 80095ce:	6813      	ldr	r3, [r2, #0]
 80095d0:	b933      	cbnz	r3, 80095e0 <_free_r+0x30>
 80095d2:	6063      	str	r3, [r4, #4]
 80095d4:	6014      	str	r4, [r2, #0]
 80095d6:	b003      	add	sp, #12
 80095d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095dc:	f000 b8da 	b.w	8009794 <__malloc_unlock>
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d908      	bls.n	80095f6 <_free_r+0x46>
 80095e4:	6825      	ldr	r5, [r4, #0]
 80095e6:	1961      	adds	r1, r4, r5
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf01      	itttt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	1949      	addeq	r1, r1, r5
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	e7ed      	b.n	80095d2 <_free_r+0x22>
 80095f6:	461a      	mov	r2, r3
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b10b      	cbz	r3, 8009600 <_free_r+0x50>
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d9fa      	bls.n	80095f6 <_free_r+0x46>
 8009600:	6811      	ldr	r1, [r2, #0]
 8009602:	1855      	adds	r5, r2, r1
 8009604:	42a5      	cmp	r5, r4
 8009606:	d10b      	bne.n	8009620 <_free_r+0x70>
 8009608:	6824      	ldr	r4, [r4, #0]
 800960a:	4421      	add	r1, r4
 800960c:	1854      	adds	r4, r2, r1
 800960e:	42a3      	cmp	r3, r4
 8009610:	6011      	str	r1, [r2, #0]
 8009612:	d1e0      	bne.n	80095d6 <_free_r+0x26>
 8009614:	681c      	ldr	r4, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	6053      	str	r3, [r2, #4]
 800961a:	440c      	add	r4, r1
 800961c:	6014      	str	r4, [r2, #0]
 800961e:	e7da      	b.n	80095d6 <_free_r+0x26>
 8009620:	d902      	bls.n	8009628 <_free_r+0x78>
 8009622:	230c      	movs	r3, #12
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	e7d6      	b.n	80095d6 <_free_r+0x26>
 8009628:	6825      	ldr	r5, [r4, #0]
 800962a:	1961      	adds	r1, r4, r5
 800962c:	428b      	cmp	r3, r1
 800962e:	bf04      	itt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	6063      	str	r3, [r4, #4]
 8009636:	bf04      	itt	eq
 8009638:	1949      	addeq	r1, r1, r5
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	6054      	str	r4, [r2, #4]
 800963e:	e7ca      	b.n	80095d6 <_free_r+0x26>
 8009640:	b003      	add	sp, #12
 8009642:	bd30      	pop	{r4, r5, pc}
 8009644:	20001f8c 	.word	0x20001f8c

08009648 <sbrk_aligned>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4e0e      	ldr	r6, [pc, #56]	; (8009684 <sbrk_aligned+0x3c>)
 800964c:	460c      	mov	r4, r1
 800964e:	6831      	ldr	r1, [r6, #0]
 8009650:	4605      	mov	r5, r0
 8009652:	b911      	cbnz	r1, 800965a <sbrk_aligned+0x12>
 8009654:	f000 fba6 	bl	8009da4 <_sbrk_r>
 8009658:	6030      	str	r0, [r6, #0]
 800965a:	4621      	mov	r1, r4
 800965c:	4628      	mov	r0, r5
 800965e:	f000 fba1 	bl	8009da4 <_sbrk_r>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d00a      	beq.n	800967c <sbrk_aligned+0x34>
 8009666:	1cc4      	adds	r4, r0, #3
 8009668:	f024 0403 	bic.w	r4, r4, #3
 800966c:	42a0      	cmp	r0, r4
 800966e:	d007      	beq.n	8009680 <sbrk_aligned+0x38>
 8009670:	1a21      	subs	r1, r4, r0
 8009672:	4628      	mov	r0, r5
 8009674:	f000 fb96 	bl	8009da4 <_sbrk_r>
 8009678:	3001      	adds	r0, #1
 800967a:	d101      	bne.n	8009680 <sbrk_aligned+0x38>
 800967c:	f04f 34ff 	mov.w	r4, #4294967295
 8009680:	4620      	mov	r0, r4
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	20001f90 	.word	0x20001f90

08009688 <_malloc_r>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	1ccd      	adds	r5, r1, #3
 800968e:	f025 0503 	bic.w	r5, r5, #3
 8009692:	3508      	adds	r5, #8
 8009694:	2d0c      	cmp	r5, #12
 8009696:	bf38      	it	cc
 8009698:	250c      	movcc	r5, #12
 800969a:	2d00      	cmp	r5, #0
 800969c:	4607      	mov	r7, r0
 800969e:	db01      	blt.n	80096a4 <_malloc_r+0x1c>
 80096a0:	42a9      	cmp	r1, r5
 80096a2:	d905      	bls.n	80096b0 <_malloc_r+0x28>
 80096a4:	230c      	movs	r3, #12
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	2600      	movs	r6, #0
 80096aa:	4630      	mov	r0, r6
 80096ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009784 <_malloc_r+0xfc>
 80096b4:	f000 f868 	bl	8009788 <__malloc_lock>
 80096b8:	f8d8 3000 	ldr.w	r3, [r8]
 80096bc:	461c      	mov	r4, r3
 80096be:	bb5c      	cbnz	r4, 8009718 <_malloc_r+0x90>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff ffc0 	bl	8009648 <sbrk_aligned>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	4604      	mov	r4, r0
 80096cc:	d155      	bne.n	800977a <_malloc_r+0xf2>
 80096ce:	f8d8 4000 	ldr.w	r4, [r8]
 80096d2:	4626      	mov	r6, r4
 80096d4:	2e00      	cmp	r6, #0
 80096d6:	d145      	bne.n	8009764 <_malloc_r+0xdc>
 80096d8:	2c00      	cmp	r4, #0
 80096da:	d048      	beq.n	800976e <_malloc_r+0xe6>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	4631      	mov	r1, r6
 80096e0:	4638      	mov	r0, r7
 80096e2:	eb04 0903 	add.w	r9, r4, r3
 80096e6:	f000 fb5d 	bl	8009da4 <_sbrk_r>
 80096ea:	4581      	cmp	r9, r0
 80096ec:	d13f      	bne.n	800976e <_malloc_r+0xe6>
 80096ee:	6821      	ldr	r1, [r4, #0]
 80096f0:	1a6d      	subs	r5, r5, r1
 80096f2:	4629      	mov	r1, r5
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ffa7 	bl	8009648 <sbrk_aligned>
 80096fa:	3001      	adds	r0, #1
 80096fc:	d037      	beq.n	800976e <_malloc_r+0xe6>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	442b      	add	r3, r5
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	f8d8 3000 	ldr.w	r3, [r8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d038      	beq.n	800977e <_malloc_r+0xf6>
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	42a2      	cmp	r2, r4
 8009710:	d12b      	bne.n	800976a <_malloc_r+0xe2>
 8009712:	2200      	movs	r2, #0
 8009714:	605a      	str	r2, [r3, #4]
 8009716:	e00f      	b.n	8009738 <_malloc_r+0xb0>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	1b52      	subs	r2, r2, r5
 800971c:	d41f      	bmi.n	800975e <_malloc_r+0xd6>
 800971e:	2a0b      	cmp	r2, #11
 8009720:	d917      	bls.n	8009752 <_malloc_r+0xca>
 8009722:	1961      	adds	r1, r4, r5
 8009724:	42a3      	cmp	r3, r4
 8009726:	6025      	str	r5, [r4, #0]
 8009728:	bf18      	it	ne
 800972a:	6059      	strne	r1, [r3, #4]
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	bf08      	it	eq
 8009730:	f8c8 1000 	streq.w	r1, [r8]
 8009734:	5162      	str	r2, [r4, r5]
 8009736:	604b      	str	r3, [r1, #4]
 8009738:	4638      	mov	r0, r7
 800973a:	f104 060b 	add.w	r6, r4, #11
 800973e:	f000 f829 	bl	8009794 <__malloc_unlock>
 8009742:	f026 0607 	bic.w	r6, r6, #7
 8009746:	1d23      	adds	r3, r4, #4
 8009748:	1af2      	subs	r2, r6, r3
 800974a:	d0ae      	beq.n	80096aa <_malloc_r+0x22>
 800974c:	1b9b      	subs	r3, r3, r6
 800974e:	50a3      	str	r3, [r4, r2]
 8009750:	e7ab      	b.n	80096aa <_malloc_r+0x22>
 8009752:	42a3      	cmp	r3, r4
 8009754:	6862      	ldr	r2, [r4, #4]
 8009756:	d1dd      	bne.n	8009714 <_malloc_r+0x8c>
 8009758:	f8c8 2000 	str.w	r2, [r8]
 800975c:	e7ec      	b.n	8009738 <_malloc_r+0xb0>
 800975e:	4623      	mov	r3, r4
 8009760:	6864      	ldr	r4, [r4, #4]
 8009762:	e7ac      	b.n	80096be <_malloc_r+0x36>
 8009764:	4634      	mov	r4, r6
 8009766:	6876      	ldr	r6, [r6, #4]
 8009768:	e7b4      	b.n	80096d4 <_malloc_r+0x4c>
 800976a:	4613      	mov	r3, r2
 800976c:	e7cc      	b.n	8009708 <_malloc_r+0x80>
 800976e:	230c      	movs	r3, #12
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	4638      	mov	r0, r7
 8009774:	f000 f80e 	bl	8009794 <__malloc_unlock>
 8009778:	e797      	b.n	80096aa <_malloc_r+0x22>
 800977a:	6025      	str	r5, [r4, #0]
 800977c:	e7dc      	b.n	8009738 <_malloc_r+0xb0>
 800977e:	605b      	str	r3, [r3, #4]
 8009780:	deff      	udf	#255	; 0xff
 8009782:	bf00      	nop
 8009784:	20001f8c 	.word	0x20001f8c

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__malloc_lock+0x8>)
 800978a:	f7ff bf0f 	b.w	80095ac <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	20001f88 	.word	0x20001f88

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_unlock+0x8>)
 8009796:	f7ff bf0a 	b.w	80095ae <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	20001f88 	.word	0x20001f88

080097a0 <__ssputs_r>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	688e      	ldr	r6, [r1, #8]
 80097a6:	461f      	mov	r7, r3
 80097a8:	42be      	cmp	r6, r7
 80097aa:	680b      	ldr	r3, [r1, #0]
 80097ac:	4682      	mov	sl, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	4690      	mov	r8, r2
 80097b2:	d82c      	bhi.n	800980e <__ssputs_r+0x6e>
 80097b4:	898a      	ldrh	r2, [r1, #12]
 80097b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ba:	d026      	beq.n	800980a <__ssputs_r+0x6a>
 80097bc:	6965      	ldr	r5, [r4, #20]
 80097be:	6909      	ldr	r1, [r1, #16]
 80097c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c4:	eba3 0901 	sub.w	r9, r3, r1
 80097c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097cc:	1c7b      	adds	r3, r7, #1
 80097ce:	444b      	add	r3, r9
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	429d      	cmp	r5, r3
 80097d4:	bf38      	it	cc
 80097d6:	461d      	movcc	r5, r3
 80097d8:	0553      	lsls	r3, r2, #21
 80097da:	d527      	bpl.n	800982c <__ssputs_r+0x8c>
 80097dc:	4629      	mov	r1, r5
 80097de:	f7ff ff53 	bl	8009688 <_malloc_r>
 80097e2:	4606      	mov	r6, r0
 80097e4:	b360      	cbz	r0, 8009840 <__ssputs_r+0xa0>
 80097e6:	6921      	ldr	r1, [r4, #16]
 80097e8:	464a      	mov	r2, r9
 80097ea:	f000 faeb 	bl	8009dc4 <memcpy>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	6126      	str	r6, [r4, #16]
 80097fc:	6165      	str	r5, [r4, #20]
 80097fe:	444e      	add	r6, r9
 8009800:	eba5 0509 	sub.w	r5, r5, r9
 8009804:	6026      	str	r6, [r4, #0]
 8009806:	60a5      	str	r5, [r4, #8]
 8009808:	463e      	mov	r6, r7
 800980a:	42be      	cmp	r6, r7
 800980c:	d900      	bls.n	8009810 <__ssputs_r+0x70>
 800980e:	463e      	mov	r6, r7
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	4632      	mov	r2, r6
 8009814:	4641      	mov	r1, r8
 8009816:	f000 faab 	bl	8009d70 <memmove>
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	1b9b      	subs	r3, r3, r6
 800981e:	60a3      	str	r3, [r4, #8]
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	4433      	add	r3, r6
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	2000      	movs	r0, #0
 8009828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982c:	462a      	mov	r2, r5
 800982e:	f000 fad7 	bl	8009de0 <_realloc_r>
 8009832:	4606      	mov	r6, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d1e0      	bne.n	80097fa <__ssputs_r+0x5a>
 8009838:	6921      	ldr	r1, [r4, #16]
 800983a:	4650      	mov	r0, sl
 800983c:	f7ff feb8 	bl	80095b0 <_free_r>
 8009840:	230c      	movs	r3, #12
 8009842:	f8ca 3000 	str.w	r3, [sl]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	e7e9      	b.n	8009828 <__ssputs_r+0x88>

08009854 <_svfiprintf_r>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	4698      	mov	r8, r3
 800985a:	898b      	ldrh	r3, [r1, #12]
 800985c:	061b      	lsls	r3, r3, #24
 800985e:	b09d      	sub	sp, #116	; 0x74
 8009860:	4607      	mov	r7, r0
 8009862:	460d      	mov	r5, r1
 8009864:	4614      	mov	r4, r2
 8009866:	d50e      	bpl.n	8009886 <_svfiprintf_r+0x32>
 8009868:	690b      	ldr	r3, [r1, #16]
 800986a:	b963      	cbnz	r3, 8009886 <_svfiprintf_r+0x32>
 800986c:	2140      	movs	r1, #64	; 0x40
 800986e:	f7ff ff0b 	bl	8009688 <_malloc_r>
 8009872:	6028      	str	r0, [r5, #0]
 8009874:	6128      	str	r0, [r5, #16]
 8009876:	b920      	cbnz	r0, 8009882 <_svfiprintf_r+0x2e>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e0d0      	b.n	8009a24 <_svfiprintf_r+0x1d0>
 8009882:	2340      	movs	r3, #64	; 0x40
 8009884:	616b      	str	r3, [r5, #20]
 8009886:	2300      	movs	r3, #0
 8009888:	9309      	str	r3, [sp, #36]	; 0x24
 800988a:	2320      	movs	r3, #32
 800988c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009890:	f8cd 800c 	str.w	r8, [sp, #12]
 8009894:	2330      	movs	r3, #48	; 0x30
 8009896:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a3c <_svfiprintf_r+0x1e8>
 800989a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800989e:	f04f 0901 	mov.w	r9, #1
 80098a2:	4623      	mov	r3, r4
 80098a4:	469a      	mov	sl, r3
 80098a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098aa:	b10a      	cbz	r2, 80098b0 <_svfiprintf_r+0x5c>
 80098ac:	2a25      	cmp	r2, #37	; 0x25
 80098ae:	d1f9      	bne.n	80098a4 <_svfiprintf_r+0x50>
 80098b0:	ebba 0b04 	subs.w	fp, sl, r4
 80098b4:	d00b      	beq.n	80098ce <_svfiprintf_r+0x7a>
 80098b6:	465b      	mov	r3, fp
 80098b8:	4622      	mov	r2, r4
 80098ba:	4629      	mov	r1, r5
 80098bc:	4638      	mov	r0, r7
 80098be:	f7ff ff6f 	bl	80097a0 <__ssputs_r>
 80098c2:	3001      	adds	r0, #1
 80098c4:	f000 80a9 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ca:	445a      	add	r2, fp
 80098cc:	9209      	str	r2, [sp, #36]	; 0x24
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80a1 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098d8:	2300      	movs	r3, #0
 80098da:	f04f 32ff 	mov.w	r2, #4294967295
 80098de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e2:	f10a 0a01 	add.w	sl, sl, #1
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ee:	931a      	str	r3, [sp, #104]	; 0x68
 80098f0:	4654      	mov	r4, sl
 80098f2:	2205      	movs	r2, #5
 80098f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f8:	4850      	ldr	r0, [pc, #320]	; (8009a3c <_svfiprintf_r+0x1e8>)
 80098fa:	f7f6 fc71 	bl	80001e0 <memchr>
 80098fe:	9a04      	ldr	r2, [sp, #16]
 8009900:	b9d8      	cbnz	r0, 800993a <_svfiprintf_r+0xe6>
 8009902:	06d0      	lsls	r0, r2, #27
 8009904:	bf44      	itt	mi
 8009906:	2320      	movmi	r3, #32
 8009908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800990c:	0711      	lsls	r1, r2, #28
 800990e:	bf44      	itt	mi
 8009910:	232b      	movmi	r3, #43	; 0x2b
 8009912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009916:	f89a 3000 	ldrb.w	r3, [sl]
 800991a:	2b2a      	cmp	r3, #42	; 0x2a
 800991c:	d015      	beq.n	800994a <_svfiprintf_r+0xf6>
 800991e:	9a07      	ldr	r2, [sp, #28]
 8009920:	4654      	mov	r4, sl
 8009922:	2000      	movs	r0, #0
 8009924:	f04f 0c0a 	mov.w	ip, #10
 8009928:	4621      	mov	r1, r4
 800992a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800992e:	3b30      	subs	r3, #48	; 0x30
 8009930:	2b09      	cmp	r3, #9
 8009932:	d94d      	bls.n	80099d0 <_svfiprintf_r+0x17c>
 8009934:	b1b0      	cbz	r0, 8009964 <_svfiprintf_r+0x110>
 8009936:	9207      	str	r2, [sp, #28]
 8009938:	e014      	b.n	8009964 <_svfiprintf_r+0x110>
 800993a:	eba0 0308 	sub.w	r3, r0, r8
 800993e:	fa09 f303 	lsl.w	r3, r9, r3
 8009942:	4313      	orrs	r3, r2
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	46a2      	mov	sl, r4
 8009948:	e7d2      	b.n	80098f0 <_svfiprintf_r+0x9c>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	1d19      	adds	r1, r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	9103      	str	r1, [sp, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfbb      	ittet	lt
 8009956:	425b      	neglt	r3, r3
 8009958:	f042 0202 	orrlt.w	r2, r2, #2
 800995c:	9307      	strge	r3, [sp, #28]
 800995e:	9307      	strlt	r3, [sp, #28]
 8009960:	bfb8      	it	lt
 8009962:	9204      	strlt	r2, [sp, #16]
 8009964:	7823      	ldrb	r3, [r4, #0]
 8009966:	2b2e      	cmp	r3, #46	; 0x2e
 8009968:	d10c      	bne.n	8009984 <_svfiprintf_r+0x130>
 800996a:	7863      	ldrb	r3, [r4, #1]
 800996c:	2b2a      	cmp	r3, #42	; 0x2a
 800996e:	d134      	bne.n	80099da <_svfiprintf_r+0x186>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	1d1a      	adds	r2, r3, #4
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	9203      	str	r2, [sp, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfb8      	it	lt
 800997c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009980:	3402      	adds	r4, #2
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a4c <_svfiprintf_r+0x1f8>
 8009988:	7821      	ldrb	r1, [r4, #0]
 800998a:	2203      	movs	r2, #3
 800998c:	4650      	mov	r0, sl
 800998e:	f7f6 fc27 	bl	80001e0 <memchr>
 8009992:	b138      	cbz	r0, 80099a4 <_svfiprintf_r+0x150>
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	eba0 000a 	sub.w	r0, r0, sl
 800999a:	2240      	movs	r2, #64	; 0x40
 800999c:	4082      	lsls	r2, r0
 800999e:	4313      	orrs	r3, r2
 80099a0:	3401      	adds	r4, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a8:	4825      	ldr	r0, [pc, #148]	; (8009a40 <_svfiprintf_r+0x1ec>)
 80099aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ae:	2206      	movs	r2, #6
 80099b0:	f7f6 fc16 	bl	80001e0 <memchr>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d038      	beq.n	8009a2a <_svfiprintf_r+0x1d6>
 80099b8:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <_svfiprintf_r+0x1f0>)
 80099ba:	bb1b      	cbnz	r3, 8009a04 <_svfiprintf_r+0x1b0>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	3307      	adds	r3, #7
 80099c0:	f023 0307 	bic.w	r3, r3, #7
 80099c4:	3308      	adds	r3, #8
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ca:	4433      	add	r3, r6
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	e768      	b.n	80098a2 <_svfiprintf_r+0x4e>
 80099d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d4:	460c      	mov	r4, r1
 80099d6:	2001      	movs	r0, #1
 80099d8:	e7a6      	b.n	8009928 <_svfiprintf_r+0xd4>
 80099da:	2300      	movs	r3, #0
 80099dc:	3401      	adds	r4, #1
 80099de:	9305      	str	r3, [sp, #20]
 80099e0:	4619      	mov	r1, r3
 80099e2:	f04f 0c0a 	mov.w	ip, #10
 80099e6:	4620      	mov	r0, r4
 80099e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ec:	3a30      	subs	r2, #48	; 0x30
 80099ee:	2a09      	cmp	r2, #9
 80099f0:	d903      	bls.n	80099fa <_svfiprintf_r+0x1a6>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0c6      	beq.n	8009984 <_svfiprintf_r+0x130>
 80099f6:	9105      	str	r1, [sp, #20]
 80099f8:	e7c4      	b.n	8009984 <_svfiprintf_r+0x130>
 80099fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80099fe:	4604      	mov	r4, r0
 8009a00:	2301      	movs	r3, #1
 8009a02:	e7f0      	b.n	80099e6 <_svfiprintf_r+0x192>
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <_svfiprintf_r+0x1f4>)
 8009a0c:	a904      	add	r1, sp, #16
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f3af 8000 	nop.w
 8009a14:	1c42      	adds	r2, r0, #1
 8009a16:	4606      	mov	r6, r0
 8009a18:	d1d6      	bne.n	80099c8 <_svfiprintf_r+0x174>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af2d 	bmi.w	800987c <_svfiprintf_r+0x28>
 8009a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a24:	b01d      	add	sp, #116	; 0x74
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	ab03      	add	r3, sp, #12
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <_svfiprintf_r+0x1f4>)
 8009a32:	a904      	add	r1, sp, #16
 8009a34:	4638      	mov	r0, r7
 8009a36:	f000 f879 	bl	8009b2c <_printf_i>
 8009a3a:	e7eb      	b.n	8009a14 <_svfiprintf_r+0x1c0>
 8009a3c:	08009fe8 	.word	0x08009fe8
 8009a40:	08009ff2 	.word	0x08009ff2
 8009a44:	00000000 	.word	0x00000000
 8009a48:	080097a1 	.word	0x080097a1
 8009a4c:	08009fee 	.word	0x08009fee

08009a50 <_printf_common>:
 8009a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a54:	4616      	mov	r6, r2
 8009a56:	4699      	mov	r9, r3
 8009a58:	688a      	ldr	r2, [r1, #8]
 8009a5a:	690b      	ldr	r3, [r1, #16]
 8009a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a60:	4293      	cmp	r3, r2
 8009a62:	bfb8      	it	lt
 8009a64:	4613      	movlt	r3, r2
 8009a66:	6033      	str	r3, [r6, #0]
 8009a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b10a      	cbz	r2, 8009a76 <_printf_common+0x26>
 8009a72:	3301      	adds	r3, #1
 8009a74:	6033      	str	r3, [r6, #0]
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	0699      	lsls	r1, r3, #26
 8009a7a:	bf42      	ittt	mi
 8009a7c:	6833      	ldrmi	r3, [r6, #0]
 8009a7e:	3302      	addmi	r3, #2
 8009a80:	6033      	strmi	r3, [r6, #0]
 8009a82:	6825      	ldr	r5, [r4, #0]
 8009a84:	f015 0506 	ands.w	r5, r5, #6
 8009a88:	d106      	bne.n	8009a98 <_printf_common+0x48>
 8009a8a:	f104 0a19 	add.w	sl, r4, #25
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	6832      	ldr	r2, [r6, #0]
 8009a92:	1a9b      	subs	r3, r3, r2
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	dc26      	bgt.n	8009ae6 <_printf_common+0x96>
 8009a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a9c:	1e13      	subs	r3, r2, #0
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	bf18      	it	ne
 8009aa2:	2301      	movne	r3, #1
 8009aa4:	0692      	lsls	r2, r2, #26
 8009aa6:	d42b      	bmi.n	8009b00 <_printf_common+0xb0>
 8009aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aac:	4649      	mov	r1, r9
 8009aae:	4638      	mov	r0, r7
 8009ab0:	47c0      	blx	r8
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	d01e      	beq.n	8009af4 <_printf_common+0xa4>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	6922      	ldr	r2, [r4, #16]
 8009aba:	f003 0306 	and.w	r3, r3, #6
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	bf02      	ittt	eq
 8009ac2:	68e5      	ldreq	r5, [r4, #12]
 8009ac4:	6833      	ldreq	r3, [r6, #0]
 8009ac6:	1aed      	subeq	r5, r5, r3
 8009ac8:	68a3      	ldr	r3, [r4, #8]
 8009aca:	bf0c      	ite	eq
 8009acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ad0:	2500      	movne	r5, #0
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	bfc4      	itt	gt
 8009ad6:	1a9b      	subgt	r3, r3, r2
 8009ad8:	18ed      	addgt	r5, r5, r3
 8009ada:	2600      	movs	r6, #0
 8009adc:	341a      	adds	r4, #26
 8009ade:	42b5      	cmp	r5, r6
 8009ae0:	d11a      	bne.n	8009b18 <_printf_common+0xc8>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e008      	b.n	8009af8 <_printf_common+0xa8>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	4649      	mov	r1, r9
 8009aec:	4638      	mov	r0, r7
 8009aee:	47c0      	blx	r8
 8009af0:	3001      	adds	r0, #1
 8009af2:	d103      	bne.n	8009afc <_printf_common+0xac>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afc:	3501      	adds	r5, #1
 8009afe:	e7c6      	b.n	8009a8e <_printf_common+0x3e>
 8009b00:	18e1      	adds	r1, r4, r3
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	2030      	movs	r0, #48	; 0x30
 8009b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b0a:	4422      	add	r2, r4
 8009b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b14:	3302      	adds	r3, #2
 8009b16:	e7c7      	b.n	8009aa8 <_printf_common+0x58>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4622      	mov	r2, r4
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4638      	mov	r0, r7
 8009b20:	47c0      	blx	r8
 8009b22:	3001      	adds	r0, #1
 8009b24:	d0e6      	beq.n	8009af4 <_printf_common+0xa4>
 8009b26:	3601      	adds	r6, #1
 8009b28:	e7d9      	b.n	8009ade <_printf_common+0x8e>
	...

08009b2c <_printf_i>:
 8009b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	7e0f      	ldrb	r7, [r1, #24]
 8009b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b34:	2f78      	cmp	r7, #120	; 0x78
 8009b36:	4691      	mov	r9, r2
 8009b38:	4680      	mov	r8, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	469a      	mov	sl, r3
 8009b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b42:	d807      	bhi.n	8009b54 <_printf_i+0x28>
 8009b44:	2f62      	cmp	r7, #98	; 0x62
 8009b46:	d80a      	bhi.n	8009b5e <_printf_i+0x32>
 8009b48:	2f00      	cmp	r7, #0
 8009b4a:	f000 80d4 	beq.w	8009cf6 <_printf_i+0x1ca>
 8009b4e:	2f58      	cmp	r7, #88	; 0x58
 8009b50:	f000 80c0 	beq.w	8009cd4 <_printf_i+0x1a8>
 8009b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b5c:	e03a      	b.n	8009bd4 <_printf_i+0xa8>
 8009b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b62:	2b15      	cmp	r3, #21
 8009b64:	d8f6      	bhi.n	8009b54 <_printf_i+0x28>
 8009b66:	a101      	add	r1, pc, #4	; (adr r1, 8009b6c <_printf_i+0x40>)
 8009b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b6c:	08009bc5 	.word	0x08009bc5
 8009b70:	08009bd9 	.word	0x08009bd9
 8009b74:	08009b55 	.word	0x08009b55
 8009b78:	08009b55 	.word	0x08009b55
 8009b7c:	08009b55 	.word	0x08009b55
 8009b80:	08009b55 	.word	0x08009b55
 8009b84:	08009bd9 	.word	0x08009bd9
 8009b88:	08009b55 	.word	0x08009b55
 8009b8c:	08009b55 	.word	0x08009b55
 8009b90:	08009b55 	.word	0x08009b55
 8009b94:	08009b55 	.word	0x08009b55
 8009b98:	08009cdd 	.word	0x08009cdd
 8009b9c:	08009c05 	.word	0x08009c05
 8009ba0:	08009c97 	.word	0x08009c97
 8009ba4:	08009b55 	.word	0x08009b55
 8009ba8:	08009b55 	.word	0x08009b55
 8009bac:	08009cff 	.word	0x08009cff
 8009bb0:	08009b55 	.word	0x08009b55
 8009bb4:	08009c05 	.word	0x08009c05
 8009bb8:	08009b55 	.word	0x08009b55
 8009bbc:	08009b55 	.word	0x08009b55
 8009bc0:	08009c9f 	.word	0x08009c9f
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	1d1a      	adds	r2, r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	602a      	str	r2, [r5, #0]
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e09f      	b.n	8009d18 <_printf_i+0x1ec>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	0607      	lsls	r7, r0, #24
 8009bde:	f103 0104 	add.w	r1, r3, #4
 8009be2:	6029      	str	r1, [r5, #0]
 8009be4:	d501      	bpl.n	8009bea <_printf_i+0xbe>
 8009be6:	681e      	ldr	r6, [r3, #0]
 8009be8:	e003      	b.n	8009bf2 <_printf_i+0xc6>
 8009bea:	0646      	lsls	r6, r0, #25
 8009bec:	d5fb      	bpl.n	8009be6 <_printf_i+0xba>
 8009bee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	da03      	bge.n	8009bfe <_printf_i+0xd2>
 8009bf6:	232d      	movs	r3, #45	; 0x2d
 8009bf8:	4276      	negs	r6, r6
 8009bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bfe:	485a      	ldr	r0, [pc, #360]	; (8009d68 <_printf_i+0x23c>)
 8009c00:	230a      	movs	r3, #10
 8009c02:	e012      	b.n	8009c2a <_printf_i+0xfe>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	6820      	ldr	r0, [r4, #0]
 8009c08:	1d19      	adds	r1, r3, #4
 8009c0a:	6029      	str	r1, [r5, #0]
 8009c0c:	0605      	lsls	r5, r0, #24
 8009c0e:	d501      	bpl.n	8009c14 <_printf_i+0xe8>
 8009c10:	681e      	ldr	r6, [r3, #0]
 8009c12:	e002      	b.n	8009c1a <_printf_i+0xee>
 8009c14:	0641      	lsls	r1, r0, #25
 8009c16:	d5fb      	bpl.n	8009c10 <_printf_i+0xe4>
 8009c18:	881e      	ldrh	r6, [r3, #0]
 8009c1a:	4853      	ldr	r0, [pc, #332]	; (8009d68 <_printf_i+0x23c>)
 8009c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c1e:	bf0c      	ite	eq
 8009c20:	2308      	moveq	r3, #8
 8009c22:	230a      	movne	r3, #10
 8009c24:	2100      	movs	r1, #0
 8009c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c2a:	6865      	ldr	r5, [r4, #4]
 8009c2c:	60a5      	str	r5, [r4, #8]
 8009c2e:	2d00      	cmp	r5, #0
 8009c30:	bfa2      	ittt	ge
 8009c32:	6821      	ldrge	r1, [r4, #0]
 8009c34:	f021 0104 	bicge.w	r1, r1, #4
 8009c38:	6021      	strge	r1, [r4, #0]
 8009c3a:	b90e      	cbnz	r6, 8009c40 <_printf_i+0x114>
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d04b      	beq.n	8009cd8 <_printf_i+0x1ac>
 8009c40:	4615      	mov	r5, r2
 8009c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c46:	fb03 6711 	mls	r7, r3, r1, r6
 8009c4a:	5dc7      	ldrb	r7, [r0, r7]
 8009c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c50:	4637      	mov	r7, r6
 8009c52:	42bb      	cmp	r3, r7
 8009c54:	460e      	mov	r6, r1
 8009c56:	d9f4      	bls.n	8009c42 <_printf_i+0x116>
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d10b      	bne.n	8009c74 <_printf_i+0x148>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	07de      	lsls	r6, r3, #31
 8009c60:	d508      	bpl.n	8009c74 <_printf_i+0x148>
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	6861      	ldr	r1, [r4, #4]
 8009c66:	4299      	cmp	r1, r3
 8009c68:	bfde      	ittt	le
 8009c6a:	2330      	movle	r3, #48	; 0x30
 8009c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c74:	1b52      	subs	r2, r2, r5
 8009c76:	6122      	str	r2, [r4, #16]
 8009c78:	f8cd a000 	str.w	sl, [sp]
 8009c7c:	464b      	mov	r3, r9
 8009c7e:	aa03      	add	r2, sp, #12
 8009c80:	4621      	mov	r1, r4
 8009c82:	4640      	mov	r0, r8
 8009c84:	f7ff fee4 	bl	8009a50 <_printf_common>
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d14a      	bne.n	8009d22 <_printf_i+0x1f6>
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	b004      	add	sp, #16
 8009c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	f043 0320 	orr.w	r3, r3, #32
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	4833      	ldr	r0, [pc, #204]	; (8009d6c <_printf_i+0x240>)
 8009ca0:	2778      	movs	r7, #120	; 0x78
 8009ca2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	6829      	ldr	r1, [r5, #0]
 8009caa:	061f      	lsls	r7, r3, #24
 8009cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cb0:	d402      	bmi.n	8009cb8 <_printf_i+0x18c>
 8009cb2:	065f      	lsls	r7, r3, #25
 8009cb4:	bf48      	it	mi
 8009cb6:	b2b6      	uxthmi	r6, r6
 8009cb8:	07df      	lsls	r7, r3, #31
 8009cba:	bf48      	it	mi
 8009cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8009cc0:	6029      	str	r1, [r5, #0]
 8009cc2:	bf48      	it	mi
 8009cc4:	6023      	strmi	r3, [r4, #0]
 8009cc6:	b91e      	cbnz	r6, 8009cd0 <_printf_i+0x1a4>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	f023 0320 	bic.w	r3, r3, #32
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	e7a7      	b.n	8009c24 <_printf_i+0xf8>
 8009cd4:	4824      	ldr	r0, [pc, #144]	; (8009d68 <_printf_i+0x23c>)
 8009cd6:	e7e4      	b.n	8009ca2 <_printf_i+0x176>
 8009cd8:	4615      	mov	r5, r2
 8009cda:	e7bd      	b.n	8009c58 <_printf_i+0x12c>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	6826      	ldr	r6, [r4, #0]
 8009ce0:	6961      	ldr	r1, [r4, #20]
 8009ce2:	1d18      	adds	r0, r3, #4
 8009ce4:	6028      	str	r0, [r5, #0]
 8009ce6:	0635      	lsls	r5, r6, #24
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	d501      	bpl.n	8009cf0 <_printf_i+0x1c4>
 8009cec:	6019      	str	r1, [r3, #0]
 8009cee:	e002      	b.n	8009cf6 <_printf_i+0x1ca>
 8009cf0:	0670      	lsls	r0, r6, #25
 8009cf2:	d5fb      	bpl.n	8009cec <_printf_i+0x1c0>
 8009cf4:	8019      	strh	r1, [r3, #0]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6123      	str	r3, [r4, #16]
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	e7bc      	b.n	8009c78 <_printf_i+0x14c>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	1d1a      	adds	r2, r3, #4
 8009d02:	602a      	str	r2, [r5, #0]
 8009d04:	681d      	ldr	r5, [r3, #0]
 8009d06:	6862      	ldr	r2, [r4, #4]
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f7f6 fa68 	bl	80001e0 <memchr>
 8009d10:	b108      	cbz	r0, 8009d16 <_printf_i+0x1ea>
 8009d12:	1b40      	subs	r0, r0, r5
 8009d14:	6060      	str	r0, [r4, #4]
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	6123      	str	r3, [r4, #16]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d20:	e7aa      	b.n	8009c78 <_printf_i+0x14c>
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	462a      	mov	r2, r5
 8009d26:	4649      	mov	r1, r9
 8009d28:	4640      	mov	r0, r8
 8009d2a:	47d0      	blx	sl
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d0ad      	beq.n	8009c8c <_printf_i+0x160>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	079b      	lsls	r3, r3, #30
 8009d34:	d413      	bmi.n	8009d5e <_printf_i+0x232>
 8009d36:	68e0      	ldr	r0, [r4, #12]
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	4298      	cmp	r0, r3
 8009d3c:	bfb8      	it	lt
 8009d3e:	4618      	movlt	r0, r3
 8009d40:	e7a6      	b.n	8009c90 <_printf_i+0x164>
 8009d42:	2301      	movs	r3, #1
 8009d44:	4632      	mov	r2, r6
 8009d46:	4649      	mov	r1, r9
 8009d48:	4640      	mov	r0, r8
 8009d4a:	47d0      	blx	sl
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d09d      	beq.n	8009c8c <_printf_i+0x160>
 8009d50:	3501      	adds	r5, #1
 8009d52:	68e3      	ldr	r3, [r4, #12]
 8009d54:	9903      	ldr	r1, [sp, #12]
 8009d56:	1a5b      	subs	r3, r3, r1
 8009d58:	42ab      	cmp	r3, r5
 8009d5a:	dcf2      	bgt.n	8009d42 <_printf_i+0x216>
 8009d5c:	e7eb      	b.n	8009d36 <_printf_i+0x20a>
 8009d5e:	2500      	movs	r5, #0
 8009d60:	f104 0619 	add.w	r6, r4, #25
 8009d64:	e7f5      	b.n	8009d52 <_printf_i+0x226>
 8009d66:	bf00      	nop
 8009d68:	08009ff9 	.word	0x08009ff9
 8009d6c:	0800a00a 	.word	0x0800a00a

08009d70 <memmove>:
 8009d70:	4288      	cmp	r0, r1
 8009d72:	b510      	push	{r4, lr}
 8009d74:	eb01 0402 	add.w	r4, r1, r2
 8009d78:	d902      	bls.n	8009d80 <memmove+0x10>
 8009d7a:	4284      	cmp	r4, r0
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	d807      	bhi.n	8009d90 <memmove+0x20>
 8009d80:	1e43      	subs	r3, r0, #1
 8009d82:	42a1      	cmp	r1, r4
 8009d84:	d008      	beq.n	8009d98 <memmove+0x28>
 8009d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d8e:	e7f8      	b.n	8009d82 <memmove+0x12>
 8009d90:	4402      	add	r2, r0
 8009d92:	4601      	mov	r1, r0
 8009d94:	428a      	cmp	r2, r1
 8009d96:	d100      	bne.n	8009d9a <memmove+0x2a>
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009da2:	e7f7      	b.n	8009d94 <memmove+0x24>

08009da4 <_sbrk_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	; (8009dc0 <_sbrk_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f7 f870 	bl	8000e94 <_sbrk>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_sbrk_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_sbrk_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	20001f84 	.word	0x20001f84

08009dc4 <memcpy>:
 8009dc4:	440a      	add	r2, r1
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dcc:	d100      	bne.n	8009dd0 <memcpy+0xc>
 8009dce:	4770      	bx	lr
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	d1f9      	bne.n	8009dd2 <memcpy+0xe>
 8009dde:	bd10      	pop	{r4, pc}

08009de0 <_realloc_r>:
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	4680      	mov	r8, r0
 8009de6:	4614      	mov	r4, r2
 8009de8:	460e      	mov	r6, r1
 8009dea:	b921      	cbnz	r1, 8009df6 <_realloc_r+0x16>
 8009dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	4611      	mov	r1, r2
 8009df2:	f7ff bc49 	b.w	8009688 <_malloc_r>
 8009df6:	b92a      	cbnz	r2, 8009e04 <_realloc_r+0x24>
 8009df8:	f7ff fbda 	bl	80095b0 <_free_r>
 8009dfc:	4625      	mov	r5, r4
 8009dfe:	4628      	mov	r0, r5
 8009e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e04:	f000 f81b 	bl	8009e3e <_malloc_usable_size_r>
 8009e08:	4284      	cmp	r4, r0
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	d802      	bhi.n	8009e14 <_realloc_r+0x34>
 8009e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e12:	d812      	bhi.n	8009e3a <_realloc_r+0x5a>
 8009e14:	4621      	mov	r1, r4
 8009e16:	4640      	mov	r0, r8
 8009e18:	f7ff fc36 	bl	8009688 <_malloc_r>
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0ed      	beq.n	8009dfe <_realloc_r+0x1e>
 8009e22:	42bc      	cmp	r4, r7
 8009e24:	4622      	mov	r2, r4
 8009e26:	4631      	mov	r1, r6
 8009e28:	bf28      	it	cs
 8009e2a:	463a      	movcs	r2, r7
 8009e2c:	f7ff ffca 	bl	8009dc4 <memcpy>
 8009e30:	4631      	mov	r1, r6
 8009e32:	4640      	mov	r0, r8
 8009e34:	f7ff fbbc 	bl	80095b0 <_free_r>
 8009e38:	e7e1      	b.n	8009dfe <_realloc_r+0x1e>
 8009e3a:	4635      	mov	r5, r6
 8009e3c:	e7df      	b.n	8009dfe <_realloc_r+0x1e>

08009e3e <_malloc_usable_size_r>:
 8009e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e42:	1f18      	subs	r0, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bfbc      	itt	lt
 8009e48:	580b      	ldrlt	r3, [r1, r0]
 8009e4a:	18c0      	addlt	r0, r0, r3
 8009e4c:	4770      	bx	lr
	...

08009e50 <_init>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr

08009e5c <_fini>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr
