
CAN_communication_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e24  08008e24  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e2c  08008e2c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001dcc  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001f18  20001f18  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ff02  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003093  00000000  00000000  000300c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00033158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a1  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023466  00000000  00000000  00034801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001176e  00000000  00000000  00057c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c67f9  00000000  00000000  000693d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000390c  00000000  00000000  0012fbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001334dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c48 	.word	0x08008c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008c48 	.word	0x08008c48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t data[8];
char data1[30];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b091      	sub	sp, #68	; 0x44
 8000580:	af06      	add	r7, sp, #24
 8000582:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef rxPHead = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	619a      	str	r2, [r3, #24]
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxPHead, data);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80005a2:	f001 f819 	bl	80015d8 <HAL_CAN_GetRxMessage>
	  sprintf(data1, "|%X|%X|%X|%X|%X|%X|%X|%X|\n", data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461e      	mov	r6, r3
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	469c      	mov	ip, r3
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	4619      	mov	r1, r3
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	461c      	mov	r4, r3
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005cc:	799b      	ldrb	r3, [r3, #6]
 80005ce:	461d      	mov	r5, r3
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005d2:	79db      	ldrb	r3, [r3, #7]
 80005d4:	9305      	str	r3, [sp, #20]
 80005d6:	9504      	str	r5, [sp, #16]
 80005d8:	9403      	str	r4, [sp, #12]
 80005da:	9002      	str	r0, [sp, #8]
 80005dc:	9101      	str	r1, [sp, #4]
 80005de:	9200      	str	r2, [sp, #0]
 80005e0:	4663      	mov	r3, ip
 80005e2:	4632      	mov	r2, r6
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80005e8:	f007 fe8a 	bl	8008300 <siprintf>
//	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxPHead, data);
	  CDC_Transmit_FS((uint8_t*)data1, 30);
 80005ec:	211e      	movs	r1, #30
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80005f0:	f007 fa18 	bl	8007a24 <CDC_Transmit_FS>
//	  CDC_Transmit_FS(rxPHead.IDE, 4);

}
 80005f4:	bf00      	nop
 80005f6:	372c      	adds	r7, #44	; 0x2c
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	20000168 	.word	0x20000168
 8000600:	20000190 	.word	0x20000190
 8000604:	08008c60 	.word	0x08008c60
 8000608:	20000170 	.word	0x20000170

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc07 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f90d 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9f1 	bl	8000a00 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800061e:	f007 f925 	bl	800786c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HODL_Till_BTN();
 8000622:	f000 f80f 	bl	8000644 <HODL_Till_BTN>

  uint32_t PRE[] = {42, 210, 84, 21};
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <main+0x34>)
 8000628:	463c      	mov	r4, r7
 800062a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  Auto_Baudrate_Setup(PRE);
 8000630:	463b      	mov	r3, r7
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f822 	bl	800067c <Auto_Baudrate_Setup>

  Capture_PID_Snapshot();
 8000638:	f000 f8b4 	bl	80007a4 <Capture_PID_Snapshot>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x30>
 800063e:	bf00      	nop
 8000640:	08008d1c 	.word	0x08008d1c

08000644 <HODL_Till_BTN>:

  }
  /* USER CODE END 3 */
}

static void HODL_Till_BTN(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000648:	e005      	b.n	8000656 <HODL_Till_BTN+0x12>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <HODL_Till_BTN+0x30>)
 8000652:	f001 fdef 	bl	8002234 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000656:	2101      	movs	r1, #1
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <HODL_Till_BTN+0x34>)
 800065a:	f001 fdd3 	bl	8002204 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f2      	beq.n	800064a <HODL_Till_BTN+0x6>
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	4802      	ldr	r0, [pc, #8]	; (8000674 <HODL_Till_BTN+0x30>)
 800066c:	f001 fde2 	bl	8002234 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40020000 	.word	0x40020000

0800067c <Auto_Baudrate_Setup>:

static void Auto_Baudrate_Setup(uint32_t PRE[]){
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < 5; i++){
 8000684:	2300      	movs	r3, #0
 8000686:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800068a:	e069      	b.n	8000760 <Auto_Baudrate_Setup+0xe4>
	  if(IRQRX1 == 0 && IRQRX0 == 0){
 800068c:	4b40      	ldr	r3, [pc, #256]	; (8000790 <Auto_Baudrate_Setup+0x114>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d12b      	bne.n	80006ee <Auto_Baudrate_Setup+0x72>
 8000696:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <Auto_Baudrate_Setup+0x118>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d126      	bne.n	80006ee <Auto_Baudrate_Setup+0x72>
		  if(i == 0){
 80006a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10d      	bne.n	80006c4 <Auto_Baudrate_Setup+0x48>
			  MX_CAN1_Init(PRE[0], CAN_MODE_SILENT);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f957 	bl	8000964 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 80006b8:	f000 fe26 	bl	8001308 <HAL_CAN_Start>
			  HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f000 fc23 	bl	8000f08 <HAL_Delay>
		  if(i == 0){
 80006c2:	e048      	b.n	8000756 <Auto_Baudrate_Setup+0xda>
		  }else{
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_0);
//			  HAL_GPIO_LockPin(GPIOD, GPIO_PIN_1);
			  HAL_CAN_Stop(&hcan1);
 80006c4:	4834      	ldr	r0, [pc, #208]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 80006c6:	f000 fe63 	bl	8001390 <HAL_CAN_Stop>
//			  HAL_Delay(100);
			  MX_CAN1_Init(PRE[i], CAN_MODE_SILENT);
 80006ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f942 	bl	8000964 <MX_CAN1_Init>
			  HAL_CAN_Start(&hcan1);
 80006e0:	482d      	ldr	r0, [pc, #180]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 80006e2:	f000 fe11 	bl	8001308 <HAL_CAN_Start>
			  HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f000 fc0e 	bl	8000f08 <HAL_Delay>
		  if(i == 0){
 80006ec:	e033      	b.n	8000756 <Auto_Baudrate_Setup+0xda>
		  }
	  }else{
		  if(IRQRX1 == 1 || IRQRX0 == 1){
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <Auto_Baudrate_Setup+0x114>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d004      	beq.n	8000702 <Auto_Baudrate_Setup+0x86>
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <Auto_Baudrate_Setup+0x118>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d129      	bne.n	8000756 <Auto_Baudrate_Setup+0xda>
			  char str[42];
			  sprintf(str, "BAUDRATE DETECTED WITH PRESCALER OF %ld\n", PRE[i-1]);
 8000702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000706:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800070a:	3b01      	subs	r3, #1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <Auto_Baudrate_Setup+0x120>)
 800071a:	4618      	mov	r0, r3
 800071c:	f007 fdf0 	bl	8008300 <siprintf>
			  CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f007 f975 	bl	8007a24 <CDC_Transmit_FS>
			  HAL_CAN_Stop(&hcan1);
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 800073c:	f000 fe28 	bl	8001390 <HAL_CAN_Stop>
//			  MX_CAN1_Init(PRE[i], CAN_MODE_NORMAL);
			  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
			  HAL_CAN_Init(&hcan1);
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 8000748:	f000 fc02 	bl	8000f50 <HAL_CAN_Init>
			  CAN1_Filter_Config();
 800074c:	f000 f8dc 	bl	8000908 <CAN1_Filter_Config>
			  HAL_CAN_Start(&hcan1);
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <Auto_Baudrate_Setup+0x11c>)
 8000752:	f000 fdd9 	bl	8001308 <HAL_CAN_Start>
  for(i = 0; i < 5; i++){
 8000756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075a:	3301      	adds	r3, #1
 800075c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000764:	2b04      	cmp	r3, #4
 8000766:	d991      	bls.n	800068c <Auto_Baudrate_Setup+0x10>

		  }
	  }
  }

  if(IRQRX1 == 0 && IRQRX0 == 0){
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <Auto_Baudrate_Setup+0x114>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10a      	bne.n	8000788 <Auto_Baudrate_Setup+0x10c>
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <Auto_Baudrate_Setup+0x118>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d105      	bne.n	8000788 <Auto_Baudrate_Setup+0x10c>
	  CDC_Transmit_FS((uint8_t*)"ERROR DETECTING BAUDRATE", 24);
 800077c:	2118      	movs	r1, #24
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Auto_Baudrate_Setup+0x124>)
 8000780:	f007 f950 	bl	8007a24 <CDC_Transmit_FS>
	  Error_Handler();
 8000784:	f000 f99c 	bl	8000ac0 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3738      	adds	r7, #56	; 0x38
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000018f 	.word	0x2000018f
 8000794:	2000018e 	.word	0x2000018e
 8000798:	20000190 	.word	0x20000190
 800079c:	08008d2c 	.word	0x08008d2c
 80007a0:	08008d58 	.word	0x08008d58

080007a4 <Capture_PID_Snapshot>:

static void Capture_PID_Snapshot(void){
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0
	//    **Transmit**
	//  **PIDs Supported**
	  uint32_t mailbox;
	  CAN_TxHeaderTypeDef pHead;
	  pHead.StdId = 0x7DF;
 80007aa:	f240 73df 	movw	r3, #2015	; 0x7df
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
	  pHead.IDE = CAN_ID_STD;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
	  pHead.RTR = CAN_RTR_DATA;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
	  pHead.DLC = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38

	  uint8_t data[] = {0x02, 0x01, 0xFF, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 80007bc:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <Capture_PID_Snapshot+0x84>)
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c6:	e883 0003 	stmia.w	r3, {r0, r1}
	  uint8_t PIDs[] = {0x01, 0x04, 0x05, 0x0b, 0x0c, 0x0d, 0x0f, 0x10, 0x1c, 0x1e, 0x1f, 0x20, 0x21, 0x24, 0x2f, 0x30, 0x31, 0x33, 0x40, 0x41, 0x42, 0x49, 0x4a, 0x4d, 0x4e};
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <Capture_PID_Snapshot+0x88>)
 80007cc:	1d3c      	adds	r4, r7, #4
 80007ce:	461d      	mov	r5, r3
 80007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d8:	c403      	stmia	r4!, {r0, r1}
 80007da:	7022      	strb	r2, [r4, #0]

	  for(uint8_t pid = 0; pid < 25; pid++){
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007e2:	e018      	b.n	8000816 <Capture_PID_Snapshot+0x72>
		  data[2] = PIDs[pid];
 80007e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e8:	3348      	adds	r3, #72	; 0x48
 80007ea:	443b      	add	r3, r7
 80007ec:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80007f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		  HAL_CAN_AddTxMessage(&hcan1, &pHead, data, &mailbox);
 80007f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f8:	f107 0220 	add.w	r2, r7, #32
 80007fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <Capture_PID_Snapshot+0x8c>)
 8000802:	f000 fe0e 	bl	8001422 <HAL_CAN_AddTxMessage>
		  HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f000 fb7e 	bl	8000f08 <HAL_Delay>
	  for(uint8_t pid = 0; pid < 25; pid++){
 800080c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000810:	3301      	adds	r3, #1
 8000812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000816:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800081a:	2b18      	cmp	r3, #24
 800081c:	d9e2      	bls.n	80007e4 <Capture_PID_Snapshot+0x40>
	  }
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3748      	adds	r7, #72	; 0x48
 8000824:	46bd      	mov	sp, r7
 8000826:	bdb0      	pop	{r4, r5, r7, pc}
 8000828:	08008d74 	.word	0x08008d74
 800082c:	08008d7c 	.word	0x08008d7c
 8000830:	20000190 	.word	0x20000190

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 fd7c 	bl	8008340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a27      	ldr	r2, [pc, #156]	; (8000900 <SystemClock_Config+0xcc>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <SystemClock_Config+0xd0>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 ff50 	bl	8003760 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008c6:	f000 f8fb 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f9b1 	bl	8003c50 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f4:	f000 f8e4 	bl	8000ac0 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3750      	adds	r7, #80	; 0x50
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <CAN1_Filter_Config>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */

static void CAN1_Filter_Config(void){
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
	//  **Configure filters**
  CAN_FilterTypeDef filters = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2228      	movs	r2, #40	; 0x28
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f007 fd13 	bl	8008340 <memset>

  filters.FilterActivation = ENABLE;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  filters.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  filters.FilterBank = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  filters.FilterMode = CAN_FILTERMODE_IDMASK;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  filters.FilterScale = CAN_FILTERSCALE_32BIT;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  filters.FilterIdHigh = 0x7E8 << 5;
 800092e:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000932:	603b      	str	r3, [r7, #0]
  filters.FilterIdLow = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  filters.FilterMaskIdHigh = 0x7fd << 5;
 8000938:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 800093c:	60bb      	str	r3, [r7, #8]
  filters.FilterMaskIdLow = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]

  //  memset(&filters, 0, sizeof(CAN_FilterTypeDef));

  if (HAL_CAN_ConfigFilter(&hcan1, &filters) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <CAN1_Filter_Config+0x58>)
 8000948:	f000 fbfe 	bl	8001148 <HAL_CAN_ConfigFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <CAN1_Filter_Config+0x4e>
  {
    Error_Handler();
 8000952:	f000 f8b5 	bl	8000ac0 <Error_Handler>
  }

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000190 	.word	0x20000190

08000964 <MX_CAN1_Init>:

static void MX_CAN1_Init(uint32_t Prescaler, uint32_t Mode)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <MX_CAN1_Init+0x98>)
 8000972:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = Prescaler;
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6053      	str	r3, [r2, #4]
  hcan1.Init.Mode = Mode;
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_CAN1_Init+0x94>)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	6093      	str	r3, [r2, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000988:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800098c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_CAN1_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_CAN1_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009ba:	f000 fac9 	bl	8000f50 <HAL_CAN_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80009c4:	f000 f87c 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  HAL_CAN_ActivateNotification(&hcan1, 0xFFFFFFFFU);
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009ce:	f000 ff15 	bl	80017fc <HAL_CAN_ActivateNotification>

  CAN_FilterTypeDef filters = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2228      	movs	r2, #40	; 0x28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fcb0 	bl	8008340 <memset>
  filters.FilterActivation = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_CAN_ConfigFilter(&hcan1, &filters);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4619      	mov	r1, r3
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <MX_CAN1_Init+0x94>)
 80009ec:	f000 fbac 	bl	8001148 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000190 	.word	0x20000190
 80009fc:	40006400 	.word	0x40006400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0xb4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000a72:	f001 fbdf 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_GPIO_Init+0xbc>)
 8000a8a:	f001 fa1f 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xb8>)
 8000aa8:	f001 fa10 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40020000 	.word	0x40020000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a4e      	ldr	r2, [pc, #312]	; (8000c74 <HAL_CAN_MspInit+0x158>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d14d      	bne.n	8000bda <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b3e:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000b46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10d      	bne.n	8000b6c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a48      	ldr	r2, [pc, #288]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a41      	ldr	r2, [pc, #260]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0308 	and.w	r3, r3, #8
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b98:	2309      	movs	r3, #9
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4837      	ldr	r0, [pc, #220]	; (8000c80 <HAL_CAN_MspInit+0x164>)
 8000ba4:	f001 f992 	bl	8001ecc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2013      	movs	r0, #19
 8000bae:	f001 f956 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	f001 f96f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2014      	movs	r0, #20
 8000bbe:	f001 f94e 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bc2:	2014      	movs	r0, #20
 8000bc4:	f001 f967 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2015      	movs	r0, #21
 8000bce:	f001 f946 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bd2:	2015      	movs	r0, #21
 8000bd4:	f001 f95f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bd8:	e048      	b.n	8000c6c <HAL_CAN_MspInit+0x150>
  else if(hcan->Instance==CAN2)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <HAL_CAN_MspInit+0x168>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d143      	bne.n	8000c6c <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000c08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_CAN_MspInit+0x15c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10d      	bne.n	8000c2e <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_CAN_MspInit+0x160>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4808      	ldr	r0, [pc, #32]	; (8000c88 <HAL_CAN_MspInit+0x16c>)
 8000c68:	f001 f930 	bl	8001ecc <HAL_GPIO_Init>
}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40006400 	.word	0x40006400
 8000c78:	200001b8 	.word	0x200001b8
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40006800 	.word	0x40006800
 8000c88:	40020400 	.word	0x40020400

08000c8c <NMI_Handler>:
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f000 f8f6 	bl	8000ec8 <HAL_IncTick>
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <CAN1_TX_IRQHandler>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <CAN1_TX_IRQHandler+0x10>)
 8000ce6:	f000 fdaf 	bl	8001848 <HAL_CAN_IRQHandler>
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <CAN1_RX0_IRQHandler>:
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <CAN1_RX0_IRQHandler+0x14>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <CAN1_RX0_IRQHandler+0x18>)
 8000d00:	f000 fda2 	bl	8001848 <HAL_CAN_IRQHandler>
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000018e 	.word	0x2000018e
 8000d0c:	20000190 	.word	0x20000190

08000d10 <CAN1_RX1_IRQHandler>:
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <CAN1_RX1_IRQHandler+0x14>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <CAN1_RX1_IRQHandler+0x18>)
 8000d1c:	f000 fd94 	bl	8001848 <HAL_CAN_IRQHandler>
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000018f 	.word	0x2000018f
 8000d28:	20000190 	.word	0x20000190

08000d2c <OTG_FS_IRQHandler>:
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <OTG_FS_IRQHandler+0x10>)
 8000d32:	f001 fbe8 	bl	8002506 <HAL_PCD_IRQHandler>
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200016a4 	.word	0x200016a4

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f007 faee 	bl	8008350 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20020000 	.word	0x20020000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200001bc 	.word	0x200001bc
 8000da8:	20001f18 	.word	0x20001f18

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f007 faad 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc03 	bl	800060c <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000e14:	08008e34 	.word	0x08008e34
  ldr r2, =_sbss
 8000e18:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e1c:	20001f18 	.word	0x20001f18

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fffb 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe38 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 f813 	bl	8001eb2 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 ffdb 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200001c0 	.word	0x200001c0

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001c0 	.word	0x200001c0

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_CAN_Init>:
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_CAN_Init+0x12>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0ed      	b.n	800113e <HAL_CAN_Init+0x1ee>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_CAN_Init+0x24>
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fdd4 	bl	8000b1c <HAL_CAN_MspInit>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	f7ff ffb4 	bl	8000ef0 <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	e012      	b.n	8000fb2 <HAL_CAN_Init+0x62>
 8000f8c:	f7ff ffb0 	bl	8000ef0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d90b      	bls.n	8000fb2 <HAL_CAN_Init+0x62>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0c5      	b.n	800113e <HAL_CAN_Init+0x1ee>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0e5      	beq.n	8000f8c <HAL_CAN_Init+0x3c>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0202 	bic.w	r2, r2, #2
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <HAL_GetTick>
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	e012      	b.n	8000ffe <HAL_CAN_Init+0xae>
 8000fd8:	f7ff ff8a 	bl	8000ef0 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b0a      	cmp	r3, #10
 8000fe4:	d90b      	bls.n	8000ffe <HAL_CAN_Init+0xae>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e09f      	b.n	800113e <HAL_CAN_Init+0x1ee>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e5      	bne.n	8000fd8 <HAL_CAN_Init+0x88>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e1b      	ldrb	r3, [r3, #24]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0xd6>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0xe6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e5b      	ldrb	r3, [r3, #25]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x100>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x110>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e9b      	ldrb	r3, [r3, #26]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0x12a>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0x13a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0220 	bic.w	r2, r2, #32
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7edb      	ldrb	r3, [r3, #27]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x154>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0210 	bic.w	r2, r2, #16
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x164>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0210 	orr.w	r2, r2, #16
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7f1b      	ldrb	r3, [r3, #28]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0x17e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0208 	orr.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0x18e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0208 	bic.w	r2, r2, #8
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7f5b      	ldrb	r3, [r3, #29]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x1a8>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0204 	orr.w	r2, r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x1b8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0204 	bic.w	r2, r2, #4
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	ea42 0103 	orr.w	r1, r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	61da      	str	r2, [r3, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
 800113c:	2300      	movs	r3, #0
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_CAN_ConfigFilter>:
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115e:	74fb      	strb	r3, [r7, #19]
 8001160:	7cfb      	ldrb	r3, [r7, #19]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d003      	beq.n	800116e <HAL_CAN_ConfigFilter+0x26>
 8001166:	7cfb      	ldrb	r3, [r7, #19]
 8001168:	2b02      	cmp	r3, #2
 800116a:	f040 80be 	bne.w	80012ea <HAL_CAN_ConfigFilter+0x1a2>
 800116e:	4b65      	ldr	r3, [pc, #404]	; (8001304 <HAL_CAN_ConfigFilter+0x1bc>)
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001178:	f043 0201 	orr.w	r2, r3, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001188:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	431a      	orrs	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2201      	movs	r2, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d123      	bne.n	8001218 <HAL_CAN_ConfigFilter+0xd0>
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	0419      	lsls	r1, r3, #16
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6952      	ldr	r2, [r2, #20]
 80011f2:	4319      	orrs	r1, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3248      	adds	r2, #72	; 0x48
 80011f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	0419      	lsls	r1, r3, #16
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	430a      	orrs	r2, r1
 800120e:	6979      	ldr	r1, [r7, #20]
 8001210:	3348      	adds	r3, #72	; 0x48
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d122      	bne.n	8001266 <HAL_CAN_ConfigFilter+0x11e>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0419      	lsls	r1, r3, #16
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	6952      	ldr	r2, [r2, #20]
 8001240:	4319      	orrs	r1, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3248      	adds	r2, #72	; 0x48
 8001246:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	0419      	lsls	r1, r3, #16
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	b29a      	uxth	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	430a      	orrs	r2, r1
 800125c:	6979      	ldr	r1, [r7, #20]
 800125e:	3348      	adds	r3, #72	; 0x48
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_CAN_ConfigFilter+0x13a>
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	401a      	ands	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001280:	e007      	b.n	8001292 <HAL_CAN_ConfigFilter+0x14a>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_CAN_ConfigFilter+0x166>
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012ac:	e007      	b.n	80012be <HAL_CAN_ConfigFilter+0x176>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_CAN_ConfigFilter+0x18e>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012dc:	f023 0201 	bic.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80012e6:	2300      	movs	r3, #0
 80012e8:	e006      	b.n	80012f8 <HAL_CAN_ConfigFilter+0x1b0>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
 80012f6:	2301      	movs	r3, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_Start>:
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d12e      	bne.n	800137a <HAL_CAN_Start+0x72>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2020 	strb.w	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	f7ff fddc 	bl	8000ef0 <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	e012      	b.n	8001362 <HAL_CAN_Start+0x5a>
 800133c:	f7ff fdd8 	bl	8000ef0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d90b      	bls.n	8001362 <HAL_CAN_Start+0x5a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
 800135e:	2301      	movs	r3, #1
 8001360:	e012      	b.n	8001388 <HAL_CAN_Start+0x80>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e5      	bne.n	800133c <HAL_CAN_Start+0x34>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
 8001376:	2300      	movs	r3, #0
 8001378:	e006      	b.n	8001388 <HAL_CAN_Start+0x80>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	2301      	movs	r3, #1
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_CAN_Stop>:
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d133      	bne.n	800140c <HAL_CAN_Stop+0x7c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f7ff fd9c 	bl	8000ef0 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	e012      	b.n	80013e2 <HAL_CAN_Stop+0x52>
 80013bc:	f7ff fd98 	bl	8000ef0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b0a      	cmp	r3, #10
 80013c8:	d90b      	bls.n	80013e2 <HAL_CAN_Stop+0x52>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2205      	movs	r2, #5
 80013da:	f883 2020 	strb.w	r2, [r3, #32]
 80013de:	2301      	movs	r3, #1
 80013e0:	e01b      	b.n	800141a <HAL_CAN_Stop+0x8a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0e5      	beq.n	80013bc <HAL_CAN_Stop+0x2c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0202 	bic.w	r2, r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
 8001408:	2300      	movs	r3, #0
 800140a:	e006      	b.n	800141a <HAL_CAN_Stop+0x8a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
 8001418:	2301      	movs	r3, #1
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_CAN_AddTxMessage>:
 8001422:	b480      	push	{r7}
 8001424:	b089      	sub	sp, #36	; 0x24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001436:	77fb      	strb	r3, [r7, #31]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	7ffb      	ldrb	r3, [r7, #31]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d003      	beq.n	800144e <HAL_CAN_AddTxMessage+0x2c>
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b02      	cmp	r3, #2
 800144a:	f040 80b8 	bne.w	80015be <HAL_CAN_AddTxMessage+0x19c>
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10a      	bne.n	800146e <HAL_CAN_AddTxMessage+0x4c>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_CAN_AddTxMessage+0x4c>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_CAN_AddTxMessage+0x18c>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	0e1b      	lsrs	r3, r3, #24
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d907      	bls.n	800148e <HAL_CAN_AddTxMessage+0x6c>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
 800148a:	2301      	movs	r3, #1
 800148c:	e09e      	b.n	80015cc <HAL_CAN_AddTxMessage+0x1aa>
 800148e:	2201      	movs	r2, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10d      	bne.n	80014bc <HAL_CAN_AddTxMessage+0x9a>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	055a      	lsls	r2, r3, #21
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	6809      	ldr	r1, [r1, #0]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3318      	adds	r3, #24
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00f      	b.n	80014dc <HAL_CAN_AddTxMessage+0xba>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	68f9      	ldr	r1, [r7, #12]
 80014ce:	6809      	ldr	r1, [r1, #0]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3318      	adds	r3, #24
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	440b      	add	r3, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3318      	adds	r3, #24
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	7d1b      	ldrb	r3, [r3, #20]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d111      	bne.n	800151c <HAL_CAN_AddTxMessage+0xfa>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3318      	adds	r3, #24
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3318      	adds	r3, #24
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3307      	adds	r3, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	061a      	lsls	r2, r3, #24
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3306      	adds	r3, #6
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3305      	adds	r3, #5
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	3204      	adds	r2, #4
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	4610      	mov	r0, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6811      	ldr	r1, [r2, #0]
 8001544:	ea43 0200 	orr.w	r2, r3, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	440b      	add	r3, r1
 800154e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3303      	adds	r3, #3
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	061a      	lsls	r2, r3, #24
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3302      	adds	r3, #2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4313      	orrs	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4610      	mov	r0, r2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	ea43 0200 	orr.w	r2, r3, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	440b      	add	r3, r1
 8001584:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3318      	adds	r3, #24
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6811      	ldr	r1, [r2, #0]
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3318      	adds	r3, #24
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	440b      	add	r3, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	e00e      	b.n	80015cc <HAL_CAN_AddTxMessage+0x1aa>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
 80015ba:	2301      	movs	r3, #1
 80015bc:	e006      	b.n	80015cc <HAL_CAN_AddTxMessage+0x1aa>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
 80015ca:	2301      	movs	r3, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_GetRxMessage>:
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	75fb      	strb	r3, [r7, #23]
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d003      	beq.n	80015fc <HAL_CAN_GetRxMessage+0x24>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f040 80f3 	bne.w	80017e2 <HAL_CAN_GetRxMessage+0x20a>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10e      	bne.n	8001620 <HAL_CAN_GetRxMessage+0x48>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d116      	bne.n	800163e <HAL_CAN_GetRxMessage+0x66>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
 800161c:	2301      	movs	r3, #1
 800161e:	e0e7      	b.n	80017f0 <HAL_CAN_GetRxMessage+0x218>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <HAL_CAN_GetRxMessage+0x66>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
 800163a:	2301      	movs	r3, #1
 800163c:	e0d8      	b.n	80017f0 <HAL_CAN_GetRxMessage+0x218>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	331b      	adds	r3, #27
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0204 	and.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_CAN_GetRxMessage+0x9e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	331b      	adds	r3, #27
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0d5b      	lsrs	r3, r3, #21
 800166c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e00b      	b.n	800168e <HAL_CAN_GetRxMessage+0xb6>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	331b      	adds	r3, #27
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	331b      	adds	r3, #27
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0202 	and.w	r2, r3, #2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	331b      	adds	r3, #27
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	3304      	adds	r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 020f 	and.w	r2, r3, #15
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	331b      	adds	r3, #27
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	3304      	adds	r3, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	331b      	adds	r3, #27
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0a1a      	lsrs	r2, r3, #8
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0c1a      	lsrs	r2, r3, #16
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3302      	adds	r3, #2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0e1a      	lsrs	r2, r3, #24
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3303      	adds	r3, #3
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3304      	adds	r3, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0a1a      	lsrs	r2, r3, #8
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	3305      	adds	r3, #5
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0c1a      	lsrs	r2, r3, #16
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3306      	adds	r3, #6
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e1a      	lsrs	r2, r3, #24
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	3307      	adds	r3, #7
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_GetRxMessage+0x1f6>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0220 	orr.w	r2, r2, #32
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	e007      	b.n	80017de <HAL_CAN_GetRxMessage+0x206>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0220 	orr.w	r2, r2, #32
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	2300      	movs	r3, #0
 80017e0:	e006      	b.n	80017f0 <HAL_CAN_GetRxMessage+0x218>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
 80017ee:	2301      	movs	r3, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_CAN_ActivateNotification>:
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <HAL_CAN_ActivateNotification+0x1e>
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d109      	bne.n	800182e <HAL_CAN_ActivateNotification+0x32>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6959      	ldr	r1, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	e006      	b.n	800183c <HAL_CAN_ActivateNotification+0x40>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
 800183a:	2301      	movs	r3, #1
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_IRQHandler>:
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d07c      	beq.n	8001988 <HAL_CAN_IRQHandler+0x140>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d023      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x98>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x6a>
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f983 	bl	8001bb6 <HAL_CAN_TxMailbox0CompleteCallback>
 80018b0:	e016      	b.n	80018e0 <HAL_CAN_IRQHandler+0x98>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x7e>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
 80018c4:	e00c      	b.n	80018e0 <HAL_CAN_IRQHandler+0x98>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_CAN_IRQHandler+0x92>
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e002      	b.n	80018e0 <HAL_CAN_IRQHandler+0x98>
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f989 	bl	8001bf2 <HAL_CAN_TxMailbox0AbortCallback>
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_CAN_IRQHandler+0xec>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_IRQHandler+0xbe>
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f963 	bl	8001bca <HAL_CAN_TxMailbox1CompleteCallback>
 8001904:	e016      	b.n	8001934 <HAL_CAN_IRQHandler+0xec>
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_CAN_IRQHandler+0xd2>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
 8001918:	e00c      	b.n	8001934 <HAL_CAN_IRQHandler+0xec>
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_CAN_IRQHandler+0xe6>
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e002      	b.n	8001934 <HAL_CAN_IRQHandler+0xec>
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f969 	bl	8001c06 <HAL_CAN_TxMailbox1AbortCallback>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d024      	beq.n	8001988 <HAL_CAN_IRQHandler+0x140>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_CAN_IRQHandler+0x112>
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f943 	bl	8001bde <HAL_CAN_TxMailbox2CompleteCallback>
 8001958:	e016      	b.n	8001988 <HAL_CAN_IRQHandler+0x140>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_CAN_IRQHandler+0x126>
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
 800196c:	e00c      	b.n	8001988 <HAL_CAN_IRQHandler+0x140>
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <HAL_CAN_IRQHandler+0x13a>
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e002      	b.n	8001988 <HAL_CAN_IRQHandler+0x140>
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f949 	bl	8001c1a <HAL_CAN_TxMailbox2AbortCallback>
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_CAN_IRQHandler+0x164>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_CAN_IRQHandler+0x164>
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2210      	movs	r2, #16
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_CAN_IRQHandler+0x186>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_CAN_IRQHandler+0x186>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2208      	movs	r2, #8
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f930 	bl	8001c2e <HAL_CAN_RxFifo0FullCallback>
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_CAN_IRQHandler+0x1a4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <HAL_CAN_IRQHandler+0x1a4>
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fdc8 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x1c8>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x1c8>
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x1ea>
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x1ea>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f912 	bl	8001c56 <HAL_CAN_RxFifo1FullCallback>
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x208>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x208>
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8f9 	bl	8001c42 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x22a>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x22a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f8fc 	bl	8001c6a <HAL_CAN_SleepCallback>
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x24c>
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x24c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8f5 	bl	8001c7e <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d07b      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x34e>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d072      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x346>
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x27c>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x27c>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x298>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x298>
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_CAN_IRQHandler+0x2b4>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_CAN_IRQHandler+0x2b4>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d043      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x346>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03e      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x346>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b16:	2b60      	cmp	r3, #96	; 0x60
 8001b18:	d02b      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x32a>
 8001b1a:	2b60      	cmp	r3, #96	; 0x60
 8001b1c:	d82e      	bhi.n	8001b7c <HAL_CAN_IRQHandler+0x334>
 8001b1e:	2b50      	cmp	r3, #80	; 0x50
 8001b20:	d022      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x320>
 8001b22:	2b50      	cmp	r3, #80	; 0x50
 8001b24:	d82a      	bhi.n	8001b7c <HAL_CAN_IRQHandler+0x334>
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d019      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x316>
 8001b2a:	2b40      	cmp	r3, #64	; 0x40
 8001b2c:	d826      	bhi.n	8001b7c <HAL_CAN_IRQHandler+0x334>
 8001b2e:	2b30      	cmp	r3, #48	; 0x30
 8001b30:	d010      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x30c>
 8001b32:	2b30      	cmp	r3, #48	; 0x30
 8001b34:	d822      	bhi.n	8001b7c <HAL_CAN_IRQHandler+0x334>
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d002      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x2f8>
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d005      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x302>
 8001b3e:	e01d      	b.n	8001b7c <HAL_CAN_IRQHandler+0x334>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	e019      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e014      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	e00f      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00a      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e005      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e000      	b.n	8001b7e <HAL_CAN_IRQHandler+0x336>
 8001b7c:	bf00      	nop
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b8c:	619a      	str	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_CAN_IRQHandler+0x366>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f872 	bl	8001c92 <HAL_CAN_ErrorCallback>
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_CAN_TxMailbox1CompleteCallback>:
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_CAN_TxMailbox2CompleteCallback>:
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_CAN_TxMailbox0AbortCallback>:
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_TxMailbox1AbortCallback>:
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_CAN_TxMailbox2AbortCallback>:
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_CAN_RxFifo0FullCallback>:
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_RxFifo1FullCallback>:
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_CAN_SleepCallback>:
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_ErrorCallback>:
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5b      	ldr	r2, [pc, #364]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_GPIO_Init+0x314>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x318>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x324>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x328>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x32c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x330>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a32      	ldr	r2, [pc, #200]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_GPIO_Init+0x334>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40021c00 	.word	0x40021c00
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002268:	b08f      	sub	sp, #60	; 0x3c
 800226a:	af0a      	add	r7, sp, #40	; 0x28
 800226c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e10f      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fd0e 	bl	8007cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2203      	movs	r2, #3
 800229c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 ffd7 	bl	800426a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	687e      	ldr	r6, [r7, #4]
 80022c4:	466d      	mov	r5, sp
 80022c6:	f106 0410 	add.w	r4, r6, #16
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022da:	1d33      	adds	r3, r6, #4
 80022dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	f001 feae 	bl	8004040 <USB_CoreInit>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0d0      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 ffc5 	bl	800428c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e04a      	b.n	800239e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	333d      	adds	r3, #61	; 0x3d
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	333c      	adds	r3, #60	; 0x3c
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	b298      	uxth	r0, r3
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3344      	adds	r3, #68	; 0x44
 8002344:	4602      	mov	r2, r0
 8002346:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3340      	adds	r3, #64	; 0x40
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3348      	adds	r3, #72	; 0x48
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	334c      	adds	r3, #76	; 0x4c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3354      	adds	r3, #84	; 0x54
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3301      	adds	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3af      	bcc.n	8002308 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e044      	b.n	8002438 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3b5      	bcc.n	80023ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	687e      	ldr	r6, [r7, #4]
 800244a:	466d      	mov	r5, sp
 800244c:	f106 0410 	add.w	r4, r6, #16
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002460:	1d33      	adds	r3, r6, #4
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f001 ff5d 	bl	8004324 <USB_DevInit>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e00d      	b.n	8002498 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f8ac 	bl	80055ee <USB_DevDisconnect>

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_Start+0x1c>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e020      	b.n	80024fe <HAL_PCD_Start+0x5e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d109      	bne.n	80024e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d005      	beq.n	80024e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 feaf 	bl	8004248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f85c 	bl	80055ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b08d      	sub	sp, #52	; 0x34
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 f91a 	bl	8005756 <USB_GetMode>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 848a 	bne.w	8002e3e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f87e 	bl	8005630 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8480 	beq.w	8002e3c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f86b 	bl	8005630 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	d107      	bne.n	8002574 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f002 0202 	and.w	r2, r2, #2
 8002572:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 f859 	bl	8005630 <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d161      	bne.n	800264c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0210 	bic.w	r2, r2, #16
 8002596:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	0c5b      	lsrs	r3, r3, #17
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d124      	bne.n	800260e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d035      	beq.n	800263c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	6a38      	ldr	r0, [r7, #32]
 80025e4:	f002 fe90 	bl	8005308 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f4:	441a      	add	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002606:	441a      	add	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	621a      	str	r2, [r3, #32]
 800260c:	e016      	b.n	800263c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	0c5b      	lsrs	r3, r3, #17
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	2b06      	cmp	r3, #6
 8002618:	d110      	bne.n	800263c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002620:	2208      	movs	r2, #8
 8002622:	4619      	mov	r1, r3
 8002624:	6a38      	ldr	r0, [r7, #32]
 8002626:	f002 fe6f 	bl	8005308 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002636:	441a      	add	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0210 	orr.w	r2, r2, #16
 800264a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 ffed 	bl	8005630 <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002660:	f040 80a7 	bne.w	80027b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fff2 	bl	8005656 <USB_ReadDevAllOutEpInterrupt>
 8002672:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002674:	e099      	b.n	80027aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 808e 	beq.w	800279e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f816 	bl	80056be <USB_ReadDevOutEPInterrupt>
 8002692:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026aa:	461a      	mov	r2, r3
 80026ac:	2301      	movs	r3, #1
 80026ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fec2 	bl	800343c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	461a      	mov	r2, r3
 80026d0:	2308      	movs	r3, #8
 80026d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 ff98 	bl	800360c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	2310      	movs	r3, #16
 80026f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d030      	beq.n	8002764 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d109      	bne.n	8002722 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002720:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f005 fbc9 	bl	8007ee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2302      	movs	r3, #2
 8002762:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	461a      	mov	r2, r3
 800277c:	2320      	movs	r3, #32
 800277e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002796:	461a      	mov	r2, r3
 8002798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3301      	adds	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f af62 	bne.w	8002676 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 ff3a 	bl	8005630 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c6:	f040 80db 	bne.w	8002980 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 ff5b 	bl	800568a <USB_ReadDevAllInEpInterrupt>
 80027d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027da:	e0cd      	b.n	8002978 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80c2 	beq.w	800296c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 ff81 	bl	80056fa <USB_ReadDevInEPInterrupt>
 80027f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d057      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	2201      	movs	r2, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002824:	4013      	ands	r3, r2
 8002826:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002834:	461a      	mov	r2, r3
 8002836:	2301      	movs	r3, #1
 8002838:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d132      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334c      	adds	r3, #76	; 0x4c
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4403      	add	r3, r0
 8002862:	3348      	adds	r3, #72	; 0x48
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4419      	add	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4403      	add	r3, r0
 8002876:	334c      	adds	r3, #76	; 0x4c
 8002878:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x3a2>
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3354      	adds	r3, #84	; 0x54
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028a0:	461a      	mov	r2, r3
 80028a2:	2101      	movs	r1, #1
 80028a4:	f002 ff88 	bl	80057b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f005 fa93 	bl	8007dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ca:	461a      	mov	r2, r3
 80028cc:	2308      	movs	r3, #8
 80028ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e6:	461a      	mov	r2, r3
 80028e8:	2310      	movs	r3, #16
 80028ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002902:	461a      	mov	r2, r3
 8002904:	2340      	movs	r3, #64	; 0x40
 8002906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d023      	beq.n	800295a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f001 fe69 	bl	80045ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	3338      	adds	r3, #56	; 0x38
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f005 fae0 	bl	8007f08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002954:	461a      	mov	r2, r3
 8002956:	2302      	movs	r3, #2
 8002958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fcdb 	bl	8003322 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	f47f af2e 	bne.w	80027dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fe53 	bl	8005630 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002994:	d122      	bne.n	80029dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029bc:	2100      	movs	r1, #0
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fec2 	bl	8003748 <HAL_PCDEx_LPM_Callback>
 80029c4:	e002      	b.n	80029cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 fa7e 	bl	8007ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fe25 	bl	8005630 <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f0:	d112      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d102      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f005 fa3a 	bl	8007e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fe07 	bl	8005630 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	f040 80b7 	bne.w	8002b9e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2110      	movs	r1, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fdce 	bl	80045ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	e046      	b.n	8002ae4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a62:	461a      	mov	r2, r3
 8002a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	461a      	mov	r2, r3
 8002a98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aae:	0151      	lsls	r1, r2, #5
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002abc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002adc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3b3      	bcc.n	8002a56 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1a:	f043 030b 	orr.w	r3, r3, #11
 8002b1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b30:	f043 030b 	orr.w	r3, r3, #11
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	e015      	b.n	8002b64 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b4a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b5e:	f043 030b 	orr.w	r3, r3, #11
 8002b62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f002 fe15 	bl	80057b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fd44 	bl	8005630 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	d124      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fdda 	bl	8005772 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd8f 	bl	80046e6 <USB_GetDevSpeed>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681c      	ldr	r4, [r3, #0]
 8002bd4:	f001 fa28 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4620      	mov	r0, r4
 8002be4:	f001 fa8e 	bl	8004104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 f91e 	bl	8007e2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fd14 	bl	8005630 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d10a      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f005 f8fb 	bl	8007e0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f002 0208 	and.w	r2, r2, #8
 8002c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fcff 	bl	8005630 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d122      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e014      	b.n	8002c78 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fb27 	bl	80032c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	3301      	adds	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3e5      	bcc.n	8002c4e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fcd2 	bl	8005630 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c96:	d13b      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c98:	2301      	movs	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e02b      	b.n	8002cf6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3340      	adds	r3, #64	; 0x40
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d115      	bne.n	8002cf0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da12      	bge.n	8002cf0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	333f      	adds	r3, #63	; 0x3f
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fae8 	bl	80032c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3ce      	bcc.n	8002c9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fc8b 	bl	8005630 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d24:	d155      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d26:	2301      	movs	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2a:	e045      	b.n	8002db8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d12e      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da2b      	bge.n	8002db2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d121      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6053      	str	r3, [r2, #4]
            break;
 8002db0:	e007      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	3301      	adds	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3b4      	bcc.n	8002d2c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fc2a 	bl	8005630 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d10a      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f005 f89f 	bl	8007f2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fc14 	bl	8005630 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d115      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f005 f88f 	bl	8007f48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	e000      	b.n	8002e3e <HAL_PCD_IRQHandler+0x938>
      return;
 8002e3c:	bf00      	nop
    }
  }
}
 8002e3e:	3734      	adds	r7, #52	; 0x34
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_PCD_SetAddress+0x1a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e013      	b.n	8002e86 <HAL_PCD_SetAddress+0x42>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fb72 	bl	8005560 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	4608      	mov	r0, r1
 8002e98:	4611      	mov	r1, r2
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	70fb      	strb	r3, [r7, #3]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	803b      	strh	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da0f      	bge.n	8002ed4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	3338      	adds	r3, #56	; 0x38
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	705a      	strb	r2, [r3, #1]
 8002ed2:	e00f      	b.n	8002ef4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f00:	883a      	ldrh	r2, [r7, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	78ba      	ldrb	r2, [r7, #2]
 8002f0a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f1e:	78bb      	ldrb	r3, [r7, #2]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d102      	bne.n	8002f2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_PCD_EP_Open+0xaa>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e00e      	b.n	8002f56 <HAL_PCD_EP_Open+0xc8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fbf2 	bl	8004730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f54:	7afb      	ldrb	r3, [r7, #11]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	3338      	adds	r3, #56	; 0x38
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_PCD_EP_Close+0x6e>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_Close+0x8c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fc30 	bl	8004840 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	460b      	mov	r3, r1
 8003000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	b2da      	uxtb	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	f001 ff0f 	bl	8004e88 <USB_EP0StartXfer>
 800306a:	e008      	b.n	800307e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	f001 fcbd 	bl	80049f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	460b      	mov	r3, r1
 80030c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	7afb      	ldrb	r3, [r7, #11]
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	3338      	adds	r3, #56	; 0x38
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2201      	movs	r2, #1
 80030f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	f001 fead 	bl	8004e88 <USB_EP0StartXfer>
 800312e:	e008      	b.n	8003142 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	f001 fc5b 	bl	80049f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d901      	bls.n	800316a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e050      	b.n	800320c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	da0f      	bge.n	8003192 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	3338      	adds	r3, #56	; 0x38
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	705a      	strb	r2, [r3, #1]
 8003190:	e00d      	b.n	80031ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4413      	add	r3, r2
 80031a4:	3304      	adds	r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_PCD_EP_SetStall+0x82>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e01e      	b.n	800320c <HAL_PCD_EP_SetStall+0xc0>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 f8eb 	bl	80053b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	b2d9      	uxtb	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031fc:	461a      	mov	r2, r3
 80031fe:	f002 fadb 	bl	80057b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d901      	bls.n	8003232 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e042      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0f      	bge.n	800325a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3338      	adds	r3, #56	; 0x38
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	705a      	strb	r2, [r3, #1]
 8003258:	e00f      	b.n	800327a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_ClrStall+0x86>
 8003296:	2302      	movs	r3, #2
 8003298:	e00e      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f8f3 	bl	8005494 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da0c      	bge.n	80032ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	3338      	adds	r3, #56	; 0x38
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e00c      	b.n	8003308 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	3304      	adds	r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f001 ff12 	bl	8005138 <USB_EPStopXfer>
 8003314:	4603      	mov	r3, r0
 8003316:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003318:	7afb      	ldrb	r3, [r7, #11]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08a      	sub	sp, #40	; 0x28
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3338      	adds	r3, #56	; 0x38
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	429a      	cmp	r2, r3
 8003354:	d901      	bls.n	800335a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06c      	b.n	8003434 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3303      	adds	r3, #3
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337e:	e02b      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	429a      	cmp	r2, r3
 8003394:	d902      	bls.n	800339c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	3303      	adds	r3, #3
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6919      	ldr	r1, [r3, #16]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4603      	mov	r3, r0
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f001 ff66 	bl	800528c <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d809      	bhi.n	8003402 <PCD_WriteEmptyTxFifo+0xe0>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d203      	bcs.n	8003402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1be      	bne.n	8003380 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	429a      	cmp	r2, r3
 800340c:	d811      	bhi.n	8003432 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2201      	movs	r2, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	43db      	mvns	r3, r3
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342e:	4013      	ands	r3, r2
 8003430:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	333c      	adds	r3, #60	; 0x3c
 8003454:	3304      	adds	r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d17b      	bne.n	800356a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d015      	beq.n	80034a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4a61      	ldr	r2, [pc, #388]	; (8003604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f240 80b9 	bls.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80b3 	beq.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	e0a7      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	2320      	movs	r3, #32
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e098      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8093 	bne.w	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d90f      	bls.n	80034fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f0:	461a      	mov	r2, r3
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	6093      	str	r3, [r2, #8]
 80034f8:	e07e      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	3304      	adds	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	440b      	add	r3, r1
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	1ad2      	subs	r2, r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d114      	bne.n	800355c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003544:	461a      	mov	r2, r3
 8003546:	2101      	movs	r1, #1
 8003548:	f002 f936 	bl	80057b8 <USB_EP0_OutStart>
 800354c:	e006      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	441a      	add	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f004 fc1e 	bl	8007da4 <HAL_PCD_DataOutStageCallback>
 8003568:	e046      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d124      	bne.n	80035bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	e032      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	2320      	movs	r3, #32
 80035ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f004 fbf5 	bl	8007da4 <HAL_PCD_DataOutStageCallback>
 80035ba:	e01d      	b.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d114      	bne.n	80035ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e4:	461a      	mov	r2, r3
 80035e6:	2100      	movs	r1, #0
 80035e8:	f002 f8e6 	bl	80057b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f004 fbd6 	bl	8007da4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	4f54300a 	.word	0x4f54300a
 8003608:	4f54310a 	.word	0x4f54310a

0800360c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	333c      	adds	r3, #60	; 0x3c
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90e      	bls.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f004 fb8d 	bl	8007d80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <PCD_EP_OutSetupPacket_int+0x88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d90c      	bls.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f002 f898 	bl	80057b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	4f54300a 	.word	0x4f54300a

08003698 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
 80036a4:	4613      	mov	r3, r2
 80036a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	0419      	lsls	r1, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
 80036c4:	e028      	b.n	8003718 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e00d      	b.n	80036f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3340      	adds	r3, #64	; 0x40
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	3301      	adds	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d3ec      	bcc.n	80036da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003700:	883b      	ldrh	r3, [r7, #0]
 8003702:	0418      	lsls	r0, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	3b01      	subs	r3, #1
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4302      	orrs	r2, r0
 8003710:	3340      	adds	r3, #64	; 0x40
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e267      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d075      	beq.n	800386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378a:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d112      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b82      	ldr	r3, [pc, #520]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05b      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d157      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e242      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x98>
 80037de:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6f      	ldr	r2, [pc, #444]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fd fb6a 	bl	8000ef0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7fd fb66 	bl	8000ef0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e207      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xc0>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fb56 	bl	8000ef0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fd fb52 	bl	8000ef0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1f3      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1c7      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fd fb0b 	bl	8000ef0 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7fd fb07 	bl	8000ef0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1a8      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4925      	ldr	r1, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fd faea 	bl	8000ef0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003920:	f7fd fae6 	bl	8000ef0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e187      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd faca 	bl	8000ef0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7fd fac6 	bl	8000ef0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e167      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7fd fab3 	bl	8000ef0 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7fd faaf 	bl	8000ef0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e150      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a73      	ldr	r2, [pc, #460]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fd fa6f 	bl	8000ef0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fd fa6b 	bl	8000ef0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e10c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x2ea>
 8003a3c:	4b64      	ldr	r3, [pc, #400]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x30c>
 8003a52:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5b      	ldr	r2, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a6c:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a57      	ldr	r2, [pc, #348]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fa30 	bl	8000ef0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fd fa2c 	bl	8000ef0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0cb      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCC_OscConfig+0x334>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fa1a 	bl	8000ef0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fa16 	bl	8000ef0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0b5      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a1 	beq.w	8003c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d05c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d141      	bne.n	8003b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd f9ea 	bl	8000ef0 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd f9e6 	bl	8000ef0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e087      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fd f9bf 	bl	8000ef0 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fd f9bb 	bl	8000ef0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e05c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x416>
 8003b94:	e054      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd f9a8 	bl	8000ef0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd f9a4 	bl	8000ef0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e045      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x444>
 8003bc2:	e03d      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e038      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d028      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d121      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d11a      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d111      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0cc      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d90c      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b8      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cbc:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a52      	ldr	r2, [pc, #328]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	494d      	ldr	r1, [pc, #308]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d044      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e067      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4934      	ldr	r1, [pc, #208]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fd f8d6 	bl	8000ef0 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fd f8d2 	bl	8000ef0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d20c      	bcs.n	8003d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e032      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4916      	ldr	r1, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	490e      	ldr	r1, [pc, #56]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dd6:	f000 f821 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	490a      	ldr	r1, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	5ccb      	ldrb	r3, [r1, r3]
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd f836 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023c00 	.word	0x40023c00
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08008de0 	.word	0x08008de0
 8003e14:	20000000 	.word	0x20000000
 8003e18:	20000004 	.word	0x20000004

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b094      	sub	sp, #80	; 0x50
 8003e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	2300      	movs	r3, #0
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d00d      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x40>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	f200 80e1 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e4e:	e0db      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b73      	ldr	r3, [pc, #460]	; (8004020 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e54:	e0db      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5a:	e0d8      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	0159      	lsls	r1, r3, #5
 8003e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea0:	0150      	lsls	r0, r2, #5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	1a51      	subs	r1, r2, r1
 8003eaa:	6139      	str	r1, [r7, #16]
 8003eac:	4629      	mov	r1, r5
 8003eae:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eca:	4651      	mov	r1, sl
 8003ecc:	018a      	lsls	r2, r1, #6
 8003ece:	4651      	mov	r1, sl
 8003ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eee:	4690      	mov	r8, r2
 8003ef0:	4699      	mov	r9, r3
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	eb18 0303 	adds.w	r3, r8, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	462b      	mov	r3, r5
 8003efc:	eb49 0303 	adc.w	r3, r9, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	024b      	lsls	r3, r1, #9
 8003f12:	4621      	mov	r1, r4
 8003f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f18:	4621      	mov	r1, r4
 8003f1a:	024a      	lsls	r2, r1, #9
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f22:	2200      	movs	r2, #0
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2c:	f7fc f9a8 	bl	8000280 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4613      	mov	r3, r2
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	e058      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	4611      	mov	r1, r2
 8003f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	0159      	lsls	r1, r3, #5
 8003f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f66:	0150      	lsls	r0, r2, #5
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f72:	4649      	mov	r1, r9
 8003f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f90:	eb63 050b 	sbc.w	r5, r3, fp
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	00eb      	lsls	r3, r5, #3
 8003f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa2:	00e2      	lsls	r2, r4, #3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	4643      	mov	r3, r8
 8003faa:	18e3      	adds	r3, r4, r3
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	464b      	mov	r3, r9
 8003fb0:	eb45 0303 	adc.w	r3, r5, r3
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	028b      	lsls	r3, r1, #10
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fcc:	4621      	mov	r1, r4
 8003fce:	028a      	lsls	r2, r1, #10
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	61fa      	str	r2, [r7, #28]
 8003fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe0:	f7fc f94e 	bl	8000280 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetSysClockFreq+0x204>)
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004010:	4618      	mov	r0, r3
 8004012:	3750      	adds	r7, #80	; 0x50
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004040:	b084      	sub	sp, #16
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d122      	bne.n	800409e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800406c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 fbee 	bl	8005874 <USB_CoreReset>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e01a      	b.n	80040d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 fbe2 	bl	8005874 <USB_CoreReset>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
 80040c6:	e005      	b.n	80040d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10b      	bne.n	80040f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f043 0206 	orr.w	r2, r3, #6
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040fe:	b004      	add	sp, #16
 8004100:	4770      	bx	lr
	...

08004104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d165      	bne.n	80041e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <USB_SetTurnaroundTime+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d906      	bls.n	800412e <USB_SetTurnaroundTime+0x2a>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d202      	bcs.n	800412e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004128:	230f      	movs	r3, #15
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e062      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <USB_SetTurnaroundTime+0x120>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d306      	bcc.n	8004144 <USB_SetTurnaroundTime+0x40>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d202      	bcs.n	8004144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800413e:	230e      	movs	r3, #14
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e057      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a38      	ldr	r2, [pc, #224]	; (8004228 <USB_SetTurnaroundTime+0x124>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d306      	bcc.n	800415a <USB_SetTurnaroundTime+0x56>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a37      	ldr	r2, [pc, #220]	; (800422c <USB_SetTurnaroundTime+0x128>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d202      	bcs.n	800415a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004154:	230d      	movs	r3, #13
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e04c      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <USB_SetTurnaroundTime+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d306      	bcc.n	8004170 <USB_SetTurnaroundTime+0x6c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a32      	ldr	r2, [pc, #200]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800416a:	230c      	movs	r3, #12
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e041      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <USB_SetTurnaroundTime+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d906      	bls.n	8004186 <USB_SetTurnaroundTime+0x82>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d802      	bhi.n	8004186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004180:	230b      	movs	r3, #11
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e036      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <USB_SetTurnaroundTime+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d906      	bls.n	800419c <USB_SetTurnaroundTime+0x98>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d802      	bhi.n	800419c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004196:	230a      	movs	r3, #10
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e02b      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <USB_SetTurnaroundTime+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d906      	bls.n	80041b2 <USB_SetTurnaroundTime+0xae>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a25      	ldr	r2, [pc, #148]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d202      	bcs.n	80041b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041ac:	2309      	movs	r3, #9
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e020      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <USB_SetTurnaroundTime+0x138>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d306      	bcc.n	80041c8 <USB_SetTurnaroundTime+0xc4>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d802      	bhi.n	80041c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041c2:	2308      	movs	r3, #8
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e015      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <USB_SetTurnaroundTime+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d906      	bls.n	80041de <USB_SetTurnaroundTime+0xda>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <USB_SetTurnaroundTime+0x140>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d202      	bcs.n	80041de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041d8:	2307      	movs	r3, #7
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041de:	2306      	movs	r3, #6
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e007      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041ea:	2309      	movs	r3, #9
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e001      	b.n	80041f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041f0:	2309      	movs	r3, #9
 80041f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00d8acbf 	.word	0x00d8acbf
 8004224:	00e4e1c0 	.word	0x00e4e1c0
 8004228:	00f42400 	.word	0x00f42400
 800422c:	01067380 	.word	0x01067380
 8004230:	011a499f 	.word	0x011a499f
 8004234:	01312cff 	.word	0x01312cff
 8004238:	014ca43f 	.word	0x014ca43f
 800423c:	016e3600 	.word	0x016e3600
 8004240:	01a6ab1f 	.word	0x01a6ab1f
 8004244:	01e84800 	.word	0x01e84800

08004248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d115      	bne.n	80042da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f7fc fe24 	bl	8000f08 <HAL_Delay>
      ms++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 fa45 	bl	8005756 <USB_GetMode>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d01e      	beq.n	8004310 <USB_SetCurrentMode+0x84>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b31      	cmp	r3, #49	; 0x31
 80042d6:	d9f0      	bls.n	80042ba <USB_SetCurrentMode+0x2e>
 80042d8:	e01a      	b.n	8004310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d115      	bne.n	800430c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fc fe0b 	bl	8000f08 <HAL_Delay>
      ms++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f001 fa2c 	bl	8005756 <USB_GetMode>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <USB_SetCurrentMode+0x84>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b31      	cmp	r3, #49	; 0x31
 8004308:	d9f0      	bls.n	80042ec <USB_SetCurrentMode+0x60>
 800430a:	e001      	b.n	8004310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e005      	b.n	800431c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b32      	cmp	r3, #50	; 0x32
 8004314:	d101      	bne.n	800431a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004324:	b084      	sub	sp, #16
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e009      	b.n	8004358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3340      	adds	r3, #64	; 0x40
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3301      	adds	r3, #1
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b0e      	cmp	r3, #14
 800435c:	d9f2      	bls.n	8004344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11c      	bne.n	800439e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
 800439c:	e00b      	b.n	80043b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	4619      	mov	r1, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	461a      	mov	r2, r3
 80043d2:	680b      	ldr	r3, [r1, #0]
 80043d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10c      	bne.n	80043f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043e2:	2100      	movs	r1, #0
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f965 	bl	80046b4 <USB_SetDevSpeed>
 80043ea:	e008      	b.n	80043fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043ec:	2101      	movs	r1, #1
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f960 	bl	80046b4 <USB_SetDevSpeed>
 80043f4:	e003      	b.n	80043fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043f6:	2103      	movs	r1, #3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f95b 	bl	80046b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043fe:	2110      	movs	r1, #16
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8f3 	bl	80045ec <USB_FlushTxFifo>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f91f 	bl	8004654 <USB_FlushRxFifo>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	461a      	mov	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e043      	b.n	80044d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004460:	d118      	bne.n	8004494 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e013      	b.n	80044a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e008      	b.n	80044a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2300      	movs	r3, #0
 80044a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	461a      	mov	r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3301      	adds	r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3b7      	bcc.n	800444a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e043      	b.n	8004568 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f6:	d118      	bne.n	800452a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	461a      	mov	r2, r3
 800450c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e013      	b.n	800453c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	461a      	mov	r2, r3
 8004522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e008      	b.n	800453c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	461a      	mov	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d3b7      	bcc.n	80044e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004582:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <USB_DevInit+0x2c4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f043 0208 	orr.w	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d0:	f043 0304 	orr.w	r3, r3, #4
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e4:	b004      	add	sp, #16
 80045e6:	4770      	bx	lr
 80045e8:	803c3800 	.word	0x803c3800

080045ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <USB_FlushTxFifo+0x64>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e01b      	b.n	8004644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	daf2      	bge.n	80045fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <USB_FlushTxFifo+0x64>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e006      	b.n	8004644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d0f0      	beq.n	8004624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	00030d40 	.word	0x00030d40

08004654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <USB_FlushRxFifo+0x5c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e018      	b.n	80046a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	daf2      	bge.n	8004660 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2210      	movs	r2, #16
 8004682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <USB_FlushRxFifo+0x5c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e006      	b.n	80046a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d0f0      	beq.n	8004684 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	00030d40 	.word	0x00030d40

080046b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
 800470a:	e00a      	b.n	8004722 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d002      	beq.n	8004718 <USB_GetDevSpeed+0x32>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d102      	bne.n	800471e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004718:	2302      	movs	r3, #2
 800471a:	75fb      	strb	r3, [r7, #23]
 800471c:	e001      	b.n	8004722 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800471e:	230f      	movs	r3, #15
 8004720:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d13a      	bne.n	80047c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	b29b      	uxth	r3, r3
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476a:	4313      	orrs	r3, r2
 800476c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d155      	bne.n	8004830 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a8:	4313      	orrs	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e036      	b.n	8004830 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	2101      	movs	r1, #1
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11a      	bne.n	8004830 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004816:	430b      	orrs	r3, r1
 8004818:	4313      	orrs	r3, r2
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d161      	bne.n	8004920 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004872:	d11f      	bne.n	80048b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004892:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	2101      	movs	r1, #1
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d4:	4013      	ands	r3, r2
 80048d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f8:	4013      	ands	r3, r2
 80048fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0159      	lsls	r1, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	440b      	add	r3, r1
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	4619      	mov	r1, r3
 8004918:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <USB_DeactivateEndpoint+0x1b0>)
 800491a:	4013      	ands	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
 800491e:	e060      	b.n	80049e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004936:	d11f      	bne.n	8004978 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004956:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004976:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	43db      	mvns	r3, r3
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004998:	4013      	ands	r3, r2
 800499a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	43db      	mvns	r3, r3
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049bc:	4013      	ands	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	4619      	mov	r1, r3
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <USB_DeactivateEndpoint+0x1b4>)
 80049de:	4013      	ands	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	ec337800 	.word	0xec337800
 80049f4:	eff37800 	.word	0xeff37800

080049f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 815c 	bne.w	8004cd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d132      	bne.n	8004a88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	0cdb      	lsrs	r3, r3, #19
 8004a82:	04db      	lsls	r3, r3, #19
 8004a84:	6113      	str	r3, [r2, #16]
 8004a86:	e074      	b.n	8004b72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	0cdb      	lsrs	r3, r3, #19
 8004aa4:	04db      	lsls	r3, r3, #19
 8004aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	440b      	add	r3, r1
 8004ae4:	1e59      	subs	r1, r3, #1
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004af0:	4b9d      	ldr	r3, [pc, #628]	; (8004d68 <USB_EPStartXfer+0x370>)
 8004af2:	400b      	ands	r3, r1
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	0148      	lsls	r0, r1, #5
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	4401      	add	r1, r0
 8004afc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1a:	69b9      	ldr	r1, [r7, #24]
 8004b1c:	0148      	lsls	r0, r1, #5
 8004b1e:	69f9      	ldr	r1, [r7, #28]
 8004b20:	4401      	add	r1, r0
 8004b22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d11f      	bne.n	8004b72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d14b      	bne.n	8004c10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d128      	bne.n	8004bee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d110      	bne.n	8004bce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	e00f      	b.n	8004bee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e133      	b.n	8004e78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d015      	beq.n	8004c64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 811b 	beq.w	8004e78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	69f9      	ldr	r1, [r7, #28]
 8004c5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	634b      	str	r3, [r1, #52]	; 0x34
 8004c62:	e109      	b.n	8004e78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d110      	bne.n	8004c96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e00f      	b.n	8004cb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6919      	ldr	r1, [r3, #16]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	b298      	uxth	r0, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	4603      	mov	r3, r0
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fade 	bl	800528c <USB_WritePacket>
 8004cd0:	e0d2      	b.n	8004e78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	0cdb      	lsrs	r3, r3, #19
 8004cee:	04db      	lsls	r3, r3, #19
 8004cf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d126      	bne.n	8004d6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	0148      	lsls	r0, r1, #5
 8004d38:	69f9      	ldr	r1, [r7, #28]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d40:	4313      	orrs	r3, r2
 8004d42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d62:	6113      	str	r3, [r2, #16]
 8004d64:	e03a      	b.n	8004ddc <USB_EPStartXfer+0x3e4>
 8004d66:	bf00      	nop
 8004d68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	8afa      	ldrh	r2, [r7, #22]
 8004d88:	fb03 f202 	mul.w	r2, r3, r2
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	8afb      	ldrh	r3, [r7, #22]
 8004da0:	04d9      	lsls	r1, r3, #19
 8004da2:	4b38      	ldr	r3, [pc, #224]	; (8004e84 <USB_EPStartXfer+0x48c>)
 8004da4:	400b      	ands	r3, r1
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	0148      	lsls	r0, r1, #5
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	4401      	add	r1, r0
 8004dae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	0148      	lsls	r0, r1, #5
 8004dd0:	69f9      	ldr	r1, [r7, #28]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10d      	bne.n	8004dfe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d128      	bne.n	8004e58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d110      	bne.n	8004e38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00f      	b.n	8004e58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	1ff80000 	.word	0x1ff80000

08004e88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	f040 80ce 	bne.w	8005046 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d132      	bne.n	8004f18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f10:	0cdb      	lsrs	r3, r3, #19
 8004f12:	04db      	lsls	r3, r3, #19
 8004f14:	6113      	str	r3, [r2, #16]
 8004f16:	e04e      	b.n	8004fb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	0cdb      	lsrs	r3, r3, #19
 8004f34:	04db      	lsls	r3, r3, #19
 8004f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d903      	bls.n	8004f70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa6:	6939      	ldr	r1, [r7, #16]
 8004fa8:	0148      	lsls	r0, r1, #5
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	4401      	add	r1, r0
 8004fae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d11e      	bne.n	8004ffa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	e097      	b.n	800512a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005018:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8083 	beq.w	800512a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4313      	orrs	r3, r2
 8005042:	634b      	str	r3, [r1, #52]	; 0x34
 8005044:	e071      	b.n	800512a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	0cdb      	lsrs	r3, r3, #19
 8005062:	04db      	lsls	r3, r3, #19
 8005064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005088:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d8:	6939      	ldr	r1, [r7, #16]
 80050da:	0148      	lsls	r0, r1, #5
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	4401      	add	r1, r0
 80050e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10d      	bne.n	800510a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6919      	ldr	r1, [r3, #16]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	460a      	mov	r2, r1
 8005108:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005128:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d14a      	bne.n	80051ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800516a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800516e:	f040 8086 	bne.w	800527e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	7812      	ldrb	r2, [r2, #0]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005194:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d902      	bls.n	80051d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
          break;
 80051ce:	e056      	b.n	800527e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e8:	d0e7      	beq.n	80051ba <USB_EPStopXfer+0x82>
 80051ea:	e048      	b.n	800527e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005204:	d13b      	bne.n	800527e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005228:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f242 7210 	movw	r2, #10000	; 0x2710
 800525a:	4293      	cmp	r3, r2
 800525c:	d902      	bls.n	8005264 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
          break;
 8005262:	e00c      	b.n	800527e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527c:	d0e7      	beq.n	800524e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	460b      	mov	r3, r1
 800529c:	71fb      	strb	r3, [r7, #7]
 800529e:	4613      	mov	r3, r2
 80052a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d123      	bne.n	80052fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052b2:	88bb      	ldrh	r3, [r7, #4]
 80052b4:	3303      	adds	r3, #3
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e018      	b.n	80052f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	031a      	lsls	r2, r3, #12
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052cc:	461a      	mov	r2, r3
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3301      	adds	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3e2      	bcc.n	80052c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3724      	adds	r7, #36	; 0x24
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005308:	b480      	push	{r7}
 800530a:	b08b      	sub	sp, #44	; 0x2c
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	b29b      	uxth	r3, r3
 8005324:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	e014      	b.n	800535e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	3301      	adds	r3, #1
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	3301      	adds	r3, #1
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	3301      	adds	r3, #1
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	3301      	adds	r3, #1
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	3301      	adds	r3, #1
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3e6      	bcc.n	8005334 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005366:	8bfb      	ldrh	r3, [r7, #30]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01e      	beq.n	80053aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	461a      	mov	r2, r3
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
 800538c:	b2da      	uxtb	r2, r3
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	701a      	strb	r2, [r3, #0]
      i++;
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	3301      	adds	r3, #1
 8005396:	623b      	str	r3, [r7, #32]
      pDest++;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053a4:	8bfb      	ldrh	r3, [r7, #30]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ea      	bne.n	8005380 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	372c      	adds	r7, #44	; 0x2c
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d12c      	bne.n	800542e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	db12      	blt.n	800540c <USB_EPSetStall+0x54>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00f      	beq.n	800540c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e02b      	b.n	8005486 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db12      	blt.n	8005466 <USB_EPSetStall+0xae>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00f      	beq.n	8005466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005464:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005484:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d128      	bne.n	8005502 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	791b      	ldrb	r3, [r3, #4]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d003      	beq.n	80054e0 <USB_EPClearStall+0x4c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	791b      	ldrb	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d138      	bne.n	8005552 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e027      	b.n	8005552 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	791b      	ldrb	r3, [r3, #4]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d003      	beq.n	8005532 <USB_EPClearStall+0x9e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	791b      	ldrb	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d10f      	bne.n	8005552 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005582:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f023 0302 	bic.w	r3, r3, #2
 80055de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005608:	f023 0303 	bic.w	r3, r3, #3
 800560c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	b29b      	uxth	r3, r3
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056ec:	68bb      	ldr	r3, [r7, #8]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	b2db      	uxtb	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005748:	68bb      	ldr	r3, [r7, #8]
}
 800574a:	4618      	mov	r0, r3
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	460b      	mov	r3, r1
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	333c      	adds	r3, #60	; 0x3c
 80057ce:	3304      	adds	r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4a26      	ldr	r2, [pc, #152]	; (8005870 <USB_EP0_OutStart+0xb8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d90a      	bls.n	80057f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ec:	d101      	bne.n	80057f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e037      	b.n	8005862 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	2300      	movs	r3, #0
 80057fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005820:	f043 0318 	orr.w	r3, r3, #24
 8005824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005838:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10f      	bne.n	8005860 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800585e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	4f54300a 	.word	0x4f54300a

08005874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3301      	adds	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <USB_CoreReset+0x64>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e01b      	b.n	80058ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	daf2      	bge.n	8005880 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <USB_CoreReset+0x64>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e006      	b.n	80058ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d0f0      	beq.n	80058aa <USB_CoreReset+0x36>

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	00030d40 	.word	0x00030d40

080058dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058ec:	f002 fcc4 	bl	8008278 <USBD_static_malloc>
 80058f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	32b0      	adds	r2, #176	; 0xb0
 8005902:	2100      	movs	r1, #0
 8005904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005908:	2302      	movs	r3, #2
 800590a:	e0d4      	b.n	8005ab6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800590c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f002 fd14 	bl	8008340 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	32b0      	adds	r2, #176	; 0xb0
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	32b0      	adds	r2, #176	; 0xb0
 8005932:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7c1b      	ldrb	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d138      	bne.n	80059b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005944:	4b5e      	ldr	r3, [pc, #376]	; (8005ac0 <USBD_CDC_Init+0x1e4>)
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594c:	2202      	movs	r2, #2
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 fb6f 	bl	8008032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005954:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <USBD_CDC_Init+0x1e4>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	2201      	movs	r2, #1
 800596c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800596e:	4b55      	ldr	r3, [pc, #340]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 8005970:	7819      	ldrb	r1, [r3, #0]
 8005972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005976:	2202      	movs	r2, #2
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f002 fb5a 	bl	8008032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800597e:	4b51      	ldr	r3, [pc, #324]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005996:	2201      	movs	r2, #1
 8005998:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800599a:	4b4b      	ldr	r3, [pc, #300]	; (8005ac8 <USBD_CDC_Init+0x1ec>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3326      	adds	r3, #38	; 0x26
 80059b0:	2210      	movs	r2, #16
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e035      	b.n	8005a22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059b6:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <USBD_CDC_Init+0x1e4>)
 80059b8:	7819      	ldrb	r1, [r3, #0]
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	2202      	movs	r2, #2
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f002 fb37 	bl	8008032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059c4:	4b3e      	ldr	r3, [pc, #248]	; (8005ac0 <USBD_CDC_Init+0x1e4>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3324      	adds	r3, #36	; 0x24
 80059da:	2201      	movs	r2, #1
 80059dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059de:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	2202      	movs	r2, #2
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 fb23 	bl	8008032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059ec:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a04:	2201      	movs	r2, #1
 8005a06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a08:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <USBD_CDC_Init+0x1ec>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3326      	adds	r3, #38	; 0x26
 8005a1e:	2210      	movs	r2, #16
 8005a20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <USBD_CDC_Init+0x1ec>)
 8005a24:	7819      	ldrb	r1, [r3, #0]
 8005a26:	2308      	movs	r3, #8
 8005a28:	2203      	movs	r2, #3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f002 fb01 	bl	8008032 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <USBD_CDC_Init+0x1ec>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3324      	adds	r3, #36	; 0x24
 8005a46:	2201      	movs	r2, #1
 8005a48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	33b0      	adds	r3, #176	; 0xb0
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a80:	2302      	movs	r3, #2
 8005a82:	e018      	b.n	8005ab6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7c1b      	ldrb	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 8005a8e:	7819      	ldrb	r1, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fbb8 	bl	8008210 <USBD_LL_PrepareReceive>
 8005aa0:	e008      	b.n	8005ab4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <USBD_CDC_Init+0x1e8>)
 8005aa4:	7819      	ldrb	r1, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aac:	2340      	movs	r3, #64	; 0x40
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f002 fbae 	bl	8008210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000093 	.word	0x20000093
 8005ac4:	20000094 	.word	0x20000094
 8005ac8:	20000095 	.word	0x20000095

08005acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ad8:	4b3a      	ldr	r3, [pc, #232]	; (8005bc4 <USBD_CDC_DeInit+0xf8>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 facd 	bl	800807e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ae4:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <USBD_CDC_DeInit+0xf8>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005afe:	4b32      	ldr	r3, [pc, #200]	; (8005bc8 <USBD_CDC_DeInit+0xfc>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f002 faba 	bl	800807e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <USBD_CDC_DeInit+0xfc>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b22:	2200      	movs	r2, #0
 8005b24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b26:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <USBD_CDC_DeInit+0x100>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 faa6 	bl	800807e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <USBD_CDC_DeInit+0x100>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	2200      	movs	r2, #0
 8005b4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <USBD_CDC_DeInit+0x100>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 020f 	and.w	r2, r3, #15
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3326      	adds	r3, #38	; 0x26
 8005b62:	2200      	movs	r2, #0
 8005b64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	32b0      	adds	r2, #176	; 0xb0
 8005b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01f      	beq.n	8005bb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	33b0      	adds	r3, #176	; 0xb0
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	32b0      	adds	r2, #176	; 0xb0
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f002 fb7a 	bl	8008294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32b0      	adds	r2, #176	; 0xb0
 8005baa:	2100      	movs	r1, #0
 8005bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000093 	.word	0x20000093
 8005bc8:	20000094 	.word	0x20000094
 8005bcc:	20000095 	.word	0x20000095

08005bd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	32b0      	adds	r2, #176	; 0xb0
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0bf      	b.n	8005d80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d050      	beq.n	8005cae <USBD_CDC_Setup+0xde>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	f040 80af 	bne.w	8005d70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	88db      	ldrh	r3, [r3, #6]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03a      	beq.n	8005c90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da1b      	bge.n	8005c5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	33b0      	adds	r3, #176	; 0xb0
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	88d2      	ldrh	r2, [r2, #6]
 8005c40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	88db      	ldrh	r3, [r3, #6]
 8005c46:	2b07      	cmp	r3, #7
 8005c48:	bf28      	it	cs
 8005c4a:	2307      	movcs	r3, #7
 8005c4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	89fa      	ldrh	r2, [r7, #14]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fd89 	bl	800776c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c5a:	e090      	b.n	8005d7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785a      	ldrb	r2, [r3, #1]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	88db      	ldrh	r3, [r3, #6]
 8005c6a:	2b3f      	cmp	r3, #63	; 0x3f
 8005c6c:	d803      	bhi.n	8005c76 <USBD_CDC_Setup+0xa6>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	88db      	ldrh	r3, [r3, #6]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	e000      	b.n	8005c78 <USBD_CDC_Setup+0xa8>
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c7e:	6939      	ldr	r1, [r7, #16]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c86:	461a      	mov	r2, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 fd9b 	bl	80077c4 <USBD_CtlPrepareRx>
      break;
 8005c8e:	e076      	b.n	8005d7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	33b0      	adds	r3, #176	; 0xb0
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	7850      	ldrb	r0, [r2, #1]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4798      	blx	r3
      break;
 8005cac:	e067      	b.n	8005d7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b0b      	cmp	r3, #11
 8005cb4:	d851      	bhi.n	8005d5a <USBD_CDC_Setup+0x18a>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <USBD_CDC_Setup+0xec>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ced 	.word	0x08005ced
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d5b 	.word	0x08005d5b
 8005cc8:	08005d5b 	.word	0x08005d5b
 8005ccc:	08005d5b 	.word	0x08005d5b
 8005cd0:	08005d5b 	.word	0x08005d5b
 8005cd4:	08005d5b 	.word	0x08005d5b
 8005cd8:	08005d5b 	.word	0x08005d5b
 8005cdc:	08005d5b 	.word	0x08005d5b
 8005ce0:	08005d5b 	.word	0x08005d5b
 8005ce4:	08005d17 	.word	0x08005d17
 8005ce8:	08005d41 	.word	0x08005d41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d107      	bne.n	8005d08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cf8:	f107 030a 	add.w	r3, r7, #10
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fd33 	bl	800776c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d06:	e032      	b.n	8005d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fcbd 	bl	800768a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	75fb      	strb	r3, [r7, #23]
          break;
 8005d14:	e02b      	b.n	8005d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d107      	bne.n	8005d32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d22:	f107 030d 	add.w	r3, r7, #13
 8005d26:	2201      	movs	r2, #1
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fd1e 	bl	800776c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d30:	e01d      	b.n	8005d6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 fca8 	bl	800768a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e016      	b.n	8005d6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d00f      	beq.n	8005d6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fc9b 	bl	800768a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d58:	e008      	b.n	8005d6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fc94 	bl	800768a <USBD_CtlError>
          ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
          break;
 8005d66:	e002      	b.n	8005d6e <USBD_CDC_Setup+0x19e>
          break;
 8005d68:	bf00      	nop
 8005d6a:	e008      	b.n	8005d7e <USBD_CDC_Setup+0x1ae>
          break;
 8005d6c:	bf00      	nop
      }
      break;
 8005d6e:	e006      	b.n	8005d7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fc89 	bl	800768a <USBD_CtlError>
      ret = USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32b0      	adds	r2, #176	; 0xb0
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e065      	b.n	8005e7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	32b0      	adds	r2, #176	; 0xb0
 8005dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 020f 	and.w	r2, r3, #15
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02f      	beq.n	8005e3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3318      	adds	r3, #24
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 010f 	and.w	r1, r3, #15
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	440b      	add	r3, r1
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4403      	add	r3, r0
 8005e04:	3348      	adds	r3, #72	; 0x48
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d112      	bne.n	8005e3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3318      	adds	r3, #24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e2e:	78f9      	ldrb	r1, [r7, #3]
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f002 f9ca 	bl	80081ce <USBD_LL_Transmit>
 8005e3a:	e01f      	b.n	8005e7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	33b0      	adds	r3, #176	; 0xb0
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d010      	beq.n	8005e7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	33b0      	adds	r3, #176	; 0xb0
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	32b0      	adds	r2, #176	; 0xb0
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	32b0      	adds	r2, #176	; 0xb0
 8005eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e01a      	b.n	8005eee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 f9c8 	bl	8008252 <USBD_LL_GetRxDataSize>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	33b0      	adds	r3, #176	; 0xb0
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32b0      	adds	r2, #176	; 0xb0
 8005f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e025      	b.n	8005f64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	33b0      	adds	r3, #176	; 0xb0
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01a      	beq.n	8005f62 <USBD_CDC_EP0_RxReady+0x6c>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f32:	2bff      	cmp	r3, #255	; 0xff
 8005f34:	d015      	beq.n	8005f62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	33b0      	adds	r3, #176	; 0xb0
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f56:	b292      	uxth	r2, r2
 8005f58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f74:	2182      	movs	r1, #130	; 0x82
 8005f76:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f78:	f000 fd4f 	bl	8006a1a <USBD_GetEpDesc>
 8005f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4815      	ldr	r0, [pc, #84]	; (8005fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f82:	f000 fd4a 	bl	8006a1a <USBD_GetEpDesc>
 8005f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f88:	2181      	movs	r1, #129	; 0x81
 8005f8a:	4813      	ldr	r0, [pc, #76]	; (8005fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f8c:	f000 fd45 	bl	8006a1a <USBD_GetEpDesc>
 8005f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fac:	711a      	strb	r2, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc0:	711a      	strb	r2, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2243      	movs	r2, #67	; 0x43
 8005fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000050 	.word	0x20000050

08005fdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fe4:	2182      	movs	r1, #130	; 0x82
 8005fe6:	4818      	ldr	r0, [pc, #96]	; (8006048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fe8:	f000 fd17 	bl	8006a1a <USBD_GetEpDesc>
 8005fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4815      	ldr	r0, [pc, #84]	; (8006048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ff2:	f000 fd12 	bl	8006a1a <USBD_GetEpDesc>
 8005ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ff8:	2181      	movs	r1, #129	; 0x81
 8005ffa:	4813      	ldr	r0, [pc, #76]	; (8006048 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ffc:	f000 fd0d 	bl	8006a1a <USBD_GetEpDesc>
 8006000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2210      	movs	r2, #16
 800600c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2200      	movs	r2, #0
 8006018:	711a      	strb	r2, [r3, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f042 0202 	orr.w	r2, r2, #2
 8006020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	711a      	strb	r2, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f042 0202 	orr.w	r2, r2, #2
 8006034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2243      	movs	r2, #67	; 0x43
 800603a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000050 	.word	0x20000050

0800604c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006054:	2182      	movs	r1, #130	; 0x82
 8006056:	4818      	ldr	r0, [pc, #96]	; (80060b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006058:	f000 fcdf 	bl	8006a1a <USBD_GetEpDesc>
 800605c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800605e:	2101      	movs	r1, #1
 8006060:	4815      	ldr	r0, [pc, #84]	; (80060b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006062:	f000 fcda 	bl	8006a1a <USBD_GetEpDesc>
 8006066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006068:	2181      	movs	r1, #129	; 0x81
 800606a:	4813      	ldr	r0, [pc, #76]	; (80060b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800606c:	f000 fcd5 	bl	8006a1a <USBD_GetEpDesc>
 8006070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2210      	movs	r2, #16
 800607c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2200      	movs	r2, #0
 8006088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608c:	711a      	strb	r2, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d006      	beq.n	80060a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a0:	711a      	strb	r2, [r3, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2243      	movs	r2, #67	; 0x43
 80060aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060ac:	4b02      	ldr	r3, [pc, #8]	; (80060b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000050 	.word	0x20000050

080060bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	220a      	movs	r2, #10
 80060c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060ca:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	2000000c 	.word	0x2000000c

080060dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e009      	b.n	8006104 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	33b0      	adds	r3, #176	; 0xb0
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	32b0      	adds	r2, #176	; 0xb0
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e008      	b.n	8006148 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32b0      	adds	r2, #176	; 0xb0
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	e004      	b.n	8006182 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32b0      	adds	r2, #176	; 0xb0
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32b0      	adds	r2, #176	; 0xb0
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061be:	2303      	movs	r3, #3
 80061c0:	e025      	b.n	800620e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11f      	bne.n	800620c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061d4:	4b10      	ldr	r3, [pc, #64]	; (8006218 <USBD_CDC_TransmitPacket+0x88>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4403      	add	r3, r0
 80061ee:	3318      	adds	r3, #24
 80061f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <USBD_CDC_TransmitPacket+0x88>)
 80061f4:	7819      	ldrb	r1, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 ffe3 	bl	80081ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000093 	.word	0x20000093

0800621c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	32b0      	adds	r2, #176	; 0xb0
 800622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006232:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32b0      	adds	r2, #176	; 0xb0
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006246:	2303      	movs	r3, #3
 8006248:	e018      	b.n	800627c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7c1b      	ldrb	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <USBD_CDC_ReceivePacket+0x68>)
 8006254:	7819      	ldrb	r1, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800625c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 ffd5 	bl	8008210 <USBD_LL_PrepareReceive>
 8006266:	e008      	b.n	800627a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <USBD_CDC_ReceivePacket+0x68>)
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 ffcb 	bl	8008210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000094 	.word	0x20000094

08006288 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e01f      	b.n	80062e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	79fa      	ldrb	r2, [r7, #7]
 80062d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f001 fe45 	bl	8007f64 <USBD_LL_Init>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e025      	b.n	800634c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32ae      	adds	r2, #174	; 0xae
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00f      	beq.n	800633c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	32ae      	adds	r2, #174	; 0xae
 8006326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	f107 020e 	add.w	r2, r7, #14
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fe4d 	bl	8007ffc <USBD_LL_Start>
 8006362:	4603      	mov	r3, r0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	4611      	mov	r1, r2
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063e0:	2303      	movs	r3, #3
 80063e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f001 f908 	bl	8007616 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2b02      	cmp	r3, #2
 8006428:	d01a      	beq.n	8006460 <USBD_LL_SetupStage+0x72>
 800642a:	2b02      	cmp	r3, #2
 800642c:	d822      	bhi.n	8006474 <USBD_LL_SetupStage+0x86>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <USBD_LL_SetupStage+0x4a>
 8006432:	2b01      	cmp	r3, #1
 8006434:	d00a      	beq.n	800644c <USBD_LL_SetupStage+0x5e>
 8006436:	e01d      	b.n	8006474 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb5f 	bl	8006b04 <USBD_StdDevReq>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	e020      	b.n	800648e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fbc7 	bl	8006be8 <USBD_StdItfReq>
 800645a:	4603      	mov	r3, r0
 800645c:	73fb      	strb	r3, [r7, #15]
      break;
 800645e:	e016      	b.n	800648e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc29 	bl	8006cc0 <USBD_StdEPReq>
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
      break;
 8006472:	e00c      	b.n	800648e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800647a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fe1a 	bl	80080bc <USBD_LL_StallEP>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	bf00      	nop
  }

  return ret;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	460b      	mov	r3, r1
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d16e      	bne.n	800658e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f040 8098 	bne.w	80065f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d913      	bls.n	80064f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4293      	cmp	r3, r2
 80064e8:	bf28      	it	cs
 80064ea:	4613      	movcs	r3, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f001 f984 	bl	80077fe <USBD_CtlContinueRx>
 80064f6:	e07d      	b.n	80065f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b02      	cmp	r3, #2
 8006504:	d014      	beq.n	8006530 <USBD_LL_DataOutStage+0x98>
 8006506:	2b02      	cmp	r3, #2
 8006508:	d81d      	bhi.n	8006546 <USBD_LL_DataOutStage+0xae>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <USBD_LL_DataOutStage+0x7c>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d003      	beq.n	800651a <USBD_LL_DataOutStage+0x82>
 8006512:	e018      	b.n	8006546 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	75bb      	strb	r3, [r7, #22]
            break;
 8006518:	e018      	b.n	800654c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006520:	b2db      	uxtb	r3, r3
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fa5e 	bl	80069e6 <USBD_CoreFindIF>
 800652a:	4603      	mov	r3, r0
 800652c:	75bb      	strb	r3, [r7, #22]
            break;
 800652e:	e00d      	b.n	800654c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fa60 	bl	8006a00 <USBD_CoreFindEP>
 8006540:	4603      	mov	r3, r0
 8006542:	75bb      	strb	r3, [r7, #22]
            break;
 8006544:	e002      	b.n	800654c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	75bb      	strb	r3, [r7, #22]
            break;
 800654a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800654c:	7dbb      	ldrb	r3, [r7, #22]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d119      	bne.n	8006586 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b03      	cmp	r3, #3
 800655c:	d113      	bne.n	8006586 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800655e:	7dba      	ldrb	r2, [r7, #22]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	32ae      	adds	r2, #174	; 0xae
 8006564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800656e:	7dba      	ldrb	r2, [r7, #22]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006576:	7dba      	ldrb	r2, [r7, #22]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	32ae      	adds	r2, #174	; 0xae
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f001 f94a 	bl	8007820 <USBD_CtlSendStatus>
 800658c:	e032      	b.n	80065f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006594:	b2db      	uxtb	r3, r3
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fa31 	bl	8006a00 <USBD_CoreFindEP>
 800659e:	4603      	mov	r3, r0
 80065a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065a2:	7dbb      	ldrb	r3, [r7, #22]
 80065a4:	2bff      	cmp	r3, #255	; 0xff
 80065a6:	d025      	beq.n	80065f4 <USBD_LL_DataOutStage+0x15c>
 80065a8:	7dbb      	ldrb	r3, [r7, #22]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d122      	bne.n	80065f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d117      	bne.n	80065ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065ba:	7dba      	ldrb	r2, [r7, #22]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	32ae      	adds	r2, #174	; 0xae
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065ca:	7dba      	ldrb	r2, [r7, #22]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065d2:	7dba      	ldrb	r2, [r7, #22]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	32ae      	adds	r2, #174	; 0xae
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	7afa      	ldrb	r2, [r7, #11]
 80065e0:	4611      	mov	r1, r2
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	4798      	blx	r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	e000      	b.n	80065f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	460b      	mov	r3, r1
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d16f      	bne.n	80066f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3314      	adds	r3, #20
 8006616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800661e:	2b02      	cmp	r3, #2
 8006620:	d15a      	bne.n	80066d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	429a      	cmp	r2, r3
 800662c:	d914      	bls.n	8006658 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	461a      	mov	r2, r3
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f001 f8ac 	bl	80077a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800664a:	2300      	movs	r3, #0
 800664c:	2200      	movs	r2, #0
 800664e:	2100      	movs	r1, #0
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f001 fddd 	bl	8008210 <USBD_LL_PrepareReceive>
 8006656:	e03f      	b.n	80066d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d11c      	bne.n	800669e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800666c:	429a      	cmp	r2, r3
 800666e:	d316      	bcc.n	800669e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800667a:	429a      	cmp	r2, r3
 800667c:	d20f      	bcs.n	800669e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f88d 	bl	80077a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006690:	2300      	movs	r3, #0
 8006692:	2200      	movs	r2, #0
 8006694:	2100      	movs	r1, #0
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 fdba 	bl	8008210 <USBD_LL_PrepareReceive>
 800669c:	e01c      	b.n	80066d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d10f      	bne.n	80066ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ca:	2180      	movs	r1, #128	; 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 fcf5 	bl	80080bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 f8b7 	bl	8007846 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03a      	beq.n	8006758 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fe42 	bl	800636c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066f0:	e032      	b.n	8006758 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4619      	mov	r1, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f97f 	bl	8006a00 <USBD_CoreFindEP>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2bff      	cmp	r3, #255	; 0xff
 800670a:	d025      	beq.n	8006758 <USBD_LL_DataInStage+0x15a>
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d122      	bne.n	8006758 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d11c      	bne.n	8006758 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800671e:	7dfa      	ldrb	r2, [r7, #23]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	32ae      	adds	r2, #174	; 0xae
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d014      	beq.n	8006758 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800672e:	7dfa      	ldrb	r2, [r7, #23]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006736:	7dfa      	ldrb	r2, [r7, #23]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	32ae      	adds	r2, #174	; 0xae
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	7afa      	ldrb	r2, [r7, #11]
 8006744:	4611      	mov	r1, r2
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	4798      	blx	r3
 800674a:	4603      	mov	r3, r0
 800674c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800674e:	7dbb      	ldrb	r3, [r7, #22]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006754:	7dbb      	ldrb	r3, [r7, #22]
 8006756:	e000      	b.n	800675a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d014      	beq.n	80067c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6852      	ldr	r2, [r2, #4]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	4611      	mov	r1, r2
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fc2f 	bl	8008032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fc21 	bl	8008032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	621a      	str	r2, [r3, #32]

  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006834:	b2da      	uxtb	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2204      	movs	r2, #4
 8006840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b04      	cmp	r3, #4
 8006864:	d106      	bne.n	8006874 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d110      	bne.n	80068b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32ae      	adds	r2, #174	; 0xae
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e01c      	b.n	800691e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d115      	bne.n	800691c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32ae      	adds	r2, #174	; 0xae
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32ae      	adds	r2, #174	; 0xae
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	4611      	mov	r1, r2
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	32ae      	adds	r2, #174	; 0xae
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	e01c      	b.n	8006982 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d115      	bne.n	8006980 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32ae      	adds	r2, #174	; 0xae
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32ae      	adds	r2, #174	; 0xae
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4611      	mov	r1, r2
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00e      	beq.n	80069dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6852      	ldr	r2, [r2, #4]
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	4611      	mov	r1, r2
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d920      	bls.n	8006a84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a4a:	e013      	b.n	8006a74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a4c:	f107 030a 	add.w	r3, r7, #10
 8006a50:	4619      	mov	r1, r3
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f000 f81b 	bl	8006a8e <USBD_GetNextDesc>
 8006a58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	d108      	bne.n	8006a74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	789b      	ldrb	r3, [r3, #2]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d008      	beq.n	8006a82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d8e5      	bhi.n	8006a4c <USBD_GetEpDesc+0x32>
 8006a80:	e000      	b.n	8006a84 <USBD_GetEpDesc+0x6a>
          break;
 8006a82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a84:	693b      	ldr	r3, [r7, #16]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	881a      	ldrh	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3301      	adds	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ae6:	8a3b      	ldrh	r3, [r7, #16]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b21a      	sxth	r2, r3
 8006aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006af6:	89fb      	ldrh	r3, [r7, #14]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d005      	beq.n	8006b2a <USBD_StdDevReq+0x26>
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d857      	bhi.n	8006bd2 <USBD_StdDevReq+0xce>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <USBD_StdDevReq+0x42>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d153      	bne.n	8006bd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	32ae      	adds	r2, #174	; 0xae
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e04a      	b.n	8006bdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b09      	cmp	r3, #9
 8006b4c:	d83b      	bhi.n	8006bc6 <USBD_StdDevReq+0xc2>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_StdDevReq+0x50>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006ba9 	.word	0x08006ba9
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006bc7 	.word	0x08006bc7
 8006b60:	08006bb3 	.word	0x08006bb3
 8006b64:	08006bc7 	.word	0x08006bc7
 8006b68:	08006b87 	.word	0x08006b87
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006bc7 	.word	0x08006bc7
 8006b74:	08006b9f 	.word	0x08006b9f
 8006b78:	08006b91 	.word	0x08006b91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa3c 	bl	8006ffc <USBD_GetDescriptor>
          break;
 8006b84:	e024      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fba1 	bl	80072d0 <USBD_SetAddress>
          break;
 8006b8e:	e01f      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fbe0 	bl	8007358 <USBD_SetConfig>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b9c:	e018      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc83 	bl	80074ac <USBD_GetConfig>
          break;
 8006ba6:	e013      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fcb4 	bl	8007518 <USBD_GetStatus>
          break;
 8006bb0:	e00e      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fce3 	bl	8007580 <USBD_SetFeature>
          break;
 8006bba:	e009      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fd07 	bl	80075d2 <USBD_ClrFeature>
          break;
 8006bc4:	e004      	b.n	8006bd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fd5e 	bl	800768a <USBD_CtlError>
          break;
 8006bce:	bf00      	nop
      }
      break;
 8006bd0:	e004      	b.n	8006bdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fd58 	bl	800768a <USBD_CtlError>
      break;
 8006bda:	bf00      	nop
  }

  return ret;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop

08006be8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d005      	beq.n	8006c0e <USBD_StdItfReq+0x26>
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d852      	bhi.n	8006cac <USBD_StdItfReq+0xc4>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <USBD_StdItfReq+0x26>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d14e      	bne.n	8006cac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d840      	bhi.n	8006c9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	889b      	ldrh	r3, [r3, #4]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d836      	bhi.n	8006c94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	889b      	ldrh	r3, [r3, #4]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fed9 	bl	80069e6 <USBD_CoreFindIF>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2bff      	cmp	r3, #255	; 0xff
 8006c3c:	d01d      	beq.n	8006c7a <USBD_StdItfReq+0x92>
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11a      	bne.n	8006c7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c44:	7bba      	ldrb	r2, [r7, #14]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32ae      	adds	r2, #174	; 0xae
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00f      	beq.n	8006c74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c54:	7bba      	ldrb	r2, [r7, #14]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c5c:	7bba      	ldrb	r2, [r7, #14]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	32ae      	adds	r2, #174	; 0xae
 8006c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c72:	e004      	b.n	8006c7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c78:	e001      	b.n	8006c7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d110      	bne.n	8006ca8 <USBD_StdItfReq+0xc0>
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10d      	bne.n	8006ca8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fdc7 	bl	8007820 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c92:	e009      	b.n	8006ca8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcf7 	bl	800768a <USBD_CtlError>
          break;
 8006c9c:	e004      	b.n	8006ca8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fcf2 	bl	800768a <USBD_CtlError>
          break;
 8006ca6:	e000      	b.n	8006caa <USBD_StdItfReq+0xc2>
          break;
 8006ca8:	bf00      	nop
      }
      break;
 8006caa:	e004      	b.n	8006cb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fceb 	bl	800768a <USBD_CtlError>
      break;
 8006cb4:	bf00      	nop
  }

  return ret;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	889b      	ldrh	r3, [r3, #4]
 8006cd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d007      	beq.n	8006cf0 <USBD_StdEPReq+0x30>
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	f200 817f 	bhi.w	8006fe4 <USBD_StdEPReq+0x324>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d02a      	beq.n	8006d40 <USBD_StdEPReq+0x80>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	f040 817a 	bne.w	8006fe4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fe83 	bl	8006a00 <USBD_CoreFindEP>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfe:	7b7b      	ldrb	r3, [r7, #13]
 8006d00:	2bff      	cmp	r3, #255	; 0xff
 8006d02:	f000 8174 	beq.w	8006fee <USBD_StdEPReq+0x32e>
 8006d06:	7b7b      	ldrb	r3, [r7, #13]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f040 8170 	bne.w	8006fee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d0e:	7b7a      	ldrb	r2, [r7, #13]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d16:	7b7a      	ldrb	r2, [r7, #13]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	32ae      	adds	r2, #174	; 0xae
 8006d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8163 	beq.w	8006fee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d28:	7b7a      	ldrb	r2, [r7, #13]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32ae      	adds	r2, #174	; 0xae
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d3e:	e156      	b.n	8006fee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d008      	beq.n	8006d5a <USBD_StdEPReq+0x9a>
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	f300 8145 	bgt.w	8006fd8 <USBD_StdEPReq+0x318>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 809b 	beq.w	8006e8a <USBD_StdEPReq+0x1ca>
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d03c      	beq.n	8006dd2 <USBD_StdEPReq+0x112>
 8006d58:	e13e      	b.n	8006fd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d002      	beq.n	8006d6c <USBD_StdEPReq+0xac>
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d016      	beq.n	8006d98 <USBD_StdEPReq+0xd8>
 8006d6a:	e02c      	b.n	8006dc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00d      	beq.n	8006d8e <USBD_StdEPReq+0xce>
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d00a      	beq.n	8006d8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f99d 	bl	80080bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f999 	bl	80080bc <USBD_LL_StallEP>
 8006d8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d8c:	e020      	b.n	8006dd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc7a 	bl	800768a <USBD_CtlError>
              break;
 8006d96:	e01b      	b.n	8006dd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10e      	bne.n	8006dbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <USBD_StdEPReq+0xfe>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b80      	cmp	r3, #128	; 0x80
 8006daa:	d008      	beq.n	8006dbe <USBD_StdEPReq+0xfe>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	88db      	ldrh	r3, [r3, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f97f 	bl	80080bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fd2e 	bl	8007820 <USBD_CtlSendStatus>

              break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc5e 	bl	800768a <USBD_CtlError>
              break;
 8006dce:	bf00      	nop
          }
          break;
 8006dd0:	e107      	b.n	8006fe2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d002      	beq.n	8006de4 <USBD_StdEPReq+0x124>
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d016      	beq.n	8006e10 <USBD_StdEPReq+0x150>
 8006de2:	e04b      	b.n	8006e7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <USBD_StdEPReq+0x146>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d00a      	beq.n	8006e06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f961 	bl	80080bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f95d 	bl	80080bc <USBD_LL_StallEP>
 8006e02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e04:	e040      	b.n	8006e88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc3e 	bl	800768a <USBD_CtlError>
              break;
 8006e0e:	e03b      	b.n	8006e88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d136      	bne.n	8006e86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 f967 	bl	80080fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fcf7 	bl	8007820 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fde2 	bl	8006a00 <USBD_CoreFindEP>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e40:	7b7b      	ldrb	r3, [r7, #13]
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d01f      	beq.n	8006e86 <USBD_StdEPReq+0x1c6>
 8006e46:	7b7b      	ldrb	r3, [r7, #13]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11c      	bne.n	8006e86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e4c:	7b7a      	ldrb	r2, [r7, #13]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e54:	7b7a      	ldrb	r2, [r7, #13]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32ae      	adds	r2, #174	; 0xae
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e64:	7b7a      	ldrb	r2, [r7, #13]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32ae      	adds	r2, #174	; 0xae
 8006e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e7a:	e004      	b.n	8006e86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fc03 	bl	800768a <USBD_CtlError>
              break;
 8006e84:	e000      	b.n	8006e88 <USBD_StdEPReq+0x1c8>
              break;
 8006e86:	bf00      	nop
          }
          break;
 8006e88:	e0ab      	b.n	8006fe2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d002      	beq.n	8006e9c <USBD_StdEPReq+0x1dc>
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d032      	beq.n	8006f00 <USBD_StdEPReq+0x240>
 8006e9a:	e097      	b.n	8006fcc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <USBD_StdEPReq+0x1f2>
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b80      	cmp	r3, #128	; 0x80
 8006ea6:	d004      	beq.n	8006eb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fbed 	bl	800768a <USBD_CtlError>
                break;
 8006eb0:	e091      	b.n	8006fd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da0b      	bge.n	8006ed2 <USBD_StdEPReq+0x212>
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	3310      	adds	r3, #16
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	3304      	adds	r3, #4
 8006ed0:	e00b      	b.n	8006eea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fc37 	bl	800776c <USBD_CtlSendData>
              break;
 8006efe:	e06a      	b.n	8006fd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da11      	bge.n	8006f2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	f003 020f 	and.w	r2, r3, #15
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	3324      	adds	r3, #36	; 0x24
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d117      	bne.n	8006f52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fbb0 	bl	800768a <USBD_CtlError>
                  break;
 8006f2a:	e054      	b.n	8006fd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	f003 020f 	and.w	r2, r3, #15
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fb9d 	bl	800768a <USBD_CtlError>
                  break;
 8006f50:	e041      	b.n	8006fd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da0b      	bge.n	8006f72 <USBD_StdEPReq+0x2b2>
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	3310      	adds	r3, #16
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3304      	adds	r3, #4
 8006f70:	e00b      	b.n	8006f8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <USBD_StdEPReq+0x2d8>
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d103      	bne.n	8006fa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e00e      	b.n	8006fbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 f8c7 	bl	8008138 <USBD_LL_IsStallEP>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fbd1 	bl	800776c <USBD_CtlSendData>
              break;
 8006fca:	e004      	b.n	8006fd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fb5b 	bl	800768a <USBD_CtlError>
              break;
 8006fd4:	bf00      	nop
          }
          break;
 8006fd6:	e004      	b.n	8006fe2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fb55 	bl	800768a <USBD_CtlError>
          break;
 8006fe0:	bf00      	nop
      }
      break;
 8006fe2:	e005      	b.n	8006ff0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb4f 	bl	800768a <USBD_CtlError>
      break;
 8006fec:	e000      	b.n	8006ff0 <USBD_StdEPReq+0x330>
      break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	2b06      	cmp	r3, #6
 800701e:	f200 8128 	bhi.w	8007272 <USBD_GetDescriptor+0x276>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBD_GetDescriptor+0x2c>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007045 	.word	0x08007045
 800702c:	0800705d 	.word	0x0800705d
 8007030:	0800709d 	.word	0x0800709d
 8007034:	08007273 	.word	0x08007273
 8007038:	08007273 	.word	0x08007273
 800703c:	08007213 	.word	0x08007213
 8007040:	0800723f 	.word	0x0800723f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	7c12      	ldrb	r2, [r2, #16]
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	60f8      	str	r0, [r7, #12]
      break;
 800705a:	e112      	b.n	8007282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7c1b      	ldrb	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f107 0208 	add.w	r2, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	2202      	movs	r2, #2
 800707c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800707e:	e100      	b.n	8007282 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	f107 0208 	add.w	r2, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
      break;
 800709a:	e0f2      	b.n	8007282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	f200 80ac 	bhi.w	8007200 <USBD_GetDescriptor+0x204>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBD_GetDescriptor+0xb4>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c9 	.word	0x080070c9
 80070b4:	080070fd 	.word	0x080070fd
 80070b8:	08007131 	.word	0x08007131
 80070bc:	08007165 	.word	0x08007165
 80070c0:	08007199 	.word	0x08007199
 80070c4:	080071cd 	.word	0x080071cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ea:	e091      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 facb 	bl	800768a <USBD_CtlError>
            err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
          break;
 80070fa:	e089      	b.n	8007210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e077      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fab1 	bl	800768a <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e06f      	b.n	8007210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e05d      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa97 	bl	800768a <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e055      	b.n	8007210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007186:	e043      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa7d 	bl	800768a <USBD_CtlError>
            err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
          break;
 8007196:	e03b      	b.n	8007210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e029      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa63 	bl	800768a <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e021      	b.n	8007210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ee:	e00f      	b.n	8007210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa49 	bl	800768a <USBD_CtlError>
            err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
          break;
 80071fe:	e007      	b.n	8007210 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa41 	bl	800768a <USBD_CtlError>
          err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800720e:	bf00      	nop
      }
      break;
 8007210:	e037      	b.n	8007282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7c1b      	ldrb	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f107 0208 	add.w	r2, r7, #8
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
 800722a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800722c:	e029      	b.n	8007282 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa2a 	bl	800768a <USBD_CtlError>
        err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	e021      	b.n	8007282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7c1b      	ldrb	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10d      	bne.n	8007262 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f107 0208 	add.w	r2, r7, #8
 8007252:	4610      	mov	r0, r2
 8007254:	4798      	blx	r3
 8007256:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	2207      	movs	r2, #7
 800725e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007260:	e00f      	b.n	8007282 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa10 	bl	800768a <USBD_CtlError>
        err++;
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	3301      	adds	r3, #1
 800726e:	72fb      	strb	r3, [r7, #11]
      break;
 8007270:	e007      	b.n	8007282 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa08 	bl	800768a <USBD_CtlError>
      err++;
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	3301      	adds	r3, #1
 800727e:	72fb      	strb	r3, [r7, #11]
      break;
 8007280:	bf00      	nop
  }

  if (err != 0U)
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11e      	bne.n	80072c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	88db      	ldrh	r3, [r3, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88da      	ldrh	r2, [r3, #6]
 800729a:	893b      	ldrh	r3, [r7, #8]
 800729c:	4293      	cmp	r3, r2
 800729e:	bf28      	it	cs
 80072a0:	4613      	movcs	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072a6:	893b      	ldrh	r3, [r7, #8]
 80072a8:	461a      	mov	r2, r3
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fa5d 	bl	800776c <USBD_CtlSendData>
 80072b2:	e009      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9e7 	bl	800768a <USBD_CtlError>
 80072bc:	e004      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 faae 	bl	8007820 <USBD_CtlSendStatus>
 80072c4:	e000      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
    return;
 80072c6:	bf00      	nop
  }
}
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d131      	bne.n	8007346 <USBD_SetAddress+0x76>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d12d      	bne.n	8007346 <USBD_SetAddress+0x76>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	885b      	ldrh	r3, [r3, #2]
 80072ee:	2b7f      	cmp	r3, #127	; 0x7f
 80072f0:	d829      	bhi.n	8007346 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b03      	cmp	r3, #3
 8007308:	d104      	bne.n	8007314 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f9bc 	bl	800768a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	e01d      	b.n	8007350 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7bfa      	ldrb	r2, [r7, #15]
 8007318:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 ff35 	bl	8008190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa7a 	bl	8007820 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733a:	e009      	b.n	8007350 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007344:	e004      	b.n	8007350 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f99e 	bl	800768a <USBD_CtlError>
  }
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	b2da      	uxtb	r2, r3
 800736c:	4b4e      	ldr	r3, [pc, #312]	; (80074a8 <USBD_SetConfig+0x150>)
 800736e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007370:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <USBD_SetConfig+0x150>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d905      	bls.n	8007384 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f985 	bl	800768a <USBD_CtlError>
    return USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e08c      	b.n	800749e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d002      	beq.n	8007396 <USBD_SetConfig+0x3e>
 8007390:	2b03      	cmp	r3, #3
 8007392:	d029      	beq.n	80073e8 <USBD_SetConfig+0x90>
 8007394:	e075      	b.n	8007482 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007396:	4b44      	ldr	r3, [pc, #272]	; (80074a8 <USBD_SetConfig+0x150>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d020      	beq.n	80073e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800739e:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <USBD_SetConfig+0x150>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073a8:	4b3f      	ldr	r3, [pc, #252]	; (80074a8 <USBD_SetConfig+0x150>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fe ffe7 	bl	8006382 <USBD_SetClassConfig>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f962 	bl	800768a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ce:	e065      	b.n	800749c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa25 	bl	8007820 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2203      	movs	r2, #3
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073de:	e05d      	b.n	800749c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa1d 	bl	8007820 <USBD_CtlSendStatus>
      break;
 80073e6:	e059      	b.n	800749c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073e8:	4b2f      	ldr	r3, [pc, #188]	; (80074a8 <USBD_SetConfig+0x150>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d112      	bne.n	8007416 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073f8:	4b2b      	ldr	r3, [pc, #172]	; (80074a8 <USBD_SetConfig+0x150>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <USBD_SetConfig+0x150>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fe ffd6 	bl	80063ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa06 	bl	8007820 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007414:	e042      	b.n	800749c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <USBD_SetConfig+0x150>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d02a      	beq.n	800747a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7fe ffc4 	bl	80063ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <USBD_SetConfig+0x150>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800743c:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <USBD_SetConfig+0x150>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe ff9d 	bl	8006382 <USBD_SetClassConfig>
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00f      	beq.n	8007472 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f918 	bl	800768a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fe ffa9 	bl	80063ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007470:	e014      	b.n	800749c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9d4 	bl	8007820 <USBD_CtlSendStatus>
      break;
 8007478:	e010      	b.n	800749c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9d0 	bl	8007820 <USBD_CtlSendStatus>
      break;
 8007480:	e00c      	b.n	800749c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f900 	bl	800768a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800748a:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <USBD_SetConfig+0x150>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7fe ff92 	bl	80063ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200001c4 	.word	0x200001c4

080074ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	88db      	ldrh	r3, [r3, #6]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d004      	beq.n	80074c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8e2 	bl	800768a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074c6:	e023      	b.n	8007510 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	dc02      	bgt.n	80074da <USBD_GetConfig+0x2e>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dc03      	bgt.n	80074e0 <USBD_GetConfig+0x34>
 80074d8:	e015      	b.n	8007506 <USBD_GetConfig+0x5a>
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d00b      	beq.n	80074f6 <USBD_GetConfig+0x4a>
 80074de:	e012      	b.n	8007506 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3308      	adds	r3, #8
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f93c 	bl	800776c <USBD_CtlSendData>
        break;
 80074f4:	e00c      	b.n	8007510 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2201      	movs	r2, #1
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f934 	bl	800776c <USBD_CtlSendData>
        break;
 8007504:	e004      	b.n	8007510 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f8be 	bl	800768a <USBD_CtlError>
        break;
 800750e:	bf00      	nop
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	b2db      	uxtb	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	2b02      	cmp	r3, #2
 800752e:	d81e      	bhi.n	800756e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	88db      	ldrh	r3, [r3, #6]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d004      	beq.n	8007542 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f8a5 	bl	800768a <USBD_CtlError>
        break;
 8007540:	e01a      	b.n	8007578 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f043 0202 	orr.w	r2, r3, #2
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	330c      	adds	r3, #12
 8007562:	2202      	movs	r2, #2
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f900 	bl	800776c <USBD_CtlSendData>
      break;
 800756c:	e004      	b.n	8007578 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f88a 	bl	800768a <USBD_CtlError>
      break;
 8007576:	bf00      	nop
  }
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f940 	bl	8007820 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075a0:	e013      	b.n	80075ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d10b      	bne.n	80075c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	889b      	ldrh	r3, [r3, #4]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f930 	bl	8007820 <USBD_CtlSendStatus>
}
 80075c0:	e003      	b.n	80075ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f860 	bl	800768a <USBD_CtlError>
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d80b      	bhi.n	8007602 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	885b      	ldrh	r3, [r3, #2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10c      	bne.n	800760c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f910 	bl	8007820 <USBD_CtlSendStatus>
      }
      break;
 8007600:	e004      	b.n	800760c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f840 	bl	800768a <USBD_CtlError>
      break;
 800760a:	e000      	b.n	800760e <USBD_ClrFeature+0x3c>
      break;
 800760c:	bf00      	nop
  }
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781a      	ldrb	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fa41 	bl	8006ac8 <SWAPBYTE>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fa34 	bl	8006ac8 <SWAPBYTE>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fa27 	bl	8006ac8 <SWAPBYTE>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	80da      	strh	r2, [r3, #6]
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fd10 	bl	80080bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800769c:	2100      	movs	r1, #0
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fd0c 	bl	80080bc <USBD_LL_StallEP>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d036      	beq.n	8007730 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076c6:	6938      	ldr	r0, [r7, #16]
 80076c8:	f000 f836 	bl	8007738 <USBD_GetLen>
 80076cc:	4603      	mov	r3, r0
 80076ce:	3301      	adds	r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4413      	add	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	3301      	adds	r3, #1
 80076ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	2203      	movs	r2, #3
 80076f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	3301      	adds	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076fc:	e013      	b.n	8007726 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	4413      	add	r3, r2
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3301      	adds	r3, #1
 800770e:	613b      	str	r3, [r7, #16]
    idx++;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	3301      	adds	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4413      	add	r3, r2
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	3301      	adds	r3, #1
 8007724:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e7      	bne.n	80076fe <USBD_GetString+0x52>
 800772e:	e000      	b.n	8007732 <USBD_GetString+0x86>
    return;
 8007730:	bf00      	nop
  }
}
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007748:	e005      	b.n	8007756 <USBD_GetLen+0x1e>
  {
    len++;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	3301      	adds	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3301      	adds	r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f5      	bne.n	800774a <USBD_GetLen+0x12>
  }

  return len;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2202      	movs	r2, #2
 800777c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	2100      	movs	r1, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fd1b 	bl	80081ce <USBD_LL_Transmit>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	2100      	movs	r1, #0
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fd0a 	bl	80081ce <USBD_LL_Transmit>

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2203      	movs	r2, #3
 80077d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	2100      	movs	r1, #0
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fd0e 	bl	8008210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	2100      	movs	r1, #0
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fcfd 	bl	8008210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2204      	movs	r2, #4
 800782c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007830:	2300      	movs	r3, #0
 8007832:	2200      	movs	r2, #0
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fcc9 	bl	80081ce <USBD_LL_Transmit>

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2205      	movs	r2, #5
 8007852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007856:	2300      	movs	r3, #0
 8007858:	2200      	movs	r2, #0
 800785a:	2100      	movs	r1, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fcd7 	bl	8008210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007870:	2200      	movs	r2, #0
 8007872:	4912      	ldr	r1, [pc, #72]	; (80078bc <MX_USB_DEVICE_Init+0x50>)
 8007874:	4812      	ldr	r0, [pc, #72]	; (80078c0 <MX_USB_DEVICE_Init+0x54>)
 8007876:	f7fe fd07 	bl	8006288 <USBD_Init>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007880:	f7f9 f91e 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007884:	490f      	ldr	r1, [pc, #60]	; (80078c4 <MX_USB_DEVICE_Init+0x58>)
 8007886:	480e      	ldr	r0, [pc, #56]	; (80078c0 <MX_USB_DEVICE_Init+0x54>)
 8007888:	f7fe fd2e 	bl	80062e8 <USBD_RegisterClass>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007892:	f7f9 f915 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007896:	490c      	ldr	r1, [pc, #48]	; (80078c8 <MX_USB_DEVICE_Init+0x5c>)
 8007898:	4809      	ldr	r0, [pc, #36]	; (80078c0 <MX_USB_DEVICE_Init+0x54>)
 800789a:	f7fe fc1f 	bl	80060dc <USBD_CDC_RegisterInterface>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078a4:	f7f9 f90c 	bl	8000ac0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078a8:	4805      	ldr	r0, [pc, #20]	; (80078c0 <MX_USB_DEVICE_Init+0x54>)
 80078aa:	f7fe fd53 	bl	8006354 <USBD_Start>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078b4:	f7f9 f904 	bl	8000ac0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078b8:	bf00      	nop
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200000ac 	.word	0x200000ac
 80078c0:	200001c8 	.word	0x200001c8
 80078c4:	20000018 	.word	0x20000018
 80078c8:	20000098 	.word	0x20000098

080078cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078d0:	2200      	movs	r2, #0
 80078d2:	4905      	ldr	r1, [pc, #20]	; (80078e8 <CDC_Init_FS+0x1c>)
 80078d4:	4805      	ldr	r0, [pc, #20]	; (80078ec <CDC_Init_FS+0x20>)
 80078d6:	f7fe fc1b 	bl	8006110 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078da:	4905      	ldr	r1, [pc, #20]	; (80078f0 <CDC_Init_FS+0x24>)
 80078dc:	4803      	ldr	r0, [pc, #12]	; (80078ec <CDC_Init_FS+0x20>)
 80078de:	f7fe fc39 	bl	8006154 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20000ca4 	.word	0x20000ca4
 80078ec:	200001c8 	.word	0x200001c8
 80078f0:	200004a4 	.word	0x200004a4

080078f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	71fb      	strb	r3, [r7, #7]
 8007910:	4613      	mov	r3, r2
 8007912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b23      	cmp	r3, #35	; 0x23
 8007918:	d84a      	bhi.n	80079b0 <CDC_Control_FS+0xac>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <CDC_Control_FS+0x1c>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	080079b1 	.word	0x080079b1
 8007924:	080079b1 	.word	0x080079b1
 8007928:	080079b1 	.word	0x080079b1
 800792c:	080079b1 	.word	0x080079b1
 8007930:	080079b1 	.word	0x080079b1
 8007934:	080079b1 	.word	0x080079b1
 8007938:	080079b1 	.word	0x080079b1
 800793c:	080079b1 	.word	0x080079b1
 8007940:	080079b1 	.word	0x080079b1
 8007944:	080079b1 	.word	0x080079b1
 8007948:	080079b1 	.word	0x080079b1
 800794c:	080079b1 	.word	0x080079b1
 8007950:	080079b1 	.word	0x080079b1
 8007954:	080079b1 	.word	0x080079b1
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079b1 	.word	0x080079b1
 8007960:	080079b1 	.word	0x080079b1
 8007964:	080079b1 	.word	0x080079b1
 8007968:	080079b1 	.word	0x080079b1
 800796c:	080079b1 	.word	0x080079b1
 8007970:	080079b1 	.word	0x080079b1
 8007974:	080079b1 	.word	0x080079b1
 8007978:	080079b1 	.word	0x080079b1
 800797c:	080079b1 	.word	0x080079b1
 8007980:	080079b1 	.word	0x080079b1
 8007984:	080079b1 	.word	0x080079b1
 8007988:	080079b1 	.word	0x080079b1
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b1 	.word	0x080079b1
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079b1 	.word	0x080079b1
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079b1 	.word	0x080079b1
 80079a8:	080079b1 	.word	0x080079b1
 80079ac:	080079b1 	.word	0x080079b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079b0:	bf00      	nop
  }

  return (USBD_OK);
 80079b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4813      	ldr	r0, [pc, #76]	; (8007a1c <CDC_Receive_FS+0x5c>)
 80079ce:	f7fe fbc1 	bl	8006154 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079d2:	4812      	ldr	r0, [pc, #72]	; (8007a1c <CDC_Receive_FS+0x5c>)
 80079d4:	f7fe fc22 	bl	800621c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f81f 	bl	8007a24 <CDC_Transmit_FS>
  if(Buf[0] == '1'){
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b31      	cmp	r3, #49	; 0x31
 80079ec:	d106      	bne.n	80079fc <CDC_Receive_FS+0x3c>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80079ee:	2201      	movs	r2, #1
 80079f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079f4:	480a      	ldr	r0, [pc, #40]	; (8007a20 <CDC_Receive_FS+0x60>)
 80079f6:	f7fa fc1d 	bl	8002234 <HAL_GPIO_WritePin>
 80079fa:	e009      	b.n	8007a10 <CDC_Receive_FS+0x50>
  }
  else if(Buf[0] == '0'){
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d105      	bne.n	8007a10 <CDC_Receive_FS+0x50>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007a04:	2200      	movs	r2, #0
 8007a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <CDC_Receive_FS+0x60>)
 8007a0c:	f7fa fc12 	bl	8002234 <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 8007a10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200001c8 	.word	0x200001c8
 8007a20:	40020c00 	.word	0x40020c00

08007a24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a34:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e00b      	b.n	8007a62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4806      	ldr	r0, [pc, #24]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a52:	f7fe fb5d 	bl	8006110 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <CDC_Transmit_FS+0x48>)
 8007a58:	f7fe fb9a 	bl	8006190 <USBD_CDC_TransmitPacket>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200001c8 	.word	0x200001c8

08007a70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2212      	movs	r2, #18
 8007aa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	200000c8 	.word	0x200000c8

08007ab8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aca:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200000dc 	.word	0x200000dc

08007adc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4907      	ldr	r1, [pc, #28]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af2:	4808      	ldr	r0, [pc, #32]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af4:	f7ff fdda 	bl	80076ac <USBD_GetString>
 8007af8:	e004      	b.n	8007b04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4904      	ldr	r1, [pc, #16]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007afe:	4805      	ldr	r0, [pc, #20]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b00:	f7ff fdd4 	bl	80076ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200014a4 	.word	0x200014a4
 8007b14:	08008d98 	.word	0x08008d98

08007b18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	4904      	ldr	r1, [pc, #16]	; (8007b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b28:	4804      	ldr	r0, [pc, #16]	; (8007b3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b2a:	f7ff fdbf 	bl	80076ac <USBD_GetString>
  return USBD_StrDesc;
 8007b2e:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200014a4 	.word	0x200014a4
 8007b3c:	08008db0 	.word	0x08008db0

08007b40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	221a      	movs	r2, #26
 8007b50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b52:	f000 f843 	bl	8007bdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b56:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	200000e0 	.word	0x200000e0

08007b64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4907      	ldr	r1, [pc, #28]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7a:	4808      	ldr	r0, [pc, #32]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b7c:	f7ff fd96 	bl	80076ac <USBD_GetString>
 8007b80:	e004      	b.n	8007b8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b86:	4805      	ldr	r0, [pc, #20]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b88:	f7ff fd90 	bl	80076ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200014a4 	.word	0x200014a4
 8007b9c:	08008dc4 	.word	0x08008dc4

08007ba0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4907      	ldr	r1, [pc, #28]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb6:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb8:	f7ff fd78 	bl	80076ac <USBD_GetString>
 8007bbc:	e004      	b.n	8007bc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc2:	4805      	ldr	r0, [pc, #20]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc4:	f7ff fd72 	bl	80076ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200014a4 	.word	0x200014a4
 8007bd8:	08008dd0 	.word	0x08008dd0

08007bdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <Get_SerialNum+0x44>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <Get_SerialNum+0x48>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <Get_SerialNum+0x4c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c02:	2208      	movs	r2, #8
 8007c04:	4909      	ldr	r1, [pc, #36]	; (8007c2c <Get_SerialNum+0x50>)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f814 	bl	8007c34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	4908      	ldr	r1, [pc, #32]	; (8007c30 <Get_SerialNum+0x54>)
 8007c10:	68b8      	ldr	r0, [r7, #8]
 8007c12:	f000 f80f 	bl	8007c34 <IntToUnicode>
  }
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	1fff7a10 	.word	0x1fff7a10
 8007c24:	1fff7a14 	.word	0x1fff7a14
 8007c28:	1fff7a18 	.word	0x1fff7a18
 8007c2c:	200000e2 	.word	0x200000e2
 8007c30:	200000f2 	.word	0x200000f2

08007c34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
 8007c4a:	e027      	b.n	8007c9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0f1b      	lsrs	r3, r3, #28
 8007c50:	2b09      	cmp	r3, #9
 8007c52:	d80b      	bhi.n	8007c6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	0f1b      	lsrs	r3, r3, #28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	440b      	add	r3, r1
 8007c64:	3230      	adds	r2, #48	; 0x30
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e00a      	b.n	8007c82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0f1b      	lsrs	r3, r3, #28
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3237      	adds	r2, #55	; 0x37
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4413      	add	r3, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
 8007c9c:	7dfa      	ldrb	r2, [r7, #23]
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d3d3      	bcc.n	8007c4c <IntToUnicode+0x18>
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cd4:	d14b      	bne.n	8007d6e <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	4b27      	ldr	r3, [pc, #156]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	4a26      	ldr	r2, [pc, #152]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d00:	2300      	movs	r3, #0
 8007d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d04:	230a      	movs	r3, #10
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	481b      	ldr	r0, [pc, #108]	; (8007d7c <HAL_PCD_MspInit+0xc8>)
 8007d10:	f7fa f8dc 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d22:	2300      	movs	r3, #0
 8007d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d26:	230a      	movs	r3, #10
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4812      	ldr	r0, [pc, #72]	; (8007d7c <HAL_PCD_MspInit+0xc8>)
 8007d32:	f7fa f8cb 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	4a0f      	ldr	r2, [pc, #60]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d40:	6353      	str	r3, [r2, #52]	; 0x34
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d50:	6453      	str	r3, [r2, #68]	; 0x44
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_PCD_MspInit+0xc4>)
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2100      	movs	r1, #0
 8007d62:	2043      	movs	r0, #67	; 0x43
 8007d64:	f7fa f87b 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d68:	2043      	movs	r0, #67	; 0x43
 8007d6a:	f7fa f894 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3728      	adds	r7, #40	; 0x28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	40020000 	.word	0x40020000

08007d80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fe fb29 	bl	80063ee <USBD_LL_SetupStage>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fb63 	bl	8006498 <USBD_LL_DataOutStage>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	334c      	adds	r3, #76	; 0x4c
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7fe fbfc 	bl	80065fe <USBD_LL_DataInStage>
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fd30 	bl	8006882 <USBD_LL_SOF>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
 8007e42:	e008      	b.n	8007e56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d102      	bne.n	8007e52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	e001      	b.n	8007e56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e52:	f7f8 fe35 	bl	8000ac0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e5c:	7bfa      	ldrb	r2, [r7, #15]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe fcd0 	bl	8006806 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fc78 	bl	8006762 <USBD_LL_Reset>
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fccb 	bl	8006826 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eb0:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <HAL_PCD_SuspendCallback+0x48>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4a03      	ldr	r2, [pc, #12]	; (8007ec4 <HAL_PCD_SuspendCallback+0x48>)
 8007eb6:	f043 0306 	orr.w	r3, r3, #6
 8007eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed00 	.word	0xe000ed00

08007ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fcbb 	bl	8006852 <USBD_LL_Resume>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fd13 	bl	8006926 <USBD_LL_IsoOUTIncomplete>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fccf 	bl	80068c2 <USBD_LL_IsoINIncomplete>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fd25 	bl	800698a <USBD_LL_DevConnected>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fd22 	bl	80069a0 <USBD_LL_DevDisconnected>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d13c      	bne.n	8007fee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f74:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f84:	4b1c      	ldr	r3, [pc, #112]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f8e:	2204      	movs	r2, #4
 8007f90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f92:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f94:	2202      	movs	r2, #2
 8007f96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f98:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f9e:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fa4:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fc2:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fc4:	f7fa f94f 	bl	8002266 <HAL_PCD_Init>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fce:	f7f8 fd77 	bl	8000ac0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fd2:	2180      	movs	r1, #128	; 0x80
 8007fd4:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fd6:	f7fb fba6 	bl	8003726 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fda:	2240      	movs	r2, #64	; 0x40
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4806      	ldr	r0, [pc, #24]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fe0:	f7fb fb5a 	bl	8003698 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4803      	ldr	r0, [pc, #12]	; (8007ff8 <USBD_LL_Init+0x94>)
 8007fea:	f7fb fb55 	bl	8003698 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	200016a4 	.word	0x200016a4

08007ffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008012:	4618      	mov	r0, r3
 8008014:	f7fa fa44 	bl	80024a0 <HAL_PCD_Start>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f942 	bl	80082a8 <USBD_Get_USB_Status>
 8008024:	4603      	mov	r3, r0
 8008026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008028:	7bbb      	ldrb	r3, [r7, #14]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	4608      	mov	r0, r1
 800803c:	4611      	mov	r1, r2
 800803e:	461a      	mov	r2, r3
 8008040:	4603      	mov	r3, r0
 8008042:	70fb      	strb	r3, [r7, #3]
 8008044:	460b      	mov	r3, r1
 8008046:	70bb      	strb	r3, [r7, #2]
 8008048:	4613      	mov	r3, r2
 800804a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800805a:	78bb      	ldrb	r3, [r7, #2]
 800805c:	883a      	ldrh	r2, [r7, #0]
 800805e:	78f9      	ldrb	r1, [r7, #3]
 8008060:	f7fa ff15 	bl	8002e8e <HAL_PCD_EP_Open>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f91c 	bl	80082a8 <USBD_Get_USB_Status>
 8008070:	4603      	mov	r3, r0
 8008072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008074:	7bbb      	ldrb	r3, [r7, #14]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	4611      	mov	r1, r2
 800809c:	4618      	mov	r0, r3
 800809e:	f7fa ff5e 	bl	8002f5e <HAL_PCD_EP_Close>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f8fd 	bl	80082a8 <USBD_Get_USB_Status>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fb f836 	bl	800314c <HAL_PCD_EP_SetStall>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f8de 	bl	80082a8 <USBD_Get_USB_Status>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fb f87b 	bl	8003214 <HAL_PCD_EP_ClrStall>
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f8bf 	bl	80082a8 <USBD_Get_USB_Status>
 800812a:	4603      	mov	r3, r0
 800812c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800814a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800814c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008150:	2b00      	cmp	r3, #0
 8008152:	da0b      	bge.n	800816c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	333e      	adds	r3, #62	; 0x3e
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	e00b      	b.n	8008184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800816c:	78fb      	ldrb	r3, [r7, #3]
 800816e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008172:	68f9      	ldr	r1, [r7, #12]
 8008174:	4613      	mov	r3, r2
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008182:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	4611      	mov	r1, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fa fe48 	bl	8002e44 <HAL_PCD_SetAddress>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f874 	bl	80082a8 <USBD_Get_USB_Status>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	460b      	mov	r3, r1
 80081dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081ec:	7af9      	ldrb	r1, [r7, #11]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	f7fa ff61 	bl	80030b8 <HAL_PCD_EP_Transmit>
 80081f6:	4603      	mov	r3, r0
 80081f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f853 	bl	80082a8 <USBD_Get_USB_Status>
 8008202:	4603      	mov	r3, r0
 8008204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008206:	7dbb      	ldrb	r3, [r7, #22]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	460b      	mov	r3, r1
 800821e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800822e:	7af9      	ldrb	r1, [r7, #11]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	f7fa fedd 	bl	8002ff2 <HAL_PCD_EP_Receive>
 8008238:	4603      	mov	r3, r0
 800823a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f832 	bl	80082a8 <USBD_Get_USB_Status>
 8008244:	4603      	mov	r3, r0
 8008246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008248:	7dbb      	ldrb	r3, [r7, #22]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f7fa ff0d 	bl	8003088 <HAL_PCD_EP_GetRxCount>
 800826e:	4603      	mov	r3, r0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <USBD_static_malloc+0x18>)
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20001bb0 	.word	0x20001bb0

08008294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]

}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d817      	bhi.n	80082ec <USBD_Get_USB_Status+0x44>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_Get_USB_Status+0x1c>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082db 	.word	0x080082db
 80082cc:	080082e1 	.word	0x080082e1
 80082d0:	080082e7 	.word	0x080082e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
    break;
 80082d8:	e00b      	b.n	80082f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082da:	2303      	movs	r3, #3
 80082dc:	73fb      	strb	r3, [r7, #15]
    break;
 80082de:	e008      	b.n	80082f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
    break;
 80082e4:	e005      	b.n	80082f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082e6:	2303      	movs	r3, #3
 80082e8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ea:	e002      	b.n	80082f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	73fb      	strb	r3, [r7, #15]
    break;
 80082f0:	bf00      	nop
  }
  return usb_status;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <siprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b500      	push	{lr}
 8008304:	b09c      	sub	sp, #112	; 0x70
 8008306:	ab1d      	add	r3, sp, #116	; 0x74
 8008308:	9002      	str	r0, [sp, #8]
 800830a:	9006      	str	r0, [sp, #24]
 800830c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008310:	4809      	ldr	r0, [pc, #36]	; (8008338 <siprintf+0x38>)
 8008312:	9107      	str	r1, [sp, #28]
 8008314:	9104      	str	r1, [sp, #16]
 8008316:	4909      	ldr	r1, [pc, #36]	; (800833c <siprintf+0x3c>)
 8008318:	f853 2b04 	ldr.w	r2, [r3], #4
 800831c:	9105      	str	r1, [sp, #20]
 800831e:	6800      	ldr	r0, [r0, #0]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	a902      	add	r1, sp, #8
 8008324:	f000 f992 	bl	800864c <_svfiprintf_r>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	b01c      	add	sp, #112	; 0x70
 8008330:	f85d eb04 	ldr.w	lr, [sp], #4
 8008334:	b003      	add	sp, #12
 8008336:	4770      	bx	lr
 8008338:	20000148 	.word	0x20000148
 800833c:	ffff0208 	.word	0xffff0208

08008340 <memset>:
 8008340:	4402      	add	r2, r0
 8008342:	4603      	mov	r3, r0
 8008344:	4293      	cmp	r3, r2
 8008346:	d100      	bne.n	800834a <memset+0xa>
 8008348:	4770      	bx	lr
 800834a:	f803 1b01 	strb.w	r1, [r3], #1
 800834e:	e7f9      	b.n	8008344 <memset+0x4>

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000148 	.word	0x20000148

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 fc6a 	bl	8008c48 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	08008e2c 	.word	0x08008e2c
 8008398:	08008e2c 	.word	0x08008e2c
 800839c:	08008e2c 	.word	0x08008e2c
 80083a0:	08008e30 	.word	0x08008e30

080083a4 <__retarget_lock_acquire_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <__retarget_lock_release_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <_free_r>:
 80083a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083aa:	2900      	cmp	r1, #0
 80083ac:	d044      	beq.n	8008438 <_free_r+0x90>
 80083ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b2:	9001      	str	r0, [sp, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f1a1 0404 	sub.w	r4, r1, #4
 80083ba:	bfb8      	it	lt
 80083bc:	18e4      	addlt	r4, r4, r3
 80083be:	f000 f8df 	bl	8008580 <__malloc_lock>
 80083c2:	4a1e      	ldr	r2, [pc, #120]	; (800843c <_free_r+0x94>)
 80083c4:	9801      	ldr	r0, [sp, #4]
 80083c6:	6813      	ldr	r3, [r2, #0]
 80083c8:	b933      	cbnz	r3, 80083d8 <_free_r+0x30>
 80083ca:	6063      	str	r3, [r4, #4]
 80083cc:	6014      	str	r4, [r2, #0]
 80083ce:	b003      	add	sp, #12
 80083d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083d4:	f000 b8da 	b.w	800858c <__malloc_unlock>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d908      	bls.n	80083ee <_free_r+0x46>
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	1961      	adds	r1, r4, r5
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf01      	itttt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	1949      	addeq	r1, r1, r5
 80083ea:	6021      	streq	r1, [r4, #0]
 80083ec:	e7ed      	b.n	80083ca <_free_r+0x22>
 80083ee:	461a      	mov	r2, r3
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b10b      	cbz	r3, 80083f8 <_free_r+0x50>
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d9fa      	bls.n	80083ee <_free_r+0x46>
 80083f8:	6811      	ldr	r1, [r2, #0]
 80083fa:	1855      	adds	r5, r2, r1
 80083fc:	42a5      	cmp	r5, r4
 80083fe:	d10b      	bne.n	8008418 <_free_r+0x70>
 8008400:	6824      	ldr	r4, [r4, #0]
 8008402:	4421      	add	r1, r4
 8008404:	1854      	adds	r4, r2, r1
 8008406:	42a3      	cmp	r3, r4
 8008408:	6011      	str	r1, [r2, #0]
 800840a:	d1e0      	bne.n	80083ce <_free_r+0x26>
 800840c:	681c      	ldr	r4, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	6053      	str	r3, [r2, #4]
 8008412:	440c      	add	r4, r1
 8008414:	6014      	str	r4, [r2, #0]
 8008416:	e7da      	b.n	80083ce <_free_r+0x26>
 8008418:	d902      	bls.n	8008420 <_free_r+0x78>
 800841a:	230c      	movs	r3, #12
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	e7d6      	b.n	80083ce <_free_r+0x26>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf04      	itt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	bf04      	itt	eq
 8008430:	1949      	addeq	r1, r1, r5
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	6054      	str	r4, [r2, #4]
 8008436:	e7ca      	b.n	80083ce <_free_r+0x26>
 8008438:	b003      	add	sp, #12
 800843a:	bd30      	pop	{r4, r5, pc}
 800843c:	20001f10 	.word	0x20001f10

08008440 <sbrk_aligned>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4e0e      	ldr	r6, [pc, #56]	; (800847c <sbrk_aligned+0x3c>)
 8008444:	460c      	mov	r4, r1
 8008446:	6831      	ldr	r1, [r6, #0]
 8008448:	4605      	mov	r5, r0
 800844a:	b911      	cbnz	r1, 8008452 <sbrk_aligned+0x12>
 800844c:	f000 fba6 	bl	8008b9c <_sbrk_r>
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 fba1 	bl	8008b9c <_sbrk_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <sbrk_aligned+0x34>
 800845e:	1cc4      	adds	r4, r0, #3
 8008460:	f024 0403 	bic.w	r4, r4, #3
 8008464:	42a0      	cmp	r0, r4
 8008466:	d007      	beq.n	8008478 <sbrk_aligned+0x38>
 8008468:	1a21      	subs	r1, r4, r0
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fb96 	bl	8008b9c <_sbrk_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d101      	bne.n	8008478 <sbrk_aligned+0x38>
 8008474:	f04f 34ff 	mov.w	r4, #4294967295
 8008478:	4620      	mov	r0, r4
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	20001f14 	.word	0x20001f14

08008480 <_malloc_r>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	1ccd      	adds	r5, r1, #3
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	2d00      	cmp	r5, #0
 8008494:	4607      	mov	r7, r0
 8008496:	db01      	blt.n	800849c <_malloc_r+0x1c>
 8008498:	42a9      	cmp	r1, r5
 800849a:	d905      	bls.n	80084a8 <_malloc_r+0x28>
 800849c:	230c      	movs	r3, #12
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	2600      	movs	r6, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800857c <_malloc_r+0xfc>
 80084ac:	f000 f868 	bl	8008580 <__malloc_lock>
 80084b0:	f8d8 3000 	ldr.w	r3, [r8]
 80084b4:	461c      	mov	r4, r3
 80084b6:	bb5c      	cbnz	r4, 8008510 <_malloc_r+0x90>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4638      	mov	r0, r7
 80084bc:	f7ff ffc0 	bl	8008440 <sbrk_aligned>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	4604      	mov	r4, r0
 80084c4:	d155      	bne.n	8008572 <_malloc_r+0xf2>
 80084c6:	f8d8 4000 	ldr.w	r4, [r8]
 80084ca:	4626      	mov	r6, r4
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	d145      	bne.n	800855c <_malloc_r+0xdc>
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	d048      	beq.n	8008566 <_malloc_r+0xe6>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	4631      	mov	r1, r6
 80084d8:	4638      	mov	r0, r7
 80084da:	eb04 0903 	add.w	r9, r4, r3
 80084de:	f000 fb5d 	bl	8008b9c <_sbrk_r>
 80084e2:	4581      	cmp	r9, r0
 80084e4:	d13f      	bne.n	8008566 <_malloc_r+0xe6>
 80084e6:	6821      	ldr	r1, [r4, #0]
 80084e8:	1a6d      	subs	r5, r5, r1
 80084ea:	4629      	mov	r1, r5
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7ff ffa7 	bl	8008440 <sbrk_aligned>
 80084f2:	3001      	adds	r0, #1
 80084f4:	d037      	beq.n	8008566 <_malloc_r+0xe6>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	442b      	add	r3, r5
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d038      	beq.n	8008576 <_malloc_r+0xf6>
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	42a2      	cmp	r2, r4
 8008508:	d12b      	bne.n	8008562 <_malloc_r+0xe2>
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
 800850e:	e00f      	b.n	8008530 <_malloc_r+0xb0>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	1b52      	subs	r2, r2, r5
 8008514:	d41f      	bmi.n	8008556 <_malloc_r+0xd6>
 8008516:	2a0b      	cmp	r2, #11
 8008518:	d917      	bls.n	800854a <_malloc_r+0xca>
 800851a:	1961      	adds	r1, r4, r5
 800851c:	42a3      	cmp	r3, r4
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	bf18      	it	ne
 8008522:	6059      	strne	r1, [r3, #4]
 8008524:	6863      	ldr	r3, [r4, #4]
 8008526:	bf08      	it	eq
 8008528:	f8c8 1000 	streq.w	r1, [r8]
 800852c:	5162      	str	r2, [r4, r5]
 800852e:	604b      	str	r3, [r1, #4]
 8008530:	4638      	mov	r0, r7
 8008532:	f104 060b 	add.w	r6, r4, #11
 8008536:	f000 f829 	bl	800858c <__malloc_unlock>
 800853a:	f026 0607 	bic.w	r6, r6, #7
 800853e:	1d23      	adds	r3, r4, #4
 8008540:	1af2      	subs	r2, r6, r3
 8008542:	d0ae      	beq.n	80084a2 <_malloc_r+0x22>
 8008544:	1b9b      	subs	r3, r3, r6
 8008546:	50a3      	str	r3, [r4, r2]
 8008548:	e7ab      	b.n	80084a2 <_malloc_r+0x22>
 800854a:	42a3      	cmp	r3, r4
 800854c:	6862      	ldr	r2, [r4, #4]
 800854e:	d1dd      	bne.n	800850c <_malloc_r+0x8c>
 8008550:	f8c8 2000 	str.w	r2, [r8]
 8008554:	e7ec      	b.n	8008530 <_malloc_r+0xb0>
 8008556:	4623      	mov	r3, r4
 8008558:	6864      	ldr	r4, [r4, #4]
 800855a:	e7ac      	b.n	80084b6 <_malloc_r+0x36>
 800855c:	4634      	mov	r4, r6
 800855e:	6876      	ldr	r6, [r6, #4]
 8008560:	e7b4      	b.n	80084cc <_malloc_r+0x4c>
 8008562:	4613      	mov	r3, r2
 8008564:	e7cc      	b.n	8008500 <_malloc_r+0x80>
 8008566:	230c      	movs	r3, #12
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4638      	mov	r0, r7
 800856c:	f000 f80e 	bl	800858c <__malloc_unlock>
 8008570:	e797      	b.n	80084a2 <_malloc_r+0x22>
 8008572:	6025      	str	r5, [r4, #0]
 8008574:	e7dc      	b.n	8008530 <_malloc_r+0xb0>
 8008576:	605b      	str	r3, [r3, #4]
 8008578:	deff      	udf	#255	; 0xff
 800857a:	bf00      	nop
 800857c:	20001f10 	.word	0x20001f10

08008580 <__malloc_lock>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__malloc_lock+0x8>)
 8008582:	f7ff bf0f 	b.w	80083a4 <__retarget_lock_acquire_recursive>
 8008586:	bf00      	nop
 8008588:	20001f0c 	.word	0x20001f0c

0800858c <__malloc_unlock>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__malloc_unlock+0x8>)
 800858e:	f7ff bf0a 	b.w	80083a6 <__retarget_lock_release_recursive>
 8008592:	bf00      	nop
 8008594:	20001f0c 	.word	0x20001f0c

08008598 <__ssputs_r>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	688e      	ldr	r6, [r1, #8]
 800859e:	461f      	mov	r7, r3
 80085a0:	42be      	cmp	r6, r7
 80085a2:	680b      	ldr	r3, [r1, #0]
 80085a4:	4682      	mov	sl, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4690      	mov	r8, r2
 80085aa:	d82c      	bhi.n	8008606 <__ssputs_r+0x6e>
 80085ac:	898a      	ldrh	r2, [r1, #12]
 80085ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085b2:	d026      	beq.n	8008602 <__ssputs_r+0x6a>
 80085b4:	6965      	ldr	r5, [r4, #20]
 80085b6:	6909      	ldr	r1, [r1, #16]
 80085b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085bc:	eba3 0901 	sub.w	r9, r3, r1
 80085c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085c4:	1c7b      	adds	r3, r7, #1
 80085c6:	444b      	add	r3, r9
 80085c8:	106d      	asrs	r5, r5, #1
 80085ca:	429d      	cmp	r5, r3
 80085cc:	bf38      	it	cc
 80085ce:	461d      	movcc	r5, r3
 80085d0:	0553      	lsls	r3, r2, #21
 80085d2:	d527      	bpl.n	8008624 <__ssputs_r+0x8c>
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7ff ff53 	bl	8008480 <_malloc_r>
 80085da:	4606      	mov	r6, r0
 80085dc:	b360      	cbz	r0, 8008638 <__ssputs_r+0xa0>
 80085de:	6921      	ldr	r1, [r4, #16]
 80085e0:	464a      	mov	r2, r9
 80085e2:	f000 faeb 	bl	8008bbc <memcpy>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	6126      	str	r6, [r4, #16]
 80085f4:	6165      	str	r5, [r4, #20]
 80085f6:	444e      	add	r6, r9
 80085f8:	eba5 0509 	sub.w	r5, r5, r9
 80085fc:	6026      	str	r6, [r4, #0]
 80085fe:	60a5      	str	r5, [r4, #8]
 8008600:	463e      	mov	r6, r7
 8008602:	42be      	cmp	r6, r7
 8008604:	d900      	bls.n	8008608 <__ssputs_r+0x70>
 8008606:	463e      	mov	r6, r7
 8008608:	6820      	ldr	r0, [r4, #0]
 800860a:	4632      	mov	r2, r6
 800860c:	4641      	mov	r1, r8
 800860e:	f000 faab 	bl	8008b68 <memmove>
 8008612:	68a3      	ldr	r3, [r4, #8]
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	60a3      	str	r3, [r4, #8]
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	4433      	add	r3, r6
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	2000      	movs	r0, #0
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	462a      	mov	r2, r5
 8008626:	f000 fad7 	bl	8008bd8 <_realloc_r>
 800862a:	4606      	mov	r6, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d1e0      	bne.n	80085f2 <__ssputs_r+0x5a>
 8008630:	6921      	ldr	r1, [r4, #16]
 8008632:	4650      	mov	r0, sl
 8008634:	f7ff feb8 	bl	80083a8 <_free_r>
 8008638:	230c      	movs	r3, #12
 800863a:	f8ca 3000 	str.w	r3, [sl]
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	e7e9      	b.n	8008620 <__ssputs_r+0x88>

0800864c <_svfiprintf_r>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	4698      	mov	r8, r3
 8008652:	898b      	ldrh	r3, [r1, #12]
 8008654:	061b      	lsls	r3, r3, #24
 8008656:	b09d      	sub	sp, #116	; 0x74
 8008658:	4607      	mov	r7, r0
 800865a:	460d      	mov	r5, r1
 800865c:	4614      	mov	r4, r2
 800865e:	d50e      	bpl.n	800867e <_svfiprintf_r+0x32>
 8008660:	690b      	ldr	r3, [r1, #16]
 8008662:	b963      	cbnz	r3, 800867e <_svfiprintf_r+0x32>
 8008664:	2140      	movs	r1, #64	; 0x40
 8008666:	f7ff ff0b 	bl	8008480 <_malloc_r>
 800866a:	6028      	str	r0, [r5, #0]
 800866c:	6128      	str	r0, [r5, #16]
 800866e:	b920      	cbnz	r0, 800867a <_svfiprintf_r+0x2e>
 8008670:	230c      	movs	r3, #12
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e0d0      	b.n	800881c <_svfiprintf_r+0x1d0>
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	616b      	str	r3, [r5, #20]
 800867e:	2300      	movs	r3, #0
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	2320      	movs	r3, #32
 8008684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008688:	f8cd 800c 	str.w	r8, [sp, #12]
 800868c:	2330      	movs	r3, #48	; 0x30
 800868e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008834 <_svfiprintf_r+0x1e8>
 8008692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008696:	f04f 0901 	mov.w	r9, #1
 800869a:	4623      	mov	r3, r4
 800869c:	469a      	mov	sl, r3
 800869e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086a2:	b10a      	cbz	r2, 80086a8 <_svfiprintf_r+0x5c>
 80086a4:	2a25      	cmp	r2, #37	; 0x25
 80086a6:	d1f9      	bne.n	800869c <_svfiprintf_r+0x50>
 80086a8:	ebba 0b04 	subs.w	fp, sl, r4
 80086ac:	d00b      	beq.n	80086c6 <_svfiprintf_r+0x7a>
 80086ae:	465b      	mov	r3, fp
 80086b0:	4622      	mov	r2, r4
 80086b2:	4629      	mov	r1, r5
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff ff6f 	bl	8008598 <__ssputs_r>
 80086ba:	3001      	adds	r0, #1
 80086bc:	f000 80a9 	beq.w	8008812 <_svfiprintf_r+0x1c6>
 80086c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c2:	445a      	add	r2, fp
 80086c4:	9209      	str	r2, [sp, #36]	; 0x24
 80086c6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80a1 	beq.w	8008812 <_svfiprintf_r+0x1c6>
 80086d0:	2300      	movs	r3, #0
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086da:	f10a 0a01 	add.w	sl, sl, #1
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086e6:	931a      	str	r3, [sp, #104]	; 0x68
 80086e8:	4654      	mov	r4, sl
 80086ea:	2205      	movs	r2, #5
 80086ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f0:	4850      	ldr	r0, [pc, #320]	; (8008834 <_svfiprintf_r+0x1e8>)
 80086f2:	f7f7 fd75 	bl	80001e0 <memchr>
 80086f6:	9a04      	ldr	r2, [sp, #16]
 80086f8:	b9d8      	cbnz	r0, 8008732 <_svfiprintf_r+0xe6>
 80086fa:	06d0      	lsls	r0, r2, #27
 80086fc:	bf44      	itt	mi
 80086fe:	2320      	movmi	r3, #32
 8008700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008704:	0711      	lsls	r1, r2, #28
 8008706:	bf44      	itt	mi
 8008708:	232b      	movmi	r3, #43	; 0x2b
 800870a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800870e:	f89a 3000 	ldrb.w	r3, [sl]
 8008712:	2b2a      	cmp	r3, #42	; 0x2a
 8008714:	d015      	beq.n	8008742 <_svfiprintf_r+0xf6>
 8008716:	9a07      	ldr	r2, [sp, #28]
 8008718:	4654      	mov	r4, sl
 800871a:	2000      	movs	r0, #0
 800871c:	f04f 0c0a 	mov.w	ip, #10
 8008720:	4621      	mov	r1, r4
 8008722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008726:	3b30      	subs	r3, #48	; 0x30
 8008728:	2b09      	cmp	r3, #9
 800872a:	d94d      	bls.n	80087c8 <_svfiprintf_r+0x17c>
 800872c:	b1b0      	cbz	r0, 800875c <_svfiprintf_r+0x110>
 800872e:	9207      	str	r2, [sp, #28]
 8008730:	e014      	b.n	800875c <_svfiprintf_r+0x110>
 8008732:	eba0 0308 	sub.w	r3, r0, r8
 8008736:	fa09 f303 	lsl.w	r3, r9, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	46a2      	mov	sl, r4
 8008740:	e7d2      	b.n	80086e8 <_svfiprintf_r+0x9c>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	1d19      	adds	r1, r3, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	9103      	str	r1, [sp, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	bfbb      	ittet	lt
 800874e:	425b      	neglt	r3, r3
 8008750:	f042 0202 	orrlt.w	r2, r2, #2
 8008754:	9307      	strge	r3, [sp, #28]
 8008756:	9307      	strlt	r3, [sp, #28]
 8008758:	bfb8      	it	lt
 800875a:	9204      	strlt	r2, [sp, #16]
 800875c:	7823      	ldrb	r3, [r4, #0]
 800875e:	2b2e      	cmp	r3, #46	; 0x2e
 8008760:	d10c      	bne.n	800877c <_svfiprintf_r+0x130>
 8008762:	7863      	ldrb	r3, [r4, #1]
 8008764:	2b2a      	cmp	r3, #42	; 0x2a
 8008766:	d134      	bne.n	80087d2 <_svfiprintf_r+0x186>
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	9203      	str	r2, [sp, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfb8      	it	lt
 8008774:	f04f 33ff 	movlt.w	r3, #4294967295
 8008778:	3402      	adds	r4, #2
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008844 <_svfiprintf_r+0x1f8>
 8008780:	7821      	ldrb	r1, [r4, #0]
 8008782:	2203      	movs	r2, #3
 8008784:	4650      	mov	r0, sl
 8008786:	f7f7 fd2b 	bl	80001e0 <memchr>
 800878a:	b138      	cbz	r0, 800879c <_svfiprintf_r+0x150>
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	eba0 000a 	sub.w	r0, r0, sl
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	4082      	lsls	r2, r0
 8008796:	4313      	orrs	r3, r2
 8008798:	3401      	adds	r4, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a0:	4825      	ldr	r0, [pc, #148]	; (8008838 <_svfiprintf_r+0x1ec>)
 80087a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087a6:	2206      	movs	r2, #6
 80087a8:	f7f7 fd1a 	bl	80001e0 <memchr>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d038      	beq.n	8008822 <_svfiprintf_r+0x1d6>
 80087b0:	4b22      	ldr	r3, [pc, #136]	; (800883c <_svfiprintf_r+0x1f0>)
 80087b2:	bb1b      	cbnz	r3, 80087fc <_svfiprintf_r+0x1b0>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	3307      	adds	r3, #7
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	3308      	adds	r3, #8
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c2:	4433      	add	r3, r6
 80087c4:	9309      	str	r3, [sp, #36]	; 0x24
 80087c6:	e768      	b.n	800869a <_svfiprintf_r+0x4e>
 80087c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087cc:	460c      	mov	r4, r1
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7a6      	b.n	8008720 <_svfiprintf_r+0xd4>
 80087d2:	2300      	movs	r3, #0
 80087d4:	3401      	adds	r4, #1
 80087d6:	9305      	str	r3, [sp, #20]
 80087d8:	4619      	mov	r1, r3
 80087da:	f04f 0c0a 	mov.w	ip, #10
 80087de:	4620      	mov	r0, r4
 80087e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e4:	3a30      	subs	r2, #48	; 0x30
 80087e6:	2a09      	cmp	r2, #9
 80087e8:	d903      	bls.n	80087f2 <_svfiprintf_r+0x1a6>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0c6      	beq.n	800877c <_svfiprintf_r+0x130>
 80087ee:	9105      	str	r1, [sp, #20]
 80087f0:	e7c4      	b.n	800877c <_svfiprintf_r+0x130>
 80087f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f6:	4604      	mov	r4, r0
 80087f8:	2301      	movs	r3, #1
 80087fa:	e7f0      	b.n	80087de <_svfiprintf_r+0x192>
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	462a      	mov	r2, r5
 8008802:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <_svfiprintf_r+0x1f4>)
 8008804:	a904      	add	r1, sp, #16
 8008806:	4638      	mov	r0, r7
 8008808:	f3af 8000 	nop.w
 800880c:	1c42      	adds	r2, r0, #1
 800880e:	4606      	mov	r6, r0
 8008810:	d1d6      	bne.n	80087c0 <_svfiprintf_r+0x174>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	065b      	lsls	r3, r3, #25
 8008816:	f53f af2d 	bmi.w	8008674 <_svfiprintf_r+0x28>
 800881a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881c:	b01d      	add	sp, #116	; 0x74
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	ab03      	add	r3, sp, #12
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	462a      	mov	r2, r5
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <_svfiprintf_r+0x1f4>)
 800882a:	a904      	add	r1, sp, #16
 800882c:	4638      	mov	r0, r7
 800882e:	f000 f879 	bl	8008924 <_printf_i>
 8008832:	e7eb      	b.n	800880c <_svfiprintf_r+0x1c0>
 8008834:	08008df0 	.word	0x08008df0
 8008838:	08008dfa 	.word	0x08008dfa
 800883c:	00000000 	.word	0x00000000
 8008840:	08008599 	.word	0x08008599
 8008844:	08008df6 	.word	0x08008df6

08008848 <_printf_common>:
 8008848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	4616      	mov	r6, r2
 800884e:	4699      	mov	r9, r3
 8008850:	688a      	ldr	r2, [r1, #8]
 8008852:	690b      	ldr	r3, [r1, #16]
 8008854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008858:	4293      	cmp	r3, r2
 800885a:	bfb8      	it	lt
 800885c:	4613      	movlt	r3, r2
 800885e:	6033      	str	r3, [r6, #0]
 8008860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008864:	4607      	mov	r7, r0
 8008866:	460c      	mov	r4, r1
 8008868:	b10a      	cbz	r2, 800886e <_printf_common+0x26>
 800886a:	3301      	adds	r3, #1
 800886c:	6033      	str	r3, [r6, #0]
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	0699      	lsls	r1, r3, #26
 8008872:	bf42      	ittt	mi
 8008874:	6833      	ldrmi	r3, [r6, #0]
 8008876:	3302      	addmi	r3, #2
 8008878:	6033      	strmi	r3, [r6, #0]
 800887a:	6825      	ldr	r5, [r4, #0]
 800887c:	f015 0506 	ands.w	r5, r5, #6
 8008880:	d106      	bne.n	8008890 <_printf_common+0x48>
 8008882:	f104 0a19 	add.w	sl, r4, #25
 8008886:	68e3      	ldr	r3, [r4, #12]
 8008888:	6832      	ldr	r2, [r6, #0]
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	42ab      	cmp	r3, r5
 800888e:	dc26      	bgt.n	80088de <_printf_common+0x96>
 8008890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008894:	1e13      	subs	r3, r2, #0
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	bf18      	it	ne
 800889a:	2301      	movne	r3, #1
 800889c:	0692      	lsls	r2, r2, #26
 800889e:	d42b      	bmi.n	80088f8 <_printf_common+0xb0>
 80088a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088a4:	4649      	mov	r1, r9
 80088a6:	4638      	mov	r0, r7
 80088a8:	47c0      	blx	r8
 80088aa:	3001      	adds	r0, #1
 80088ac:	d01e      	beq.n	80088ec <_printf_common+0xa4>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	6922      	ldr	r2, [r4, #16]
 80088b2:	f003 0306 	and.w	r3, r3, #6
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	bf02      	ittt	eq
 80088ba:	68e5      	ldreq	r5, [r4, #12]
 80088bc:	6833      	ldreq	r3, [r6, #0]
 80088be:	1aed      	subeq	r5, r5, r3
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	bf0c      	ite	eq
 80088c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c8:	2500      	movne	r5, #0
 80088ca:	4293      	cmp	r3, r2
 80088cc:	bfc4      	itt	gt
 80088ce:	1a9b      	subgt	r3, r3, r2
 80088d0:	18ed      	addgt	r5, r5, r3
 80088d2:	2600      	movs	r6, #0
 80088d4:	341a      	adds	r4, #26
 80088d6:	42b5      	cmp	r5, r6
 80088d8:	d11a      	bne.n	8008910 <_printf_common+0xc8>
 80088da:	2000      	movs	r0, #0
 80088dc:	e008      	b.n	80088f0 <_printf_common+0xa8>
 80088de:	2301      	movs	r3, #1
 80088e0:	4652      	mov	r2, sl
 80088e2:	4649      	mov	r1, r9
 80088e4:	4638      	mov	r0, r7
 80088e6:	47c0      	blx	r8
 80088e8:	3001      	adds	r0, #1
 80088ea:	d103      	bne.n	80088f4 <_printf_common+0xac>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f4:	3501      	adds	r5, #1
 80088f6:	e7c6      	b.n	8008886 <_printf_common+0x3e>
 80088f8:	18e1      	adds	r1, r4, r3
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	2030      	movs	r0, #48	; 0x30
 80088fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008902:	4422      	add	r2, r4
 8008904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800890c:	3302      	adds	r3, #2
 800890e:	e7c7      	b.n	80088a0 <_printf_common+0x58>
 8008910:	2301      	movs	r3, #1
 8008912:	4622      	mov	r2, r4
 8008914:	4649      	mov	r1, r9
 8008916:	4638      	mov	r0, r7
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d0e6      	beq.n	80088ec <_printf_common+0xa4>
 800891e:	3601      	adds	r6, #1
 8008920:	e7d9      	b.n	80088d6 <_printf_common+0x8e>
	...

08008924 <_printf_i>:
 8008924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	7e0f      	ldrb	r7, [r1, #24]
 800892a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800892c:	2f78      	cmp	r7, #120	; 0x78
 800892e:	4691      	mov	r9, r2
 8008930:	4680      	mov	r8, r0
 8008932:	460c      	mov	r4, r1
 8008934:	469a      	mov	sl, r3
 8008936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800893a:	d807      	bhi.n	800894c <_printf_i+0x28>
 800893c:	2f62      	cmp	r7, #98	; 0x62
 800893e:	d80a      	bhi.n	8008956 <_printf_i+0x32>
 8008940:	2f00      	cmp	r7, #0
 8008942:	f000 80d4 	beq.w	8008aee <_printf_i+0x1ca>
 8008946:	2f58      	cmp	r7, #88	; 0x58
 8008948:	f000 80c0 	beq.w	8008acc <_printf_i+0x1a8>
 800894c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008954:	e03a      	b.n	80089cc <_printf_i+0xa8>
 8008956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800895a:	2b15      	cmp	r3, #21
 800895c:	d8f6      	bhi.n	800894c <_printf_i+0x28>
 800895e:	a101      	add	r1, pc, #4	; (adr r1, 8008964 <_printf_i+0x40>)
 8008960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008964:	080089bd 	.word	0x080089bd
 8008968:	080089d1 	.word	0x080089d1
 800896c:	0800894d 	.word	0x0800894d
 8008970:	0800894d 	.word	0x0800894d
 8008974:	0800894d 	.word	0x0800894d
 8008978:	0800894d 	.word	0x0800894d
 800897c:	080089d1 	.word	0x080089d1
 8008980:	0800894d 	.word	0x0800894d
 8008984:	0800894d 	.word	0x0800894d
 8008988:	0800894d 	.word	0x0800894d
 800898c:	0800894d 	.word	0x0800894d
 8008990:	08008ad5 	.word	0x08008ad5
 8008994:	080089fd 	.word	0x080089fd
 8008998:	08008a8f 	.word	0x08008a8f
 800899c:	0800894d 	.word	0x0800894d
 80089a0:	0800894d 	.word	0x0800894d
 80089a4:	08008af7 	.word	0x08008af7
 80089a8:	0800894d 	.word	0x0800894d
 80089ac:	080089fd 	.word	0x080089fd
 80089b0:	0800894d 	.word	0x0800894d
 80089b4:	0800894d 	.word	0x0800894d
 80089b8:	08008a97 	.word	0x08008a97
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	1d1a      	adds	r2, r3, #4
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	602a      	str	r2, [r5, #0]
 80089c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089cc:	2301      	movs	r3, #1
 80089ce:	e09f      	b.n	8008b10 <_printf_i+0x1ec>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	682b      	ldr	r3, [r5, #0]
 80089d4:	0607      	lsls	r7, r0, #24
 80089d6:	f103 0104 	add.w	r1, r3, #4
 80089da:	6029      	str	r1, [r5, #0]
 80089dc:	d501      	bpl.n	80089e2 <_printf_i+0xbe>
 80089de:	681e      	ldr	r6, [r3, #0]
 80089e0:	e003      	b.n	80089ea <_printf_i+0xc6>
 80089e2:	0646      	lsls	r6, r0, #25
 80089e4:	d5fb      	bpl.n	80089de <_printf_i+0xba>
 80089e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	da03      	bge.n	80089f6 <_printf_i+0xd2>
 80089ee:	232d      	movs	r3, #45	; 0x2d
 80089f0:	4276      	negs	r6, r6
 80089f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f6:	485a      	ldr	r0, [pc, #360]	; (8008b60 <_printf_i+0x23c>)
 80089f8:	230a      	movs	r3, #10
 80089fa:	e012      	b.n	8008a22 <_printf_i+0xfe>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1d19      	adds	r1, r3, #4
 8008a02:	6029      	str	r1, [r5, #0]
 8008a04:	0605      	lsls	r5, r0, #24
 8008a06:	d501      	bpl.n	8008a0c <_printf_i+0xe8>
 8008a08:	681e      	ldr	r6, [r3, #0]
 8008a0a:	e002      	b.n	8008a12 <_printf_i+0xee>
 8008a0c:	0641      	lsls	r1, r0, #25
 8008a0e:	d5fb      	bpl.n	8008a08 <_printf_i+0xe4>
 8008a10:	881e      	ldrh	r6, [r3, #0]
 8008a12:	4853      	ldr	r0, [pc, #332]	; (8008b60 <_printf_i+0x23c>)
 8008a14:	2f6f      	cmp	r7, #111	; 0x6f
 8008a16:	bf0c      	ite	eq
 8008a18:	2308      	moveq	r3, #8
 8008a1a:	230a      	movne	r3, #10
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a22:	6865      	ldr	r5, [r4, #4]
 8008a24:	60a5      	str	r5, [r4, #8]
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	bfa2      	ittt	ge
 8008a2a:	6821      	ldrge	r1, [r4, #0]
 8008a2c:	f021 0104 	bicge.w	r1, r1, #4
 8008a30:	6021      	strge	r1, [r4, #0]
 8008a32:	b90e      	cbnz	r6, 8008a38 <_printf_i+0x114>
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	d04b      	beq.n	8008ad0 <_printf_i+0x1ac>
 8008a38:	4615      	mov	r5, r2
 8008a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a42:	5dc7      	ldrb	r7, [r0, r7]
 8008a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a48:	4637      	mov	r7, r6
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	460e      	mov	r6, r1
 8008a4e:	d9f4      	bls.n	8008a3a <_printf_i+0x116>
 8008a50:	2b08      	cmp	r3, #8
 8008a52:	d10b      	bne.n	8008a6c <_printf_i+0x148>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	07de      	lsls	r6, r3, #31
 8008a58:	d508      	bpl.n	8008a6c <_printf_i+0x148>
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6861      	ldr	r1, [r4, #4]
 8008a5e:	4299      	cmp	r1, r3
 8008a60:	bfde      	ittt	le
 8008a62:	2330      	movle	r3, #48	; 0x30
 8008a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a6c:	1b52      	subs	r2, r2, r5
 8008a6e:	6122      	str	r2, [r4, #16]
 8008a70:	f8cd a000 	str.w	sl, [sp]
 8008a74:	464b      	mov	r3, r9
 8008a76:	aa03      	add	r2, sp, #12
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	f7ff fee4 	bl	8008848 <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d14a      	bne.n	8008b1a <_printf_i+0x1f6>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b004      	add	sp, #16
 8008a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f043 0320 	orr.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	4833      	ldr	r0, [pc, #204]	; (8008b64 <_printf_i+0x240>)
 8008a98:	2778      	movs	r7, #120	; 0x78
 8008a9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	6829      	ldr	r1, [r5, #0]
 8008aa2:	061f      	lsls	r7, r3, #24
 8008aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aa8:	d402      	bmi.n	8008ab0 <_printf_i+0x18c>
 8008aaa:	065f      	lsls	r7, r3, #25
 8008aac:	bf48      	it	mi
 8008aae:	b2b6      	uxthmi	r6, r6
 8008ab0:	07df      	lsls	r7, r3, #31
 8008ab2:	bf48      	it	mi
 8008ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ab8:	6029      	str	r1, [r5, #0]
 8008aba:	bf48      	it	mi
 8008abc:	6023      	strmi	r3, [r4, #0]
 8008abe:	b91e      	cbnz	r6, 8008ac8 <_printf_i+0x1a4>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	f023 0320 	bic.w	r3, r3, #32
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	2310      	movs	r3, #16
 8008aca:	e7a7      	b.n	8008a1c <_printf_i+0xf8>
 8008acc:	4824      	ldr	r0, [pc, #144]	; (8008b60 <_printf_i+0x23c>)
 8008ace:	e7e4      	b.n	8008a9a <_printf_i+0x176>
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	e7bd      	b.n	8008a50 <_printf_i+0x12c>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	6826      	ldr	r6, [r4, #0]
 8008ad8:	6961      	ldr	r1, [r4, #20]
 8008ada:	1d18      	adds	r0, r3, #4
 8008adc:	6028      	str	r0, [r5, #0]
 8008ade:	0635      	lsls	r5, r6, #24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0x1c4>
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <_printf_i+0x1ca>
 8008ae8:	0670      	lsls	r0, r6, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0x1c0>
 8008aec:	8019      	strh	r1, [r3, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	4615      	mov	r5, r2
 8008af4:	e7bc      	b.n	8008a70 <_printf_i+0x14c>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7f7 fb6c 	bl	80001e0 <memchr>
 8008b08:	b108      	cbz	r0, 8008b0e <_printf_i+0x1ea>
 8008b0a:	1b40      	subs	r0, r0, r5
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	2300      	movs	r3, #0
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	e7aa      	b.n	8008a70 <_printf_i+0x14c>
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	47d0      	blx	sl
 8008b24:	3001      	adds	r0, #1
 8008b26:	d0ad      	beq.n	8008a84 <_printf_i+0x160>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	079b      	lsls	r3, r3, #30
 8008b2c:	d413      	bmi.n	8008b56 <_printf_i+0x232>
 8008b2e:	68e0      	ldr	r0, [r4, #12]
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	4298      	cmp	r0, r3
 8008b34:	bfb8      	it	lt
 8008b36:	4618      	movlt	r0, r3
 8008b38:	e7a6      	b.n	8008a88 <_printf_i+0x164>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4640      	mov	r0, r8
 8008b42:	47d0      	blx	sl
 8008b44:	3001      	adds	r0, #1
 8008b46:	d09d      	beq.n	8008a84 <_printf_i+0x160>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dcf2      	bgt.n	8008b3a <_printf_i+0x216>
 8008b54:	e7eb      	b.n	8008b2e <_printf_i+0x20a>
 8008b56:	2500      	movs	r5, #0
 8008b58:	f104 0619 	add.w	r6, r4, #25
 8008b5c:	e7f5      	b.n	8008b4a <_printf_i+0x226>
 8008b5e:	bf00      	nop
 8008b60:	08008e01 	.word	0x08008e01
 8008b64:	08008e12 	.word	0x08008e12

08008b68 <memmove>:
 8008b68:	4288      	cmp	r0, r1
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	eb01 0402 	add.w	r4, r1, r2
 8008b70:	d902      	bls.n	8008b78 <memmove+0x10>
 8008b72:	4284      	cmp	r4, r0
 8008b74:	4623      	mov	r3, r4
 8008b76:	d807      	bhi.n	8008b88 <memmove+0x20>
 8008b78:	1e43      	subs	r3, r0, #1
 8008b7a:	42a1      	cmp	r1, r4
 8008b7c:	d008      	beq.n	8008b90 <memmove+0x28>
 8008b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b86:	e7f8      	b.n	8008b7a <memmove+0x12>
 8008b88:	4402      	add	r2, r0
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	428a      	cmp	r2, r1
 8008b8e:	d100      	bne.n	8008b92 <memmove+0x2a>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b9a:	e7f7      	b.n	8008b8c <memmove+0x24>

08008b9c <_sbrk_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d06      	ldr	r5, [pc, #24]	; (8008bb8 <_sbrk_r+0x1c>)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	f7f8 f8ca 	bl	8000d40 <_sbrk>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_sbrk_r+0x1a>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_sbrk_r+0x1a>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20001f08 	.word	0x20001f08

08008bbc <memcpy>:
 8008bbc:	440a      	add	r2, r1
 8008bbe:	4291      	cmp	r1, r2
 8008bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc4:	d100      	bne.n	8008bc8 <memcpy+0xc>
 8008bc6:	4770      	bx	lr
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd2:	4291      	cmp	r1, r2
 8008bd4:	d1f9      	bne.n	8008bca <memcpy+0xe>
 8008bd6:	bd10      	pop	{r4, pc}

08008bd8 <_realloc_r>:
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4614      	mov	r4, r2
 8008be0:	460e      	mov	r6, r1
 8008be2:	b921      	cbnz	r1, 8008bee <_realloc_r+0x16>
 8008be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	4611      	mov	r1, r2
 8008bea:	f7ff bc49 	b.w	8008480 <_malloc_r>
 8008bee:	b92a      	cbnz	r2, 8008bfc <_realloc_r+0x24>
 8008bf0:	f7ff fbda 	bl	80083a8 <_free_r>
 8008bf4:	4625      	mov	r5, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	f000 f81b 	bl	8008c36 <_malloc_usable_size_r>
 8008c00:	4284      	cmp	r4, r0
 8008c02:	4607      	mov	r7, r0
 8008c04:	d802      	bhi.n	8008c0c <_realloc_r+0x34>
 8008c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c0a:	d812      	bhi.n	8008c32 <_realloc_r+0x5a>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7ff fc36 	bl	8008480 <_malloc_r>
 8008c14:	4605      	mov	r5, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d0ed      	beq.n	8008bf6 <_realloc_r+0x1e>
 8008c1a:	42bc      	cmp	r4, r7
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4631      	mov	r1, r6
 8008c20:	bf28      	it	cs
 8008c22:	463a      	movcs	r2, r7
 8008c24:	f7ff ffca 	bl	8008bbc <memcpy>
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff fbbc 	bl	80083a8 <_free_r>
 8008c30:	e7e1      	b.n	8008bf6 <_realloc_r+0x1e>
 8008c32:	4635      	mov	r5, r6
 8008c34:	e7df      	b.n	8008bf6 <_realloc_r+0x1e>

08008c36 <_malloc_usable_size_r>:
 8008c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3a:	1f18      	subs	r0, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfbc      	itt	lt
 8008c40:	580b      	ldrlt	r3, [r1, r0]
 8008c42:	18c0      	addlt	r0, r0, r3
 8008c44:	4770      	bx	lr
	...

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
